Sleep 1m start
GPR[SSLI]-1659907139867
GPR[ESLI]-1659907199870
Running SimFix Math 98b
Timezone: America/Los_Angeles
Seed 262
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/98/seed_262/
Project lc: math
New out script/workingdir/SimFix/math/math_98_buggy
The file script/workingdir/SimFix/math/math_98_buggy does not exist!
script/workingdir/SimFix/math/math_98_buggy
Current directory: script/workingdir/SimFix/math/math_98_buggy
classpath:  script/workingdir/SimFix/math/math_98_buggy/target/test-classes:script/workingdir/SimFix/math/math_98_buggy/target/classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/test-classes
GPR[SSLB]-1659907213064
GPR[ESLB]-1659907273067
Calling SimFix: at script/workingdir/SimFix/math/math_98_buggy
build.properties.sample
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
maven.xml
NOTICE.txt
pom.xml
project.properties
project.xml
PROPOSAL.html
release-notes.jsl
RELEASE-NOTES.txt
src
target
test-jar.xml
testOnly.sh
content current dir: build.properties.sample build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt maven.xml NOTICE.txt pom.xml project.properties project.xml PROPOSAL.html release-notes.jsl RELEASE-NOTES.txt src target test-jar.xml testOnly.sh
Node: host-71
Date init: Sun 07 Aug 2022 02:21:15 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659907275391
=================================================
Project : math_98	start : 22/08/07 14:21

TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_4
TESTING : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_1
TESTING : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_2
TESTING : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_3
TESTING : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_4
GPR[ESUP]-1659907292134
GPR[SFL]-1659907292475
GPR[EFL]-1659907292478
GPR[SFP]-1659907292478
TIMEOUT : 2220000
GPR[SSUN]-1659907292488
org.apache.commons.math.linear.BigMatrixImpl,986
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907293502
GPR[SPVAP]-1659907293502
GPR[EPVAP]-1659907295135
GPR[EPVS]-1659907295135
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}

========
GPR[SPVS]-1659907295137
GPR[SPVAP]-1659907295137
GPR[EPVAP]-1659907298614
GPR[SPVATF]-1659907298614
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907300286
GPR[EPVS]-1659907300286
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907300288
GPR[SPVAP]-1659907300288
GPR[EPVAP]-1659907301343
GPR[EPVS]-1659907301343
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}

========
GPR[SPVS]-1659907301345
GPR[SPVAP]-1659907301345
GPR[EPVAP]-1659907303238
GPR[SPVATF]-1659907303238
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907304926
GPR[EPVS]-1659907304926
========
if(c.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907304929
GPR[SPVAP]-1659907304929
GPR[EPVAP]-1659907305999
GPR[EPVS]-1659907305999
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Polynomial coefficient array must have postive length.");
}

========
GPR[SPVS]-1659907306000
GPR[SPVAP]-1659907306000
GPR[EPVAP]-1659907307873
GPR[SPVATF]-1659907307873
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907309569
GPR[EPVS]-1659907309569
========
if(in.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907309571
GPR[SPVAP]-1659907309571
GPR[EPVAP]-1659907310640
GPR[EPVS]-1659907310640
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two rows");
}

========
GPR[SPVS]-1659907310641
GPR[SPVAP]-1659907310641
GPR[EPVAP]-1659907312517
GPR[SPVATF]-1659907312517
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907314192
GPR[EPVS]-1659907314192
========
if(array.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907314195
GPR[SPVAP]-1659907314195
GPR[EPVAP]-1659907315280
GPR[EPVS]-1659907315280
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}

========
GPR[SPVS]-1659907315282
GPR[SPVAP]-1659907315282
GPR[EPVAP]-1659907317145
GPR[SPVATF]-1659907317145
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907318829
GPR[EPVS]-1659907318829
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907318834
GPR[SPVAP]-1659907318834
GPR[EPVAP]-1659907319890
GPR[EPVS]-1659907319891
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659907319892
GPR[SPVAP]-1659907319892
GPR[EPVAP]-1659907321794
GPR[SPVATF]-1659907321794
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907323480
GPR[EPVS]-1659907323480
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659907323482
GPR[SPVAP]-1659907323482
GPR[EPVAP]-1659907324539
GPR[EPVS]-1659907324539
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659907324541
GPR[SPVAP]-1659907324541
GPR[EPVAP]-1659907326423
GPR[SPVATF]-1659907326423
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907328105
GPR[EPVS]-1659907328105
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659907328107
GPR[SPVAP]-1659907328107
GPR[EPVAP]-1659907329160
GPR[EPVS]-1659907329160
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659907329163
GPR[SPVAP]-1659907329163
GPR[EPVAP]-1659907331032
GPR[SPVATF]-1659907331032
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907332706
GPR[EPVS]-1659907332706
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659907332708
GPR[SPVAP]-1659907332708
GPR[EPVAP]-1659907333778
GPR[EPVS]-1659907333778
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659907333780
GPR[SPVAP]-1659907333780
GPR[EPVAP]-1659907335673
GPR[SPVATF]-1659907335673
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907337356
GPR[EPVS]-1659907337356
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659907337357
GPR[SPVAP]-1659907337357
GPR[EPVAP]-1659907338420
GPR[EPVS]-1659907338420
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659907338422
GPR[SPVAP]-1659907338423
GPR[EPVAP]-1659907340295
GPR[SPVATF]-1659907340295
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907341969
GPR[EPVS]-1659907341969
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659907341971
GPR[SPVAP]-1659907341971
GPR[EPVAP]-1659907343034
GPR[EPVS]-1659907343034
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907343036
GPR[SPVAP]-1659907343036
GPR[EPVAP]-1659907344093
GPR[EPVS]-1659907344093
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659907344095
GPR[SPVAP]-1659907344095
GPR[EPVAP]-1659907346004
GPR[SPVATF]-1659907346004
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907347688
GPR[EPVS]-1659907347688
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659907347690
GPR[SPVAP]-1659907347690
GPR[EPVAP]-1659907348758
GPR[EPVS]-1659907348758
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659907348760
GPR[SPVAP]-1659907348760
GPR[EPVAP]-1659907350642
GPR[SPVATF]-1659907350642
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907352332
GPR[EPVS]-1659907352332
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659907352334
GPR[SPVAP]-1659907352334
GPR[EPVAP]-1659907353391
GPR[EPVS]-1659907353391
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907353393
GPR[SPVAP]-1659907353393
GPR[EPVAP]-1659907354468
GPR[EPVS]-1659907354468
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659907354471
GPR[SPVAP]-1659907354471
GPR[EPVAP]-1659907356346
GPR[SPVATF]-1659907356346
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907358065
GPR[EPVS]-1659907358065
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659907358067
GPR[SPVAP]-1659907358067
GPR[EPVAP]-1659907359124
GPR[EPVS]-1659907359124
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659907359126
GPR[SPVAP]-1659907359126
GPR[EPVAP]-1659907361027
GPR[SPVATF]-1659907361027
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907362676
GPR[EPVS]-1659907362676
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659907362678
GPR[SPVAP]-1659907362678
GPR[EPVAP]-1659907363733
GPR[EPVS]-1659907363733
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659907363735
GPR[SPVAP]-1659907363735
GPR[EPVAP]-1659907365617
GPR[SPVATF]-1659907365617
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907367297
GPR[EPVS]-1659907367297
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659907367300
GPR[SPVAP]-1659907367300
GPR[EPVAP]-1659907368352
GPR[EPVS]-1659907368352
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two columns");
}

========
GPR[SPVS]-1659907368354
GPR[SPVAP]-1659907368354
GPR[EPVAP]-1659907370221
GPR[SPVATF]-1659907370221
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907371889
GPR[EPVS]-1659907371889
========
if(sample2.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907371891
GPR[SPVAP]-1659907371891
GPR[EPVAP]-1659907372936
GPR[EPVS]-1659907372937
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}

========
GPR[SPVS]-1659907372938
GPR[SPVAP]-1659907372938
GPR[EPVAP]-1659907374796
GPR[SPVATF]-1659907374796
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907376486
GPR[EPVS]-1659907376486
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659907376488
GPR[SPVAP]-1659907376488
GPR[EPVAP]-1659907378387
GPR[SPVATF]-1659907378387
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907380121
GPR[EPVS]-1659907380121
========
if(expected.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907380125
GPR[SPVAP]-1659907380125
GPR[EPVAP]-1659907381181
GPR[EPVS]-1659907381181
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}

========
GPR[SPVS]-1659907381183
GPR[SPVAP]-1659907381183
GPR[EPVAP]-1659907383050
GPR[SPVATF]-1659907383050
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907384719
GPR[EPVS]-1659907384719
========
if(observed1.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907384721
GPR[SPVAP]-1659907384721
GPR[EPVAP]-1659907385782
GPR[EPVS]-1659907385783
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}

========
GPR[SPVS]-1659907385784
GPR[SPVAP]-1659907385784
GPR[EPVAP]-1659907387681
GPR[SPVATF]-1659907387681
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907389373
GPR[EPVS]-1659907389373
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("All input rows must have the same length.");
}

========
GPR[SPVS]-1659907389375
GPR[SPVAP]-1659907389375
GPR[EPVAP]-1659907391245
GPR[SPVATF]-1659907391245
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907392929
GPR[EPVS]-1659907392929
========
if(covariance.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907392932
GPR[SPVAP]-1659907392932
GPR[EPVAP]-1659907393999
GPR[EPVS]-1659907393999
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The covariance matrix must be square");
}

========
GPR[SPVS]-1659907394001
GPR[SPVAP]-1659907394001
GPR[EPVAP]-1659907395940
GPR[SPVATF]-1659907395940
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907397630
GPR[EPVS]-1659907397630
========
if(getInterpolatedState().length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907397632
GPR[SPVAP]-1659907397632
GPR[EPVAP]-1659907398702
GPR[EPVS]-1659907398702
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("state vector dimension mismatch");
}

========
GPR[SPVS]-1659907398704
GPR[SPVAP]-1659907398704
GPR[EPVAP]-1659907400587
GPR[SPVATF]-1659907400587
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907402297
GPR[EPVS]-1659907402297
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907402299
GPR[SPVAP]-1659907402299
GPR[EPVAP]-1659907404205
GPR[SPVATF]-1659907404205
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907405921
GPR[EPVS]-1659907405922
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907405923
GPR[SPVAP]-1659907405923
GPR[EPVAP]-1659907406996
GPR[EPVS]-1659907406996
========
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907406998
GPR[SPVAP]-1659907406998
GPR[EPVAP]-1659907408879
GPR[SPVATF]-1659907408879
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907410562
GPR[EPVS]-1659907410562
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907410564
GPR[SPVAP]-1659907410564
GPR[EPVAP]-1659907411632
GPR[EPVS]-1659907411632
========
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907411634
GPR[SPVAP]-1659907411634
GPR[EPVAP]-1659907413517
GPR[SPVATF]-1659907413517
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907415184
GPR[EPVS]-1659907415184
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("matrix dimension mismatch");
}

========
GPR[SPVS]-1659907415186
GPR[SPVAP]-1659907415186
GPR[EPVAP]-1659907417069
GPR[SPVATF]-1659907417069
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907418761
GPR[EPVS]-1659907418761
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659907418763
GPR[SPVAP]-1659907418763
GPR[EPVAP]-1659907420650
GPR[SPVATF]-1659907420650
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907422329
GPR[EPVS]-1659907422329
========
if(subMatrix.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907422331
GPR[SPVAP]-1659907422331
GPR[EPVAP]-1659907423391
GPR[EPVS]-1659907423391
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907423394
GPR[SPVAP]-1659907423394
GPR[EPVAP]-1659907424466
GPR[EPVS]-1659907424466
========
if(selectedRows.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907424467
GPR[SPVAP]-1659907424467
GPR[EPVAP]-1659907425529
GPR[EPVS]-1659907425529
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907425531
GPR[SPVAP]-1659907425531
GPR[EPVAP]-1659907426579
GPR[EPVS]-1659907426579
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907426581
GPR[SPVAP]-1659907426581
GPR[EPVAP]-1659907428453
GPR[SPVATF]-1659907428453
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907430164
GPR[EPVS]-1659907430164
========
if(v.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907430166
GPR[SPVAP]-1659907430166
GPR[EPVAP]-1659907432060
GPR[SPVATF]-1659907432060
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907433725
GPR[EPVS]-1659907433725
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data for t statistic");
}

========
GPR[SPVS]-1659907433728
GPR[SPVAP]-1659907433728
GPR[EPVAP]-1659907435605
GPR[SPVATF]-1659907435605
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907437296
GPR[EPVS]-1659907437296
========
if(v.length!=this.getColumnDimension()){
if(x.length!=y.length){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907437298
GPR[SPVAP]-1659907437298
GPR[EPVAP]-1659907438357
GPR[EPVS]-1659907438357
========
if(roundingMode!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907438359
GPR[SPVAP]-1659907438359
GPR[EPVAP]-1659907440286
GPR[SPVATF]-1659907440286
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907441961
GPR[EPVS]-1659907441961
========
if(v.length!=this.getColumnDimension()){
if(roundingMode==bytes.length){
return ;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907441962
GPR[SPVAP]-1659907441962
GPR[EPVAP]-1659907443020
GPR[EPVS]-1659907443020
========
if(roundingMode==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907443021
GPR[SPVAP]-1659907443021
GPR[EPVAP]-1659907444885
GPR[SPVATF]-1659907444885
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907446587
GPR[EPVS]-1659907446587
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data");
}

========
GPR[SPVS]-1659907446590
GPR[SPVAP]-1659907446590
GPR[EPVAP]-1659907448453
GPR[SPVATF]-1659907448453
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907450164
GPR[EPVS]-1659907450164
========
if(f.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907450166
GPR[SPVAP]-1659907450166
GPR[EPVAP]-1659907451239
GPR[EPVS]-1659907451240
========
if(f.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907451241
GPR[SPVAP]-1659907451241
GPR[EPVAP]-1659907452320
GPR[EPVS]-1659907452320
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" absolute tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecAbsoluteTolerance.length)});
}

========
GPR[SPVS]-1659907452322
GPR[SPVAP]-1659907452322
GPR[EPVAP]-1659907453392
GPR[EPVS]-1659907453392
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" relative tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecRelativeTolerance.length)});
}

========
GPR[SPVS]-1659907453394
GPR[SPVAP]-1659907453394
GPR[EPVAP]-1659907454458
GPR[EPVS]-1659907454458
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(mean.length,roundingMode);
}

========
GPR[SPVS]-1659907454460
GPR[SPVAP]-1659907454460
GPR[EPVAP]-1659907455535
GPR[EPVS]-1659907455535
========
if(m.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907455537
GPR[SPVAP]-1659907455537
GPR[EPVAP]-1659907456601
GPR[EPVS]-1659907456601
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,sums.length);
}

========
GPR[SPVS]-1659907456602
GPR[SPVAP]-1659907456602
GPR[EPVAP]-1659907457657
GPR[EPVS]-1659907457657
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,means.length);
}

========
GPR[SPVS]-1659907457659
GPR[SPVAP]-1659907457659
GPR[EPVAP]-1659907458739
GPR[EPVS]-1659907458739
========
if(2*length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907458741
GPR[SPVAP]-1659907458741
GPR[EPVAP]-1659907459791
GPR[EPVS]-1659907459792
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907459796
GPR[SPVAP]-1659907459796
GPR[EPVAP]-1659907460905
GPR[EPVS]-1659907460905
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907460908
GPR[SPVAP]-1659907460908
GPR[EPVAP]-1659907461970
GPR[EPVS]-1659907461970
========
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907461972
GPR[SPVAP]-1659907461972
GPR[EPVAP]-1659907463045
GPR[EPVS]-1659907463045
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907463047
GPR[SPVAP]-1659907463047
GPR[EPVAP]-1659907464100
GPR[EPVS]-1659907464100
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907464102
GPR[SPVAP]-1659907464102
GPR[EPVAP]-1659907465169
GPR[EPVS]-1659907465169
========
if(length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907465171
GPR[SPVAP]-1659907465171
GPR[EPVAP]-1659907466224
GPR[EPVS]-1659907466224
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907466225
GPR[SPVAP]-1659907466225
GPR[EPVAP]-1659907467293
GPR[EPVS]-1659907467293
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907467294
GPR[SPVAP]-1659907467294
GPR[EPVAP]-1659907468339
GPR[EPVS]-1659907468339
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907468341
GPR[SPVAP]-1659907468341
GPR[EPVAP]-1659907469405
GPR[EPVS]-1659907469405
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659907469406
GPR[SPVAP]-1659907469406
GPR[EPVAP]-1659907470466
GPR[EPVS]-1659907470466
========
if(data.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907470470
GPR[SPVAP]-1659907470470
GPR[EPVAP]-1659907472352
GPR[SPVATF]-1659907472352
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907474020
GPR[EPVS]-1659907474020
========
if(data.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659907474022
GPR[SPVAP]-1659907474022
GPR[EPVAP]-1659907475898
GPR[SPVATF]-1659907475898
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907477589
GPR[EPVS]-1659907477589
========
if(subMatrix.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659907477592
GPR[SPVAP]-1659907477592
GPR[EPVAP]-1659907478654
GPR[EPVS]-1659907478654
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907478657
GPR[SPVAP]-1659907478657
GPR[EPVAP]-1659907479739
GPR[EPVS]-1659907479739
========
if(selectedRows.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907479741
GPR[SPVAP]-1659907479741
GPR[EPVAP]-1659907480809
GPR[EPVS]-1659907480809
========
if(selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659907480810
GPR[SPVAP]-1659907480810
GPR[EPVAP]-1659907481868
GPR[EPVS]-1659907481868
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907481870
GPR[SPVAP]-1659907481870
GPR[EPVAP]-1659907482929
GPR[EPVS]-1659907482929
========
if(selectedRows.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907482931
GPR[SPVAP]-1659907482931
GPR[EPVAP]-1659907483972
GPR[EPVS]-1659907483972
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907483973
GPR[SPVAP]-1659907483973
GPR[EPVAP]-1659907485040
GPR[EPVS]-1659907485040
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907485042
GPR[SPVAP]-1659907485042
GPR[EPVAP]-1659907486110
GPR[EPVS]-1659907486110
========
if(selectedRows.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907486111
GPR[SPVAP]-1659907486111
GPR[EPVAP]-1659907487163
GPR[EPVS]-1659907487163
========
if(selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659907487164
GPR[SPVAP]-1659907487164
GPR[EPVAP]-1659907488225
GPR[EPVS]-1659907488225
GPR[ESUN]-1659907488226
GPR[SSUN]-1659907488226
org.apache.commons.math.linear.BigMatrixImpl,989
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907489411
GPR[SPVAP]-1659907489411
GPR[EPVAP]-1659907491009
GPR[EPVS]-1659907491009
========
lu=this.getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907491011
GPR[SPVAP]-1659907491011
GPR[EPVAP]-1659907494533
GPR[SPVATF]-1659907494533
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907496222
GPR[EPVS]-1659907496222
========
lu=getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907496224
GPR[SPVAP]-1659907496224
GPR[EPVAP]-1659907498136
GPR[SPVATF]-1659907498136
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907499845
GPR[EPVS]-1659907499845
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
lu=getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907499847
GPR[SPVAP]-1659907499847
GPR[EPVAP]-1659907500915
GPR[EPVS]-1659907500915
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(this.isSingular()){
throw new InvalidMatrixException("Matrix is singular.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907500917
GPR[SPVAP]-1659907500917
GPR[EPVAP]-1659907502840
GPR[SPVATF]-1659907502840
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907504543
GPR[EPVS]-1659907504543
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("All input rows must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907504545
GPR[SPVAP]-1659907504545
GPR[EPVAP]-1659907506443
GPR[SPVATF]-1659907506443
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907508118
GPR[EPVS]-1659907508118
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907508121
GPR[SPVAP]-1659907508121
GPR[EPVAP]-1659907509173
GPR[EPVS]-1659907509173
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907509175
GPR[SPVAP]-1659907509175
GPR[EPVAP]-1659907511055
GPR[SPVATF]-1659907511055
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907512737
GPR[EPVS]-1659907512737
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907512738
GPR[SPVAP]-1659907512738
GPR[EPVAP]-1659907513801
GPR[EPVS]-1659907513801
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907513803
GPR[SPVAP]-1659907513803
GPR[EPVAP]-1659907515682
GPR[SPVATF]-1659907515682
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907517417
GPR[EPVS]-1659907517417
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907517418
GPR[SPVAP]-1659907517418
GPR[EPVAP]-1659907518485
GPR[EPVS]-1659907518485
========
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907518486
GPR[SPVAP]-1659907518486
GPR[EPVAP]-1659907520349
GPR[SPVATF]-1659907520349
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907522038
GPR[EPVS]-1659907522038
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907522040
GPR[SPVAP]-1659907522040
GPR[EPVAP]-1659907523091
GPR[EPVS]-1659907523091
========
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907523093
GPR[SPVAP]-1659907523093
GPR[EPVAP]-1659907524985
GPR[SPVATF]-1659907524985
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907526668
GPR[EPVS]-1659907526668
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907526670
GPR[SPVAP]-1659907526670
GPR[EPVAP]-1659907527727
GPR[EPVS]-1659907527727
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907527728
GPR[SPVAP]-1659907527728
GPR[EPVAP]-1659907529603
GPR[SPVATF]-1659907529603
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907531272
GPR[EPVS]-1659907531272
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907531274
GPR[SPVAP]-1659907531274
GPR[EPVAP]-1659907532338
GPR[EPVS]-1659907532339
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907532340
GPR[SPVAP]-1659907532340
GPR[EPVAP]-1659907534204
GPR[SPVATF]-1659907534204
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907535875
GPR[EPVS]-1659907535875
========
if(in.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907535877
GPR[SPVAP]-1659907535877
GPR[EPVAP]-1659907536940
GPR[EPVS]-1659907536940
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two rows");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907536941
GPR[SPVAP]-1659907536941
GPR[EPVAP]-1659907538817
GPR[SPVATF]-1659907538817
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907540480
GPR[EPVS]-1659907540480
========
if(array.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907540482
GPR[SPVAP]-1659907540482
GPR[EPVAP]-1659907541556
GPR[EPVS]-1659907541556
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907541557
GPR[SPVAP]-1659907541557
GPR[EPVAP]-1659907543431
GPR[SPVATF]-1659907543431
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907545132
GPR[EPVS]-1659907545132
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907545134
GPR[SPVAP]-1659907545134
GPR[EPVAP]-1659907547004
GPR[SPVATF]-1659907547004
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907548686
GPR[EPVS]-1659907548686
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907548687
GPR[SPVAP]-1659907548687
GPR[EPVAP]-1659907549743
GPR[EPVS]-1659907549743
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907549745
GPR[SPVAP]-1659907549745
GPR[EPVAP]-1659907551633
GPR[SPVATF]-1659907551633
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907553302
GPR[EPVS]-1659907553302
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907553304
GPR[SPVAP]-1659907553304
GPR[EPVAP]-1659907554363
GPR[EPVS]-1659907554363
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907554365
GPR[SPVAP]-1659907554365
GPR[EPVAP]-1659907556265
GPR[SPVATF]-1659907556265
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907557948
GPR[EPVS]-1659907557948
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907557950
GPR[SPVAP]-1659907557950
GPR[EPVAP]-1659907559012
GPR[EPVS]-1659907559012
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907559015
GPR[SPVAP]-1659907559015
GPR[EPVAP]-1659907560917
GPR[SPVATF]-1659907560918
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907562603
GPR[EPVS]-1659907562603
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907562605
GPR[SPVAP]-1659907562605
GPR[EPVAP]-1659907563660
GPR[EPVS]-1659907563660
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907563662
GPR[SPVAP]-1659907563662
GPR[EPVAP]-1659907564713
GPR[EPVS]-1659907564713
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907564714
GPR[SPVAP]-1659907564714
GPR[EPVAP]-1659907566587
GPR[SPVATF]-1659907566587
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907568282
GPR[EPVS]-1659907568282
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907568284
GPR[SPVAP]-1659907568284
GPR[EPVAP]-1659907569336
GPR[EPVS]-1659907569336
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907569339
GPR[SPVAP]-1659907569339
GPR[EPVAP]-1659907571254
GPR[SPVATF]-1659907571254
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907572927
GPR[EPVS]-1659907572927
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907572928
GPR[SPVAP]-1659907572928
GPR[EPVAP]-1659907573983
GPR[EPVS]-1659907573984
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907573985
GPR[SPVAP]-1659907573985
GPR[EPVAP]-1659907575048
GPR[EPVS]-1659907575048
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907575049
GPR[SPVAP]-1659907575049
GPR[EPVAP]-1659907576909
GPR[SPVATF]-1659907576909
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907578616
GPR[EPVS]-1659907578616
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907578618
GPR[SPVAP]-1659907578618
GPR[EPVAP]-1659907579684
GPR[EPVS]-1659907579684
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907579686
GPR[SPVAP]-1659907579686
GPR[EPVAP]-1659907581564
GPR[SPVATF]-1659907581565
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907583230
GPR[EPVS]-1659907583230
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907583232
GPR[SPVAP]-1659907583232
GPR[EPVAP]-1659907584307
GPR[EPVS]-1659907584307
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907584309
GPR[SPVAP]-1659907584309
GPR[EPVAP]-1659907586178
GPR[SPVATF]-1659907586178
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907587864
GPR[EPVS]-1659907587864
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907587865
GPR[SPVAP]-1659907587865
GPR[EPVAP]-1659907588927
GPR[EPVS]-1659907588927
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907588928
GPR[SPVAP]-1659907588928
GPR[EPVAP]-1659907590009
GPR[EPVS]-1659907590009
========
if(getInterpolatedState().length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907590011
GPR[SPVAP]-1659907590011
GPR[EPVAP]-1659907591077
GPR[EPVS]-1659907591077
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("state vector dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907591080
GPR[SPVAP]-1659907591080
GPR[EPVAP]-1659907592981
GPR[SPVATF]-1659907592981
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907594649
GPR[EPVS]-1659907594649
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907594651
GPR[SPVAP]-1659907594651
GPR[EPVAP]-1659907596525
GPR[SPVATF]-1659907596525
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907598221
GPR[EPVS]-1659907598221
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907598223
GPR[SPVAP]-1659907598223
GPR[EPVAP]-1659907599283
GPR[EPVS]-1659907599283
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907599285
GPR[SPVAP]-1659907599285
GPR[EPVAP]-1659907601157
GPR[SPVATF]-1659907601157
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907602849
GPR[EPVS]-1659907602849
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907602851
GPR[SPVAP]-1659907602851
GPR[EPVAP]-1659907603908
GPR[EPVS]-1659907603908
========
if(sample2.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907603910
GPR[SPVAP]-1659907603910
GPR[EPVAP]-1659907605001
GPR[EPVS]-1659907605001
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907605002
GPR[SPVAP]-1659907605002
GPR[EPVAP]-1659907606910
GPR[SPVATF]-1659907606910
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907608598
GPR[EPVS]-1659907608598
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907608600
GPR[SPVAP]-1659907608600
GPR[EPVAP]-1659907610471
GPR[SPVATF]-1659907610471
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907612173
GPR[EPVS]-1659907612173
========
if(expected.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907612175
GPR[SPVAP]-1659907612175
GPR[EPVAP]-1659907613227
GPR[EPVS]-1659907613227
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907613229
GPR[SPVAP]-1659907613229
GPR[EPVAP]-1659907615115
GPR[SPVATF]-1659907615115
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907616821
GPR[EPVS]-1659907616821
========
if(observed1.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907616822
GPR[SPVAP]-1659907616822
GPR[EPVAP]-1659907617873
GPR[EPVS]-1659907617873
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907617875
GPR[SPVAP]-1659907617875
GPR[EPVAP]-1659907619763
GPR[SPVATF]-1659907619763
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907621462
GPR[EPVS]-1659907621462
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907621464
GPR[SPVAP]-1659907621464
GPR[EPVAP]-1659907623333
GPR[SPVATF]-1659907623333
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907625042
GPR[EPVS]-1659907625042
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907625044
GPR[SPVAP]-1659907625044
GPR[EPVAP]-1659907626939
GPR[SPVATF]-1659907626939
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907628618
GPR[EPVS]-1659907628618
========
this.nRows=knots.length-1;
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907628619
GPR[SPVAP]-1659907628619
GPR[EPVAP]-1659907629697
GPR[EPVS]-1659907629697
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907629699
GPR[SPVAP]-1659907629699
GPR[EPVAP]-1659907630778
GPR[EPVS]-1659907630778
========
if(covariance.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907630780
GPR[SPVAP]-1659907630780
GPR[EPVAP]-1659907631852
GPR[EPVS]-1659907631852
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The covariance matrix must be square");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907631854
GPR[SPVAP]-1659907631854
GPR[EPVAP]-1659907633718
GPR[SPVATF]-1659907633718
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907635410
GPR[EPVS]-1659907635410
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(!isValidCoordinate(roundingMode,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907635412
GPR[SPVAP]-1659907635412
GPR[EPVAP]-1659907637299
GPR[SPVATF]-1659907637299
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907638988
GPR[EPVS]-1659907638988
========
System.arraycopy(data[roundingMode],0,new BigDecimal[nRows],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907638990
GPR[SPVAP]-1659907638990
GPR[EPVAP]-1659907640061
GPR[EPVS]-1659907640061
========
System.arraycopy(data[roundingMode],0,new double[nRows],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907640063
GPR[SPVAP]-1659907640063
GPR[EPVAP]-1659907641126
GPR[EPVS]-1659907641126
========
if(c.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907641129
GPR[SPVAP]-1659907641129
GPR[EPVAP]-1659907642193
GPR[EPVS]-1659907642193
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Polynomial coefficient array must have postive length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907642194
GPR[SPVAP]-1659907642194
GPR[EPVAP]-1659907644064
GPR[SPVATF]-1659907644064
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907645741
GPR[EPVS]-1659907645741
========
super();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907645742
GPR[SPVAP]-1659907645742
GPR[EPVAP]-1659907646831
GPR[EPVS]-1659907646831
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data for t statistic");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907646833
GPR[SPVAP]-1659907646833
GPR[EPVAP]-1659907648753
GPR[SPVATF]-1659907648753
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907650450
GPR[EPVS]-1659907650450
========
System.arraycopy(data[roundingMode],0,new BigDecimal[1][nRows][0],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907650452
GPR[SPVAP]-1659907650452
GPR[EPVAP]-1659907651508
GPR[EPVS]-1659907651508
========
System.arraycopy(data[roundingMode],0,new double[1][nRows][0],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907651510
GPR[SPVAP]-1659907651510
GPR[EPVAP]-1659907652581
GPR[EPVS]-1659907652581
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907652583
GPR[SPVAP]-1659907652583
GPR[EPVAP]-1659907654469
GPR[SPVATF]-1659907654469
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907656143
GPR[EPVS]-1659907656143
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907656145
GPR[SPVAP]-1659907656145
GPR[EPVAP]-1659907657205
GPR[EPVS]-1659907657205
========
if(selectedRows.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907657206
GPR[SPVAP]-1659907657206
GPR[EPVAP]-1659907658250
GPR[EPVS]-1659907658250
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907658252
GPR[SPVAP]-1659907658252
GPR[EPVAP]-1659907659304
GPR[EPVS]-1659907659304
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907659306
GPR[SPVAP]-1659907659306
GPR[EPVAP]-1659907661201
GPR[SPVATF]-1659907661201
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907662881
GPR[EPVS]-1659907662881
========
if(v.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907662883
GPR[SPVAP]-1659907662883
GPR[EPVAP]-1659907664789
GPR[SPVATF]-1659907664789
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907666459
GPR[EPVS]-1659907666459
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907666461
GPR[SPVAP]-1659907666461
GPR[EPVAP]-1659907668347
GPR[SPVATF]-1659907668347
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907670021
GPR[EPVS]-1659907670021
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(mean.length,nCols);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907670023
GPR[SPVAP]-1659907670023
GPR[EPVAP]-1659907671069
GPR[EPVS]-1659907671069
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" absolute tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecAbsoluteTolerance.length)});
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907671071
GPR[SPVAP]-1659907671071
GPR[EPVAP]-1659907672123
GPR[EPVS]-1659907672123
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" relative tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecRelativeTolerance.length)});
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907672124
GPR[SPVAP]-1659907672124
GPR[EPVAP]-1659907673195
GPR[EPVS]-1659907673195
========
if(v.length!=this.getColumnDimension()){
if(x.length!=y.length){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907673197
GPR[SPVAP]-1659907673197
GPR[EPVAP]-1659907674240
GPR[EPVS]-1659907674240
========
if(f.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907674242
GPR[SPVAP]-1659907674242
GPR[EPVAP]-1659907675289
GPR[EPVS]-1659907675289
========
if(f.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907675290
GPR[SPVAP]-1659907675290
GPR[EPVAP]-1659907676350
GPR[EPVS]-1659907676350
========
if(m.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907676353
GPR[SPVAP]-1659907676353
GPR[EPVAP]-1659907677424
GPR[EPVS]-1659907677424
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,sums.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907677426
GPR[SPVAP]-1659907677426
GPR[EPVAP]-1659907678482
GPR[EPVS]-1659907678482
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,means.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907678484
GPR[SPVAP]-1659907678484
GPR[EPVAP]-1659907679554
GPR[EPVS]-1659907679554
========
if(2*length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907679556
GPR[SPVAP]-1659907679556
GPR[EPVAP]-1659907680620
GPR[EPVS]-1659907680620
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907680626
GPR[SPVAP]-1659907680626
GPR[EPVAP]-1659907681677
GPR[EPVS]-1659907681677
========
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907681679
GPR[SPVAP]-1659907681679
GPR[EPVAP]-1659907682737
GPR[EPVS]-1659907682737
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907682739
GPR[SPVAP]-1659907682739
GPR[EPVAP]-1659907683798
GPR[EPVS]-1659907683798
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907683800
GPR[SPVAP]-1659907683800
GPR[EPVAP]-1659907684854
GPR[EPVS]-1659907684855
========
if(length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907684857
GPR[SPVAP]-1659907684857
GPR[EPVAP]-1659907685906
GPR[EPVS]-1659907685906
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907685908
GPR[SPVAP]-1659907685908
GPR[EPVAP]-1659907686977
GPR[EPVS]-1659907686977
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907686978
GPR[SPVAP]-1659907686978
GPR[EPVAP]-1659907688075
GPR[EPVS]-1659907688075
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907688076
GPR[SPVAP]-1659907688076
GPR[EPVAP]-1659907689159
GPR[EPVS]-1659907689159
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907689160
GPR[SPVAP]-1659907689160
GPR[EPVAP]-1659907690239
GPR[EPVS]-1659907690239
========
if(roundingMode!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907690242
GPR[SPVAP]-1659907690242
GPR[EPVAP]-1659907692096
GPR[SPVATF]-1659907692096
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907693782
GPR[EPVS]-1659907693782
========
if(v.length!=this.getColumnDimension()){
if(roundingMode==bytes.length){
return ;
}
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907693784
GPR[SPVAP]-1659907693784
GPR[EPVAP]-1659907694850
GPR[EPVS]-1659907694850
========
if(roundingMode==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907694852
GPR[SPVAP]-1659907694852
GPR[EPVAP]-1659907696729
GPR[SPVATF]-1659907696729
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907698434
GPR[EPVS]-1659907698434
========
if(interpolator.currentState!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907698436
GPR[SPVAP]-1659907698436
GPR[EPVAP]-1659907699498
GPR[EPVS]-1659907699498
========
if(data.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907699500
GPR[SPVAP]-1659907699500
GPR[EPVAP]-1659907701373
GPR[SPVATF]-1659907701373
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907703041
GPR[EPVS]-1659907703041
========
if(data.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907703043
GPR[SPVAP]-1659907703043
GPR[EPVAP]-1659907704957
GPR[SPVATF]-1659907704957
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907706633
GPR[EPVS]-1659907706633
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907706636
GPR[SPVAP]-1659907706636
GPR[EPVAP]-1659907707714
GPR[EPVS]-1659907707714
========
if(selectedRows.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907707715
GPR[SPVAP]-1659907707715
GPR[EPVAP]-1659907708783
GPR[EPVS]-1659907708783
========
if(selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907708784
GPR[SPVAP]-1659907708784
GPR[EPVAP]-1659907709861
GPR[EPVS]-1659907709861
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907709862
GPR[SPVAP]-1659907709862
GPR[EPVAP]-1659907710945
GPR[EPVS]-1659907710945
========
if(selectedRows.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907710947
GPR[SPVAP]-1659907710947
GPR[EPVAP]-1659907712016
GPR[EPVS]-1659907712016
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907712018
GPR[SPVAP]-1659907712018
GPR[EPVAP]-1659907713099
GPR[EPVS]-1659907713099
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907713100
GPR[SPVAP]-1659907713100
GPR[EPVAP]-1659907714177
GPR[EPVS]-1659907714177
========
if(selectedRows.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907714178
GPR[SPVAP]-1659907714178
GPR[EPVAP]-1659907715240
GPR[EPVS]-1659907715240
========
if(selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659907715242
GPR[SPVAP]-1659907715242
GPR[EPVAP]-1659907716293
GPR[EPVS]-1659907716293
GPR[ESUN]-1659907716297
GPR[SSUN]-1659907716297
org.apache.commons.math.linear.BigMatrixImpl,990
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907717253
GPR[SPVAP]-1659907717253
GPR[EPVAP]-1659907720935
GPR[SPVATF]-1659907720936
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907722605
GPR[EPVS]-1659907722605
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];

========
GPR[SPVS]-1659907722606
GPR[SPVAP]-1659907722606
GPR[EPVAP]-1659907724517
GPR[SPVATF]-1659907724517
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907726200
GPR[SPVATR]-1659907726201
TESTING : math_98
GPR[EPVATR]-1659907732526
GPR[EPVS]-1659907732526
GPR[PF]-1659907732526
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659907732537
GPR[SPVAP]-1659907732537
GPR[EPVAP]-1659907734407
GPR[SPVATF]-1659907734407
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907736101
GPR[EPVS]-1659907736101
========
if(v.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907736104
GPR[SPVAP]-1659907736104
GPR[EPVAP]-1659907737146
GPR[EPVS]-1659907737146
========
roundingMode=ret*31+nRows;
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907737148
GPR[SPVAP]-1659907737148
GPR[EPVAP]-1659907738207
GPR[EPVS]-1659907738207
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907738209
GPR[SPVAP]-1659907738209
GPR[EPVAP]-1659907739302
GPR[EPVS]-1659907739302
========
if(v.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659907739304
GPR[SPVAP]-1659907739304
GPR[EPVAP]-1659907740360
GPR[EPVS]-1659907740361
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907740362
GPR[SPVAP]-1659907740362
GPR[EPVAP]-1659907742238
GPR[SPVATF]-1659907742238
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907743914
GPR[EPVS]-1659907743914
========
if(this.isSingular()){
throw new InvalidMatrixException("Matrix is singular.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907743916
GPR[SPVAP]-1659907743916
GPR[EPVAP]-1659907745802
GPR[SPVATF]-1659907745802
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907747484
GPR[EPVS]-1659907747484
========
if(b.length!=nRows){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907747485
GPR[SPVAP]-1659907747485
GPR[EPVAP]-1659907748546
GPR[EPVS]-1659907748546
========
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907748548
GPR[SPVAP]-1659907748548
GPR[EPVAP]-1659907750431
GPR[SPVATF]-1659907750431
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907752159
GPR[EPVS]-1659907752159
========
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];

========
GPR[SPVS]-1659907752161
GPR[SPVAP]-1659907752161
GPR[EPVAP]-1659907754049
GPR[SPVATF]-1659907754049
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907755743
GPR[EPVS]-1659907755743
========
if(!isValidCoordinate(roundingMode,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907755746
GPR[SPVAP]-1659907755746
GPR[EPVAP]-1659907757609
GPR[SPVATF]-1659907757609
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907759311
GPR[EPVS]-1659907759311
========
System.arraycopy(data[roundingMode],0,out,0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907759312
GPR[SPVAP]-1659907759313
GPR[EPVAP]-1659907760384
GPR[EPVS]-1659907760384
========
System.arraycopy(data[roundingMode],0,new double[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907760386
GPR[SPVAP]-1659907760386
GPR[EPVAP]-1659907761467
GPR[EPVS]-1659907761467
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907761469
GPR[SPVAP]-1659907761469
GPR[EPVAP]-1659907762527
GPR[EPVS]-1659907762527
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659907762530
GPR[SPVAP]-1659907762530
GPR[EPVAP]-1659907763588
GPR[EPVS]-1659907763588
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[f.length];

========
GPR[SPVS]-1659907763590
GPR[SPVAP]-1659907763590
GPR[EPVAP]-1659907764656
GPR[EPVS]-1659907764656
========
if(!FastFourierTransformer.isPowerOf2(N)){
throw new IllegalArgumentException("Number of samples not power of 2 plus one: "+f.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907764657
GPR[SPVAP]-1659907764657
GPR[EPVAP]-1659907765729
GPR[EPVS]-1659907765729
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[parameters.length];

========
GPR[SPVS]-1659907765731
GPR[SPVAP]-1659907765731
GPR[EPVAP]-1659907766775
GPR[EPVS]-1659907766775
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[coefficients.length];

========
GPR[SPVS]-1659907766778
GPR[SPVAP]-1659907766778
GPR[EPVAP]-1659907767843
GPR[EPVS]-1659907767843
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[a.length];

========
GPR[SPVS]-1659907767845
GPR[SPVAP]-1659907767845
GPR[EPVAP]-1659907768902
GPR[EPVS]-1659907768902
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[c.length];

========
GPR[SPVS]-1659907768903
GPR[SPVAP]-1659907768904
GPR[EPVAP]-1659907769965
GPR[EPVS]-1659907769965
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[x.length];

========
GPR[SPVS]-1659907769966
GPR[SPVAP]-1659907769966
GPR[EPVAP]-1659907771016
GPR[EPVS]-1659907771016
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y.length];

========
GPR[SPVS]-1659907771018
GPR[SPVAP]-1659907771018
GPR[EPVAP]-1659907772080
GPR[EPVS]-1659907772080
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];

========
GPR[SPVS]-1659907772082
GPR[SPVAP]-1659907772082
GPR[EPVAP]-1659907773957
GPR[SPVATF]-1659907773957
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907775625
GPR[EPVS]-1659907775625
========
System.arraycopy(permutation,0,new int[permutation.length],0,permutation.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907775627
GPR[SPVAP]-1659907775627
GPR[EPVAP]-1659907777516
GPR[SPVATF]-1659907777516
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907779186
GPR[EPVS]-1659907779186
========
System.arraycopy(permutation,0,new int[permutation.length],0,permutation.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];

========
GPR[SPVS]-1659907779187
GPR[SPVAP]-1659907779187
GPR[EPVAP]-1659907781077
GPR[SPVATF]-1659907781077
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907782773
GPR[EPVS]-1659907782773
========
System.arraycopy(data[roundingMode],0,new BigDecimal[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907782776
GPR[SPVAP]-1659907782776
GPR[EPVAP]-1659907783830
GPR[EPVS]-1659907783830
========
System.arraycopy(data[roundingMode],0,new double[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907783832
GPR[SPVAP]-1659907783832
GPR[EPVAP]-1659907784868
GPR[EPVS]-1659907784868
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y0.length];

========
GPR[SPVS]-1659907784871
GPR[SPVAP]-1659907784871
GPR[EPVAP]-1659907785928
GPR[EPVS]-1659907785928
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
updateJacobian();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907785929
GPR[SPVAP]-1659907785930
GPR[EPVAP]-1659907786998
GPR[EPVS]-1659907786998
========
System.arraycopy(length,0,new double[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907787000
GPR[SPVAP]-1659907787000
GPR[EPVAP]-1659907788052
GPR[EPVS]-1659907788052
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[b.length];

========
GPR[SPVS]-1659907788055
GPR[SPVAP]-1659907788055
GPR[EPVAP]-1659907789103
GPR[EPVS]-1659907789104
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[sequence.length];

========
GPR[SPVS]-1659907789107
GPR[SPVAP]-1659907789107
GPR[EPVAP]-1659907790171
GPR[EPVS]-1659907790171
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[stats.length];

========
GPR[SPVS]-1659907790173
GPR[SPVAP]-1659907790173
GPR[EPVAP]-1659907791233
GPR[EPVS]-1659907791233
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[means.length];

========
GPR[SPVS]-1659907791235
GPR[SPVAP]-1659907791235
GPR[EPVAP]-1659907792293
GPR[EPVS]-1659907792293
========
verifyDataSet(data);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907792295
GPR[SPVAP]-1659907792295
GPR[EPVAP]-1659907793410
GPR[EPVS]-1659907793410
========
if(N==1){
new Complex[N][0]=data[0];
return f;
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659907793412
GPR[SPVAP]-1659907793412
GPR[EPVAP]-1659907794495
GPR[EPVS]-1659907794495
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];

========
GPR[SPVS]-1659907794498
GPR[SPVAP]-1659907794498
GPR[EPVAP]-1659907795560
GPR[EPVS]-1659907795560
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[vertexA.length];

========
GPR[SPVS]-1659907795565
GPR[SPVAP]-1659907795565
GPR[EPVAP]-1659907796633
GPR[EPVS]-1659907796633
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedRows.length];

========
GPR[SPVS]-1659907796636
GPR[SPVAP]-1659907796636
GPR[EPVAP]-1659907797694
GPR[EPVS]-1659907797694
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedColumns.length];

========
GPR[SPVS]-1659907797695
GPR[SPVAP]-1659907797695
GPR[EPVAP]-1659907798749
GPR[EPVS]-1659907798749
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[currentState.length];

========
GPR[SPVS]-1659907798757
GPR[SPVAP]-1659907798757
GPR[EPVAP]-1659907799843
GPR[EPVS]-1659907799843
GPR[ESUN]-1659907799846
GPR[SSUN]-1659907799846
org.apache.commons.math.linear.BigMatrixImpl,991
========
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907801545
GPR[SPVAP]-1659907801545
GPR[EPVAP]-1659907805303
GPR[SPVATF]-1659907805303
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907806994
GPR[EPVS]-1659907806994
========
for(int i=0;i<nSum;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907806996
GPR[SPVAP]-1659907806996
GPR[EPVAP]-1659907808077
GPR[EPVS]-1659907808077
========
for(int i=nCols;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907808078
GPR[SPVAP]-1659907808078
GPR[EPVAP]-1659907809956
GPR[SPVATF]-1659907809956
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907811630
GPR[EPVS]-1659907811630
========
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907811632
GPR[SPVAP]-1659907811632
GPR[EPVAP]-1659907813525
GPR[SPVATF]-1659907813525
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907815248
GPR[EPVS]-1659907815248
========
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907815251
GPR[SPVAP]-1659907815251
GPR[EPVAP]-1659907816343
GPR[EPVS]-1659907816343
========
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907816344
GPR[SPVAP]-1659907816344
GPR[EPVAP]-1659907818234
GPR[SPVATF]-1659907818234
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907819914
GPR[EPVS]-1659907819914
========
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907819916
GPR[SPVAP]-1659907819916
GPR[EPVAP]-1659907821778
GPR[SPVATF]-1659907821778
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907823472
GPR[EPVS]-1659907823472
========
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907823474
GPR[SPVAP]-1659907823474
GPR[EPVAP]-1659907825355
GPR[SPVATF]-1659907825355
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907827053
GPR[EPVS]-1659907827053
========
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907827054
GPR[SPVAP]-1659907827054
GPR[EPVAP]-1659907828108
GPR[EPVS]-1659907828108
========
for(int i=0;i<N;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907828110
GPR[SPVAP]-1659907828110
GPR[EPVAP]-1659907829166
GPR[EPVS]-1659907829166
========
for(int i=0;i<binCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907829168
GPR[SPVAP]-1659907829168
GPR[EPVAP]-1659907830233
GPR[EPVS]-1659907830233
========
for(int i=0;i<parameters.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907830235
GPR[SPVAP]-1659907830235
GPR[EPVAP]-1659907831286
GPR[EPVS]-1659907831286
========
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907831288
GPR[SPVAP]-1659907831288
GPR[EPVAP]-1659907832346
GPR[EPVS]-1659907832346
========
for(int i=0;i<ncols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907832348
GPR[SPVAP]-1659907832348
GPR[EPVAP]-1659907833396
GPR[EPVS]-1659907833396
========
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907833398
GPR[SPVAP]-1659907833398
GPR[EPVAP]-1659907834456
GPR[EPVS]-1659907834456
========
for(int i=0;i<nrows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907834458
GPR[SPVAP]-1659907834458
GPR[EPVAP]-1659907835533
GPR[EPVS]-1659907835533
========
for(int i=0;i<values.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907835535
GPR[SPVAP]-1659907835535
GPR[EPVAP]-1659907836597
GPR[EPVS]-1659907836597
========
for(int i=0;i<dimension;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907836598
GPR[SPVAP]-1659907836598
GPR[EPVAP]-1659907837696
GPR[EPVS]-1659907837696
========
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907837699
GPR[SPVAP]-1659907837699
GPR[EPVAP]-1659907839581
GPR[SPVATF]-1659907839581
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907841286
GPR[EPVS]-1659907841286
========
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907841288
GPR[SPVAP]-1659907841288
GPR[EPVAP]-1659907842349
GPR[EPVS]-1659907842349
========
i++;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907842351
GPR[SPVAP]-1659907842351
GPR[EPVAP]-1659907843412
GPR[EPVS]-1659907843412
========
for(int i=0;i<=n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907843414
GPR[SPVAP]-1659907843414
GPR[EPVAP]-1659907844478
GPR[EPVS]-1659907844479
========
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907844480
GPR[SPVAP]-1659907844480
GPR[EPVAP]-1659907845528
GPR[EPVS]-1659907845528
========
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907845529
GPR[SPVAP]-1659907845529
GPR[EPVAP]-1659907846595
GPR[EPVS]-1659907846595
========
for(int i=0;i<rank;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907846596
GPR[SPVAP]-1659907846596
GPR[EPVAP]-1659907847654
GPR[EPVS]-1659907847654
========
for(int i=0;i<newPols.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907847656
GPR[SPVAP]-1659907847656
GPR[EPVAP]-1659907848708
GPR[EPVS]-1659907848708
========
for(int i=0;i<inputArray.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907848711
GPR[SPVAP]-1659907848711
GPR[EPVAP]-1659907849769
GPR[EPVS]-1659907849769
========
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907849771
GPR[SPVAP]-1659907849771
GPR[EPVAP]-1659907851677
GPR[SPVATF]-1659907851677
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907853396
GPR[EPVS]-1659907853396
========
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907853398
GPR[SPVAP]-1659907853398
GPR[EPVAP]-1659907854459
GPR[EPVS]-1659907854459
========
for(int i=0;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907854461
GPR[SPVAP]-1659907854461
GPR[EPVAP]-1659907855539
GPR[EPVS]-1659907855540
========
for(int i=0;i<f.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907855541
GPR[SPVAP]-1659907855541
GPR[EPVAP]-1659907856608
GPR[EPVS]-1659907856608
========
for(int i=0;i<scale.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907856610
GPR[SPVAP]-1659907856610
GPR[EPVAP]-1659907857660
GPR[EPVS]-1659907857660
========
for(int i=0;i<results.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907857662
GPR[SPVAP]-1659907857662
GPR[EPVAP]-1659907858716
GPR[EPVS]-1659907858716
========
for(int i=0;i<result.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907858718
GPR[SPVAP]-1659907858718
GPR[EPVAP]-1659907859768
GPR[EPVS]-1659907859768
========
for(int i=0;i<bd.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907859770
GPR[SPVAP]-1659907859770
GPR[EPVAP]-1659907860818
GPR[EPVS]-1659907860818
========
for(int i=0;i<v.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907860820
GPR[SPVAP]-1659907860820
GPR[EPVAP]-1659907862708
GPR[SPVATF]-1659907862708
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907864446
GPR[EPVS]-1659907864446
========
for(int i=0;i<coefficients.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907864448
GPR[SPVAP]-1659907864448
GPR[EPVAP]-1659907865523
GPR[EPVS]-1659907865523
========
for(int i=0;i<c.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907865524
GPR[SPVAP]-1659907865524
GPR[EPVAP]-1659907866600
GPR[EPVS]-1659907866600
========
for(int i=roundingMode;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907866602
GPR[SPVAP]-1659907866602
GPR[EPVAP]-1659907868515
GPR[SPVATF]-1659907868515
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907870198
GPR[EPVS]-1659907870198
========
for(int i=roundingMode;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907870199
GPR[SPVAP]-1659907870199
GPR[EPVAP]-1659907871257
GPR[EPVS]-1659907871257
========
for(int i=roundingMode;i<=n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907871259
GPR[SPVAP]-1659907871259
GPR[EPVAP]-1659907872317
GPR[EPVS]-1659907872317
========
for(int i=0;i<nCols-roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907872318
GPR[SPVAP]-1659907872318
GPR[EPVAP]-1659907874200
GPR[SPVATF]-1659907874200
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907875881
GPR[EPVS]-1659907875881
========
for(int i=0;i<=nCols-roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907875883
GPR[SPVAP]-1659907875883
GPR[EPVAP]-1659907877761
GPR[SPVATF]-1659907877761
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907879445
GPR[EPVS]-1659907879445
========
for(int i=0;i<=k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907879446
GPR[SPVAP]-1659907879446
GPR[EPVAP]-1659907880504
GPR[EPVS]-1659907880504
========
for(int i=0;i<data[0].nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907880507
GPR[SPVAP]-1659907880507
GPR[EPVAP]-1659907881580
GPR[EPVS]-1659907881580
========
for(int i=0;i<y0.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907881583
GPR[SPVAP]-1659907881583
GPR[EPVAP]-1659907882651
GPR[EPVS]-1659907882651
========
for(int i=0;i<x.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907882653
GPR[SPVAP]-1659907882653
GPR[EPVAP]-1659907883721
GPR[EPVS]-1659907883721
========
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907883723
GPR[SPVAP]-1659907883723
GPR[EPVAP]-1659907884777
GPR[EPVS]-1659907884777
========
for(int i=0;i<in.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907884779
GPR[SPVAP]-1659907884779
GPR[EPVAP]-1659907885834
GPR[EPVS]-1659907885834
========
for(int i=0;i<data.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907885836
GPR[SPVAP]-1659907885836
GPR[EPVAP]-1659907887729
GPR[SPVATF]-1659907887729
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907889416
GPR[EPVS]-1659907889416
========
for(int i=0;i<value.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907889419
GPR[SPVAP]-1659907889419
GPR[EPVAP]-1659907890484
GPR[EPVS]-1659907890484
========
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907890486
GPR[SPVAP]-1659907890486
GPR[EPVAP]-1659907892374
GPR[SPVATF]-1659907892374
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907894074
GPR[EPVS]-1659907894074
========
for(int i=0;i<roundingMode+nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907894076
GPR[SPVAP]-1659907894076
GPR[EPVAP]-1659907895949
GPR[SPVATF]-1659907895949
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907897645
GPR[EPVS]-1659907897645
========
for(int i=0;i<begin;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907897647
GPR[SPVAP]-1659907897647
GPR[EPVAP]-1659907898713
GPR[EPVS]-1659907898713
========
for(int i=roundingMode;i<roundingMode+nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907898715
GPR[SPVAP]-1659907898715
GPR[EPVAP]-1659907900620
GPR[SPVATF]-1659907900620
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907902317
GPR[EPVS]-1659907902317
========
for(int i=roundingMode;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907902319
GPR[SPVAP]-1659907902319
GPR[EPVAP]-1659907903382
GPR[EPVS]-1659907903382
========
for(int i=0;i<vertices.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907903383
GPR[SPVAP]-1659907903383
GPR[EPVAP]-1659907904444
GPR[EPVS]-1659907904444
========
for(int i=roundingMode;i<begin;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907904446
GPR[SPVAP]-1659907904446
GPR[EPVAP]-1659907905512
GPR[EPVS]-1659907905512
========
for(int i=roundingMode;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907905514
GPR[SPVAP]-1659907905514
GPR[EPVAP]-1659907907401
GPR[SPVATF]-1659907907401
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907909083
GPR[EPVS]-1659907909083
========
for(int i=0;i<endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907909085
GPR[SPVAP]-1659907909085
GPR[EPVAP]-1659907910149
GPR[EPVS]-1659907910149
========
for(int i=0;i<=roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907910150
GPR[SPVAP]-1659907910150
GPR[EPVAP]-1659907912025
GPR[SPVATF]-1659907912025
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907913706
GPR[EPVS]-1659907913706
========
for(int i=roundingMode;i<=roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907913708
GPR[SPVAP]-1659907913708
GPR[EPVAP]-1659907915585
GPR[SPVATF]-1659907915585
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907917274
GPR[EPVS]-1659907917274
========
for(int i=0;i<errors.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907917276
GPR[SPVAP]-1659907917276
GPR[EPVAP]-1659907918325
GPR[EPVS]-1659907918325
========
for(int i=0;i<observed.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907918327
GPR[SPVAP]-1659907918327
GPR[EPVAP]-1659907919382
GPR[EPVS]-1659907919382
========
for(int i=0;i<nCols;i++){
sumExpected+=expected[i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907919383
GPR[SPVAP]-1659907919383
GPR[EPVAP]-1659907920441
GPR[EPVS]-1659907920441
========
for(int i=0;i<observed1.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907920442
GPR[SPVAP]-1659907920442
GPR[EPVAP]-1659907921509
GPR[EPVS]-1659907921509
========
for(int i=0;i<wm.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907921511
GPR[SPVAP]-1659907921511
GPR[EPVAP]-1659907922564
GPR[EPVS]-1659907922564
========
for(int i=0;i<special.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907922566
GPR[SPVAP]-1659907922566
GPR[EPVAP]-1659907923623
GPR[EPVS]-1659907923623
========
++roundingMode;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907923625
GPR[SPVAP]-1659907923625
GPR[EPVAP]-1659907925491
GPR[SPVATF]-1659907925491
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907927169
GPR[EPVS]-1659907927169
========
for(int i=0;i<random.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907927170
GPR[SPVAP]-1659907927170
GPR[EPVAP]-1659907928234
GPR[EPVS]-1659907928234
========
for(int i=roundingMode;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907928236
GPR[SPVAP]-1659907928236
GPR[EPVAP]-1659907929305
GPR[EPVS]-1659907929305
========
for(int i=0;i<polynoms.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907929307
GPR[SPVAP]-1659907929307
GPR[EPVAP]-1659907930352
GPR[EPVS]-1659907930352
========
for(int i=0;i<interpolatedState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907930354
GPR[SPVAP]-1659907930354
GPR[EPVAP]-1659907931399
GPR[EPVS]-1659907931399
========
for(int i=0;i<root.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907931402
GPR[SPVAP]-1659907931402
GPR[EPVAP]-1659907932457
GPR[EPVS]-1659907932457
========
for(int i=0;i<simplex.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907932459
GPR[SPVAP]-1659907932459
GPR[EPVAP]-1659907933504
GPR[EPVS]-1659907933504
========
for(int i=0;i<j;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907933506
GPR[SPVAP]-1659907933506
GPR[EPVAP]-1659907934564
GPR[EPVS]-1659907934564
========
for(int i=0;i<=j;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907934566
GPR[SPVAP]-1659907934566
GPR[EPVAP]-1659907935615
GPR[EPVS]-1659907935615
========
for(int i=0;i<nCols;i++){
lu[max][i]=lu[col][i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907935618
GPR[SPVAP]-1659907935618
GPR[EPVAP]-1659907936677
GPR[EPVS]-1659907936677
========
for(int i=0;i<nCols;i++){
lu[col][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907936679
GPR[SPVAP]-1659907936679
GPR[EPVAP]-1659907937758
GPR[EPVS]-1659907937758
========
for(int i=0;i<nCols;i++){
lu[max][i]=lu[col][i];
lu[col][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907937760
GPR[SPVAP]-1659907937760
GPR[EPVAP]-1659907938815
GPR[EPVS]-1659907938815
========
if((roundingMode+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907938818
GPR[SPVAP]-1659907938818
GPR[EPVAP]-1659907939875
GPR[EPVS]-1659907939875
========
roundingMode=roundingMode;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907939876
GPR[SPVAP]-1659907939876
GPR[EPVAP]-1659907941763
GPR[SPVATF]-1659907941763
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907943464
GPR[EPVS]-1659907943464
========
for(int i=0;i<selectedRows.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907943466
GPR[SPVAP]-1659907943466
GPR[EPVAP]-1659907944533
GPR[EPVS]-1659907944533
========
for(int i=0;i<rows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907944535
GPR[SPVAP]-1659907944535
GPR[EPVAP]-1659907945601
GPR[EPVS]-1659907945601
========
for(int i=roundingMode;i<rows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907945603
GPR[SPVAP]-1659907945603
GPR[EPVAP]-1659907946651
GPR[EPVS]-1659907946651
========
for(int i=0;i<nSing;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907946653
GPR[SPVAP]-1659907946653
GPR[EPVAP]-1659907947710
GPR[EPVS]-1659907947711
========
for(int i=0;i<solvedCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907947713
GPR[SPVAP]-1659907947713
GPR[EPVAP]-1659907948775
GPR[EPVS]-1659907948776
========
for(int i=0;i<randomBytes.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907948778
GPR[SPVAP]-1659907948778
GPR[EPVAP]-1659907949844
GPR[EPVS]-1659907949844
========
for(int i=0;i<hash.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907949846
GPR[SPVAP]-1659907949846
GPR[EPVAP]-1659907950900
GPR[EPVS]-1659907950900
========
for(int i=0;i<(N>>1);i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907950901
GPR[SPVAP]-1659907950901
GPR[EPVAP]-1659907951959
GPR[EPVS]-1659907951959
========
if(i<0){
i=-i-2;
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907951963
GPR[SPVAP]-1659907951963
GPR[EPVAP]-1659907953067
GPR[EPVS]-1659907953067
========
for(int i=0;i<vertexA.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907953070
GPR[SPVAP]-1659907953070
GPR[EPVAP]-1659907954140
GPR[EPVS]-1659907954140
========
for(int i=roundingMode;i<solvedCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907954142
GPR[SPVAP]-1659907954142
GPR[EPVAP]-1659907955229
GPR[EPVS]-1659907955229
========
for(int i=0;i<end;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907955232
GPR[SPVAP]-1659907955232
GPR[EPVAP]-1659907956305
GPR[EPVS]-1659907956305
========
for(int i=0;i<last.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907956307
GPR[SPVAP]-1659907956307
GPR[EPVAP]-1659907957354
GPR[EPVS]-1659907957354
========
for(int i=0;i<nCols;i++){
diff=sample1[i]-sample2[i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907957357
GPR[SPVAP]-1659907957357
GPR[EPVAP]-1659907958401
GPR[EPVS]-1659907958401
========
for(int i=row;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907958403
GPR[SPVAP]-1659907958403
GPR[EPVAP]-1659907959457
GPR[EPVS]-1659907959457
========
for(int i=0;i<nCol;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907959459
GPR[SPVAP]-1659907959459
GPR[EPVAP]-1659907960509
GPR[EPVS]-1659907960509
========
for(int i=0;i<=nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907960512
GPR[SPVAP]-1659907960512
GPR[EPVAP]-1659907962392
GPR[SPVATF]-1659907962392
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907964076
GPR[EPVS]-1659907964076
========
data=new BigDecimal[nCols][1];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907964079
GPR[SPVAP]-1659907964079
GPR[EPVAP]-1659907965952
GPR[SPVATF]-1659907965952
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907967641
GPR[EPVS]-1659907967641
========
data=new BigDecimal[nCols][1];
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907967643
GPR[SPVAP]-1659907967643
GPR[EPVAP]-1659907969525
GPR[SPVATF]-1659907969525
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907971202
GPR[EPVS]-1659907971202
========
for(int i=0;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907971205
GPR[SPVAP]-1659907971205
GPR[EPVAP]-1659907972277
GPR[EPVS]-1659907972277
========
for(int i=0;i<mu;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907972280
GPR[SPVAP]-1659907972280
GPR[EPVAP]-1659907973359
GPR[EPVS]-1659907973359
========
for(int i=roundingMode;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907973367
GPR[SPVAP]-1659907973367
GPR[EPVAP]-1659907974429
GPR[EPVS]-1659907974429
========
for(int i=0;i<rowCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907974433
GPR[SPVAP]-1659907974433
GPR[EPVAP]-1659907975495
GPR[EPVS]-1659907975495
========
System.arraycopy(data[row],0,out,0,this.getColumnDimension());
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907975498
GPR[SPVAP]-1659907975498
GPR[EPVAP]-1659907977388
GPR[SPVATF]-1659907977388
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907979046
GPR[EPVS]-1659907979046
========
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907979048
GPR[SPVAP]-1659907979048
GPR[EPVAP]-1659907980903
GPR[SPVATF]-1659907980903
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907982585
GPR[EPVS]-1659907982585
========
for(int i=0;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907982588
GPR[SPVAP]-1659907982588
GPR[EPVAP]-1659907983648
GPR[EPVS]-1659907983648
========
for(int i=roundingMode;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907983650
GPR[SPVAP]-1659907983650
GPR[EPVAP]-1659907984706
GPR[EPVS]-1659907984706
========
for(int i=row;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907984708
GPR[SPVAP]-1659907984708
GPR[EPVAP]-1659907985790
GPR[EPVS]-1659907985790
========
System.arraycopy(data[row],0,out[0],0,this.getColumnDimension());
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907985794
GPR[SPVAP]-1659907985794
GPR[EPVAP]-1659907987699
GPR[SPVATF]-1659907987699
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907989382
GPR[EPVS]-1659907989382
========
for(int i=roundingMode;i<endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907989385
GPR[SPVAP]-1659907989385
GPR[EPVAP]-1659907990444
GPR[EPVS]-1659907990444
========
for(int i=0;i<=endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907990445
GPR[SPVAP]-1659907990445
GPR[EPVAP]-1659907991501
GPR[EPVS]-1659907991501
========
for(int i=roundingMode;i<=endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907991503
GPR[SPVAP]-1659907991503
GPR[EPVAP]-1659907992577
GPR[EPVS]-1659907992577
========
data=new BigDecimal[roundingMode][nCols];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907992580
GPR[SPVAP]-1659907992580
GPR[EPVAP]-1659907994455
GPR[SPVATF]-1659907994455
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907996175
GPR[EPVS]-1659907996175
========
lu=null;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907996177
GPR[SPVAP]-1659907996177
GPR[EPVAP]-1659907998047
GPR[SPVATF]-1659907998047
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659907999762
GPR[EPVS]-1659907999762
========
data=new BigDecimal[roundingMode][nCols];
lu=null;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659907999764
GPR[SPVAP]-1659907999764
GPR[EPVAP]-1659908001648
GPR[SPVATF]-1659908001648
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908003337
GPR[EPVS]-1659908003337
========
if(i==0){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659908003341
GPR[SPVAP]-1659908003341
GPR[EPVAP]-1659908004393
GPR[EPVS]-1659908004393
========
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908005996
GPR[SPVAP]-1659908005996
GPR[EPVAP]-1659908007876
GPR[SPVATF]-1659908007876
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908009532
GPR[EPVS]-1659908009533
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908009534
GPR[SPVAP]-1659908009534
GPR[EPVAP]-1659908011417
GPR[SPVATF]-1659908011417
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908013102
GPR[EPVS]-1659908013102
========
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908013103
GPR[SPVAP]-1659908013103
GPR[EPVAP]-1659908014968
GPR[SPVATF]-1659908014968
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908016654
GPR[EPVS]-1659908016654
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nSum;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908016657
GPR[SPVAP]-1659908016657
GPR[EPVAP]-1659908017716
GPR[EPVS]-1659908017716
========
for(int row=nRows;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908017718
GPR[SPVAP]-1659908017718
GPR[EPVAP]-1659908019599
GPR[SPVATF]-1659908019599
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908021277
GPR[EPVS]-1659908021277
========
for(int row=nCols;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908021279
GPR[SPVAP]-1659908021279
GPR[EPVAP]-1659908023167
GPR[SPVATF]-1659908023167
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908024852
GPR[EPVS]-1659908024852
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908024854
GPR[SPVAP]-1659908024854
GPR[EPVAP]-1659908026736
GPR[SPVATF]-1659908026736
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908028397
GPR[EPVS]-1659908028397
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908028400
GPR[SPVAP]-1659908028400
GPR[EPVAP]-1659908030256
GPR[SPVATF]-1659908030256
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908031929
GPR[EPVS]-1659908031929
========
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908031931
GPR[SPVAP]-1659908031931
GPR[EPVAP]-1659908033002
GPR[EPVS]-1659908033002
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908033003
GPR[SPVAP]-1659908033003
GPR[EPVAP]-1659908034938
GPR[SPVATF]-1659908034938
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908036600
GPR[EPVS]-1659908036600
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908036601
GPR[SPVAP]-1659908036601
GPR[EPVAP]-1659908037686
GPR[EPVS]-1659908037686
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908037688
GPR[SPVAP]-1659908037688
GPR[EPVAP]-1659908038738
GPR[EPVS]-1659908038738
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908038740
GPR[SPVAP]-1659908038740
GPR[EPVAP]-1659908039801
GPR[EPVS]-1659908039801
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908039804
GPR[SPVAP]-1659908039804
GPR[EPVAP]-1659908041689
GPR[SPVATF]-1659908041689
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908043380
GPR[EPVS]-1659908043380
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908043381
GPR[SPVAP]-1659908043381
GPR[EPVAP]-1659908045240
GPR[SPVATF]-1659908045241
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908046913
GPR[EPVS]-1659908046913
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908046914
GPR[SPVAP]-1659908046914
GPR[EPVAP]-1659908048788
GPR[SPVATF]-1659908048788
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908050453
GPR[EPVS]-1659908050453
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908050454
GPR[SPVAP]-1659908050454
GPR[EPVAP]-1659908052341
GPR[SPVATF]-1659908052341
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908054010
GPR[EPVS]-1659908054010
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908054012
GPR[SPVAP]-1659908054012
GPR[EPVAP]-1659908055076
GPR[EPVS]-1659908055076
========
for(int row=0;row<nRows;row++){
maxColSum=ZERO.max(sum);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908055078
GPR[SPVAP]-1659908055078
GPR[EPVAP]-1659908056153
GPR[EPVS]-1659908056153
========
for(int row=0;row<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908056154
GPR[SPVAP]-1659908056154
GPR[EPVAP]-1659908057212
GPR[EPVS]-1659908057213
========
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908057214
GPR[SPVAP]-1659908057214
GPR[EPVAP]-1659908058285
GPR[EPVS]-1659908058285
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908058287
GPR[SPVAP]-1659908058287
GPR[EPVAP]-1659908059339
GPR[EPVS]-1659908059339
========
for(int row=0;row<ncols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908059341
GPR[SPVAP]-1659908059341
GPR[EPVAP]-1659908060396
GPR[EPVS]-1659908060396
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908060399
GPR[SPVAP]-1659908060399
GPR[EPVAP]-1659908062265
GPR[SPVATF]-1659908062265
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908063946
GPR[EPVS]-1659908063946
========
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908063948
GPR[SPVAP]-1659908063948
GPR[EPVAP]-1659908065015
GPR[EPVS]-1659908065015
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908065017
GPR[SPVAP]-1659908065017
GPR[EPVAP]-1659908066095
GPR[EPVS]-1659908066095
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908066096
GPR[SPVAP]-1659908066096
GPR[EPVAP]-1659908067164
GPR[EPVS]-1659908067164
========
for(int row=0;row<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908067165
GPR[SPVAP]-1659908067166
GPR[EPVAP]-1659908068257
GPR[EPVS]-1659908068257
========
for(int row=0;i<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908068259
GPR[SPVAP]-1659908068259
GPR[EPVAP]-1659908069317
GPR[EPVS]-1659908069317
========
data=new BigDecimal[nRows][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908069319
GPR[SPVAP]-1659908069319
GPR[EPVAP]-1659908071188
GPR[SPVATF]-1659908071188
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908072880
GPR[EPVS]-1659908072880
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908072883
GPR[SPVAP]-1659908072883
GPR[EPVAP]-1659908073935
GPR[EPVS]-1659908073935
========
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908073936
GPR[SPVAP]-1659908073936
GPR[EPVAP]-1659908074991
GPR[EPVS]-1659908074991
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908074994
GPR[SPVAP]-1659908074994
GPR[EPVAP]-1659908076051
GPR[EPVS]-1659908076052
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908076053
GPR[SPVAP]-1659908076053
GPR[EPVAP]-1659908077115
GPR[EPVS]-1659908077115
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908077116
GPR[SPVAP]-1659908077116
GPR[EPVAP]-1659908078167
GPR[EPVS]-1659908078167
========
for(int row=0;row<roundingMode;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908078169
GPR[SPVAP]-1659908078169
GPR[EPVAP]-1659908079227
GPR[EPVS]-1659908079227
========
for(int row=0;row<col;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908079229
GPR[SPVAP]-1659908079229
GPR[EPVAP]-1659908080281
GPR[EPVS]-1659908080281
========
for(int row=0;row<col;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908080282
GPR[SPVAP]-1659908080282
GPR[EPVAP]-1659908081351
GPR[EPVS]-1659908081351
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908081353
GPR[SPVAP]-1659908081353
GPR[EPVAP]-1659908082437
GPR[EPVS]-1659908082437
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908082438
GPR[SPVAP]-1659908082438
GPR[EPVAP]-1659908083496
GPR[EPVS]-1659908083496
========
for(int row=0;row<roundingMode;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908083498
GPR[SPVAP]-1659908083498
GPR[EPVAP]-1659908084551
GPR[EPVS]-1659908084551
========
for(int row=0;row<col;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908084552
GPR[SPVAP]-1659908084552
GPR[EPVAP]-1659908085609
GPR[EPVS]-1659908085609
========
for(int row=0;row<col;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908085611
GPR[SPVAP]-1659908085611
GPR[EPVAP]-1659908086756
GPR[EPVS]-1659908086756
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908086758
GPR[SPVAP]-1659908086758
GPR[EPVAP]-1659908087811
GPR[EPVS]-1659908087811
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908087813
GPR[SPVAP]-1659908087813
GPR[EPVAP]-1659908088876
GPR[EPVS]-1659908088876
========
for(int row=0;row<col;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908088878
GPR[SPVAP]-1659908088878
GPR[EPVAP]-1659908089965
GPR[EPVS]-1659908089965
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908089966
GPR[SPVAP]-1659908089966
GPR[EPVAP]-1659908091036
GPR[EPVS]-1659908091036
========
for(int row=0;row<col;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908091038
GPR[SPVAP]-1659908091038
GPR[EPVAP]-1659908092117
GPR[EPVS]-1659908092117
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908092119
GPR[SPVAP]-1659908092119
GPR[EPVAP]-1659908093181
GPR[EPVS]-1659908093181
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908093183
GPR[SPVAP]-1659908093183
GPR[EPVAP]-1659908095060
GPR[SPVATF]-1659908095060
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908096742
GPR[EPVS]-1659908096742
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908096744
GPR[SPVAP]-1659908096744
GPR[EPVAP]-1659908098598
GPR[SPVATF]-1659908098598
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908100308
GPR[EPVS]-1659908100308
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908100310
GPR[SPVAP]-1659908100310
GPR[EPVAP]-1659908101379
GPR[EPVS]-1659908101379
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908101381
GPR[SPVAP]-1659908101381
GPR[EPVAP]-1659908102448
GPR[EPVS]-1659908102448
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908102450
GPR[SPVAP]-1659908102450
GPR[EPVAP]-1659908103513
GPR[EPVS]-1659908103513
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908103514
GPR[SPVAP]-1659908103514
GPR[EPVAP]-1659908104556
GPR[EPVS]-1659908104556
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908104558
GPR[SPVAP]-1659908104558
GPR[EPVAP]-1659908105617
GPR[EPVS]-1659908105617
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908105619
GPR[SPVAP]-1659908105619
GPR[EPVAP]-1659908106678
GPR[EPVS]-1659908106678
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908106680
GPR[SPVAP]-1659908106680
GPR[EPVAP]-1659908107745
GPR[EPVS]-1659908107745
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908107747
GPR[SPVAP]-1659908107747
GPR[EPVAP]-1659908108798
GPR[EPVS]-1659908108798
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908108799
GPR[SPVAP]-1659908108799
GPR[EPVAP]-1659908109868
GPR[EPVS]-1659908109868
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908109869
GPR[SPVAP]-1659908109869
GPR[EPVAP]-1659908110933
GPR[EPVS]-1659908110933
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908110934
GPR[SPVAP]-1659908110934
GPR[EPVAP]-1659908112005
GPR[EPVS]-1659908112005
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908112007
GPR[SPVAP]-1659908112007
GPR[EPVAP]-1659908113062
GPR[EPVS]-1659908113062
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908113064
GPR[SPVAP]-1659908113064
GPR[EPVAP]-1659908114103
GPR[EPVS]-1659908114103
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908114104
GPR[SPVAP]-1659908114104
GPR[EPVAP]-1659908115161
GPR[EPVS]-1659908115161
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908115162
GPR[SPVAP]-1659908115162
GPR[EPVAP]-1659908116230
GPR[EPVS]-1659908116230
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908116231
GPR[SPVAP]-1659908116231
GPR[EPVAP]-1659908117301
GPR[EPVS]-1659908117301
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908117302
GPR[SPVAP]-1659908117302
GPR[EPVAP]-1659908118357
GPR[EPVS]-1659908118357
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908118358
GPR[SPVAP]-1659908118358
GPR[EPVAP]-1659908119436
GPR[EPVS]-1659908119436
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908119438
GPR[SPVAP]-1659908119438
GPR[EPVAP]-1659908120502
GPR[EPVS]-1659908120502
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908120504
GPR[SPVAP]-1659908120504
GPR[EPVAP]-1659908121563
GPR[EPVS]-1659908121563
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908121564
GPR[SPVAP]-1659908121564
GPR[EPVAP]-1659908122625
GPR[EPVS]-1659908122625
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908122627
GPR[SPVAP]-1659908122627
GPR[EPVAP]-1659908123680
GPR[EPVS]-1659908123680
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908123681
GPR[SPVAP]-1659908123681
GPR[EPVAP]-1659908124729
GPR[EPVS]-1659908124729
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908124730
GPR[SPVAP]-1659908124730
GPR[EPVAP]-1659908125779
GPR[EPVS]-1659908125779
========
i++;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908125781
GPR[SPVAP]-1659908125781
GPR[EPVAP]-1659908126841
GPR[EPVS]-1659908126841
========
for(int row=0;row<nrows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908126843
GPR[SPVAP]-1659908126843
GPR[EPVAP]-1659908127905
GPR[EPVS]-1659908127905
========
for(int row=0;row<values.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908127907
GPR[SPVAP]-1659908127907
GPR[EPVAP]-1659908128957
GPR[EPVS]-1659908128957
========
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908128959
GPR[SPVAP]-1659908128959
GPR[EPVAP]-1659908130017
GPR[EPVS]-1659908130017
========
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908130020
GPR[SPVAP]-1659908130020
GPR[EPVAP]-1659908131080
GPR[EPVS]-1659908131080
========
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908131082
GPR[SPVAP]-1659908131082
GPR[EPVAP]-1659908132134
GPR[EPVS]-1659908132134
========
for(int row=0;row<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908132135
GPR[SPVAP]-1659908132135
GPR[EPVAP]-1659908133187
GPR[EPVS]-1659908133187
========
for(int row=0;row<stages;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908133188
GPR[SPVAP]-1659908133188
GPR[EPVAP]-1659908134252
GPR[EPVS]-1659908134252
========
for(int row=0;row<rank;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908134254
GPR[SPVAP]-1659908134254
GPR[EPVAP]-1659908135312
GPR[EPVS]-1659908135312
========
System.arraycopy(data[roundingMode],0,out,0,this.getColumnDimension());
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908135314
GPR[SPVAP]-1659908135314
GPR[EPVAP]-1659908137198
GPR[SPVATF]-1659908137198
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908138861
GPR[EPVS]-1659908138861
========
data=new double[nRows][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908138862
GPR[SPVAP]-1659908138862
GPR[EPVAP]-1659908139911
GPR[EPVS]-1659908139911
========
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908139912
GPR[SPVAP]-1659908139912
GPR[EPVAP]-1659908141768
GPR[SPVATF]-1659908141768
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908143430
GPR[EPVS]-1659908143430
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908143432
GPR[SPVAP]-1659908143432
GPR[EPVAP]-1659908144519
GPR[EPVS]-1659908144519
========
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908144520
GPR[SPVAP]-1659908144520
GPR[EPVAP]-1659908145575
GPR[EPVS]-1659908145575
========
for(int row=0;row<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908145577
GPR[SPVAP]-1659908145577
GPR[EPVAP]-1659908146642
GPR[EPVS]-1659908146642
========
for(int row=0;i<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908146643
GPR[SPVAP]-1659908146643
GPR[EPVAP]-1659908147748
GPR[EPVS]-1659908147748
========
for(int row=0;row<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908147750
GPR[SPVAP]-1659908147750
GPR[EPVAP]-1659908148818
GPR[EPVS]-1659908148818
========
for(int row=0;row<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908148819
GPR[SPVAP]-1659908148819
GPR[EPVAP]-1659908149884
GPR[EPVS]-1659908149885
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908149887
GPR[SPVAP]-1659908149887
GPR[EPVAP]-1659908150955
GPR[EPVS]-1659908150955
========
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908150957
GPR[SPVAP]-1659908150957
GPR[EPVAP]-1659908152029
GPR[EPVS]-1659908152029
========
for(int row=0;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908152030
GPR[SPVAP]-1659908152030
GPR[EPVAP]-1659908153092
GPR[EPVS]-1659908153092
========
for(int row=0;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908153093
GPR[SPVAP]-1659908153093
GPR[EPVAP]-1659908154135
GPR[EPVS]-1659908154135
========
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908154136
GPR[SPVAP]-1659908154136
GPR[EPVAP]-1659908155191
GPR[EPVS]-1659908155191
========
for(int row=0;row<results.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908155193
GPR[SPVAP]-1659908155193
GPR[EPVAP]-1659908156252
GPR[EPVS]-1659908156252
========
for(int row=0;row<result.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908156254
GPR[SPVAP]-1659908156254
GPR[EPVAP]-1659908157301
GPR[EPVS]-1659908157301
========
for(int row=0;row<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908157303
GPR[SPVAP]-1659908157303
GPR[EPVAP]-1659908158361
GPR[EPVS]-1659908158361
========
for(int row=0;i<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908158362
GPR[SPVAP]-1659908158362
GPR[EPVAP]-1659908159420
GPR[EPVS]-1659908159420
========
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908159422
GPR[SPVAP]-1659908159423
GPR[EPVAP]-1659908160489
GPR[EPVS]-1659908160489
========
for(int row=0;row<c.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908160491
GPR[SPVAP]-1659908160491
GPR[EPVAP]-1659908161551
GPR[EPVS]-1659908161551
========
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908161552
GPR[SPVAP]-1659908161552
GPR[EPVAP]-1659908163427
GPR[SPVATF]-1659908163427
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908165135
GPR[EPVS]-1659908165135
========
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908165137
GPR[SPVAP]-1659908165137
GPR[EPVAP]-1659908166223
GPR[EPVS]-1659908166223
========
for(int row=0;row<coefficients.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908166225
GPR[SPVAP]-1659908166225
GPR[EPVAP]-1659908167293
GPR[EPVS]-1659908167293
========
for(int row=0;i<c.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908167295
GPR[SPVAP]-1659908167295
GPR[EPVAP]-1659908168367
GPR[EPVS]-1659908168367
========
for(int row=0;row<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908168369
GPR[SPVAP]-1659908168369
GPR[EPVAP]-1659908169502
GPR[EPVS]-1659908169502
========
for(int row=nCols;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908169503
GPR[SPVAP]-1659908169503
GPR[EPVAP]-1659908171377
GPR[SPVATF]-1659908171377
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908173078
GPR[EPVS]-1659908173078
========
for(int row=nCols;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908173079
GPR[SPVAP]-1659908173079
GPR[EPVAP]-1659908174133
GPR[EPVS]-1659908174133
========
for(int row=nCols;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908174134
GPR[SPVAP]-1659908174134
GPR[EPVAP]-1659908175189
GPR[EPVS]-1659908175189
========
for(int row=nCols;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908175191
GPR[SPVAP]-1659908175191
GPR[EPVAP]-1659908176249
GPR[EPVS]-1659908176249
========
for(int row=nCols;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908176251
GPR[SPVAP]-1659908176251
GPR[EPVAP]-1659908177353
GPR[EPVS]-1659908177353
========
for(int row=nCols;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908177359
GPR[SPVAP]-1659908177359
GPR[EPVAP]-1659908178490
GPR[EPVS]-1659908178490
========
for(int row=nCols;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908178492
GPR[SPVAP]-1659908178492
GPR[EPVAP]-1659908179560
GPR[EPVS]-1659908179560
========
for(int row=0;row<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908179563
GPR[SPVAP]-1659908179563
GPR[EPVAP]-1659908181458
GPR[SPVATF]-1659908181458
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908183146
GPR[EPVS]-1659908183146
========
for(int row=0;row<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908183148
GPR[SPVAP]-1659908183148
GPR[EPVAP]-1659908185033
GPR[SPVATF]-1659908185033
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908186742
GPR[EPVS]-1659908186742
========
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908186744
GPR[SPVAP]-1659908186744
GPR[EPVAP]-1659908187797
GPR[EPVS]-1659908187797
========
for(int row=0;i<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908187799
GPR[SPVAP]-1659908187799
GPR[EPVAP]-1659908188835
GPR[EPVS]-1659908188835
========
for(int row=0;i<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908188836
GPR[SPVAP]-1659908188836
GPR[EPVAP]-1659908189898
GPR[EPVS]-1659908189898
========
for(int row=0;i<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908189900
GPR[SPVAP]-1659908189900
GPR[EPVAP]-1659908190951
GPR[EPVS]-1659908190951
========
for(int row=0;i<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908190953
GPR[SPVAP]-1659908190953
GPR[EPVAP]-1659908192006
GPR[EPVS]-1659908192006
========
for(int row=0;row<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908192011
GPR[SPVAP]-1659908192011
GPR[EPVAP]-1659908193069
GPR[EPVS]-1659908193069
========
for(int row=0;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908193071
GPR[SPVAP]-1659908193071
GPR[EPVAP]-1659908194933
GPR[SPVATF]-1659908194933
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908196594
GPR[EPVS]-1659908196594
========
for(int row=0;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908196595
GPR[SPVAP]-1659908196595
GPR[EPVAP]-1659908197653
GPR[EPVS]-1659908197653
========
for(int row=nCols;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908197654
GPR[SPVAP]-1659908197654
GPR[EPVAP]-1659908199551
GPR[SPVATF]-1659908199551
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908201246
GPR[EPVS]-1659908201246
========
for(int row=nCols;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908201247
GPR[SPVAP]-1659908201247
GPR[EPVAP]-1659908202295
GPR[EPVS]-1659908202295
========
for(int row=0;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908202297
GPR[SPVAP]-1659908202297
GPR[EPVAP]-1659908203365
GPR[EPVS]-1659908203365
========
for(int row=nCols;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908203367
GPR[SPVAP]-1659908203367
GPR[EPVAP]-1659908204423
GPR[EPVS]-1659908204423
========
for(int row=nCols;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908204425
GPR[SPVAP]-1659908204425
GPR[EPVAP]-1659908205487
GPR[EPVS]-1659908205487
========
for(int row=0;row<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908205489
GPR[SPVAP]-1659908205489
GPR[EPVAP]-1659908206555
GPR[EPVS]-1659908206555
========
for(int row=0;row<value.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908206557
GPR[SPVAP]-1659908206557
GPR[EPVAP]-1659908207616
GPR[EPVS]-1659908207616
========
for(int row=nCols;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908207618
GPR[SPVAP]-1659908207618
GPR[EPVAP]-1659908208677
GPR[EPVS]-1659908208677
========
for(int row=0;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908208678
GPR[SPVAP]-1659908208678
GPR[EPVAP]-1659908209747
GPR[EPVS]-1659908209747
========
for(int row=nCols;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908209749
GPR[SPVAP]-1659908209749
GPR[EPVAP]-1659908210809
GPR[EPVS]-1659908210809
========
for(int row=0;row<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908210811
GPR[SPVAP]-1659908210811
GPR[EPVAP]-1659908211854
GPR[EPVS]-1659908211854
========
for(int row=0;row<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908211856
GPR[SPVAP]-1659908211856
GPR[EPVAP]-1659908212911
GPR[EPVS]-1659908212911
========
for(int row=0;row<vertices.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908212913
GPR[SPVAP]-1659908212913
GPR[EPVAP]-1659908213966
GPR[EPVS]-1659908213966
========
for(int row=0;row<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908213969
GPR[SPVAP]-1659908213969
GPR[EPVAP]-1659908215009
GPR[EPVS]-1659908215009
========
for(int row=0;row<i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908215011
GPR[SPVAP]-1659908215011
GPR[EPVAP]-1659908216073
GPR[EPVS]-1659908216073
========
for(int row=0;row<=i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908216075
GPR[SPVAP]-1659908216075
GPR[EPVAP]-1659908217133
GPR[EPVS]-1659908217133
========
for(int row=0;row<special.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908217135
GPR[SPVAP]-1659908217135
GPR[EPVAP]-1659908218187
GPR[EPVS]-1659908218187
========
for(int row=0;row<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908218188
GPR[SPVAP]-1659908218188
GPR[EPVAP]-1659908220060
GPR[SPVATF]-1659908220060
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908221746
GPR[EPVS]-1659908221746
========
for(int row=0;i<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908221747
GPR[SPVAP]-1659908221747
GPR[EPVAP]-1659908222808
GPR[EPVS]-1659908222808
========
for(int row=0;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908222810
GPR[SPVAP]-1659908222810
GPR[EPVAP]-1659908224698
GPR[SPVATF]-1659908224698
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908226385
GPR[EPVS]-1659908226385
========
for(int row=roundingMode;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908226387
GPR[SPVAP]-1659908226387
GPR[EPVAP]-1659908228262
GPR[SPVATF]-1659908228262
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908229958
GPR[EPVS]-1659908229958
========
for(int row=roundingMode;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908229960
GPR[SPVAP]-1659908229960
GPR[EPVAP]-1659908231021
GPR[EPVS]-1659908231021
========
for(int row=roundingMode;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908231023
GPR[SPVAP]-1659908231023
GPR[EPVAP]-1659908232077
GPR[EPVS]-1659908232077
========
for(int row=0;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908232079
GPR[SPVAP]-1659908232079
GPR[EPVAP]-1659908233137
GPR[EPVS]-1659908233137
========
for(int row=roundingMode;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908233138
GPR[SPVAP]-1659908233138
GPR[EPVAP]-1659908234203
GPR[EPVS]-1659908234203
========
for(int row=roundingMode;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908234205
GPR[SPVAP]-1659908234205
GPR[EPVAP]-1659908235281
GPR[EPVS]-1659908235281
========
for(int row=roundingMode;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908235283
GPR[SPVAP]-1659908235283
GPR[EPVAP]-1659908236338
GPR[EPVS]-1659908236338
========
for(int row=0;row<parameters.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908236341
GPR[SPVAP]-1659908236341
GPR[EPVAP]-1659908237391
GPR[EPVS]-1659908237391
========
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908237392
GPR[SPVAP]-1659908237392
GPR[EPVAP]-1659908238448
GPR[EPVS]-1659908238448
========
for(int row=0;row<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908238450
GPR[SPVAP]-1659908238450
GPR[EPVAP]-1659908239550
GPR[EPVS]-1659908239550
========
for(int row=0;i<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908239551
GPR[SPVAP]-1659908239551
GPR[EPVAP]-1659908240609
GPR[EPVS]-1659908240609
========
for(int row=0;i<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908240610
GPR[SPVAP]-1659908240610
GPR[EPVAP]-1659908241680
GPR[EPVS]-1659908241680
========
for(int row=0;row<random.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908241683
GPR[SPVAP]-1659908241683
GPR[EPVAP]-1659908242736
GPR[EPVS]-1659908242736
========
for(int row=0;row<polynoms.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908242738
GPR[SPVAP]-1659908242738
GPR[EPVAP]-1659908243798
GPR[EPVS]-1659908243798
========
verifyDataSet(data);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908243800
GPR[SPVAP]-1659908243800
GPR[EPVAP]-1659908244860
GPR[EPVS]-1659908244860
========
for(int row=0;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908244862
GPR[SPVAP]-1659908244862
GPR[EPVAP]-1659908245913
GPR[EPVS]-1659908245913
========
for(int row=roundingMode;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908245914
GPR[SPVAP]-1659908245914
GPR[EPVAP]-1659908246961
GPR[EPVS]-1659908246961
========
for(int row=0;i<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908246963
GPR[SPVAP]-1659908246963
GPR[EPVAP]-1659908248031
GPR[EPVS]-1659908248031
========
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908248032
GPR[SPVAP]-1659908248032
GPR[EPVAP]-1659908249094
GPR[EPVS]-1659908249094
========
for(int row=0;i<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908249096
GPR[SPVAP]-1659908249096
GPR[EPVAP]-1659908250145
GPR[EPVS]-1659908250145
========
for(int row=0;row<root.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908250147
GPR[SPVAP]-1659908250147
GPR[EPVAP]-1659908251205
GPR[EPVS]-1659908251205
========
for(int row=0;row<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908251207
GPR[SPVAP]-1659908251207
GPR[EPVAP]-1659908252254
GPR[EPVS]-1659908252254
========
for(int row=0;row<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908252257
GPR[SPVAP]-1659908252257
GPR[EPVAP]-1659908253315
GPR[EPVS]-1659908253315
========
for(int row=0;i<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908253317
GPR[SPVAP]-1659908253317
GPR[EPVAP]-1659908254372
GPR[EPVS]-1659908254373
========
for(int row=0;i<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908254374
GPR[SPVAP]-1659908254375
GPR[EPVAP]-1659908255425
GPR[EPVS]-1659908255425
========
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908255426
GPR[SPVAP]-1659908255426
GPR[EPVAP]-1659908256475
GPR[EPVS]-1659908256475
========
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908256476
GPR[SPVAP]-1659908256476
GPR[EPVAP]-1659908257532
GPR[EPVS]-1659908257532
========
for(int row=0;row<nRows;row++){
BigDecimal sum=binStats;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908257534
GPR[SPVAP]-1659908257534
GPR[EPVAP]-1659908258587
GPR[EPVS]-1659908258587
========
for(int row=0;i<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908258588
GPR[SPVAP]-1659908258588
GPR[EPVAP]-1659908259645
GPR[EPVS]-1659908259645
========
for(int row=0;row<simplex.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908259647
GPR[SPVAP]-1659908259647
GPR[EPVAP]-1659908260689
GPR[EPVS]-1659908260689
========
for(int row=0;i<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908260691
GPR[SPVAP]-1659908260691
GPR[EPVAP]-1659908261750
GPR[EPVS]-1659908261750
========
for(int row=0;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908261752
GPR[SPVAP]-1659908261752
GPR[EPVAP]-1659908262797
GPR[EPVS]-1659908262797
========
for(int row=roundingMode;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908262798
GPR[SPVAP]-1659908262798
GPR[EPVAP]-1659908263871
GPR[EPVS]-1659908263871
========
for(int row=0;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908263873
GPR[SPVAP]-1659908263873
GPR[EPVAP]-1659908264921
GPR[EPVS]-1659908264921
========
for(int row=roundingMode;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908264922
GPR[SPVAP]-1659908264922
GPR[EPVAP]-1659908265969
GPR[EPVS]-1659908265969
========
for(int row=0;i<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908265971
GPR[SPVAP]-1659908265971
GPR[EPVAP]-1659908267046
GPR[EPVS]-1659908267046
========
for(int row=0;i<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908267047
GPR[SPVAP]-1659908267047
GPR[EPVAP]-1659908268106
GPR[EPVS]-1659908268106
========
for(int row=0;row<nRows;row++){
bytes[bytesOut++]=(byte)row;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908268110
GPR[SPVAP]-1659908268110
GPR[EPVAP]-1659908269161
GPR[EPVS]-1659908269161
========
for(int row=0;row<nRows;row++){
if(nCols==bytes.length){
return ;
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908269162
GPR[SPVAP]-1659908269162
GPR[EPVAP]-1659908270245
GPR[EPVS]-1659908270245
========
for(int row=0;row<nRows;row++){
bytes[bytesOut++]=(byte)row;
if(nCols==bytes.length){
return ;
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908270246
GPR[SPVAP]-1659908270246
GPR[EPVAP]-1659908271304
GPR[EPVS]-1659908271304
========
for(int row=0;row<nSing;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908271307
GPR[SPVAP]-1659908271307
GPR[EPVAP]-1659908272357
GPR[EPVS]-1659908272357
========
for(int row=0;row<nRows;row++){
yTmp[i]=y0[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908272359
GPR[SPVAP]-1659908272359
GPR[EPVAP]-1659908273397
GPR[EPVS]-1659908273397
========
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908273398
GPR[SPVAP]-1659908273398
GPR[EPVAP]-1659908274446
GPR[EPVS]-1659908274446
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908274448
GPR[SPVAP]-1659908274448
GPR[EPVAP]-1659908276317
GPR[SPVATF]-1659908276317
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908278001
GPR[EPVS]-1659908278001
========
for(int row=0;row<nRows;row++){
sums[i]+=v[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908278003
GPR[SPVAP]-1659908278003
GPR[EPVAP]-1659908279057
GPR[EPVS]-1659908279057
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908279059
GPR[SPVAP]-1659908279059
GPR[EPVAP]-1659908280117
GPR[EPVS]-1659908280117
========
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908280119
GPR[SPVAP]-1659908280119
GPR[EPVAP]-1659908281983
GPR[SPVATF]-1659908281983
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908283639
GPR[EPVS]-1659908283639
========
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908283640
GPR[SPVAP]-1659908283640
GPR[EPVAP]-1659908284692
GPR[EPVS]-1659908284692
========
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908284694
GPR[SPVAP]-1659908284694
GPR[EPVAP]-1659908285752
GPR[EPVS]-1659908285752
========
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908285753
GPR[SPVAP]-1659908285753
GPR[EPVAP]-1659908286809
GPR[EPVS]-1659908286809
========
for(int row=0;row<nRows;row++){
correlated[i]=mean[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908286810
GPR[SPVAP]-1659908286810
GPR[EPVAP]-1659908287871
GPR[EPVS]-1659908287871
========
for(int row=0;row<randomBytes.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908287872
GPR[SPVAP]-1659908287872
GPR[EPVAP]-1659908288925
GPR[EPVS]-1659908288925
========
for(int row=0;row<hash.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908288927
GPR[SPVAP]-1659908288927
GPR[EPVAP]-1659908289985
GPR[EPVS]-1659908289985
========
nRows=degree()+1;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908289987
GPR[SPVAP]-1659908289987
GPR[EPVAP]-1659908291047
GPR[EPVS]-1659908291047
========
if((nCols+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908291051
GPR[SPVAP]-1659908291051
GPR[EPVAP]-1659908292120
GPR[EPVS]-1659908292120
========
roundingMode=roundingMode;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908292122
GPR[SPVAP]-1659908292122
GPR[EPVAP]-1659908293974
GPR[SPVATF]-1659908293974
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908295638
GPR[EPVS]-1659908295638
========
for(int row=0;row<vertexA.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908295642
GPR[SPVAP]-1659908295642
GPR[EPVAP]-1659908296691
GPR[EPVS]-1659908296691
========
for(int row=0;row<end;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908296693
GPR[SPVAP]-1659908296693
GPR[EPVAP]-1659908297741
GPR[EPVS]-1659908297741
========
for(int row=0;row<nRows;row++){
list[target]=list[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908297743
GPR[SPVAP]-1659908297743
GPR[EPVAP]-1659908298804
GPR[EPVS]-1659908298804
========
for(int row=0;row<nRows;row++){
list[i]=permutation[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908298806
GPR[SPVAP]-1659908298806
GPR[EPVAP]-1659908299859
GPR[EPVS]-1659908299859
========
for(int row=0;row<nRows;row++){
list[target]=list[i];
list[i]=permutation[row];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908299860
GPR[SPVAP]-1659908299860
GPR[EPVAP]-1659908300945
GPR[EPVS]-1659908300945
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908300947
GPR[SPVAP]-1659908300947
GPR[EPVAP]-1659908302013
GPR[EPVS]-1659908302013
========
nRows=x.length;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908302016
GPR[SPVAP]-1659908302016
GPR[EPVAP]-1659908303076
GPR[EPVS]-1659908303076
========
for(int row=0;row<nRows;row++){
f[i]=data[j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908303078
GPR[SPVAP]-1659908303078
GPR[EPVAP]-1659908304132
GPR[EPVS]-1659908304132
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
k=N>>1;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908304133
GPR[SPVAP]-1659908304133
GPR[EPVAP]-1659908305183
GPR[EPVS]-1659908305183
========
for(int row=0;row<nRows;row++){
j+=roundingMode;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908305184
GPR[SPVAP]-1659908305184
GPR[EPVAP]-1659908306228
GPR[EPVS]-1659908306228
========
for(int row=0;row<nRows;row++){
f[i]=data[j];
k=N>>1;
j+=roundingMode;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908306229
GPR[SPVAP]-1659908306229
GPR[EPVAP]-1659908307290
GPR[EPVS]-1659908307290
========
roundingMode=ret*31+nRows;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908307292
GPR[SPVAP]-1659908307292
GPR[EPVAP]-1659908308367
GPR[EPVS]-1659908308367
========
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908308368
GPR[SPVAP]-1659908308368
GPR[EPVAP]-1659908309425
GPR[EPVS]-1659908309425
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908309426
GPR[SPVAP]-1659908309426
GPR[EPVAP]-1659908311298
GPR[SPVATF]-1659908311298
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908312987
GPR[EPVS]-1659908312987
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908312989
GPR[SPVAP]-1659908312989
GPR[EPVAP]-1659908314052
GPR[EPVS]-1659908314052
========
for(int row=0;row<nRows;row++){
r[row][row]=rDiag[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908314054
GPR[SPVAP]-1659908314054
GPR[EPVAP]-1659908315136
GPR[EPVS]-1659908315136
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908315138
GPR[SPVAP]-1659908315138
GPR[EPVAP]-1659908317003
GPR[SPVATF]-1659908317003
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908318685
GPR[EPVS]-1659908318685
========
System.arraycopy(data[roundingMode],0,out[0],0,this.getColumnDimension());
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908318687
GPR[SPVAP]-1659908318687
GPR[EPVAP]-1659908320550
GPR[SPVATF]-1659908320550
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908322231
GPR[EPVS]-1659908322231
========
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908322234
GPR[SPVAP]-1659908322234
GPR[EPVAP]-1659908323290
GPR[EPVS]-1659908323290
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908323292
GPR[SPVAP]-1659908323292
GPR[EPVAP]-1659908324351
GPR[EPVS]-1659908324351
========
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908324353
GPR[SPVAP]-1659908324353
GPR[EPVAP]-1659908325397
GPR[EPVS]-1659908325397
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908325399
GPR[SPVAP]-1659908325399
GPR[EPVAP]-1659908326457
GPR[EPVS]-1659908326457
========
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908326459
GPR[SPVAP]-1659908326459
GPR[EPVAP]-1659908327508
GPR[EPVS]-1659908327508
========
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908327510
GPR[SPVAP]-1659908327510
GPR[EPVAP]-1659908328558
GPR[EPVS]-1659908328558
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908328559
GPR[SPVAP]-1659908328559
GPR[EPVAP]-1659908329621
GPR[EPVS]-1659908329621
========
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908329622
GPR[SPVAP]-1659908329622
GPR[EPVAP]-1659908330671
GPR[EPVS]-1659908330671
========
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908330672
GPR[SPVAP]-1659908330672
GPR[EPVAP]-1659908331729
GPR[EPVS]-1659908331729
========
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908331731
GPR[SPVAP]-1659908331731
GPR[EPVAP]-1659908332789
GPR[EPVS]-1659908332790
========
for(int row=0;row<nRows;row++){
simplex[i]=new PointCostPair(new double[nRows],Double.NaN);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908332793
GPR[SPVAP]-1659908332793
GPR[EPVAP]-1659908333843
GPR[EPVS]-1659908333843
========
for(int row=nCols;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908333845
GPR[SPVAP]-1659908333845
GPR[EPVAP]-1659908334900
GPR[EPVS]-1659908334900
========
for(int row=nCols;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908334901
GPR[SPVAP]-1659908334901
GPR[EPVAP]-1659908335957
GPR[EPVS]-1659908335957
========
for(int row=0;row<nRows;row++){
c[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908335960
GPR[SPVAP]-1659908335960
GPR[EPVAP]-1659908337040
GPR[EPVS]-1659908337040
========
for(int row=0;row<nRows;row++){
d[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908337042
GPR[SPVAP]-1659908337042
GPR[EPVAP]-1659908338097
GPR[EPVS]-1659908338097
========
for(int row=0;row<nRows;row++){
c[i]=y[i];
d[i]=y[i];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908338099
GPR[SPVAP]-1659908338099
GPR[EPVAP]-1659908339160
GPR[EPVS]-1659908339160
========
for(int row=0;row<nRows;row++){
simplex[i]=new PointCostPair(new double[nCols],Double.NaN);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908339162
GPR[SPVAP]-1659908339162
GPR[EPVAP]-1659908340228
GPR[EPVS]-1659908340229
========
if(i<0){
i=-i-2;
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908340232
GPR[SPVAP]-1659908340232
GPR[EPVAP]-1659908341327
GPR[EPVS]-1659908341327
========
if(i>=polynomials.length){
i--;
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908341329
GPR[SPVAP]-1659908341329
GPR[EPVAP]-1659908342359
GPR[EPVS]-1659908342359
========
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908342361
GPR[SPVAP]-1659908342361
GPR[EPVAP]-1659908343418
GPR[EPVS]-1659908343418
========
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908343420
GPR[SPVAP]-1659908343420
GPR[EPVAP]-1659908344481
GPR[EPVS]-1659908344481
========
for(int row=0;row<nRows;row++){
sumImpl[i]=new Sum();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908344483
GPR[SPVAP]-1659908344483
GPR[EPVAP]-1659908345545
GPR[EPVS]-1659908345545
========
for(int row=0;row<nRows;row++){
sumSqImpl[i]=new SumOfSquares();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908345547
GPR[SPVAP]-1659908345547
GPR[EPVAP]-1659908346611
GPR[EPVS]-1659908346611
========
for(int row=0;row<nRows;row++){
maxImpl[i]=new Max();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908346612
GPR[SPVAP]-1659908346612
GPR[EPVAP]-1659908347677
GPR[EPVS]-1659908347677
========
for(int row=0;row<nRows;row++){
sumLogImpl[i]=new SumOfLogs();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908347679
GPR[SPVAP]-1659908347679
GPR[EPVAP]-1659908348743
GPR[EPVS]-1659908348743
========
for(int row=0;row<nRows;row++){
geoMeanImpl[i]=new GeometricMean();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908348744
GPR[SPVAP]-1659908348744
GPR[EPVAP]-1659908349800
GPR[EPVS]-1659908349801
========
for(int row=0;row<nRows;row++){
meanImpl[i]=new Mean();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908349802
GPR[SPVAP]-1659908349802
GPR[EPVAP]-1659908350886
GPR[EPVS]-1659908350886
========
for(int row=0;row<nRows;row++){
sumImpl[i]=new Sum();
sumSqImpl[i]=new SumOfSquares();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908350888
GPR[SPVAP]-1659908350888
GPR[EPVAP]-1659908351952
GPR[EPVS]-1659908351952
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908351954
GPR[SPVAP]-1659908351954
GPR[EPVAP]-1659908353001
GPR[EPVS]-1659908353001
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluateSimplex();
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908353002
GPR[SPVAP]-1659908353002
GPR[EPVAP]-1659908354067
GPR[EPVS]-1659908354067
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
evaluateSimplex();

for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908354068
GPR[SPVAP]-1659908354068
GPR[EPVAP]-1659908355173
GPR[EPVS]-1659908355173
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908355174
GPR[SPVAP]-1659908355174
GPR[EPVAP]-1659908356232
GPR[EPVS]-1659908356232
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[j][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908356233
GPR[SPVAP]-1659908356233
GPR[EPVAP]-1659908357284
GPR[EPVS]-1659908357284
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
jTj[j][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908357285
GPR[SPVAP]-1659908357285
GPR[EPVAP]-1659908358345
GPR[EPVS]-1659908358345
========
for(int row=0;row<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908358347
GPR[SPVAP]-1659908358347
GPR[EPVAP]-1659908359442
GPR[EPVS]-1659908359442
========
for(int row=0;i<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908359445
GPR[SPVAP]-1659908359445
GPR[EPVAP]-1659908360503
GPR[EPVS]-1659908360503
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=nCols*roundingMode+permutation[i];i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908360505
GPR[SPVAP]-1659908360505
GPR[EPVAP]-1659908361567
GPR[EPVS]-1659908361567
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908361569
GPR[SPVAP]-1659908361569
GPR[EPVAP]-1659908362622
GPR[EPVS]-1659908362622
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908362624
GPR[SPVAP]-1659908362624
GPR[EPVAP]-1659908364524
GPR[SPVATF]-1659908364524
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908366175
GPR[EPVS]-1659908366175
========
for(int row=0;row<nRows;row++){
a[i]=divdiff[0];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908366177
GPR[SPVAP]-1659908366177
GPR[EPVAP]-1659908367271
GPR[EPVS]-1659908367271
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908367272
GPR[SPVAP]-1659908367272
GPR[EPVAP]-1659908368336
GPR[EPVS]-1659908368336
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908368338
GPR[SPVAP]-1659908368338
GPR[EPVAP]-1659908369401
GPR[EPVS]-1659908369401
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908369402
GPR[SPVAP]-1659908369402
GPR[EPVAP]-1659908370460
GPR[EPVS]-1659908370460
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908370462
GPR[SPVAP]-1659908370462
GPR[EPVAP]-1659908371514
GPR[EPVS]-1659908371514
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908371515
GPR[SPVAP]-1659908371515
GPR[EPVAP]-1659908372579
GPR[EPVS]-1659908372579
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
dev=((double)observed[i]-expected[i]);
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908372581
GPR[SPVAP]-1659908372581
GPR[EPVAP]-1659908373631
GPR[EPVS]-1659908373631
========
for(int row=0;i<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908373632
GPR[SPVAP]-1659908373632
GPR[EPVAP]-1659908374685
GPR[EPVS]-1659908374685
========
for(int row=0;row<mu;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908374687
GPR[SPVAP]-1659908374687
GPR[EPVAP]-1659908375737
GPR[EPVS]-1659908375737
========
for(int row=0;row<degree();row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908375739
GPR[SPVAP]-1659908375739
GPR[EPVAP]-1659908376800
GPR[EPVS]-1659908376800
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908376802
GPR[SPVAP]-1659908376802
GPR[EPVAP]-1659908378673
GPR[SPVATF]-1659908378673
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908380383
GPR[EPVS]-1659908380383
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908380384
GPR[SPVAP]-1659908380384
GPR[EPVAP]-1659908382274
GPR[SPVATF]-1659908382274
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908383942
GPR[EPVS]-1659908383942
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908383944
GPR[SPVAP]-1659908383944
GPR[EPVAP]-1659908385021
GPR[EPVS]-1659908385021
========
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908385023
GPR[SPVAP]-1659908385023
GPR[EPVAP]-1659908386087
GPR[EPVS]-1659908386087
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908386088
GPR[SPVAP]-1659908386088
GPR[EPVAP]-1659908387147
GPR[EPVS]-1659908387147
========
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908387148
GPR[SPVAP]-1659908387148
GPR[EPVAP]-1659908388220
GPR[EPVS]-1659908388220
========
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908388221
GPR[SPVAP]-1659908388221
GPR[EPVAP]-1659908389293
GPR[EPVS]-1659908389293
========
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908389294
GPR[SPVAP]-1659908389294
GPR[EPVAP]-1659908390347
GPR[EPVS]-1659908390347
========
for(int row=0;i<i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908390350
GPR[SPVAP]-1659908390350
GPR[EPVAP]-1659908391408
GPR[EPVS]-1659908391408
========
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908391410
GPR[SPVAP]-1659908391410
GPR[EPVAP]-1659908393288
GPR[SPVATF]-1659908393288
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908394958
GPR[EPVS]-1659908394958
========
for(int row=0;row<nRows;row++){
divider=x[j]-x[i+j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908394959
GPR[SPVAP]-1659908394959
GPR[EPVAP]-1659908396018
GPR[EPVS]-1659908396018
========
for(int row=0;i<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908396020
GPR[SPVAP]-1659908396020
GPR[EPVAP]-1659908397081
GPR[EPVS]-1659908397081
========
for(int row=0;i<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908397083
GPR[SPVAP]-1659908397083
GPR[EPVAP]-1659908398176
GPR[EPVS]-1659908398176
========
for(int row=0;i<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908398179
GPR[SPVAP]-1659908398179
GPR[EPVAP]-1659908399227
GPR[EPVS]-1659908399227
========
for(int row=0;i<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908399230
GPR[SPVAP]-1659908399230
GPR[EPVAP]-1659908400281
GPR[EPVS]-1659908400281
========
if(fraction.numerator==0){
throw new ArithmeticException("The fraction to divide by must not be zero");
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908400284
GPR[SPVAP]-1659908400284
GPR[EPVAP]-1659908401353
GPR[EPVS]-1659908401353
========
for(int row=0;row<nRows;row++){
v[2][i]=v[0][i]-v[1][i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908401357
GPR[SPVAP]-1659908401357
GPR[EPVAP]-1659908402423
GPR[EPVS]-1659908402423
========
data=new BigDecimal[nCols][nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908402425
GPR[SPVAP]-1659908402425
GPR[EPVAP]-1659908404356
GPR[SPVATF]-1659908404356
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908406056
GPR[EPVS]-1659908406056
========
lu=null;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908406058
GPR[SPVAP]-1659908406058
GPR[EPVAP]-1659908407945
GPR[SPVATF]-1659908407945
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908409655
GPR[EPVS]-1659908409655
========
data=new BigDecimal[nCols][nRows];
lu=null;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908409656
GPR[SPVAP]-1659908409656
GPR[EPVAP]-1659908411527
GPR[SPVATF]-1659908411527
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908413186
GPR[EPVS]-1659908413186
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908415071
GPR[SPVAP]-1659908415071
GPR[EPVAP]-1659908416939
GPR[SPVATF]-1659908416939
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908418586
GPR[SPVATR]-1659908418587
TESTING : math_98
GPR[EPVATR]-1659908424792
GPR[EPVS]-1659908424792
GPR[PF]-1659908424792
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908424801
GPR[SPVAP]-1659908424801
GPR[EPVAP]-1659908426681
GPR[SPVATF]-1659908426681
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908428382
GPR[EPVS]-1659908428382
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908428384
GPR[SPVAP]-1659908428384
GPR[EPVAP]-1659908430266
GPR[SPVATF]-1659908430266
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908431968
GPR[EPVS]-1659908431968
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908431970
GPR[SPVAP]-1659908431970
GPR[EPVAP]-1659908433853
GPR[SPVATF]-1659908433853
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908435521
GPR[EPVS]-1659908435521
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908435522
GPR[SPVAP]-1659908435523
GPR[EPVAP]-1659908437377
GPR[SPVATF]-1659908437377
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908439038
GPR[EPVS]-1659908439038
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nRows;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908439042
GPR[SPVAP]-1659908439042
GPR[EPVAP]-1659908440900
GPR[SPVATF]-1659908440900
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908442561
GPR[EPVS]-1659908442561
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908442563
GPR[SPVAP]-1659908442563
GPR[EPVAP]-1659908443629
GPR[EPVS]-1659908443629
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908443631
GPR[SPVAP]-1659908443631
GPR[EPVAP]-1659908444684
GPR[EPVS]-1659908444684
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=row;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908444686
GPR[SPVAP]-1659908444686
GPR[EPVAP]-1659908445779
GPR[EPVS]-1659908445779
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
maxColSum=ZERO.max(sum);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908445780
GPR[SPVAP]-1659908445780
GPR[EPVAP]-1659908446834
GPR[EPVS]-1659908446834
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908446835
GPR[SPVAP]-1659908446835
GPR[EPVAP]-1659908447895
GPR[EPVS]-1659908447895
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908447897
GPR[SPVAP]-1659908447897
GPR[EPVAP]-1659908448957
GPR[EPVS]-1659908448957
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908448959
GPR[SPVAP]-1659908448959
GPR[EPVAP]-1659908450014
GPR[EPVS]-1659908450014
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908450015
GPR[SPVAP]-1659908450015
GPR[EPVAP]-1659908451065
GPR[EPVS]-1659908451065
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908451066
GPR[SPVAP]-1659908451066
GPR[EPVAP]-1659908452116
GPR[EPVS]-1659908452116
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908452126
GPR[SPVAP]-1659908452126
GPR[EPVAP]-1659908453185
GPR[EPVS]-1659908453185
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908453186
GPR[SPVAP]-1659908453186
GPR[EPVAP]-1659908454256
GPR[EPVS]-1659908454256
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908454258
GPR[SPVAP]-1659908454258
GPR[EPVAP]-1659908456150
GPR[SPVATF]-1659908456150
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908457818
GPR[EPVS]-1659908457818
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908457820
GPR[SPVAP]-1659908457820
GPR[EPVAP]-1659908459685
GPR[SPVATF]-1659908459685
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908461343
GPR[EPVS]-1659908461343
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908461344
GPR[SPVAP]-1659908461344
GPR[EPVAP]-1659908463265
GPR[SPVATF]-1659908463265
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908464944
GPR[EPVS]-1659908464944
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908464945
GPR[SPVAP]-1659908464945
GPR[EPVAP]-1659908466024
GPR[EPVS]-1659908466024
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908466026
GPR[SPVAP]-1659908466026
GPR[EPVAP]-1659908467887
GPR[SPVATF]-1659908467887
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908469546
GPR[EPVS]-1659908469546
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908469548
GPR[SPVAP]-1659908469548
GPR[EPVAP]-1659908470601
GPR[EPVS]-1659908470601
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(sum.abs().compareTo(ZERO)==1){
largest=sum.abs();
max=row;
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908470603
GPR[SPVAP]-1659908470603
GPR[EPVAP]-1659908471662
GPR[EPVS]-1659908471662
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
if(sum.abs().compareTo(ZERO)==1){
largest=sum.abs();
max=row;
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908471664
GPR[SPVAP]-1659908471664
GPR[EPVAP]-1659908472721
GPR[EPVS]-1659908472721
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908472723
GPR[SPVAP]-1659908472723
GPR[EPVAP]-1659908474584
GPR[SPVATF]-1659908474584
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908476245
GPR[EPVS]-1659908476245
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908476246
GPR[SPVAP]-1659908476246
GPR[EPVAP]-1659908478124
GPR[SPVATF]-1659908478124
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908479792
GPR[EPVS]-1659908479792
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908479794
GPR[SPVAP]-1659908479794
GPR[EPVAP]-1659908481657
GPR[SPVATF]-1659908481657
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908483323
GPR[EPVS]-1659908483323
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908483325
GPR[SPVAP]-1659908483325
GPR[EPVAP]-1659908484376
GPR[EPVS]-1659908484376
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908484377
GPR[SPVAP]-1659908484377
GPR[EPVAP]-1659908485455
GPR[EPVS]-1659908485455
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908485457
GPR[SPVAP]-1659908485457
GPR[EPVAP]-1659908486526
GPR[EPVS]-1659908486526
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908486527
GPR[SPVAP]-1659908486527
GPR[EPVAP]-1659908487633
GPR[EPVS]-1659908487633
========
System.arraycopy(data[roundingMode],0,out,0,this.getColumnDimension());
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908487635
GPR[SPVAP]-1659908487635
GPR[EPVAP]-1659908488695
GPR[EPVS]-1659908488695
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<ncols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908488697
GPR[SPVAP]-1659908488697
GPR[EPVAP]-1659908489761
GPR[EPVS]-1659908489761
========
G2=G.multiply(G);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908489763
GPR[SPVAP]-1659908489763
GPR[EPVAP]-1659908490834
GPR[EPVS]-1659908490834
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908490836
GPR[SPVAP]-1659908490836
GPR[EPVAP]-1659908491930
GPR[EPVS]-1659908491930
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908491932
GPR[SPVAP]-1659908491932
GPR[EPVAP]-1659908493011
GPR[EPVS]-1659908493011
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908493013
GPR[SPVAP]-1659908493013
GPR[EPVAP]-1659908494079
GPR[EPVS]-1659908494079
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
verifyDataSet(data);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908494081
GPR[SPVAP]-1659908494081
GPR[EPVAP]-1659908495140
GPR[EPVS]-1659908495140
========
if(N==2){
new Complex[N][0]=data[0].add(data[1]);
f[1]=data[0].subtract(data[1]);
return f;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908495142
GPR[SPVAP]-1659908495142
GPR[EPVAP]-1659908496216
GPR[EPVS]-1659908496216
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nRows;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908496218
GPR[SPVAP]-1659908496218
GPR[EPVAP]-1659908497278
GPR[EPVS]-1659908497278
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908497280
GPR[SPVAP]-1659908497280
GPR[EPVAP]-1659908498331
GPR[EPVS]-1659908498331
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nRows;
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908498333
GPR[SPVAP]-1659908498333
GPR[EPVAP]-1659908499423
GPR[EPVS]-1659908499423
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908499424
GPR[SPVAP]-1659908499424
GPR[EPVAP]-1659908501294
GPR[SPVATF]-1659908501294
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908502981
GPR[EPVS]-1659908502981
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908502982
GPR[SPVAP]-1659908502982
GPR[EPVAP]-1659908504858
GPR[SPVATF]-1659908504858
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908506514
GPR[EPVS]-1659908506514
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908506516
GPR[SPVAP]-1659908506516
GPR[EPVAP]-1659908507579
GPR[EPVS]-1659908507579
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nCols][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908507581
GPR[SPVAP]-1659908507581
GPR[EPVAP]-1659908509453
GPR[SPVATF]-1659908509453
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908511099
GPR[EPVS]-1659908511099
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nCols][1];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908511100
GPR[SPVAP]-1659908511100
GPR[EPVAP]-1659908513010
GPR[SPVATF]-1659908513010
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908514675
GPR[EPVS]-1659908514675
========
System.arraycopy(data[roundingMode],0,out[0],0,this.getColumnDimension());
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908514677
GPR[SPVAP]-1659908514677
GPR[EPVAP]-1659908515740
GPR[EPVS]-1659908515740
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908515742
GPR[SPVAP]-1659908515742
GPR[EPVAP]-1659908517609
GPR[SPVATF]-1659908517609
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908519282
GPR[SPVATR]-1659908519282
TESTING : math_98
GPR[EPVATR]-1659908525461
GPR[EPVS]-1659908525461
GPR[PF]-1659908525461
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908525472
GPR[SPVAP]-1659908525472
GPR[EPVAP]-1659908527349
GPR[SPVATF]-1659908527349
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908529029
GPR[EPVS]-1659908529029
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908529031
GPR[SPVAP]-1659908529031
GPR[EPVAP]-1659908530900
GPR[SPVATF]-1659908530900
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908532564
GPR[EPVS]-1659908532564
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908532566
GPR[SPVAP]-1659908532566
GPR[EPVAP]-1659908533615
GPR[EPVS]-1659908533615
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908533616
GPR[SPVAP]-1659908533616
GPR[EPVAP]-1659908534672
GPR[EPVS]-1659908534672
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908534673
GPR[SPVAP]-1659908534673
GPR[EPVAP]-1659908535731
GPR[EPVS]-1659908535731
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908535733
GPR[SPVAP]-1659908535733
GPR[EPVAP]-1659908536790
GPR[EPVS]-1659908536790
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908536792
GPR[SPVAP]-1659908536792
GPR[EPVAP]-1659908538809
GPR[SPVATF]-1659908538809
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908540513
GPR[EPVS]-1659908540513
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<values.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908540522
GPR[SPVAP]-1659908540522
GPR[EPVAP]-1659908541572
GPR[EPVS]-1659908541572
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908541574
GPR[SPVAP]-1659908541574
GPR[EPVAP]-1659908542625
GPR[EPVS]-1659908542625
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908542627
GPR[SPVAP]-1659908542627
GPR[EPVAP]-1659908543689
GPR[EPVS]-1659908543689
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908543691
GPR[SPVAP]-1659908543691
GPR[EPVAP]-1659908544742
GPR[EPVS]-1659908544742
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<stages;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908544744
GPR[SPVAP]-1659908544744
GPR[EPVAP]-1659908545793
GPR[EPVS]-1659908545793
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908545795
GPR[SPVAP]-1659908545795
GPR[EPVAP]-1659908546859
GPR[EPVS]-1659908546859
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908546860
GPR[SPVAP]-1659908546860
GPR[EPVAP]-1659908547911
GPR[EPVS]-1659908547911
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908547913
GPR[SPVAP]-1659908547913
GPR[EPVAP]-1659908548971
GPR[EPVS]-1659908548971
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908548972
GPR[SPVAP]-1659908548972
GPR[EPVAP]-1659908550025
GPR[EPVS]-1659908550025
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908550027
GPR[SPVAP]-1659908550027
GPR[EPVAP]-1659908551085
GPR[EPVS]-1659908551085
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908551086
GPR[SPVAP]-1659908551086
GPR[EPVAP]-1659908552150
GPR[EPVS]-1659908552150
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908552152
GPR[SPVAP]-1659908552152
GPR[EPVAP]-1659908553214
GPR[EPVS]-1659908553214
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908553216
GPR[SPVAP]-1659908553216
GPR[EPVAP]-1659908554294
GPR[EPVS]-1659908554295
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908554296
GPR[SPVAP]-1659908554296
GPR[EPVAP]-1659908555353
GPR[EPVS]-1659908555353
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908555355
GPR[SPVAP]-1659908555355
GPR[EPVAP]-1659908556399
GPR[EPVS]-1659908556399
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908556401
GPR[SPVAP]-1659908556401
GPR[EPVAP]-1659908557446
GPR[EPVS]-1659908557446
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908557447
GPR[SPVAP]-1659908557447
GPR[EPVAP]-1659908558511
GPR[EPVS]-1659908558511
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908558513
GPR[SPVAP]-1659908558513
GPR[EPVAP]-1659908559579
GPR[EPVS]-1659908559579
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908559580
GPR[SPVAP]-1659908559580
GPR[EPVAP]-1659908560630
GPR[EPVS]-1659908560630
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908560632
GPR[SPVAP]-1659908560632
GPR[EPVAP]-1659908561690
GPR[EPVS]-1659908561690
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908561692
GPR[SPVAP]-1659908561692
GPR[EPVAP]-1659908562743
GPR[EPVS]-1659908562743
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908562745
GPR[SPVAP]-1659908562745
GPR[EPVAP]-1659908563803
GPR[EPVS]-1659908563803
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908563804
GPR[SPVAP]-1659908563804
GPR[EPVAP]-1659908564861
GPR[EPVS]-1659908564861
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908564863
GPR[SPVAP]-1659908564863
GPR[EPVAP]-1659908565939
GPR[EPVS]-1659908565939
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908565941
GPR[SPVAP]-1659908565941
GPR[EPVAP]-1659908566993
GPR[EPVS]-1659908566993
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908566994
GPR[SPVAP]-1659908566994
GPR[EPVAP]-1659908568060
GPR[EPVS]-1659908568060
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908568061
GPR[SPVAP]-1659908568061
GPR[EPVAP]-1659908569117
GPR[EPVS]-1659908569117
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908569118
GPR[SPVAP]-1659908569118
GPR[EPVAP]-1659908570194
GPR[EPVS]-1659908570194
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908570196
GPR[SPVAP]-1659908570196
GPR[EPVAP]-1659908571250
GPR[EPVS]-1659908571250
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908571252
GPR[SPVAP]-1659908571252
GPR[EPVAP]-1659908572325
GPR[EPVS]-1659908572325
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908572326
GPR[SPVAP]-1659908572326
GPR[EPVAP]-1659908573386
GPR[EPVS]-1659908573386
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908573388
GPR[SPVAP]-1659908573388
GPR[EPVAP]-1659908574457
GPR[EPVS]-1659908574457
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908574458
GPR[SPVAP]-1659908574458
GPR[EPVAP]-1659908575519
GPR[EPVS]-1659908575519
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908575520
GPR[SPVAP]-1659908575520
GPR[EPVAP]-1659908576587
GPR[EPVS]-1659908576587
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908576588
GPR[SPVAP]-1659908576588
GPR[EPVAP]-1659908577647
GPR[EPVS]-1659908577647
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908577649
GPR[SPVAP]-1659908577649
GPR[EPVAP]-1659908578726
GPR[EPVS]-1659908578726
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908578728
GPR[SPVAP]-1659908578728
GPR[EPVAP]-1659908579804
GPR[EPVS]-1659908579804
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908579805
GPR[SPVAP]-1659908579805
GPR[EPVAP]-1659908580876
GPR[EPVS]-1659908580876
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908580878
GPR[SPVAP]-1659908580878
GPR[EPVAP]-1659908581947
GPR[EPVS]-1659908581947
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908581949
GPR[SPVAP]-1659908581949
GPR[EPVAP]-1659908583027
GPR[EPVS]-1659908583027
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908583029
GPR[SPVAP]-1659908583029
GPR[EPVAP]-1659908584082
GPR[EPVS]-1659908584082
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908584084
GPR[SPVAP]-1659908584084
GPR[EPVAP]-1659908585156
GPR[EPVS]-1659908585156
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908585158
GPR[SPVAP]-1659908585158
GPR[EPVAP]-1659908586234
GPR[EPVS]-1659908586234
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908586235
GPR[SPVAP]-1659908586235
GPR[EPVAP]-1659908587301
GPR[EPVS]-1659908587301
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908587303
GPR[SPVAP]-1659908587303
GPR[EPVAP]-1659908588373
GPR[EPVS]-1659908588373
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908588374
GPR[SPVAP]-1659908588374
GPR[EPVAP]-1659908590241
GPR[SPVATF]-1659908590241
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908591914
GPR[EPVS]-1659908591914
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908591915
GPR[SPVAP]-1659908591915
GPR[EPVAP]-1659908593795
GPR[SPVATF]-1659908593795
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908595497
GPR[EPVS]-1659908595497
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908595499
GPR[SPVAP]-1659908595499
GPR[EPVAP]-1659908596573
GPR[EPVS]-1659908596573
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908596575
GPR[SPVAP]-1659908596575
GPR[EPVAP]-1659908597624
GPR[EPVS]-1659908597624
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908597626
GPR[SPVAP]-1659908597626
GPR[EPVAP]-1659908599572
GPR[SPVATF]-1659908599572
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908601246
GPR[EPVS]-1659908601246
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908601247
GPR[SPVAP]-1659908601247
GPR[EPVAP]-1659908602297
GPR[EPVS]-1659908602297
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908602299
GPR[SPVAP]-1659908602299
GPR[EPVAP]-1659908603372
GPR[EPVS]-1659908603372
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908603374
GPR[SPVAP]-1659908603374
GPR[EPVAP]-1659908604427
GPR[EPVS]-1659908604427
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908604428
GPR[SPVAP]-1659908604428
GPR[EPVAP]-1659908605493
GPR[EPVS]-1659908605493
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908605495
GPR[SPVAP]-1659908605495
GPR[EPVAP]-1659908606563
GPR[EPVS]-1659908606563
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new double[nCols][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908606565
GPR[SPVAP]-1659908606565
GPR[EPVAP]-1659908607621
GPR[EPVS]-1659908607621
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908607622
GPR[SPVAP]-1659908607622
GPR[EPVAP]-1659908609485
GPR[SPVATF]-1659908609485
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908611159
GPR[EPVS]-1659908611159
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908611161
GPR[SPVAP]-1659908611161
GPR[EPVAP]-1659908612221
GPR[EPVS]-1659908612221
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<coefficients.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908612222
GPR[SPVAP]-1659908612222
GPR[EPVAP]-1659908613303
GPR[EPVS]-1659908613303
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908613304
GPR[SPVAP]-1659908613304
GPR[EPVAP]-1659908614351
GPR[EPVS]-1659908614351
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nrows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908614352
GPR[SPVAP]-1659908614352
GPR[EPVAP]-1659908615417
GPR[EPVS]-1659908615417
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<vertices.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908615418
GPR[SPVAP]-1659908615418
GPR[EPVAP]-1659908616485
GPR[EPVS]-1659908616485
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908616487
GPR[SPVAP]-1659908616487
GPR[EPVAP]-1659908617544
GPR[EPVS]-1659908617544
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<value.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908617546
GPR[SPVAP]-1659908617546
GPR[EPVAP]-1659908618603
GPR[EPVS]-1659908618603
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[stats.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908618605
GPR[SPVAP]-1659908618605
GPR[EPVAP]-1659908619665
GPR[EPVS]-1659908619665
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[means.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908619666
GPR[SPVAP]-1659908619666
GPR[EPVAP]-1659908620727
GPR[EPVS]-1659908620727
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908620729
GPR[SPVAP]-1659908620729
GPR[EPVAP]-1659908621797
GPR[EPVS]-1659908621797
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<parameters.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908621798
GPR[SPVAP]-1659908621798
GPR[EPVAP]-1659908622852
GPR[EPVS]-1659908622852
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908622854
GPR[SPVAP]-1659908622854
GPR[EPVAP]-1659908623905
GPR[EPVS]-1659908623905
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908623907
GPR[SPVAP]-1659908623907
GPR[EPVAP]-1659908624963
GPR[EPVS]-1659908624963
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908624965
GPR[SPVAP]-1659908624965
GPR[EPVAP]-1659908626821
GPR[SPVATF]-1659908626821
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908628489
GPR[EPVS]-1659908628489
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908628491
GPR[SPVAP]-1659908628491
GPR[EPVAP]-1659908629538
GPR[EPVS]-1659908629538
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<special.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908629539
GPR[SPVAP]-1659908629539
GPR[EPVAP]-1659908630609
GPR[EPVS]-1659908630609
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<polynoms.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908630611
GPR[SPVAP]-1659908630611
GPR[EPVAP]-1659908631667
GPR[EPVS]-1659908631667
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908631669
GPR[SPVAP]-1659908631669
GPR[EPVAP]-1659908632728
GPR[EPVS]-1659908632728
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<root.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908632730
GPR[SPVAP]-1659908632730
GPR[EPVAP]-1659908633785
GPR[EPVS]-1659908633785
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908633787
GPR[SPVAP]-1659908633787
GPR[EPVAP]-1659908634837
GPR[EPVS]-1659908634837
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908634838
GPR[SPVAP]-1659908634838
GPR[EPVAP]-1659908636769
GPR[SPVATF]-1659908636769
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908638422
GPR[EPVS]-1659908638422
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908638423
GPR[SPVAP]-1659908638423
GPR[EPVAP]-1659908639471
GPR[EPVS]-1659908639471
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908639472
GPR[SPVAP]-1659908639472
GPR[EPVAP]-1659908640531
GPR[EPVS]-1659908640531
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908640532
GPR[SPVAP]-1659908640532
GPR[EPVAP]-1659908641591
GPR[EPVS]-1659908641591
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908641594
GPR[SPVAP]-1659908641594
GPR[EPVAP]-1659908642653
GPR[EPVS]-1659908642653
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=binStats;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908642654
GPR[SPVAP]-1659908642654
GPR[EPVAP]-1659908643717
GPR[EPVS]-1659908643717
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908643719
GPR[SPVAP]-1659908643719
GPR[EPVAP]-1659908644775
GPR[EPVS]-1659908644775
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908644777
GPR[SPVAP]-1659908644777
GPR[EPVAP]-1659908645829
GPR[EPVS]-1659908645829
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908645831
GPR[SPVAP]-1659908645831
GPR[EPVAP]-1659908646892
GPR[EPVS]-1659908646892
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908646893
GPR[SPVAP]-1659908646893
GPR[EPVAP]-1659908647951
GPR[EPVS]-1659908647951
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908647952
GPR[SPVAP]-1659908647952
GPR[EPVAP]-1659908649017
GPR[EPVS]-1659908649017
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908649019
GPR[SPVAP]-1659908649019
GPR[EPVAP]-1659908650064
GPR[EPVS]-1659908650064
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908650066
GPR[SPVAP]-1659908650066
GPR[EPVAP]-1659908651126
GPR[EPVS]-1659908651126
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<simplex.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908651128
GPR[SPVAP]-1659908651128
GPR[EPVAP]-1659908652189
GPR[EPVS]-1659908652189
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908652190
GPR[SPVAP]-1659908652190
GPR[EPVAP]-1659908653249
GPR[EPVS]-1659908653249
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908653251
GPR[SPVAP]-1659908653251
GPR[EPVAP]-1659908654306
GPR[EPVS]-1659908654306
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908654308
GPR[SPVAP]-1659908654308
GPR[EPVAP]-1659908655368
GPR[EPVS]-1659908655368
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[coefficients.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908655370
GPR[SPVAP]-1659908655370
GPR[EPVAP]-1659908656425
GPR[EPVS]-1659908656425
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<kMax;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908656427
GPR[SPVAP]-1659908656427
GPR[EPVAP]-1659908657486
GPR[EPVS]-1659908657486
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908657487
GPR[SPVAP]-1659908657487
GPR[EPVAP]-1659908658568
GPR[EPVS]-1659908658568
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908658569
GPR[SPVAP]-1659908658569
GPR[EPVAP]-1659908659625
GPR[EPVS]-1659908659625
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
yDotK[k]=new double[currentState.length];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908659627
GPR[SPVAP]-1659908659627
GPR[EPVAP]-1659908660679
GPR[EPVS]-1659908660679
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908660680
GPR[SPVAP]-1659908660680
GPR[EPVAP]-1659908662582
GPR[SPVATF]-1659908662582
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908664261
GPR[EPVS]-1659908664261
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908664263
GPR[SPVAP]-1659908664263
GPR[EPVAP]-1659908666125
GPR[SPVATF]-1659908666125
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908667784
GPR[EPVS]-1659908667784
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908667786
GPR[SPVAP]-1659908667786
GPR[EPVAP]-1659908668841
GPR[EPVS]-1659908668841
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908668842
GPR[SPVAP]-1659908668842
GPR[EPVAP]-1659908669932
GPR[EPVS]-1659908669932
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908669934
GPR[SPVAP]-1659908669934
GPR[EPVAP]-1659908670984
GPR[EPVS]-1659908670984
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908670986
GPR[SPVAP]-1659908670986
GPR[EPVAP]-1659908672031
GPR[EPVS]-1659908672031
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908672033
GPR[SPVAP]-1659908672033
GPR[EPVAP]-1659908673096
GPR[EPVS]-1659908673096
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908673097
GPR[SPVAP]-1659908673097
GPR[EPVAP]-1659908674139
GPR[EPVS]-1659908674139
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908674141
GPR[SPVAP]-1659908674141
GPR[EPVAP]-1659908676028
GPR[SPVATF]-1659908676028
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908677693
GPR[EPVS]-1659908677693
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908677695
GPR[SPVAP]-1659908677695
GPR[EPVAP]-1659908679553
GPR[SPVATF]-1659908679553
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908681214
GPR[EPVS]-1659908681214
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908681215
GPR[SPVAP]-1659908681215
GPR[EPVAP]-1659908682305
GPR[EPVS]-1659908682305
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908682306
GPR[SPVAP]-1659908682306
GPR[EPVAP]-1659908683352
GPR[EPVS]-1659908683352
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908683353
GPR[SPVAP]-1659908683353
GPR[EPVAP]-1659908684411
GPR[EPVS]-1659908684411
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908684412
GPR[SPVAP]-1659908684412
GPR[EPVAP]-1659908685479
GPR[EPVS]-1659908685479
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908685480
GPR[SPVAP]-1659908685480
GPR[EPVAP]-1659908686540
GPR[EPVS]-1659908686540
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908686543
GPR[SPVAP]-1659908686543
GPR[EPVAP]-1659908687595
GPR[EPVS]-1659908687595
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<yDotK.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908687597
GPR[SPVAP]-1659908687597
GPR[EPVAP]-1659908688682
GPR[EPVS]-1659908688682
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908688684
GPR[SPVAP]-1659908688684
GPR[EPVAP]-1659908689731
GPR[EPVS]-1659908689731
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
out.writeInt(yDotK.length);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908689733
GPR[SPVAP]-1659908689733
GPR[EPVAP]-1659908690796
GPR[EPVS]-1659908690796
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908690798
GPR[SPVAP]-1659908690798
GPR[EPVAP]-1659908691873
GPR[EPVS]-1659908691873
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908691876
GPR[SPVAP]-1659908691876
GPR[EPVAP]-1659908692935
GPR[EPVS]-1659908692935
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908692937
GPR[SPVAP]-1659908692937
GPR[EPVAP]-1659908694003
GPR[EPVS]-1659908694003
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908694005
GPR[SPVAP]-1659908694005
GPR[EPVAP]-1659908695891
GPR[SPVATF]-1659908695891
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908697557
GPR[EPVS]-1659908697557
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908697558
GPR[SPVAP]-1659908697558
GPR[EPVAP]-1659908698633
GPR[EPVS]-1659908698633
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908698634
GPR[SPVAP]-1659908698634
GPR[EPVAP]-1659908700485
GPR[SPVATF]-1659908700485
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908702151
GPR[EPVS]-1659908702151
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908702152
GPR[SPVAP]-1659908702152
GPR[EPVAP]-1659908703223
GPR[EPVS]-1659908703223
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908703225
GPR[SPVAP]-1659908703225
GPR[EPVAP]-1659908704277
GPR[EPVS]-1659908704277
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908704278
GPR[SPVAP]-1659908704278
GPR[EPVAP]-1659908705328
GPR[EPVS]-1659908705328
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908705330
GPR[SPVAP]-1659908705330
GPR[EPVAP]-1659908706393
GPR[EPVS]-1659908706393
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908706395
GPR[SPVAP]-1659908706395
GPR[EPVAP]-1659908707455
GPR[EPVS]-1659908707455
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908707457
GPR[SPVAP]-1659908707457
GPR[EPVAP]-1659908708551
GPR[EPVS]-1659908708552
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<randomBytes.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908708554
GPR[SPVAP]-1659908708554
GPR[EPVAP]-1659908709609
GPR[EPVS]-1659908709609
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<hash.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908709611
GPR[SPVAP]-1659908709611
GPR[EPVAP]-1659908710667
GPR[EPVS]-1659908710667
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908710669
GPR[SPVAP]-1659908710669
GPR[EPVAP]-1659908711739
GPR[EPVS]-1659908711739
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908711741
GPR[SPVAP]-1659908711741
GPR[EPVAP]-1659908712829
GPR[EPVS]-1659908712829
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908712832
GPR[SPVAP]-1659908712832
GPR[EPVAP]-1659908713892
GPR[EPVS]-1659908713892
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908713894
GPR[SPVAP]-1659908713894
GPR[EPVAP]-1659908714943
GPR[EPVS]-1659908714943
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908714945
GPR[SPVAP]-1659908714945
GPR[EPVAP]-1659908716007
GPR[EPVS]-1659908716007
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
Arrays.fill(out,BigMatrixImpl.ZERO);
out[row]=sum;
}

========
GPR[SPVS]-1659908716009
GPR[SPVAP]-1659908716009
GPR[EPVAP]-1659908717069
GPR[EPVS]-1659908717069
========
if((roundingMode+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908717071
GPR[SPVAP]-1659908717071
GPR[EPVAP]-1659908718125
GPR[EPVS]-1659908718125
========
nCols=roundingMode;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908718126
GPR[SPVAP]-1659908718126
GPR[EPVAP]-1659908719182
GPR[EPVS]-1659908719182
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedRows.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908719184
GPR[SPVAP]-1659908719184
GPR[EPVAP]-1659908720230
GPR[EPVS]-1659908720230
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedColumns.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908720232
GPR[SPVAP]-1659908720232
GPR[EPVAP]-1659908721286
GPR[EPVS]-1659908721286
========
try{
for(int i=0;i<selectedRows.length;i++){
 final BigDecimal[] new BigDecimal[selectedRows.length][selectedColumns.length][i]=new BigDecimal[selectedRows.length][selectedColumns.length][i];
 final BigDecimal[] out=data[permutation[i]];
for(int row=0;j<selectedColumns.length;j++){
subI[j]=dataSelectedI[permutation[j]];
}
}
}catch (ArrayIndexOutOfBoundsException e) {
  throw new MatrixIndexException("matrix dimension mismatch");
}

 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908721288
GPR[SPVAP]-1659908721288
GPR[EPVAP]-1659908722212
GPR[EPVS]-1659908722212
========
out.writeInt(currentState.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908722214
GPR[SPVAP]-1659908722214
GPR[EPVAP]-1659908723291
GPR[EPVS]-1659908723291
========
super.writeExternal(out);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908723293
GPR[SPVAP]-1659908723293
GPR[EPVAP]-1659908724357
GPR[EPVS]-1659908724357
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[f.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908724359
GPR[SPVAP]-1659908724359
GPR[EPVAP]-1659908725423
GPR[EPVS]-1659908725423
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908725425
GPR[SPVAP]-1659908725425
GPR[EPVAP]-1659908727289
GPR[SPVATF]-1659908727289
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908729017
GPR[EPVS]-1659908729017
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sums[i]+=v[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908729018
GPR[SPVAP]-1659908729018
GPR[EPVAP]-1659908730082
GPR[EPVS]-1659908730082
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908730083
GPR[SPVAP]-1659908730083
GPR[EPVAP]-1659908731141
GPR[EPVS]-1659908731141
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908731143
GPR[SPVAP]-1659908731143
GPR[EPVAP]-1659908733035
GPR[SPVATF]-1659908733035
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908734723
GPR[EPVS]-1659908734723
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908734725
GPR[SPVAP]-1659908734725
GPR[EPVAP]-1659908735803
GPR[EPVS]-1659908735803
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908735805
GPR[SPVAP]-1659908735805
GPR[EPVAP]-1659908736863
GPR[EPVS]-1659908736863
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908736864
GPR[SPVAP]-1659908736864
GPR[EPVAP]-1659908737945
GPR[EPVS]-1659908737945
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908737948
GPR[SPVAP]-1659908737948
GPR[EPVAP]-1659908739005
GPR[EPVS]-1659908739005
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908739007
GPR[SPVAP]-1659908739007
GPR[EPVAP]-1659908740049
GPR[EPVS]-1659908740049
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<end;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908740051
GPR[SPVAP]-1659908740051
GPR[EPVAP]-1659908741149
GPR[EPVS]-1659908741149
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[target]=list[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908741150
GPR[SPVAP]-1659908741150
GPR[EPVAP]-1659908742213
GPR[EPVS]-1659908742213
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[i]=nCols;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908742214
GPR[SPVAP]-1659908742214
GPR[EPVAP]-1659908743269
GPR[EPVS]-1659908743269
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[target]=list[i];
list[i]=nCols;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908743271
GPR[SPVAP]-1659908743271
GPR[EPVAP]-1659908744330
GPR[EPVS]-1659908744330
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908744332
GPR[SPVAP]-1659908744332
GPR[EPVAP]-1659908745400
GPR[EPVS]-1659908745400
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908745402
GPR[SPVAP]-1659908745402
GPR[EPVAP]-1659908746455
GPR[EPVS]-1659908746455
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908746457
GPR[SPVAP]-1659908746457
GPR[EPVAP]-1659908747516
GPR[EPVS]-1659908747516
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908747518
GPR[SPVAP]-1659908747518
GPR[EPVAP]-1659908748568
GPR[EPVS]-1659908748568
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908748571
GPR[SPVAP]-1659908748571
GPR[EPVAP]-1659908749619
GPR[EPVS]-1659908749619
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908749620
GPR[SPVAP]-1659908749620
GPR[EPVAP]-1659908750677
GPR[EPVS]-1659908750677
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=x.length;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908750682
GPR[SPVAP]-1659908750682
GPR[EPVAP]-1659908751731
GPR[EPVS]-1659908751731
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908751733
GPR[SPVAP]-1659908751733
GPR[EPVAP]-1659908752794
GPR[EPVS]-1659908752794
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908752796
GPR[SPVAP]-1659908752796
GPR[EPVAP]-1659908753846
GPR[EPVS]-1659908753846
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908753848
GPR[SPVAP]-1659908753848
GPR[EPVAP]-1659908754904
GPR[EPVS]-1659908754904
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908754905
GPR[SPVAP]-1659908754905
GPR[EPVAP]-1659908755966
GPR[EPVS]-1659908755966
========
try{
for(int i=0;i<selectedRows.length;i++){
 final double[] new double[selectedRows.length][selectedColumns.length][i]=new double[selectedRows.length][selectedColumns.length][i];
 final double[] data[permutation[i]]=data[permutation[i]];
for(int row=0;j<selectedColumns.length;j++){
subI[j]=dataSelectedI[permutation[j]];
}
}
}catch (ArrayIndexOutOfBoundsException e) {
  throw new MatrixIndexException("matrix dimension mismatch");
}

 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908755969
GPR[SPVAP]-1659908755969
GPR[EPVAP]-1659908756894
GPR[EPVS]-1659908756894
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908756895
GPR[SPVAP]-1659908756896
GPR[EPVAP]-1659908758751
GPR[SPVATF]-1659908758751
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908760423
GPR[EPVS]-1659908760423
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908760425
GPR[SPVAP]-1659908760425
GPR[EPVAP]-1659908762274
GPR[SPVATF]-1659908762274
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908763939
GPR[EPVS]-1659908763939
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908763940
GPR[SPVAP]-1659908763940
GPR[EPVAP]-1659908765028
GPR[EPVS]-1659908765028
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908765029
GPR[SPVAP]-1659908765029
GPR[EPVAP]-1659908766080
GPR[EPVS]-1659908766080
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908766081
GPR[SPVAP]-1659908766081
GPR[EPVAP]-1659908767143
GPR[EPVS]-1659908767143
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908767144
GPR[SPVAP]-1659908767144
GPR[EPVAP]-1659908768211
GPR[EPVS]-1659908768211
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908768212
GPR[SPVAP]-1659908768212
GPR[EPVAP]-1659908769257
GPR[EPVS]-1659908769257
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908769258
GPR[SPVAP]-1659908769258
GPR[EPVAP]-1659908770351
GPR[EPVS]-1659908770351
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[vertexA.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908770354
GPR[SPVAP]-1659908770354
GPR[EPVAP]-1659908771413
GPR[EPVS]-1659908771413
========
new JDKRandomGenerator().setSeed(length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908771414
GPR[SPVAP]-1659908771414
GPR[EPVAP]-1659908772467
GPR[EPVS]-1659908772467
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908772469
GPR[SPVAP]-1659908772469
GPR[EPVAP]-1659908773529
GPR[EPVS]-1659908773529
========
if(i<0){
i=-i-2;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908773531
GPR[SPVAP]-1659908773531
GPR[EPVAP]-1659908774591
GPR[EPVS]-1659908774591
========
if(i>=polynomials.length){
i--;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908774593
GPR[SPVAP]-1659908774593
GPR[EPVAP]-1659908775649
GPR[EPVS]-1659908775649
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nSing;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908775651
GPR[SPVAP]-1659908775651
GPR[EPVAP]-1659908776715
GPR[EPVS]-1659908776715
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rank;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908776717
GPR[SPVAP]-1659908776717
GPR[EPVAP]-1659908777780
GPR[EPVS]-1659908777780
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908777781
GPR[SPVAP]-1659908777781
GPR[EPVAP]-1659908778833
GPR[EPVS]-1659908778833
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908778835
GPR[SPVAP]-1659908778835
GPR[EPVAP]-1659908779890
GPR[EPVS]-1659908779890
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908779893
GPR[SPVAP]-1659908779893
GPR[EPVAP]-1659908780965
GPR[EPVS]-1659908780965
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
checkDimension(value.length);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908780968
GPR[SPVAP]-1659908780968
GPR[EPVAP]-1659908782031
GPR[EPVS]-1659908782031
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908782034
GPR[SPVAP]-1659908782034
GPR[EPVAP]-1659908783098
GPR[EPVS]-1659908783098
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
f[i]=data[j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908783099
GPR[SPVAP]-1659908783099
GPR[EPVAP]-1659908784165
GPR[EPVS]-1659908784165
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
k=N>>1;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908784166
GPR[SPVAP]-1659908784166
GPR[EPVAP]-1659908785223
GPR[EPVS]-1659908785223
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
j+=nCols;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908785224
GPR[SPVAP]-1659908785224
GPR[EPVAP]-1659908786290
GPR[EPVS]-1659908786290
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
f[i]=data[j];
k=N>>1;
j+=nCols;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908786291
GPR[SPVAP]-1659908786291
GPR[EPVAP]-1659908787360
GPR[EPVS]-1659908787361
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908787362
GPR[SPVAP]-1659908787362
GPR[EPVAP]-1659908789294
GPR[SPVATF]-1659908789294
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908790961
GPR[EPVS]-1659908790961
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
r[row][row]=rDiag[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908790963
GPR[SPVAP]-1659908790963
GPR[EPVAP]-1659908791993
GPR[EPVS]-1659908791993
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908791995
GPR[SPVAP]-1659908791995
GPR[EPVAP]-1659908793864
GPR[SPVATF]-1659908793864
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908795532
GPR[EPVS]-1659908795532
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908795534
GPR[SPVAP]-1659908795534
GPR[EPVAP]-1659908796588
GPR[EPVS]-1659908796588
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908796590
GPR[SPVAP]-1659908796590
GPR[EPVAP]-1659908797649
GPR[EPVS]-1659908797649
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908797651
GPR[SPVAP]-1659908797651
GPR[EPVAP]-1659908798710
GPR[EPVS]-1659908798710
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908798712
GPR[SPVAP]-1659908798712
GPR[EPVAP]-1659908799777
GPR[EPVS]-1659908799777
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908799779
GPR[SPVAP]-1659908799779
GPR[EPVAP]-1659908800829
GPR[EPVS]-1659908800829
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908800830
GPR[SPVAP]-1659908800830
GPR[EPVAP]-1659908801902
GPR[EPVS]-1659908801902
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908801903
GPR[SPVAP]-1659908801903
GPR[EPVAP]-1659908802977
GPR[EPVS]-1659908802977
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908802978
GPR[SPVAP]-1659908802978
GPR[EPVAP]-1659908804036
GPR[EPVS]-1659908804036
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908804038
GPR[SPVAP]-1659908804038
GPR[EPVAP]-1659908805088
GPR[EPVS]-1659908805088
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908805090
GPR[SPVAP]-1659908805090
GPR[EPVAP]-1659908806155
GPR[EPVS]-1659908806155
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908806157
GPR[SPVAP]-1659908806157
GPR[EPVAP]-1659908807208
GPR[EPVS]-1659908807208
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908807209
GPR[SPVAP]-1659908807209
GPR[EPVAP]-1659908808267
GPR[EPVS]-1659908808267
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode*roundingMode+permutation[i];i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908808270
GPR[SPVAP]-1659908808270
GPR[EPVAP]-1659908809324
GPR[EPVS]-1659908809324
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908809326
GPR[SPVAP]-1659908809326
GPR[EPVAP]-1659908810375
GPR[EPVS]-1659908810375
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908810376
GPR[SPVAP]-1659908810376
GPR[EPVAP]-1659908811443
GPR[EPVS]-1659908811443
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
c[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908811445
GPR[SPVAP]-1659908811445
GPR[EPVAP]-1659908812504
GPR[EPVS]-1659908812504
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
d[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908812505
GPR[SPVAP]-1659908812505
GPR[EPVAP]-1659908813633
GPR[EPVS]-1659908813633
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
c[i]=y[i];
d[i]=y[i];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908813634
GPR[SPVAP]-1659908813634
GPR[EPVAP]-1659908814679
GPR[EPVS]-1659908814679
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908814681
GPR[SPVAP]-1659908814681
GPR[EPVAP]-1659908815791
GPR[EPVS]-1659908815791
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=degree()+1;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908815793
GPR[SPVAP]-1659908815793
GPR[EPVAP]-1659908816856
GPR[EPVS]-1659908816856
========
clearResult();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908816858
GPR[SPVAP]-1659908816858
GPR[EPVAP]-1659908817933
GPR[EPVS]-1659908817933
========
verifyIterationCount();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908817934
GPR[SPVAP]-1659908817934
GPR[EPVAP]-1659908818990
GPR[EPVS]-1659908818990
========
i++;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908818993
GPR[SPVAP]-1659908818993
GPR[EPVAP]-1659908820035
GPR[EPVS]-1659908820035
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
dev=((double)observed[i]-expected[i]);
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908820036
GPR[SPVAP]-1659908820036
GPR[EPVAP]-1659908821089
GPR[EPVS]-1659908821089
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908821091
GPR[SPVAP]-1659908821091
GPR[EPVAP]-1659908822143
GPR[EPVS]-1659908822143
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908822145
GPR[SPVAP]-1659908822145
GPR[EPVAP]-1659908823191
GPR[EPVS]-1659908823191
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[j][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908823193
GPR[SPVAP]-1659908823193
GPR[EPVAP]-1659908824285
GPR[EPVS]-1659908824285
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
jTj[j][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908824287
GPR[SPVAP]-1659908824287
GPR[EPVAP]-1659908825345
GPR[EPVS]-1659908825345
========
 final int nCols=this.getColumnDimension();
updateJacobian();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908825346
GPR[SPVAP]-1659908825346
GPR[EPVAP]-1659908826427
GPR[EPVS]-1659908826427
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908826429
GPR[SPVAP]-1659908826429
GPR[EPVAP]-1659908827488
GPR[EPVS]-1659908827488
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluateSimplex();
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908827489
GPR[SPVAP]-1659908827489
GPR[EPVAP]-1659908828556
GPR[EPVS]-1659908828556
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(i<(roundingMode-1)){
buildSimplex(length);
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908828558
GPR[SPVAP]-1659908828558
GPR[EPVAP]-1659908829609
GPR[EPVS]-1659908829609
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
evaluations=0;
evaluateSimplex();
if(i<(roundingMode-1)){
buildSimplex(length);
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908829610
GPR[SPVAP]-1659908829610
GPR[EPVAP]-1659908830657
GPR[EPVS]-1659908830657
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908830659
GPR[SPVAP]-1659908830659
GPR[EPVAP]-1659908831722
GPR[EPVS]-1659908831722
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908831727
GPR[SPVAP]-1659908831727
GPR[EPVAP]-1659908833586
GPR[SPVATF]-1659908833586
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908835258
GPR[EPVS]-1659908835258
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908835259
GPR[SPVAP]-1659908835259
GPR[EPVAP]-1659908837123
GPR[SPVATF]-1659908837123
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908838801
GPR[EPVS]-1659908838801
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<l2;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908838803
GPR[SPVAP]-1659908838803
GPR[EPVAP]-1659908839860
GPR[EPVS]-1659908839860
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<y0.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908839862
GPR[SPVAP]-1659908839862
GPR[EPVAP]-1659908840918
GPR[EPVS]-1659908840918
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
factor=Math.pow(0.5*permutation[roundingMode+roundingMode],roundingMode);
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908840919
GPR[SPVAP]-1659908840919
GPR[EPVAP]-1659908841976
GPR[EPVS]-1659908841976
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908841977
GPR[SPVAP]-1659908841977
GPR[EPVAP]-1659908843850
GPR[SPVATF]-1659908843850
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908845505
GPR[EPVS]-1659908845505
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908845507
GPR[SPVAP]-1659908845507
GPR[EPVAP]-1659908847385
GPR[SPVATF]-1659908847385
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908849054
GPR[EPVS]-1659908849054
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908849055
GPR[SPVAP]-1659908849055
GPR[EPVAP]-1659908850111
GPR[EPVS]-1659908850111
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908850112
GPR[SPVAP]-1659908850112
GPR[EPVAP]-1659908851997
GPR[SPVATF]-1659908851997
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908853678
GPR[EPVS]-1659908853678
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908853680
GPR[SPVAP]-1659908853680
GPR[EPVAP]-1659908854741
GPR[EPVS]-1659908854741
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908854742
GPR[SPVAP]-1659908854742
GPR[EPVAP]-1659908855800
GPR[EPVS]-1659908855800
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908855802
GPR[SPVAP]-1659908855802
GPR[EPVAP]-1659908856865
GPR[EPVS]-1659908856865
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908856866
GPR[SPVAP]-1659908856866
GPR[EPVAP]-1659908857913
GPR[EPVS]-1659908857913
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908857915
GPR[SPVAP]-1659908857915
GPR[EPVAP]-1659908859816
GPR[SPVATF]-1659908859816
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908861507
GPR[EPVS]-1659908861507
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908861509
GPR[SPVAP]-1659908861509
GPR[EPVAP]-1659908862568
GPR[EPVS]-1659908862568
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908862570
GPR[SPVAP]-1659908862570
GPR[EPVAP]-1659908863643
GPR[EPVS]-1659908863643
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908863645
GPR[SPVAP]-1659908863645
GPR[EPVAP]-1659908864703
GPR[EPVS]-1659908864703
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908864704
GPR[SPVAP]-1659908864704
GPR[EPVAP]-1659908865762
GPR[EPVS]-1659908865762
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908865763
GPR[SPVAP]-1659908865763
GPR[EPVAP]-1659908866817
GPR[EPVS]-1659908866817
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908866818
GPR[SPVAP]-1659908866818
GPR[EPVAP]-1659908867879
GPR[EPVS]-1659908867879
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908867880
GPR[SPVAP]-1659908867880
GPR[EPVAP]-1659908868927
GPR[EPVS]-1659908868927
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908868929
GPR[SPVAP]-1659908868929
GPR[EPVAP]-1659908869992
GPR[EPVS]-1659908869992
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
clearResult();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908869994
GPR[SPVAP]-1659908869994
GPR[EPVAP]-1659908871048
GPR[EPVS]-1659908871049
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
verifyIterationCount();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908871050
GPR[SPVAP]-1659908871050
GPR[EPVAP]-1659908872109
GPR[EPVS]-1659908872109
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908872112
GPR[SPVAP]-1659908872112
GPR[EPVAP]-1659908873165
GPR[EPVS]-1659908873165
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908873167
GPR[SPVAP]-1659908873167
GPR[EPVAP]-1659908875054
GPR[SPVATF]-1659908875054
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908876708
GPR[EPVS]-1659908876708
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
a[i]=divdiff[0];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908876709
GPR[SPVAP]-1659908876709
GPR[EPVAP]-1659908877769
GPR[EPVS]-1659908877770
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908877772
GPR[SPVAP]-1659908877772
GPR[EPVAP]-1659908878844
GPR[EPVS]-1659908878844
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908878846
GPR[SPVAP]-1659908878846
GPR[EPVAP]-1659908879900
GPR[EPVS]-1659908879900
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908879902
GPR[SPVAP]-1659908879902
GPR[EPVAP]-1659908880949
GPR[EPVS]-1659908880949
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908880951
GPR[SPVAP]-1659908880951
GPR[EPVAP]-1659908881999
GPR[EPVS]-1659908881999
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908882001
GPR[SPVAP]-1659908882001
GPR[EPVAP]-1659908883068
GPR[EPVS]-1659908883068
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<mu;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908883071
GPR[SPVAP]-1659908883072
GPR[EPVAP]-1659908884122
GPR[EPVS]-1659908884122
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<degree();row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908884124
GPR[SPVAP]-1659908884124
GPR[EPVAP]-1659908885178
GPR[EPVS]-1659908885178
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908885180
GPR[SPVAP]-1659908885180
GPR[EPVAP]-1659908886230
GPR[EPVS]-1659908886230
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908886232
GPR[SPVAP]-1659908886232
GPR[EPVAP]-1659908888115
GPR[SPVATF]-1659908888115
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908889791
GPR[EPVS]-1659908889791
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908889793
GPR[SPVAP]-1659908889793
GPR[EPVAP]-1659908891666
GPR[SPVATF]-1659908891666
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908893347
GPR[EPVS]-1659908893347
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908893348
GPR[SPVAP]-1659908893348
GPR[EPVAP]-1659908894409
GPR[EPVS]-1659908894409
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908894410
GPR[SPVAP]-1659908894410
GPR[EPVAP]-1659908895460
GPR[EPVS]-1659908895460
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908895462
GPR[SPVAP]-1659908895462
GPR[EPVAP]-1659908896523
GPR[EPVS]-1659908896523
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908896524
GPR[SPVAP]-1659908896524
GPR[EPVAP]-1659908897590
GPR[EPVS]-1659908897590
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908897592
GPR[SPVAP]-1659908897592
GPR[EPVAP]-1659908898660
GPR[EPVS]-1659908898660
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908898662
GPR[SPVAP]-1659908898662
GPR[EPVAP]-1659908899902
GPR[EPVS]-1659908899902
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908899914
GPR[SPVAP]-1659908899914
GPR[EPVAP]-1659908901057
GPR[EPVS]-1659908901057
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908901058
GPR[SPVAP]-1659908901058
GPR[EPVAP]-1659908902123
GPR[EPVS]-1659908902123
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908902125
GPR[SPVAP]-1659908902125
GPR[EPVAP]-1659908903241
GPR[EPVS]-1659908903241
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908903243
GPR[SPVAP]-1659908903243
GPR[EPVAP]-1659908904293
GPR[EPVS]-1659908904293
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(row<0.5*(nRows-i+1)){
value+=c[nearest];
}else {
row--;
value+=d[nearest];
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908904295
GPR[SPVAP]-1659908904295
GPR[EPVAP]-1659908905361
GPR[EPVS]-1659908905361
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<yDotKLast.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908905363
GPR[SPVAP]-1659908905363
GPR[EPVAP]-1659908906436
GPR[EPVS]-1659908906436
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<interpolator.yDotK.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908906438
GPR[SPVAP]-1659908906438
GPR[EPVAP]-1659908907495
GPR[EPVS]-1659908907495
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<yDotKLast.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908907497
GPR[SPVAP]-1659908907497
GPR[EPVAP]-1659908908590
GPR[EPVS]-1659908908590
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<currentDegree;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908908592
GPR[SPVAP]-1659908908592
GPR[EPVAP]-1659908909649
GPR[EPVS]-1659908909649
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<dimension;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908909651
GPR[SPVAP]-1659908909651
GPR[EPVAP]-1659908910709
GPR[EPVS]-1659908910709
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
out.writeInt(nRows);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908910710
GPR[SPVAP]-1659908910710
GPR[EPVAP]-1659908911765
GPR[EPVS]-1659908911765
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908911767
GPR[SPVAP]-1659908911767
GPR[EPVAP]-1659908912877
GPR[EPVS]-1659908912877
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908912879
GPR[SPVAP]-1659908912879
GPR[EPVAP]-1659908913931
GPR[EPVS]-1659908913932
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908913933
GPR[SPVAP]-1659908913933
GPR[EPVAP]-1659908914988
GPR[EPVS]-1659908914988
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<lmDir.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908914991
GPR[SPVAP]-1659908914991
GPR[EPVAP]-1659908916053
GPR[EPVS]-1659908916053
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
resetTables(roundingMode);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908916054
GPR[SPVAP]-1659908916054
GPR[EPVAP]-1659908917145
GPR[EPVS]-1659908917145
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=roundingMode;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908917147
GPR[SPVAP]-1659908917147
GPR[EPVAP]-1659908918205
GPR[EPVS]-1659908918205
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<staticE.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908918206
GPR[SPVAP]-1659908918206
GPR[EPVAP]-1659908919258
GPR[EPVS]-1659908919258
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<jacobian.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908919262
GPR[SPVAP]-1659908919262
GPR[EPVAP]-1659908920309
GPR[EPVS]-1659908920309
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<jacobian.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908920311
GPR[SPVAP]-1659908920311
GPR[EPVAP]-1659908921368
GPR[EPVS]-1659908921368
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[a.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908921369
GPR[SPVAP]-1659908921369
GPR[EPVAP]-1659908922447
GPR[EPVS]-1659908922447
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[c.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908922449
GPR[SPVAP]-1659908922449
GPR[EPVAP]-1659908923501
GPR[EPVS]-1659908923501
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[x.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908923503
GPR[SPVAP]-1659908923503
GPR[EPVAP]-1659908924558
GPR[EPVS]-1659908924558
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908924560
GPR[SPVAP]-1659908924560
GPR[EPVAP]-1659908925614
GPR[EPVS]-1659908925614
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908925616
GPR[SPVAP]-1659908925616
GPR[EPVAP]-1659908927493
GPR[SPVATF]-1659908927493
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908929173
GPR[EPVS]-1659908929173
========
System.arraycopy(permutation,0,out,0,permutation.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908929183
GPR[SPVAP]-1659908929183
GPR[EPVAP]-1659908930241
GPR[EPVS]-1659908930241
========
System.arraycopy(length,0,out,0,upperBounds.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908930242
GPR[SPVAP]-1659908930242
GPR[EPVAP]-1659908931297
GPR[EPVS]-1659908931297
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908931303
GPR[SPVAP]-1659908931303
GPR[EPVAP]-1659908932408
GPR[EPVS]-1659908932408
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908932410
GPR[SPVAP]-1659908932410
GPR[EPVAP]-1659908933483
GPR[EPVS]-1659908933483
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908933486
GPR[SPVAP]-1659908933486
GPR[EPVAP]-1659908934542
GPR[EPVS]-1659908934542
========
if(N==1){
F[0]=0.0;
return F;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908934544
GPR[SPVAP]-1659908934544
GPR[EPVAP]-1659908935589
GPR[EPVS]-1659908935589
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908935592
GPR[SPVAP]-1659908935592
GPR[EPVAP]-1659908936675
GPR[EPVS]-1659908936675
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
super();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908936681
GPR[SPVAP]-1659908936681
GPR[EPVAP]-1659908937741
GPR[EPVS]-1659908937741
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908937743
GPR[SPVAP]-1659908937743
GPR[EPVAP]-1659908938795
GPR[EPVS]-1659908938795
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908938796
GPR[SPVAP]-1659908938796
GPR[EPVAP]-1659908939861
GPR[EPVS]-1659908939861
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908939863
GPR[SPVAP]-1659908939863
GPR[EPVAP]-1659908940914
GPR[EPVS]-1659908940914
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908940917
GPR[SPVAP]-1659908940917
GPR[EPVAP]-1659908941983
GPR[EPVS]-1659908941983
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908941984
GPR[SPVAP]-1659908941984
GPR[EPVAP]-1659908943033
GPR[EPVS]-1659908943033
========
System.arraycopy(permutation,0,out,0,permutation.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908943035
GPR[SPVAP]-1659908943035
GPR[EPVAP]-1659908944081
GPR[EPVS]-1659908944081
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908944084
GPR[SPVAP]-1659908944084
GPR[EPVAP]-1659908945133
GPR[EPVS]-1659908945133
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908945137
GPR[SPVAP]-1659908945137
GPR[EPVAP]-1659908946237
GPR[EPVS]-1659908946237
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908946239
GPR[SPVAP]-1659908946239
GPR[EPVAP]-1659908947318
GPR[EPVS]-1659908947318
========
if(knots.length-1!=polynomials.length){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908947321
GPR[SPVAP]-1659908947321
GPR[EPVAP]-1659908948387
GPR[EPVS]-1659908948387
========
this.nCols=knots.length-1;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908948389
GPR[SPVAP]-1659908948389
GPR[EPVAP]-1659908949457
GPR[EPVS]-1659908949457
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[currentState.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908949460
GPR[SPVAP]-1659908949460
GPR[EPVAP]-1659908950514
GPR[EPVS]-1659908950514
========
if(fraction.numerator==0){
throw new ArithmeticException("The fraction to divide by must not be zero");
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908950517
GPR[SPVAP]-1659908950517
GPR[EPVAP]-1659908951584
GPR[EPVS]-1659908951584
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
v[2][i]=v[0][i]-v[1][i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908951586
GPR[SPVAP]-1659908951586
GPR[EPVAP]-1659908952651
GPR[EPVS]-1659908952651
========
data=new BigDecimal[nCols][nRows];
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908952652
GPR[SPVAP]-1659908952652
GPR[EPVAP]-1659908953715
GPR[EPVS]-1659908953715
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908953718
GPR[SPVAP]-1659908953718
GPR[EPVAP]-1659908954768
GPR[EPVS]-1659908954768
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659908954770
GPR[SPVAP]-1659908954770
GPR[EPVAP]-1659908955825
GPR[EPVS]-1659908955825
GPR[ESUN]-1659908955826
GPR[SSUN]-1659908955826
org.apache.commons.math.linear.BigMatrixImpl,992
GPR[ESUN]-1659908956003
GPR[SSUN]-1659908956003
org.apache.commons.math.linear.BigMatrixImpl,993
GPR[ESUN]-1659908956119
GPR[SSUN]-1659908956119
org.apache.commons.math.linear.BigMatrixImpl,994
GPR[ESUN]-1659908956232
GPR[SSUN]-1659908956232
org.apache.commons.math.linear.BigMatrixImpl,995
GPR[ESUN]-1659908956341
GPR[SSUN]-1659908956341
org.apache.commons.math.linear.BigMatrixImpl,997
GPR[ESUN]-1659908956446
GPR[SSUN]-1659908956446
org.apache.commons.math.linear.RealMatrixImpl,774
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659908957280
GPR[SPVAP]-1659908957280
GPR[EPVAP]-1659908960896
GPR[SPVATF]-1659908960896
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908962557
GPR[EPVS]-1659908962557
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659908962558
GPR[SPVAP]-1659908962558
GPR[EPVAP]-1659908964433
GPR[SPVATF]-1659908964433
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908966094
GPR[EPVS]-1659908966094
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659908966095
GPR[SPVAP]-1659908966095
GPR[EPVAP]-1659908967993
GPR[SPVATF]-1659908967993
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908969741
GPR[EPVS]-1659908969741
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659908969743
GPR[SPVAP]-1659908969743
GPR[EPVAP]-1659908971633
GPR[SPVATF]-1659908971633
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908973320
GPR[EPVS]-1659908973320
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659908973321
GPR[SPVAP]-1659908973321
GPR[EPVAP]-1659908975225
GPR[SPVATF]-1659908975225
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908976898
GPR[EPVS]-1659908976898
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659908976899
GPR[SPVAP]-1659908976899
GPR[EPVAP]-1659908978749
GPR[SPVATF]-1659908978749
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908980401
GPR[EPVS]-1659908980401
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659908980403
GPR[SPVAP]-1659908980403
GPR[EPVAP]-1659908982255
GPR[SPVATF]-1659908982255
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908983953
GPR[EPVS]-1659908983953
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("matrix dimension mismatch");
}

========
GPR[SPVS]-1659908983955
GPR[SPVAP]-1659908983955
GPR[EPVAP]-1659908985835
GPR[SPVATF]-1659908985835
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908987532
GPR[EPVS]-1659908987532
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659908987533
GPR[SPVAP]-1659908987533
GPR[EPVAP]-1659908989396
GPR[SPVATF]-1659908989396
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908991061
GPR[EPVS]-1659908991061
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659908991063
GPR[SPVAP]-1659908991063
GPR[EPVAP]-1659908992933
GPR[SPVATF]-1659908992933
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908994644
GPR[EPVS]-1659908994644
========
lu=this.getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659908994646
GPR[SPVAP]-1659908994646
GPR[EPVAP]-1659908996517
GPR[SPVATF]-1659908996517
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659908998184
GPR[EPVS]-1659908998184
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659908998186
GPR[SPVAP]-1659908998186
GPR[EPVAP]-1659909000039
GPR[SPVATF]-1659909000039
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909001697
GPR[EPVS]-1659909001697
========
lu=this.getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909001699
GPR[SPVAP]-1659909001699
GPR[EPVAP]-1659909003557
GPR[SPVATF]-1659909003557
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909005233
GPR[EPVS]-1659909005233
========
lu=this.getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659909005234
GPR[SPVAP]-1659909005234
GPR[EPVAP]-1659909007162
GPR[SPVATF]-1659909007162
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909008830
GPR[EPVS]-1659909008830
========
lu=this.getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659909008831
GPR[SPVAP]-1659909008831
GPR[EPVAP]-1659909010657
GPR[SPVATF]-1659909010657
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909012350
GPR[EPVS]-1659909012350
========
lu=getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909012352
GPR[SPVAP]-1659909012352
GPR[EPVAP]-1659909014215
GPR[SPVATF]-1659909014215
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909015874
GPR[EPVS]-1659909015874
========
lu=getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909015875
GPR[SPVAP]-1659909015875
GPR[EPVAP]-1659909017766
GPR[SPVATF]-1659909017766
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909019425
GPR[EPVS]-1659909019425
========
lu=getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659909019427
GPR[SPVAP]-1659909019427
GPR[EPVAP]-1659909021273
GPR[SPVATF]-1659909021273
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909022961
GPR[EPVS]-1659909022961
========
lu=getData();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}

========
GPR[SPVS]-1659909022962
GPR[SPVAP]-1659909022962
GPR[EPVAP]-1659909024789
GPR[SPVATF]-1659909024789
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909026509
GPR[EPVS]-1659909026509
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("All input rows must have the same length.");
}

========
GPR[SPVS]-1659909026510
GPR[SPVAP]-1659909026510
GPR[EPVAP]-1659909028375
GPR[SPVATF]-1659909028376
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909030049
GPR[EPVS]-1659909030049
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(b.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909030051
GPR[SPVAP]-1659909030051
GPR[EPVAP]-1659909031095
GPR[EPVS]-1659909031095
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909031097
GPR[SPVAP]-1659909031097
GPR[EPVAP]-1659909032940
GPR[SPVATF]-1659909032940
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909034630
GPR[EPVS]-1659909034630
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(b.length!=nCols){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909034631
GPR[SPVAP]-1659909034631
GPR[EPVAP]-1659909035680
GPR[EPVS]-1659909035680
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909035683
GPR[SPVAP]-1659909035683
GPR[EPVAP]-1659909036727
GPR[EPVS]-1659909036728
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}

========
GPR[SPVS]-1659909036729
GPR[SPVAP]-1659909036729
GPR[EPVAP]-1659909038597
GPR[SPVATF]-1659909038597
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909042985
GPR[EPVS]-1659909042985
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909042987
GPR[SPVAP]-1659909042987
GPR[EPVAP]-1659909044033
GPR[EPVS]-1659909044033
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909044034
GPR[SPVAP]-1659909044034
GPR[EPVAP]-1659909045070
GPR[EPVS]-1659909045071
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909045072
GPR[SPVAP]-1659909045072
GPR[EPVAP]-1659909046928
GPR[SPVATF]-1659909046928
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909048612
GPR[EPVS]-1659909048612
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909048613
GPR[SPVAP]-1659909048613
GPR[EPVAP]-1659909049661
GPR[EPVS]-1659909049661
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909049662
GPR[SPVAP]-1659909049662
GPR[EPVAP]-1659909051546
GPR[SPVATF]-1659909051546
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909053205
GPR[EPVS]-1659909053205
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=y.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909053206
GPR[SPVAP]-1659909053206
GPR[EPVAP]-1659909054257
GPR[EPVS]-1659909054257
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=y.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909054258
GPR[SPVAP]-1659909054258
GPR[EPVAP]-1659909055309
GPR[EPVS]-1659909055309
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909055310
GPR[SPVAP]-1659909055310
GPR[EPVAP]-1659909057189
GPR[SPVATF]-1659909057189
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909058885
GPR[EPVS]-1659909058885
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909058887
GPR[SPVAP]-1659909058887
GPR[EPVAP]-1659909059942
GPR[EPVS]-1659909059942
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909059944
GPR[SPVAP]-1659909059944
GPR[EPVAP]-1659909061819
GPR[SPVATF]-1659909061819
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909063483
GPR[EPVS]-1659909063483
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909063485
GPR[SPVAP]-1659909063485
GPR[EPVAP]-1659909064543
GPR[EPVS]-1659909064543
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=y.length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909064545
GPR[SPVAP]-1659909064545
GPR[EPVAP]-1659909065594
GPR[EPVS]-1659909065594
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=y.length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909065596
GPR[SPVAP]-1659909065596
GPR[EPVAP]-1659909066647
GPR[EPVS]-1659909066647
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909066649
GPR[SPVAP]-1659909066649
GPR[EPVAP]-1659909068500
GPR[SPVATF]-1659909068500
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909070225
GPR[EPVS]-1659909070225
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909070226
GPR[SPVAP]-1659909070226
GPR[EPVAP]-1659909071285
GPR[EPVS]-1659909071285
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=y.length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909071286
GPR[SPVAP]-1659909071286
GPR[EPVAP]-1659909072326
GPR[EPVS]-1659909072326
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=y.length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909072328
GPR[SPVAP]-1659909072328
GPR[EPVAP]-1659909073399
GPR[EPVS]-1659909073399
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=covariance.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909073401
GPR[SPVAP]-1659909073401
GPR[EPVAP]-1659909074442
GPR[EPVS]-1659909074442
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=covariance.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909074443
GPR[SPVAP]-1659909074443
GPR[EPVAP]-1659909075481
GPR[EPVS]-1659909075481
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909075483
GPR[SPVAP]-1659909075483
GPR[EPVAP]-1659909077356
GPR[SPVATF]-1659909077356
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909079021
GPR[EPVS]-1659909079021
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909079022
GPR[SPVAP]-1659909079022
GPR[EPVAP]-1659909080077
GPR[EPVS]-1659909080077
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(mean.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909080079
GPR[SPVAP]-1659909080079
GPR[EPVAP]-1659909081133
GPR[EPVS]-1659909081133
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(mean.length!=standardDeviation.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909081134
GPR[SPVAP]-1659909081134
GPR[EPVAP]-1659909082194
GPR[EPVS]-1659909082194
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=standardDeviation.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909082196
GPR[SPVAP]-1659909082196
GPR[EPVAP]-1659909083249
GPR[EPVS]-1659909083249
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909083250
GPR[SPVAP]-1659909083250
GPR[EPVAP]-1659909085093
GPR[SPVATF]-1659909085093
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909086786
GPR[EPVS]-1659909086786
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(mean.length!=nCols){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909086787
GPR[SPVAP]-1659909086787
GPR[EPVAP]-1659909087845
GPR[EPVS]-1659909087845
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(knots.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909087847
GPR[SPVAP]-1659909087847
GPR[EPVAP]-1659909088881
GPR[EPVS]-1659909088881
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}

========
GPR[SPVS]-1659909088883
GPR[SPVAP]-1659909088883
GPR[EPVAP]-1659909090765
GPR[SPVATF]-1659909090765
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909092441
GPR[EPVS]-1659909092441
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(in.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909092442
GPR[SPVAP]-1659909092442
GPR[EPVAP]-1659909093485
GPR[EPVS]-1659909093485
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Input table must have at least two rows");
}

========
GPR[SPVS]-1659909093486
GPR[SPVAP]-1659909093486
GPR[EPVAP]-1659909095346
GPR[SPVATF]-1659909095346
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909097013
GPR[EPVS]-1659909097013
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(array.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909097023
GPR[SPVAP]-1659909097023
GPR[EPVAP]-1659909098085
GPR[EPVS]-1659909098085
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}

========
GPR[SPVS]-1659909098086
GPR[SPVAP]-1659909098086
GPR[EPVAP]-1659909099957
GPR[SPVATF]-1659909099957
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909101626
GPR[EPVS]-1659909101626
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=polynomials.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909101628
GPR[SPVAP]-1659909101628
GPR[EPVAP]-1659909102667
GPR[EPVS]-1659909102667
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909102669
GPR[SPVAP]-1659909102669
GPR[EPVAP]-1659909104528
GPR[SPVATF]-1659909104528
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909106209
GPR[EPVS]-1659909106209
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(knots.length!=nCols){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909106211
GPR[SPVAP]-1659909106211
GPR[EPVAP]-1659909107253
GPR[EPVS]-1659909107253
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(a.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909107254
GPR[SPVAP]-1659909107254
GPR[EPVAP]-1659909108311
GPR[EPVS]-1659909108311
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909108312
GPR[SPVAP]-1659909108312
GPR[EPVAP]-1659909110186
GPR[SPVATF]-1659909110187
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909111854
GPR[EPVS]-1659909111854
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(a.length!=nCols){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909111855
GPR[SPVAP]-1659909111855
GPR[EPVAP]-1659909112965
GPR[EPVS]-1659909112965
========
if(this.isSingular()){
throw new InvalidMatrixException("Matrix is singular.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909112967
GPR[SPVAP]-1659909112967
GPR[EPVAP]-1659909114817
GPR[SPVATF]-1659909114817
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909116500
GPR[EPVS]-1659909116500
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909116503
GPR[SPVAP]-1659909116503
GPR[EPVAP]-1659909118365
GPR[SPVATF]-1659909118365
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909120050
GPR[EPVS]-1659909120050
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909120051
GPR[SPVAP]-1659909120051
GPR[EPVAP]-1659909121085
GPR[EPVS]-1659909121085
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(expected.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909121087
GPR[SPVAP]-1659909121087
GPR[EPVAP]-1659909122129
GPR[EPVS]-1659909122129
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}

========
GPR[SPVS]-1659909122130
GPR[SPVAP]-1659909122130
GPR[EPVAP]-1659909123995
GPR[SPVATF]-1659909123995
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909125666
GPR[EPVS]-1659909125666
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(observed1.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909125668
GPR[SPVAP]-1659909125668
GPR[EPVAP]-1659909126717
GPR[EPVS]-1659909126717
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}

========
GPR[SPVS]-1659909126719
GPR[SPVAP]-1659909126719
GPR[EPVAP]-1659909128565
GPR[SPVATF]-1659909128565
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909130225
GPR[EPVS]-1659909130225
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909130227
GPR[SPVAP]-1659909130227
GPR[EPVAP]-1659909132083
GPR[SPVATF]-1659909132083
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909133750
GPR[EPVS]-1659909133750
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(a.length!=nCols){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909133751
GPR[SPVAP]-1659909133751
GPR[EPVAP]-1659909134793
GPR[EPVS]-1659909134793
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909134794
GPR[SPVAP]-1659909134794
GPR[EPVAP]-1659909136650
GPR[SPVATF]-1659909136650
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909138325
GPR[EPVS]-1659909138325
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(x.length!=nCols){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909138326
GPR[SPVAP]-1659909138326
GPR[EPVAP]-1659909139363
GPR[EPVS]-1659909139363
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(sample2.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909139365
GPR[SPVAP]-1659909139365
GPR[EPVAP]-1659909140412
GPR[EPVS]-1659909140412
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}

========
GPR[SPVS]-1659909140414
GPR[SPVAP]-1659909140414
GPR[EPVAP]-1659909142299
GPR[SPVATF]-1659909142299
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909143973
GPR[EPVS]-1659909143973
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659909143975
GPR[SPVAP]-1659909143975
GPR[EPVAP]-1659909145840
GPR[SPVATF]-1659909145840
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909147510
GPR[EPVS]-1659909147510
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(covariance.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909147511
GPR[SPVAP]-1659909147511
GPR[EPVAP]-1659909148575
GPR[EPVS]-1659909148575
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("The covariance matrix must be square");
}

========
GPR[SPVS]-1659909148576
GPR[SPVAP]-1659909148576
GPR[EPVAP]-1659909150444
GPR[SPVATF]-1659909150444
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909152105
GPR[EPVS]-1659909152105
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Coefficient array must have positive length for differentiation");
}

========
GPR[SPVS]-1659909152107
GPR[SPVAP]-1659909152107
GPR[EPVAP]-1659909154008
GPR[SPVATF]-1659909154008
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909155686
GPR[EPVS]-1659909155686
========
if(nCols==1){
return new double[]{0};
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909155688
GPR[SPVAP]-1659909155688
GPR[EPVAP]-1659909156737
GPR[EPVS]-1659909156737
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(getInterpolatedState().length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909156738
GPR[SPVAP]-1659909156738
GPR[EPVAP]-1659909157797
GPR[EPVS]-1659909157797
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("state vector dimension mismatch");
}

========
GPR[SPVS]-1659909157799
GPR[SPVAP]-1659909157799
GPR[EPVAP]-1659909159649
GPR[SPVATF]-1659909159649
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909161312
GPR[EPVS]-1659909161312
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Input table must have at least two columns");
}

========
GPR[SPVS]-1659909161314
GPR[SPVAP]-1659909161314
GPR[EPVAP]-1659909163162
GPR[SPVATF]-1659909163162
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909164863
GPR[EPVS]-1659909164863
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Polynomial degree must be positive: degree="+nCols);
}

========
GPR[SPVS]-1659909164865
GPR[SPVAP]-1659909164865
GPR[EPVAP]-1659909166744
GPR[SPVATF]-1659909166744
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909168448
GPR[EPVS]-1659909168448
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(c.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909168450
GPR[SPVAP]-1659909168450
GPR[EPVAP]-1659909169508
GPR[EPVS]-1659909169508
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Polynomial coefficient array must have postive length.");
}

========
GPR[SPVS]-1659909169509
GPR[SPVAP]-1659909169509
GPR[EPVAP]-1659909171376
GPR[SPVATF]-1659909171376
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909173062
GPR[EPVS]-1659909173062
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
super();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909173064
GPR[SPVAP]-1659909173064
GPR[EPVAP]-1659909174135
GPR[EPVS]-1659909174135
========
this.v=new double[c.length];
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909174137
GPR[SPVAP]-1659909174137
GPR[EPVAP]-1659909175180
GPR[EPVS]-1659909175180
========
System.arraycopy(v,0,this.v,0,c.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909175182
GPR[SPVAP]-1659909175182
GPR[EPVAP]-1659909176233
GPR[EPVS]-1659909176233
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("insufficient data for t statistic");
}

========
GPR[SPVS]-1659909176234
GPR[SPVAP]-1659909176234
GPR[EPVAP]-1659909178120
GPR[SPVATF]-1659909178120
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909179801
GPR[EPVS]-1659909179801
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("Coefficient array must have positive length for evaluation");
}

========
GPR[SPVS]-1659909179803
GPR[SPVAP]-1659909179803
GPR[EPVAP]-1659909181659
GPR[SPVATF]-1659909181659
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909183320
GPR[EPVS]-1659909183320
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("observed counts must not both be zero");
}

========
GPR[SPVS]-1659909183322
GPR[SPVAP]-1659909183322
GPR[EPVAP]-1659909185181
GPR[SPVATF]-1659909185181
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909186864
GPR[EPVS]-1659909186864
========
if(!isValidCoordinate(0,nRows)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909186866
GPR[SPVAP]-1659909186866
GPR[EPVAP]-1659909187921
GPR[EPVS]-1659909187921
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new DimensionMismatchException(mean.length,nCols);
}

========
GPR[SPVS]-1659909187923
GPR[SPVAP]-1659909187923
GPR[EPVAP]-1659909188977
GPR[EPVS]-1659909188977
========
this.v=(double[])mean.clone();
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909188979
GPR[SPVAP]-1659909188979
GPR[EPVAP]-1659909190025
GPR[EPVS]-1659909190025
========
v=new double[parity];
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909190027
GPR[SPVAP]-1659909190027
GPR[EPVAP]-1659909191892
GPR[SPVATF]-1659909191892
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909193562
GPR[EPVS]-1659909193562
========
v=new double[parity];
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(mean.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909193564
GPR[SPVAP]-1659909193564
GPR[EPVAP]-1659909194605
GPR[EPVS]-1659909194605
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("insufficient data");
}

========
GPR[SPVS]-1659909194607
GPR[SPVAP]-1659909194607
GPR[EPVAP]-1659909196460
GPR[SPVATF]-1659909196460
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909198141
GPR[EPVS]-1659909198141
========
if(!isValidCoordinate(parity,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909198144
GPR[SPVAP]-1659909198144
GPR[EPVAP]-1659909200001
GPR[SPVATF]-1659909200001
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909201676
GPR[EPVS]-1659909201676
========
System.arraycopy(data[parity],0,new BigDecimal[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909201678
GPR[SPVAP]-1659909201678
GPR[EPVAP]-1659909202730
GPR[EPVS]-1659909202730
========
System.arraycopy(data[parity],0,new double[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909202732
GPR[SPVAP]-1659909202732
GPR[EPVAP]-1659909203803
GPR[EPVS]-1659909203803
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length*selectedColumns.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909203804
GPR[SPVAP]-1659909203804
GPR[EPVAP]-1659909204853
GPR[EPVS]-1659909204853
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909204854
GPR[SPVAP]-1659909204854
GPR[EPVAP]-1659909205908
GPR[EPVS]-1659909205908
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedColumns.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909205909
GPR[SPVAP]-1659909205909
GPR[EPVAP]-1659909206957
GPR[EPVS]-1659909206957
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909206958
GPR[SPVAP]-1659909206958
GPR[EPVAP]-1659909208822
GPR[SPVATF]-1659909208822
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909210500
GPR[EPVS]-1659909210500
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909210502
GPR[SPVAP]-1659909210502
GPR[EPVAP]-1659909212350
GPR[SPVATF]-1659909212350
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909214028
GPR[EPVS]-1659909214028
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=y0.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909214030
GPR[SPVAP]-1659909214030
GPR[EPVAP]-1659909215067
GPR[EPVS]-1659909215067
========
if(!isValidCoordinate(nRows,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909215069
GPR[SPVAP]-1659909215069
GPR[EPVAP]-1659909216107
GPR[EPVS]-1659909216107
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
if(x.length!=y.length){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909216109
GPR[SPVAP]-1659909216109
GPR[EPVAP]-1659909217159
GPR[EPVS]-1659909217159
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" absolute tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecAbsoluteTolerance.length)});
}

========
GPR[SPVS]-1659909217162
GPR[SPVAP]-1659909217162
GPR[EPVAP]-1659909218231
GPR[EPVS]-1659909218231
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" relative tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecRelativeTolerance.length)});
}

========
GPR[SPVS]-1659909218233
GPR[SPVAP]-1659909218233
GPR[EPVAP]-1659909219278
GPR[EPVS]-1659909219278
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(f.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909219281
GPR[SPVAP]-1659909219281
GPR[EPVAP]-1659909220337
GPR[EPVS]-1659909220337
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
if(f.length==1){
F[0]=new Complex(v[0],0.0);
return F;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909220338
GPR[SPVAP]-1659909220338
GPR[EPVAP]-1659909221395
GPR[EPVS]-1659909221395
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
F[0]=new Complex(v[0],0.0);
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909221396
GPR[SPVAP]-1659909221396
GPR[EPVAP]-1659909222442
GPR[EPVS]-1659909222442
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
verifyDataSet(v);
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909222444
GPR[SPVAP]-1659909222444
GPR[EPVAP]-1659909223490
GPR[EPVS]-1659909223490
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(f.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909223492
GPR[SPVAP]-1659909223492
GPR[EPVAP]-1659909224541
GPR[EPVS]-1659909224541
========
System.arraycopy(data[parity],0,new BigDecimal[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909224543
GPR[SPVAP]-1659909224543
GPR[EPVAP]-1659909225597
GPR[EPVS]-1659909225597
========
System.arraycopy(data[parity],0,new double[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909225598
GPR[SPVAP]-1659909225598
GPR[EPVAP]-1659909226649
GPR[EPVS]-1659909226649
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=sums.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909226650
GPR[SPVAP]-1659909226650
GPR[EPVAP]-1659909227701
GPR[EPVS]-1659909227701
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new DimensionMismatchException(v.length,sums.length);
}

========
GPR[SPVS]-1659909227702
GPR[SPVAP]-1659909227702
GPR[EPVAP]-1659909228745
GPR[EPVS]-1659909228745
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=means.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909228746
GPR[SPVAP]-1659909228746
GPR[EPVAP]-1659909229793
GPR[EPVS]-1659909229793
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new DimensionMismatchException(v.length,means.length);
}

========
GPR[SPVS]-1659909229794
GPR[SPVAP]-1659909229794
GPR[EPVAP]-1659909230840
GPR[EPVS]-1659909230840
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(m.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909230842
GPR[SPVAP]-1659909230842
GPR[EPVAP]-1659909231882
GPR[EPVS]-1659909231882
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(2*length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909231883
GPR[SPVAP]-1659909231884
GPR[EPVAP]-1659909232938
GPR[EPVS]-1659909232938
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",new Object[]{Integer.valueOf(parity),Integer.valueOf(nCols)});
}

========
GPR[SPVS]-1659909232940
GPR[SPVAP]-1659909232940
GPR[EPVAP]-1659909233996
GPR[EPVS]-1659909233996
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nCols!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909233998
GPR[SPVAP]-1659909233998
GPR[EPVAP]-1659909235048
GPR[EPVS]-1659909235048
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
if(v[nCols]<=0){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909235050
GPR[SPVAP]-1659909235050
GPR[EPVAP]-1659909236107
GPR[EPVS]-1659909236107
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(nCols==MULTIPLICATIVE_MODE){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909236109
GPR[SPVAP]-1659909236109
GPR[EPVAP]-1659909237157
GPR[EPVS]-1659909237157
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=MULTIPLICATIVE_MODE){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909237158
GPR[SPVAP]-1659909237158
GPR[EPVAP]-1659909238222
GPR[EPVS]-1659909238222
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==MULTIPLICATIVE_MODE){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909238224
GPR[SPVAP]-1659909238224
GPR[EPVAP]-1659909239265
GPR[EPVS]-1659909239265
========
System.arraycopy(v,0,new double[nRows],0,internalArray.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909239267
GPR[SPVAP]-1659909239267
GPR[EPVAP]-1659909240306
GPR[EPVS]-1659909240306
========
v=new double[nRows];
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909240307
GPR[SPVAP]-1659909240307
GPR[EPVAP]-1659909241348
GPR[EPVS]-1659909241348
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909241350
GPR[SPVAP]-1659909241350
GPR[EPVAP]-1659909242400
GPR[EPVS]-1659909242400
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==MULTIPLICATIVE_MODE){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909242401
GPR[SPVAP]-1659909242402
GPR[EPVAP]-1659909243446
GPR[EPVS]-1659909243446
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=MULTIPLICATIVE_MODE){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909243447
GPR[SPVAP]-1659909243447
GPR[EPVAP]-1659909244490
GPR[EPVS]-1659909244490
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
if(v[nCols-1]>=x[i]){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909244492
GPR[SPVAP]-1659909244492
GPR[EPVAP]-1659909245553
GPR[EPVS]-1659909245553
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909245555
GPR[SPVAP]-1659909245555
GPR[EPVAP]-1659909246612
GPR[EPVS]-1659909246612
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909246613
GPR[SPVAP]-1659909246613
GPR[EPVAP]-1659909247659
GPR[EPVS]-1659909247659
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909247660
GPR[SPVAP]-1659909247660
GPR[EPVAP]-1659909248708
GPR[EPVS]-1659909248708
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(interpolator.currentState!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909248710
GPR[SPVAP]-1659909248710
GPR[EPVAP]-1659909249753
GPR[EPVS]-1659909249753
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(interpolator.currentState!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909249755
GPR[SPVAP]-1659909249755
GPR[EPVAP]-1659909250807
GPR[EPVS]-1659909250807
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(data.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909250809
GPR[SPVAP]-1659909250809
GPR[EPVAP]-1659909252669
GPR[SPVATF]-1659909252669
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909254345
GPR[EPVS]-1659909254345
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(data.length!=nCols){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909254346
GPR[SPVAP]-1659909254346
GPR[EPVAP]-1659909256234
GPR[SPVATF]-1659909256234
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909257925
GPR[EPVS]-1659909257925
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909257928
GPR[SPVAP]-1659909257928
GPR[EPVAP]-1659909258980
GPR[EPVS]-1659909258980
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909258982
GPR[SPVAP]-1659909258982
GPR[EPVAP]-1659909260031
GPR[EPVS]-1659909260031
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909260032
GPR[SPVAP]-1659909260032
GPR[EPVAP]-1659909261095
GPR[EPVS]-1659909261095
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909261096
GPR[SPVAP]-1659909261096
GPR[EPVAP]-1659909262171
GPR[EPVS]-1659909262171
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909262172
GPR[SPVAP]-1659909262172
GPR[EPVAP]-1659909263433
GPR[EPVS]-1659909263433
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909263442
GPR[SPVAP]-1659909263442
GPR[EPVAP]-1659909264685
GPR[EPVS]-1659909264685
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909264687
GPR[SPVAP]-1659909264687
GPR[EPVAP]-1659909265739
GPR[EPVS]-1659909265739
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909265741
GPR[SPVAP]-1659909265741
GPR[EPVAP]-1659909266793
GPR[EPVS]-1659909266793
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909266795
GPR[SPVAP]-1659909266795
GPR[EPVAP]-1659909267848
GPR[EPVS]-1659909267848
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909267850
GPR[SPVAP]-1659909267850
GPR[EPVAP]-1659909268891
GPR[EPVS]-1659909268891
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909268892
GPR[SPVAP]-1659909268892
GPR[EPVAP]-1659909269944
GPR[EPVS]-1659909269944
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909269945
GPR[SPVAP]-1659909269945
GPR[EPVAP]-1659909271004
GPR[EPVS]-1659909271004
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909271005
GPR[SPVAP]-1659909271005
GPR[EPVAP]-1659909272067
GPR[EPVS]-1659909272067
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909272069
GPR[SPVAP]-1659909272069
GPR[EPVAP]-1659909273110
GPR[EPVS]-1659909273110
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909273112
GPR[SPVAP]-1659909273112
GPR[EPVAP]-1659909274157
GPR[EPVS]-1659909274157
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909274158
GPR[SPVAP]-1659909274158
GPR[EPVAP]-1659909275222
GPR[EPVS]-1659909275222
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909275224
GPR[SPVAP]-1659909275224
GPR[EPVAP]-1659909276273
GPR[EPVS]-1659909276273
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909276275
GPR[SPVAP]-1659909276275
GPR[EPVAP]-1659909277325
GPR[EPVS]-1659909277325
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length==null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909277326
GPR[SPVAP]-1659909277326
GPR[EPVAP]-1659909278392
GPR[EPVS]-1659909278392
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(length!=null){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909278393
GPR[SPVAP]-1659909278393
GPR[EPVAP]-1659909279480
GPR[EPVS]-1659909279480
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length*selectedColumns.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909279482
GPR[SPVAP]-1659909279482
GPR[EPVAP]-1659909280525
GPR[EPVS]-1659909280525
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909280526
GPR[SPVAP]-1659909280526
GPR[EPVAP]-1659909281568
GPR[EPVS]-1659909281568
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedColumns.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909281570
GPR[SPVAP]-1659909281570
GPR[EPVAP]-1659909282615
GPR[EPVS]-1659909282615
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length*selectedColumns.length!=nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909282617
GPR[SPVAP]-1659909282617
GPR[EPVAP]-1659909283660
GPR[EPVS]-1659909283660
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length!=nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909283661
GPR[SPVAP]-1659909283661
GPR[EPVAP]-1659909284701
GPR[EPVS]-1659909284701
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedColumns.length!=nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909284702
GPR[SPVAP]-1659909284702
GPR[EPVAP]-1659909285748
GPR[EPVS]-1659909285748
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length*selectedColumns.length==nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909285750
GPR[SPVAP]-1659909285750
GPR[EPVAP]-1659909286793
GPR[EPVS]-1659909286793
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedRows.length==nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909286794
GPR[SPVAP]-1659909286794
GPR[EPVAP]-1659909287837
GPR[EPVS]-1659909287837
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(selectedColumns.length==nCols){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909287838
GPR[SPVAP]-1659909287838
GPR[EPVAP]-1659909288905
GPR[EPVS]-1659909288905
GPR[ESUN]-1659909288908
GPR[SSUN]-1659909288908
org.apache.commons.math.linear.RealMatrixImpl,775
GPR[ESUN]-1659909289129
GPR[SSUN]-1659909289129
org.apache.commons.math.linear.RealMatrixImpl,776
========
if(v.length!=nCols){
throw new IllegalArgumentException("All input rows must have the same length.");
}

========
GPR[SPVS]-1659909289873
GPR[SPVAP]-1659909289873
GPR[EPVAP]-1659909293545
GPR[SPVATF]-1659909293545
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909295229
GPR[EPVS]-1659909295229
========
if(knots.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909295230
GPR[SPVAP]-1659909295230
GPR[EPVAP]-1659909296296
GPR[EPVS]-1659909296296
========
if(v.length!=nCols){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}

========
GPR[SPVS]-1659909296297
GPR[SPVAP]-1659909296297
GPR[EPVAP]-1659909298170
GPR[SPVATF]-1659909298170
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909299855
GPR[EPVS]-1659909299855
========
if(in.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909299857
GPR[SPVAP]-1659909299857
GPR[EPVAP]-1659909300910
GPR[EPVS]-1659909300910
========
if(v.length!=nCols){
throw new IllegalArgumentException("Input table must have at least two rows");
}

========
GPR[SPVS]-1659909300911
GPR[SPVAP]-1659909300911
GPR[EPVAP]-1659909302779
GPR[SPVATF]-1659909302779
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909304469
GPR[EPVS]-1659909304469
========
if(array.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909304471
GPR[SPVAP]-1659909304471
GPR[EPVAP]-1659909305519
GPR[EPVS]-1659909305519
========
if(v.length!=nCols){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}

========
GPR[SPVS]-1659909305521
GPR[SPVAP]-1659909305521
GPR[EPVAP]-1659909307395
GPR[SPVATF]-1659909307395
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909309086
GPR[EPVS]-1659909309086
========
if(v.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909309087
GPR[SPVAP]-1659909309087
GPR[EPVAP]-1659909310951
GPR[SPVATF]-1659909310951
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909312606
GPR[EPVS]-1659909312606
========
if(b.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909312608
GPR[SPVAP]-1659909312608
GPR[EPVAP]-1659909313657
GPR[EPVS]-1659909313657
========
if(v.length!=nCols){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909313659
GPR[SPVAP]-1659909313659
GPR[EPVAP]-1659909315533
GPR[SPVATF]-1659909315533
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909317212
GPR[EPVS]-1659909317212
========
if(b.length!=nCols){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909317214
GPR[SPVAP]-1659909317214
GPR[EPVAP]-1659909318265
GPR[EPVS]-1659909318265
========
if(b.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909318266
GPR[SPVAP]-1659909318266
GPR[EPVAP]-1659909319313
GPR[EPVS]-1659909319313
========
if(v.length!=nRows){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909319315
GPR[SPVAP]-1659909319315
GPR[EPVAP]-1659909321168
GPR[SPVATF]-1659909321168
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909322827
GPR[EPVS]-1659909322827
========
if(b.length!=nRows){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909322829
GPR[SPVAP]-1659909322829
GPR[EPVAP]-1659909323874
GPR[EPVS]-1659909323874
========
if(x.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909323875
GPR[SPVAP]-1659909323875
GPR[EPVAP]-1659909324925
GPR[EPVS]-1659909324925
========
if(x.length!=y.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909324926
GPR[SPVAP]-1659909324926
GPR[EPVAP]-1659909325968
GPR[EPVS]-1659909325969
========
if(v.length!=y.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909325970
GPR[SPVAP]-1659909325970
GPR[EPVAP]-1659909327013
GPR[EPVS]-1659909327013
========
if(v.length!=length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909327015
GPR[SPVAP]-1659909327015
GPR[EPVAP]-1659909328060
GPR[EPVS]-1659909328060
========
if(v.length!=nCols){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909328061
GPR[SPVAP]-1659909328061
GPR[EPVAP]-1659909329946
GPR[SPVATF]-1659909329946
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909331646
GPR[EPVS]-1659909331646
========
if(x.length!=nCols){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909331647
GPR[SPVAP]-1659909331647
GPR[EPVAP]-1659909332692
GPR[EPVS]-1659909332692
========
if(v.length!=nCols){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909332694
GPR[SPVAP]-1659909332694
GPR[EPVAP]-1659909334547
GPR[SPVATF]-1659909334547
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909336203
GPR[EPVS]-1659909336203
========
if(x.length!=length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909336205
GPR[SPVAP]-1659909336205
GPR[EPVAP]-1659909337288
GPR[EPVS]-1659909337288
========
if(x.length!=nCols){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909337290
GPR[SPVAP]-1659909337290
GPR[EPVAP]-1659909338341
GPR[EPVS]-1659909338341
========
if(x.length!=y.length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909338343
GPR[SPVAP]-1659909338343
GPR[EPVAP]-1659909339381
GPR[EPVS]-1659909339381
========
if(v.length!=y.length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909339383
GPR[SPVAP]-1659909339383
GPR[EPVAP]-1659909340442
GPR[EPVS]-1659909340442
========
if(v.length!=length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909340444
GPR[SPVAP]-1659909340444
GPR[EPVAP]-1659909341494
GPR[EPVS]-1659909341494
========
if(x.length!=length){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909341495
GPR[SPVAP]-1659909341495
GPR[EPVAP]-1659909342554
GPR[EPVS]-1659909342554
========
if(v.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909342556
GPR[SPVAP]-1659909342556
GPR[EPVAP]-1659909344424
GPR[SPVATF]-1659909344424
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909346083
GPR[EPVS]-1659909346083
========
if(x.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909346085
GPR[SPVAP]-1659909346085
GPR[EPVAP]-1659909347129
GPR[EPVS]-1659909347129
========
if(x.length!=y.length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909347130
GPR[SPVAP]-1659909347130
GPR[EPVAP]-1659909348185
GPR[EPVS]-1659909348185
========
if(v.length!=y.length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909348186
GPR[SPVAP]-1659909348186
GPR[EPVAP]-1659909349253
GPR[EPVS]-1659909349253
========
if(v.length!=length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909349254
GPR[SPVAP]-1659909349254
GPR[EPVAP]-1659909350294
GPR[EPVS]-1659909350294
========
if(x.length!=length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909350295
GPR[SPVAP]-1659909350295
GPR[EPVAP]-1659909351362
GPR[EPVS]-1659909351362
========
if(x.length!=covariance.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909351364
GPR[SPVAP]-1659909351364
GPR[EPVAP]-1659909352417
GPR[EPVS]-1659909352417
========
if(v.length!=covariance.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909352419
GPR[SPVAP]-1659909352419
GPR[EPVAP]-1659909353479
GPR[EPVS]-1659909353479
========
if(v.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909353480
GPR[SPVAP]-1659909353480
GPR[EPVAP]-1659909355347
GPR[SPVATF]-1659909355347
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909357017
GPR[EPVS]-1659909357017
========
if(x.length!=nCols){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909357018
GPR[SPVAP]-1659909357018
GPR[EPVAP]-1659909358067
GPR[EPVS]-1659909358067
========
if(v.length!=length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909358068
GPR[SPVAP]-1659909358068
GPR[EPVAP]-1659909359115
GPR[EPVS]-1659909359115
========
if(x.length!=length){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909359117
GPR[SPVAP]-1659909359117
GPR[EPVAP]-1659909360173
GPR[EPVS]-1659909360173
========
if(mean.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909360175
GPR[SPVAP]-1659909360175
GPR[EPVAP]-1659909361219
GPR[EPVS]-1659909361219
========
if(mean.length!=standardDeviation.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909361220
GPR[SPVAP]-1659909361220
GPR[EPVAP]-1659909362309
GPR[EPVS]-1659909362309
========
if(v.length!=standardDeviation.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909362310
GPR[SPVAP]-1659909362310
GPR[EPVAP]-1659909363375
GPR[EPVS]-1659909363375
========
if(v.length!=nCols){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909363377
GPR[SPVAP]-1659909363377
GPR[EPVAP]-1659909365225
GPR[SPVATF]-1659909365225
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909366885
GPR[EPVS]-1659909366885
========
if(mean.length!=length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909366887
GPR[SPVAP]-1659909366887
GPR[EPVAP]-1659909367939
GPR[EPVS]-1659909367939
========
if(mean.length!=nCols){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909367940
GPR[SPVAP]-1659909367940
GPR[EPVAP]-1659909368991
GPR[EPVS]-1659909368991
========
if(v.length!=length){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909368993
GPR[SPVAP]-1659909368993
GPR[EPVAP]-1659909370039
GPR[EPVS]-1659909370039
========
if(mean.length!=length){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909370040
GPR[SPVAP]-1659909370040
GPR[EPVAP]-1659909371090
GPR[EPVS]-1659909371090
========
if(v.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909371092
GPR[SPVAP]-1659909371092
GPR[EPVAP]-1659909372948
GPR[SPVATF]-1659909372948
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909374625
GPR[EPVS]-1659909374625
========
if(v.length!=nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659909374627
GPR[SPVAP]-1659909374627
GPR[EPVAP]-1659909376514
GPR[SPVATF]-1659909376514
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909378179
GPR[EPVS]-1659909378179
========
if(v.length==nCols){
throw new IllegalArgumentException("Matrix must have at least one column.");
}

========
GPR[SPVS]-1659909378180
GPR[SPVAP]-1659909378180
GPR[EPVAP]-1659909380055
GPR[SPVATF]-1659909380055
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909381741
GPR[EPVS]-1659909381741
========
if(v.length!=polynomials.length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909381742
GPR[SPVAP]-1659909381742
GPR[EPVAP]-1659909382792
GPR[EPVS]-1659909382792
========
if(v.length!=nCols){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909382794
GPR[SPVAP]-1659909382794
GPR[EPVAP]-1659909384667
GPR[SPVATF]-1659909384667
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909386335
GPR[EPVS]-1659909386335
========
if(knots.length!=length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909386336
GPR[SPVAP]-1659909386336
GPR[EPVAP]-1659909387394
GPR[EPVS]-1659909387394
========
if(knots.length!=nCols){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909387395
GPR[SPVAP]-1659909387395
GPR[EPVAP]-1659909388460
GPR[EPVS]-1659909388460
========
if(v.length!=length){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909388462
GPR[SPVAP]-1659909388462
GPR[EPVAP]-1659909389513
GPR[EPVS]-1659909389513
========
if(knots.length!=length){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909389514
GPR[SPVAP]-1659909389514
GPR[EPVAP]-1659909390564
GPR[EPVS]-1659909390564
========
if(a.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909390566
GPR[SPVAP]-1659909390566
GPR[EPVAP]-1659909391603
GPR[EPVS]-1659909391603
========
if(v.length!=nCols){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909391604
GPR[SPVAP]-1659909391604
GPR[EPVAP]-1659909393485
GPR[SPVATF]-1659909393486
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909395155
GPR[EPVS]-1659909395155
========
if(a.length!=length){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909395156
GPR[SPVAP]-1659909395156
GPR[EPVAP]-1659909396214
GPR[EPVS]-1659909396214
========
if(a.length!=nCols){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909396215
GPR[SPVAP]-1659909396215
GPR[EPVAP]-1659909397287
GPR[EPVS]-1659909397287
========
if(v.length!=length){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909397288
GPR[SPVAP]-1659909397288
GPR[EPVAP]-1659909398341
GPR[EPVS]-1659909398341
========
if(a.length!=length){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909398343
GPR[SPVAP]-1659909398343
GPR[EPVAP]-1659909399397
GPR[EPVS]-1659909399397
========
if(v.length!=nCols){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909399399
GPR[SPVAP]-1659909399399
GPR[EPVAP]-1659909401256
GPR[SPVATF]-1659909401256
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909402941
GPR[EPVS]-1659909402941
========
if(a.length!=nCols){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909402942
GPR[SPVAP]-1659909402942
GPR[EPVAP]-1659909403987
GPR[EPVS]-1659909403987
========
if(v.length!=length){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909403988
GPR[SPVAP]-1659909403988
GPR[EPVAP]-1659909405058
GPR[EPVS]-1659909405058
========
if(a.length!=length){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909405059
GPR[SPVAP]-1659909405059
GPR[EPVAP]-1659909406111
GPR[EPVS]-1659909406111
========
if(v.length!=nCols){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909406113
GPR[SPVAP]-1659909406113
GPR[EPVAP]-1659909407977
GPR[SPVATF]-1659909407977
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909409645
GPR[EPVS]-1659909409645
========
if(x.length!=nCols){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909409647
GPR[SPVAP]-1659909409647
GPR[EPVAP]-1659909410704
GPR[EPVS]-1659909410704
========
if(v.length!=length){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909410706
GPR[SPVAP]-1659909410706
GPR[EPVAP]-1659909411772
GPR[EPVS]-1659909411772
========
if(x.length!=length){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909411773
GPR[SPVAP]-1659909411773
GPR[EPVAP]-1659909412836
GPR[EPVS]-1659909412836
========
if(v.length!=nCols){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}

========
GPR[SPVS]-1659909412837
GPR[SPVAP]-1659909412837
GPR[EPVAP]-1659909414705
GPR[SPVATF]-1659909414705
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909416373
GPR[EPVS]-1659909416373
========
if(x.length!=nCols){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}

========
GPR[SPVS]-1659909416374
GPR[SPVAP]-1659909416374
GPR[EPVAP]-1659909417417
GPR[EPVS]-1659909417417
========
if(v.length!=nCols){
throw new IllegalArgumentException("Coefficient array must have positive length for evaluation");
}

========
GPR[SPVS]-1659909417418
GPR[SPVAP]-1659909417418
GPR[EPVAP]-1659909419297
GPR[SPVATF]-1659909419297
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909420962
GPR[EPVS]-1659909420962
========
if(v.length!=nCols){
throw new IllegalArgumentException("Coefficient array must have positive length for differentiation");
}

========
GPR[SPVS]-1659909420963
GPR[SPVAP]-1659909420963
GPR[EPVAP]-1659909422840
GPR[SPVATF]-1659909422840
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909424563
GPR[EPVS]-1659909424563
========
if(nRows!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909424564
GPR[SPVAP]-1659909424564
GPR[EPVAP]-1659909426439
GPR[SPVATF]-1659909426439
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909428110
GPR[EPVS]-1659909428110
========
if(v.length!=nCols){
throw new IllegalArgumentException("Matrix must have at least one row.");
}

========
GPR[SPVS]-1659909428112
GPR[SPVAP]-1659909428112
GPR[EPVAP]-1659909429968
GPR[SPVATF]-1659909429968
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909431657
GPR[EPVS]-1659909431657
========
if(nRows==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909431659
GPR[SPVAP]-1659909431659
GPR[EPVAP]-1659909433516
GPR[SPVATF]-1659909433516
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909435184
GPR[EPVS]-1659909435184
========
if(v.length==nCols){
throw new IllegalArgumentException("Matrix must have at least one row.");
}

========
GPR[SPVS]-1659909435185
GPR[SPVAP]-1659909435185
GPR[EPVAP]-1659909437036
GPR[SPVATF]-1659909437036
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909438710
GPR[EPVS]-1659909438710
========
if(nRows!=nCols){
throw new IllegalArgumentException("Matrix must have at least one row.");
}

========
GPR[SPVS]-1659909438711
GPR[SPVAP]-1659909438711
GPR[EPVAP]-1659909440565
GPR[SPVATF]-1659909440565
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909442234
GPR[EPVS]-1659909442234
========
if(nRows==nCols){
throw new IllegalArgumentException("Matrix must have at least one row.");
}

========
GPR[SPVS]-1659909442236
GPR[SPVAP]-1659909442236
GPR[EPVAP]-1659909444112
GPR[SPVATF]-1659909444112
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909445781
GPR[EPVS]-1659909445781
========
if(expected.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909445783
GPR[SPVAP]-1659909445783
GPR[EPVAP]-1659909446850
GPR[EPVS]-1659909446850
========
if(v.length!=nCols){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}

========
GPR[SPVS]-1659909446851
GPR[SPVAP]-1659909446851
GPR[EPVAP]-1659909448720
GPR[SPVATF]-1659909448720
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909450405
GPR[EPVS]-1659909450405
========
if(v.length!=length){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}

========
GPR[SPVS]-1659909450406
GPR[SPVAP]-1659909450406
GPR[EPVAP]-1659909451467
GPR[EPVS]-1659909451467
========
if(observed1.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909451469
GPR[SPVAP]-1659909451469
GPR[EPVAP]-1659909452511
GPR[EPVS]-1659909452511
========
if(v.length!=nCols){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}

========
GPR[SPVS]-1659909452512
GPR[SPVAP]-1659909452512
GPR[EPVAP]-1659909454425
GPR[SPVATF]-1659909454425
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909456107
GPR[EPVS]-1659909456107
========
if(v.length!=length){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}

========
GPR[SPVS]-1659909456108
GPR[SPVAP]-1659909456108
GPR[EPVAP]-1659909457178
GPR[EPVS]-1659909457178
========
if(sample2.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909457180
GPR[SPVAP]-1659909457180
GPR[EPVAP]-1659909458233
GPR[EPVS]-1659909458233
========
if(v.length!=n){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909458235
GPR[SPVAP]-1659909458235
GPR[EPVAP]-1659909459281
GPR[EPVS]-1659909459281
========
if(v.length!=nCols){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}

========
GPR[SPVS]-1659909459283
GPR[SPVAP]-1659909459283
GPR[EPVAP]-1659909461161
GPR[SPVATF]-1659909461161
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909462850
GPR[EPVS]-1659909462850
========
if(v.length!=nCols){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659909462852
GPR[SPVAP]-1659909462852
GPR[EPVAP]-1659909464723
GPR[SPVATF]-1659909464723
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909466412
GPR[EPVS]-1659909466412
========
if(v.length!=n){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659909466414
GPR[SPVAP]-1659909466414
GPR[EPVAP]-1659909467459
GPR[EPVS]-1659909467459
========
if(v.length!=length){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659909467460
GPR[SPVAP]-1659909467460
GPR[EPVAP]-1659909468509
GPR[EPVS]-1659909468509
========
if(v.length!=nCols){
throw new IllegalArgumentException("Input table must have at least two columns");
}

========
GPR[SPVS]-1659909468510
GPR[SPVAP]-1659909468510
GPR[EPVAP]-1659909470398
GPR[SPVATF]-1659909470398
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909472065
GPR[EPVS]-1659909472065
========
if(covariance.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909472066
GPR[SPVAP]-1659909472066
GPR[EPVAP]-1659909473112
GPR[EPVS]-1659909473112
========
if(v.length!=nCols){
throw new IllegalArgumentException("The covariance matrix must be square");
}

========
GPR[SPVS]-1659909473113
GPR[SPVAP]-1659909473113
GPR[EPVAP]-1659909474976
GPR[SPVATF]-1659909474976
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909476655
GPR[EPVS]-1659909476655
========
if(v.length!=length){
throw new IllegalArgumentException("The covariance matrix must be square");
}

========
GPR[SPVS]-1659909476656
GPR[SPVAP]-1659909476656
GPR[EPVAP]-1659909477698
GPR[EPVS]-1659909477698
========
if(v.length!=nCols){
throw new IllegalArgumentException("Polynomial degree must be positive: degree="+nCols);
}

========
GPR[SPVS]-1659909477700
GPR[SPVAP]-1659909477700
GPR[EPVAP]-1659909479553
GPR[SPVATF]-1659909479553
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909481226
GPR[EPVS]-1659909481226
========
if(length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909481228
GPR[SPVAP]-1659909481228
GPR[EPVAP]-1659909482336
GPR[EPVS]-1659909482336
========
if(v.length!=null){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909482338
GPR[SPVAP]-1659909482338
GPR[EPVAP]-1659909483400
GPR[EPVS]-1659909483400
========
if(v.length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909483402
GPR[SPVAP]-1659909483402
GPR[EPVAP]-1659909485257
GPR[SPVATF]-1659909485257
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909486934
GPR[EPVS]-1659909486934
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909486935
GPR[SPVAP]-1659909486935
GPR[EPVAP]-1659909488788
GPR[SPVATF]-1659909488788
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909490484
GPR[EPVS]-1659909490484
========
if(v.length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909490485
GPR[SPVAP]-1659909490485
GPR[EPVAP]-1659909492373
GPR[SPVATF]-1659909492373
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909494065
GPR[EPVS]-1659909494065
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909494066
GPR[SPVAP]-1659909494066
GPR[EPVAP]-1659909495935
GPR[SPVATF]-1659909495935
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909497621
GPR[EPVS]-1659909497621
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909497623
GPR[SPVAP]-1659909497623
GPR[EPVAP]-1659909499487
GPR[SPVATF]-1659909499487
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909501177
GPR[EPVS]-1659909501177
========
if(nCols==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==nCols){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909501178
GPR[SPVAP]-1659909501178
GPR[EPVAP]-1659909503077
GPR[SPVATF]-1659909503077
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909504762
GPR[EPVS]-1659909504762
========
if(v.length!=column){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909504764
GPR[SPVAP]-1659909504764
GPR[EPVAP]-1659909505814
GPR[EPVS]-1659909505814
========
if(v.length!=nCols){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909505815
GPR[SPVAP]-1659909505815
GPR[EPVAP]-1659909507709
GPR[SPVATF]-1659909507709
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909509392
GPR[EPVS]-1659909509392
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909509393
GPR[SPVAP]-1659909509393
GPR[EPVAP]-1659909511277
GPR[SPVATF]-1659909511277
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1
GPR[EPVATF]-1659909512969
GPR[EPVS]-1659909512969
Timeout!
GPR[SFL]-1659909513285
GPR[EFL]-1659909513288
GPR[SFP]-1659909513288
TIMEOUT : 2220000
GPR[SSUN]-1659909513290
org.apache.commons.math.linear.BigMatrixImpl,986
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909513999
GPR[SPVAP]-1659909513999
GPR[EPVAP]-1659909515551
GPR[EPVS]-1659909515551
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}

========
GPR[SPVS]-1659909515553
GPR[SPVAP]-1659909515553
GPR[EPVAP]-1659909518933
GPR[SPVATF]-1659909518933
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909520620
GPR[EPVS]-1659909520620
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909520622
GPR[SPVAP]-1659909520622
GPR[EPVAP]-1659909521688
GPR[EPVS]-1659909521688
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}

========
GPR[SPVS]-1659909521690
GPR[SPVAP]-1659909521690
GPR[EPVAP]-1659909523580
GPR[SPVATF]-1659909523580
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909525262
GPR[EPVS]-1659909525262
========
if(c.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909525263
GPR[SPVAP]-1659909525263
GPR[EPVAP]-1659909526329
GPR[EPVS]-1659909526329
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Polynomial coefficient array must have postive length.");
}

========
GPR[SPVS]-1659909526330
GPR[SPVAP]-1659909526330
GPR[EPVAP]-1659909528197
GPR[SPVATF]-1659909528197
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909529909
GPR[EPVS]-1659909529909
========
if(in.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909529911
GPR[SPVAP]-1659909529911
GPR[EPVAP]-1659909530958
GPR[EPVS]-1659909530958
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two rows");
}

========
GPR[SPVS]-1659909530960
GPR[SPVAP]-1659909530960
GPR[EPVAP]-1659909532816
GPR[SPVATF]-1659909532816
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909534519
GPR[EPVS]-1659909534519
========
if(array.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909534521
GPR[SPVAP]-1659909534521
GPR[EPVAP]-1659909535583
GPR[EPVS]-1659909535583
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}

========
GPR[SPVS]-1659909535585
GPR[SPVAP]-1659909535585
GPR[EPVAP]-1659909537451
GPR[SPVATF]-1659909537451
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909539156
GPR[EPVS]-1659909539156
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909539159
GPR[SPVAP]-1659909539159
GPR[EPVAP]-1659909540213
GPR[EPVS]-1659909540213
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909540214
GPR[SPVAP]-1659909540214
GPR[EPVAP]-1659909542111
GPR[SPVATF]-1659909542111
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909543769
GPR[EPVS]-1659909543769
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}

========
GPR[SPVS]-1659909543771
GPR[SPVAP]-1659909543771
GPR[EPVAP]-1659909544832
GPR[EPVS]-1659909544832
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909544834
GPR[SPVAP]-1659909544834
GPR[EPVAP]-1659909546709
GPR[SPVATF]-1659909546709
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909548374
GPR[EPVS]-1659909548374
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}

========
GPR[SPVS]-1659909548376
GPR[SPVAP]-1659909548376
GPR[EPVAP]-1659909549436
GPR[EPVS]-1659909549436
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909549438
GPR[SPVAP]-1659909549438
GPR[EPVAP]-1659909551342
GPR[SPVATF]-1659909551342
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909553024
GPR[EPVS]-1659909553024
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}

========
GPR[SPVS]-1659909553026
GPR[SPVAP]-1659909553026
GPR[EPVAP]-1659909554076
GPR[EPVS]-1659909554076
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909554078
GPR[SPVAP]-1659909554078
GPR[EPVAP]-1659909555959
GPR[SPVATF]-1659909555959
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909557629
GPR[EPVS]-1659909557629
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}

========
GPR[SPVS]-1659909557631
GPR[SPVAP]-1659909557631
GPR[EPVAP]-1659909558696
GPR[EPVS]-1659909558696
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909558698
GPR[SPVAP]-1659909558698
GPR[EPVAP]-1659909560560
GPR[SPVATF]-1659909560560
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909562245
GPR[EPVS]-1659909562245
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}

========
GPR[SPVS]-1659909562247
GPR[SPVAP]-1659909562247
GPR[EPVAP]-1659909563316
GPR[EPVS]-1659909563316
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909563318
GPR[SPVAP]-1659909563318
GPR[EPVAP]-1659909564387
GPR[EPVS]-1659909564387
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909564389
GPR[SPVAP]-1659909564389
GPR[EPVAP]-1659909566284
GPR[SPVATF]-1659909566284
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909567994
GPR[EPVS]-1659909567994
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}

========
GPR[SPVS]-1659909567996
GPR[SPVAP]-1659909567996
GPR[EPVAP]-1659909569062
GPR[EPVS]-1659909569062
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909569064
GPR[SPVAP]-1659909569064
GPR[EPVAP]-1659909570921
GPR[SPVATF]-1659909570921
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909572599
GPR[EPVS]-1659909572599
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}

========
GPR[SPVS]-1659909572600
GPR[SPVAP]-1659909572600
GPR[EPVAP]-1659909573667
GPR[EPVS]-1659909573667
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909573669
GPR[SPVAP]-1659909573669
GPR[EPVAP]-1659909574720
GPR[EPVS]-1659909574720
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909574722
GPR[SPVAP]-1659909574722
GPR[EPVAP]-1659909576607
GPR[SPVATF]-1659909576607
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909578289
GPR[EPVS]-1659909578289
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}

========
GPR[SPVS]-1659909578290
GPR[SPVAP]-1659909578290
GPR[EPVAP]-1659909579349
GPR[EPVS]-1659909579349
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909579350
GPR[SPVAP]-1659909579350
GPR[EPVAP]-1659909581210
GPR[SPVATF]-1659909581210
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909582881
GPR[EPVS]-1659909582881
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}

========
GPR[SPVS]-1659909582883
GPR[SPVAP]-1659909582883
GPR[EPVAP]-1659909583933
GPR[EPVS]-1659909583933
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909583934
GPR[SPVAP]-1659909583934
GPR[EPVAP]-1659909585791
GPR[SPVATF]-1659909585791
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909587484
GPR[EPVS]-1659909587484
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}

========
GPR[SPVS]-1659909587485
GPR[SPVAP]-1659909587485
GPR[EPVAP]-1659909588545
GPR[EPVS]-1659909588545
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two columns");
}

========
GPR[SPVS]-1659909588546
GPR[SPVAP]-1659909588546
GPR[EPVAP]-1659909590430
GPR[SPVATF]-1659909590430
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909592109
GPR[EPVS]-1659909592109
========
if(sample2.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909592110
GPR[SPVAP]-1659909592110
GPR[EPVAP]-1659909593170
GPR[EPVS]-1659909593170
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}

========
GPR[SPVS]-1659909593171
GPR[SPVAP]-1659909593171
GPR[EPVAP]-1659909595046
GPR[SPVATF]-1659909595046
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909596748
GPR[EPVS]-1659909596748
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}

========
GPR[SPVS]-1659909596750
GPR[SPVAP]-1659909596750
GPR[EPVAP]-1659909598624
GPR[SPVATF]-1659909598624
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909600296
GPR[EPVS]-1659909600296
========
if(expected.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909600298
GPR[SPVAP]-1659909600298
GPR[EPVAP]-1659909601360
GPR[EPVS]-1659909601360
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}

========
GPR[SPVS]-1659909601362
GPR[SPVAP]-1659909601362
GPR[EPVAP]-1659909603253
GPR[SPVATF]-1659909603253
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909604924
GPR[EPVS]-1659909604924
========
if(observed1.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909604926
GPR[SPVAP]-1659909604926
GPR[EPVAP]-1659909605979
GPR[EPVS]-1659909605979
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}

========
GPR[SPVS]-1659909605980
GPR[SPVAP]-1659909605980
GPR[EPVAP]-1659909607863
GPR[SPVATF]-1659909607863
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909609542
GPR[EPVS]-1659909609542
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("All input rows must have the same length.");
}

========
GPR[SPVS]-1659909609543
GPR[SPVAP]-1659909609543
GPR[EPVAP]-1659909611435
GPR[SPVATF]-1659909611435
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909613118
GPR[EPVS]-1659909613118
========
if(covariance.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909613119
GPR[SPVAP]-1659909613119
GPR[EPVAP]-1659909614178
GPR[EPVS]-1659909614178
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The covariance matrix must be square");
}

========
GPR[SPVS]-1659909614179
GPR[SPVAP]-1659909614179
GPR[EPVAP]-1659909616053
GPR[SPVATF]-1659909616053
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909617710
GPR[EPVS]-1659909617710
========
if(getInterpolatedState().length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909617712
GPR[SPVAP]-1659909617712
GPR[EPVAP]-1659909618765
GPR[EPVS]-1659909618765
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("state vector dimension mismatch");
}

========
GPR[SPVS]-1659909618766
GPR[SPVAP]-1659909618766
GPR[EPVAP]-1659909620669
GPR[SPVATF]-1659909620669
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909622381
GPR[EPVS]-1659909622381
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909622382
GPR[SPVAP]-1659909622382
GPR[EPVAP]-1659909624249
GPR[SPVATF]-1659909624249
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909626105
GPR[EPVS]-1659909626105
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909626106
GPR[SPVAP]-1659909626106
GPR[EPVAP]-1659909627203
GPR[EPVS]-1659909627203
========
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909627208
GPR[SPVAP]-1659909627208
GPR[EPVAP]-1659909629124
GPR[SPVATF]-1659909629124
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909630797
GPR[EPVS]-1659909630797
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909630799
GPR[SPVAP]-1659909630799
GPR[EPVAP]-1659909631859
GPR[EPVS]-1659909631859
========
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909631861
GPR[SPVAP]-1659909631861
GPR[EPVAP]-1659909633733
GPR[SPVATF]-1659909633733
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909635418
GPR[EPVS]-1659909635418
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("matrix dimension mismatch");
}

========
GPR[SPVS]-1659909635420
GPR[SPVAP]-1659909635420
GPR[EPVAP]-1659909637290
GPR[SPVATF]-1659909637290
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909638961
GPR[EPVS]-1659909638961
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909638962
GPR[SPVAP]-1659909638962
GPR[EPVAP]-1659909640836
GPR[SPVATF]-1659909640836
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909642517
GPR[EPVS]-1659909642517
========
if(subMatrix.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909642518
GPR[SPVAP]-1659909642518
GPR[EPVAP]-1659909643571
GPR[EPVS]-1659909643571
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909643573
GPR[SPVAP]-1659909643573
GPR[EPVAP]-1659909644632
GPR[EPVS]-1659909644632
========
if(selectedRows.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909644634
GPR[SPVAP]-1659909644634
GPR[EPVAP]-1659909645696
GPR[EPVS]-1659909645696
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909645697
GPR[SPVAP]-1659909645697
GPR[EPVAP]-1659909646755
GPR[EPVS]-1659909646755
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909646756
GPR[SPVAP]-1659909646756
GPR[EPVAP]-1659909648624
GPR[SPVATF]-1659909648624
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909650296
GPR[EPVS]-1659909650296
========
if(v.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909650298
GPR[SPVAP]-1659909650298
GPR[EPVAP]-1659909652179
GPR[SPVATF]-1659909652179
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909653858
GPR[EPVS]-1659909653858
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data for t statistic");
}

========
GPR[SPVS]-1659909653860
GPR[SPVAP]-1659909653860
GPR[EPVAP]-1659909655765
GPR[SPVATF]-1659909655765
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909657437
GPR[EPVS]-1659909657437
========
if(v.length!=this.getColumnDimension()){
if(x.length!=y.length){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909657439
GPR[SPVAP]-1659909657439
GPR[EPVAP]-1659909658515
GPR[EPVS]-1659909658515
========
if(roundingMode!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909658517
GPR[SPVAP]-1659909658517
GPR[EPVAP]-1659909660381
GPR[SPVATF]-1659909660381
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909662083
GPR[EPVS]-1659909662083
========
if(v.length!=this.getColumnDimension()){
if(roundingMode==bytes.length){
return ;
}
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909662084
GPR[SPVAP]-1659909662084
GPR[EPVAP]-1659909663141
GPR[EPVS]-1659909663141
========
if(roundingMode==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909663142
GPR[SPVAP]-1659909663142
GPR[EPVAP]-1659909665063
GPR[SPVATF]-1659909665063
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909666745
GPR[EPVS]-1659909666745
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data");
}

========
GPR[SPVS]-1659909666746
GPR[SPVAP]-1659909666746
GPR[EPVAP]-1659909668631
GPR[SPVATF]-1659909668631
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909670317
GPR[EPVS]-1659909670317
========
if(f.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909670319
GPR[SPVAP]-1659909670319
GPR[EPVAP]-1659909671383
GPR[EPVS]-1659909671383
========
if(f.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909671385
GPR[SPVAP]-1659909671385
GPR[EPVAP]-1659909672443
GPR[EPVS]-1659909672443
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" absolute tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecAbsoluteTolerance.length)});
}

========
GPR[SPVS]-1659909672445
GPR[SPVAP]-1659909672445
GPR[EPVAP]-1659909673505
GPR[EPVS]-1659909673505
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" relative tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecRelativeTolerance.length)});
}

========
GPR[SPVS]-1659909673506
GPR[SPVAP]-1659909673506
GPR[EPVAP]-1659909674584
GPR[EPVS]-1659909674584
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(mean.length,roundingMode);
}

========
GPR[SPVS]-1659909674586
GPR[SPVAP]-1659909674586
GPR[EPVAP]-1659909675652
GPR[EPVS]-1659909675652
========
if(m.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909675654
GPR[SPVAP]-1659909675654
GPR[EPVAP]-1659909676718
GPR[EPVS]-1659909676718
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,sums.length);
}

========
GPR[SPVS]-1659909676720
GPR[SPVAP]-1659909676720
GPR[EPVAP]-1659909677775
GPR[EPVS]-1659909677775
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,means.length);
}

========
GPR[SPVS]-1659909677776
GPR[SPVAP]-1659909677776
GPR[EPVAP]-1659909678843
GPR[EPVS]-1659909678843
========
if(2*length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909678844
GPR[SPVAP]-1659909678844
GPR[EPVAP]-1659909679904
GPR[EPVS]-1659909679904
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909679906
GPR[SPVAP]-1659909679906
GPR[EPVAP]-1659909680969
GPR[EPVS]-1659909680969
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909680970
GPR[SPVAP]-1659909680970
GPR[EPVAP]-1659909682025
GPR[EPVS]-1659909682025
========
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909682026
GPR[SPVAP]-1659909682026
GPR[EPVAP]-1659909683074
GPR[EPVS]-1659909683074
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909683075
GPR[SPVAP]-1659909683075
GPR[EPVAP]-1659909684122
GPR[EPVS]-1659909684122
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909684124
GPR[SPVAP]-1659909684124
GPR[EPVAP]-1659909685187
GPR[EPVS]-1659909685187
========
if(length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909685188
GPR[SPVAP]-1659909685188
GPR[EPVAP]-1659909686251
GPR[EPVS]-1659909686251
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909686253
GPR[SPVAP]-1659909686253
GPR[EPVAP]-1659909687312
GPR[EPVS]-1659909687312
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909687313
GPR[SPVAP]-1659909687313
GPR[EPVAP]-1659909688401
GPR[EPVS]-1659909688401
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909688402
GPR[SPVAP]-1659909688402
GPR[EPVAP]-1659909689472
GPR[EPVS]-1659909689472
========
if(d.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new NullPointerException();
}

========
GPR[SPVS]-1659909689474
GPR[SPVAP]-1659909689474
GPR[EPVAP]-1659909690539
GPR[EPVS]-1659909690539
========
if(data.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909690541
GPR[SPVAP]-1659909690541
GPR[EPVAP]-1659909692417
GPR[SPVATF]-1659909692417
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909694132
GPR[EPVS]-1659909694132
========
if(data.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909694134
GPR[SPVAP]-1659909694134
GPR[EPVAP]-1659909696012
GPR[SPVATF]-1659909696012
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909697686
GPR[EPVS]-1659909697686
========
if(subMatrix.length==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}

========
GPR[SPVS]-1659909697688
GPR[SPVAP]-1659909697688
GPR[EPVAP]-1659909698739
GPR[EPVS]-1659909698739
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909698740
GPR[SPVAP]-1659909698740
GPR[EPVAP]-1659909699802
GPR[EPVS]-1659909699802
========
if(selectedRows.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909699803
GPR[SPVAP]-1659909699803
GPR[EPVAP]-1659909700866
GPR[EPVS]-1659909700866
========
if(selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}

========
GPR[SPVS]-1659909700868
GPR[SPVAP]-1659909700868
GPR[EPVAP]-1659909701930
GPR[EPVS]-1659909701930
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909701932
GPR[SPVAP]-1659909701932
GPR[EPVAP]-1659909702989
GPR[EPVS]-1659909702989
========
if(selectedRows.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909702990
GPR[SPVAP]-1659909702990
GPR[EPVAP]-1659909704052
GPR[EPVS]-1659909704052
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909704054
GPR[SPVAP]-1659909704054
GPR[EPVAP]-1659909705093
GPR[EPVS]-1659909705093
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909705095
GPR[SPVAP]-1659909705095
GPR[EPVAP]-1659909706141
GPR[EPVS]-1659909706141
========
if(selectedRows.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909706143
GPR[SPVAP]-1659909706143
GPR[EPVAP]-1659909707199
GPR[EPVS]-1659909707199
========
if(selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}

========
GPR[SPVS]-1659909707201
GPR[SPVAP]-1659909707201
GPR[EPVAP]-1659909708258
GPR[EPVS]-1659909708258
GPR[ESUN]-1659909708259
GPR[SSUN]-1659909708259
org.apache.commons.math.linear.BigMatrixImpl,989
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909709223
GPR[SPVAP]-1659909709223
GPR[EPVAP]-1659909710806
GPR[EPVS]-1659909710806
========
lu=this.getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909710808
GPR[SPVAP]-1659909710808
GPR[EPVAP]-1659909714321
GPR[SPVATF]-1659909714321
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909715989
GPR[EPVS]-1659909715989
========
lu=getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909715991
GPR[SPVAP]-1659909715991
GPR[EPVAP]-1659909717910
GPR[SPVATF]-1659909717910
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909719574
GPR[EPVS]-1659909719574
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
lu=getData();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909719575
GPR[SPVAP]-1659909719575
GPR[EPVAP]-1659909720633
GPR[EPVS]-1659909720633
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(this.isSingular()){
throw new InvalidMatrixException("Matrix is singular.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909720635
GPR[SPVAP]-1659909720635
GPR[EPVAP]-1659909722514
GPR[SPVATF]-1659909722514
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909724201
GPR[EPVS]-1659909724201
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("All input rows must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909724204
GPR[SPVAP]-1659909724204
GPR[EPVAP]-1659909726061
GPR[SPVATF]-1659909726062
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909727736
GPR[EPVS]-1659909727736
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909727738
GPR[SPVAP]-1659909727738
GPR[EPVAP]-1659909728790
GPR[EPVS]-1659909728790
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909728792
GPR[SPVAP]-1659909728792
GPR[EPVAP]-1659909730648
GPR[SPVATF]-1659909730648
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909732329
GPR[EPVS]-1659909732329
========
if(b.length!=this.getColumnDimension()){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909732330
GPR[SPVAP]-1659909732330
GPR[EPVAP]-1659909733381
GPR[EPVS]-1659909733381
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909733383
GPR[SPVAP]-1659909733383
GPR[EPVAP]-1659909735278
GPR[SPVATF]-1659909735278
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909736998
GPR[EPVS]-1659909736998
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909736999
GPR[SPVAP]-1659909736999
GPR[EPVAP]-1659909738061
GPR[EPVS]-1659909738061
========
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909738062
GPR[SPVAP]-1659909738062
GPR[EPVAP]-1659909739932
GPR[SPVATF]-1659909739932
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909741598
GPR[EPVS]-1659909741598
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909741599
GPR[SPVAP]-1659909741599
GPR[EPVAP]-1659909742664
GPR[EPVS]-1659909742664
========
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909742666
GPR[SPVAP]-1659909742666
GPR[EPVAP]-1659909744533
GPR[SPVATF]-1659909744533
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909746198
GPR[EPVS]-1659909746198
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909746200
GPR[SPVAP]-1659909746200
GPR[EPVAP]-1659909747252
GPR[EPVS]-1659909747252
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("At least 3 datapoints are required to compute a spline interpolant");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909747267
GPR[SPVAP]-1659909747267
GPR[EPVAP]-1659909749141
GPR[SPVATF]-1659909749141
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909750836
GPR[EPVS]-1659909750836
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909750838
GPR[SPVAP]-1659909750838
GPR[EPVAP]-1659909751885
GPR[EPVS]-1659909751885
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909751886
GPR[SPVAP]-1659909751886
GPR[EPVAP]-1659909753833
GPR[SPVATF]-1659909753833
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909755498
GPR[EPVS]-1659909755498
========
if(in.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909755500
GPR[SPVAP]-1659909755500
GPR[EPVAP]-1659909756557
GPR[EPVS]-1659909756557
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two rows");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909756559
GPR[SPVAP]-1659909756559
GPR[EPVAP]-1659909758422
GPR[SPVATF]-1659909758422
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909760097
GPR[EPVS]-1659909760097
========
if(array.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909760099
GPR[SPVAP]-1659909760099
GPR[EPVAP]-1659909761169
GPR[EPVS]-1659909761169
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("ANOVA: one element of categoryData has fewer than 2 values.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909761170
GPR[SPVAP]-1659909761170
GPR[EPVAP]-1659909763043
GPR[SPVATF]-1659909763043
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909764734
GPR[EPVS]-1659909764734
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909764736
GPR[SPVAP]-1659909764736
GPR[EPVAP]-1659909766621
GPR[SPVATF]-1659909766621
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909768284
GPR[EPVS]-1659909768284
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Dataset arrays must have same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909768287
GPR[SPVAP]-1659909768287
GPR[EPVAP]-1659909769349
GPR[EPVS]-1659909769349
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909769352
GPR[SPVAP]-1659909769352
GPR[EPVAP]-1659909771219
GPR[SPVATF]-1659909771219
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909772903
GPR[EPVS]-1659909772903
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Abscissa and value arrays must have the same length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909772904
GPR[SPVAP]-1659909772904
GPR[EPVAP]-1659909773960
GPR[EPVS]-1659909773960
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909773962
GPR[SPVAP]-1659909773962
GPR[EPVAP]-1659909775806
GPR[SPVATF]-1659909775806
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909777476
GPR[EPVS]-1659909777476
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the regressand vector y");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909777478
GPR[SPVAP]-1659909777478
GPR[EPVAP]-1659909778549
GPR[EPVS]-1659909778549
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909778551
GPR[SPVAP]-1659909778551
GPR[EPVAP]-1659909780397
GPR[SPVATF]-1659909780397
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909782092
GPR[EPVS]-1659909782092
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The regressors matrix x columns must have the same length of the covariance matrix columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909782094
GPR[SPVAP]-1659909782094
GPR[EPVAP]-1659909783183
GPR[EPVS]-1659909783183
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909783185
GPR[SPVAP]-1659909783185
GPR[EPVAP]-1659909784242
GPR[EPVS]-1659909784242
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909784244
GPR[SPVAP]-1659909784244
GPR[EPVAP]-1659909786133
GPR[SPVATF]-1659909786133
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909787809
GPR[EPVS]-1659909787809
========
if(mean.length!=this.getColumnDimension()){
throw new IllegalArgumentException("dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909787811
GPR[SPVAP]-1659909787811
GPR[EPVAP]-1659909788871
GPR[EPVS]-1659909788871
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909788873
GPR[SPVAP]-1659909788873
GPR[EPVAP]-1659909790787
GPR[SPVATF]-1659909790787
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909792501
GPR[EPVS]-1659909792501
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909792502
GPR[SPVAP]-1659909792502
GPR[EPVAP]-1659909793569
GPR[EPVS]-1659909793569
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909793570
GPR[SPVAP]-1659909793570
GPR[EPVAP]-1659909794651
GPR[EPVS]-1659909794651
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909794653
GPR[SPVAP]-1659909794653
GPR[EPVAP]-1659909796561
GPR[SPVATF]-1659909796561
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909798242
GPR[EPVS]-1659909798242
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Bad input array sizes, should have difference 1.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909798243
GPR[SPVAP]-1659909798243
GPR[EPVAP]-1659909799303
GPR[EPVS]-1659909799303
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909799305
GPR[SPVAP]-1659909799305
GPR[EPVAP]-1659909801197
GPR[SPVATF]-1659909801197
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909802863
GPR[EPVS]-1659909802863
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909802864
GPR[SPVAP]-1659909802864
GPR[EPVAP]-1659909803921
GPR[EPVS]-1659909803921
========
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909803922
GPR[SPVAP]-1659909803922
GPR[EPVAP]-1659909805782
GPR[SPVATF]-1659909805782
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909807444
GPR[EPVS]-1659909807444
========
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909807446
GPR[SPVAP]-1659909807446
GPR[EPVAP]-1659909808507
GPR[EPVS]-1659909808507
========
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909808509
GPR[SPVAP]-1659909808509
GPR[EPVAP]-1659909809590
GPR[EPVS]-1659909809590
========
if(getInterpolatedState().length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909809591
GPR[SPVAP]-1659909809591
GPR[EPVAP]-1659909810661
GPR[EPVS]-1659909810661
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("state vector dimension mismatch");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909810663
GPR[SPVAP]-1659909810663
GPR[EPVAP]-1659909812532
GPR[SPVATF]-1659909812532
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909814246
GPR[EPVS]-1659909814246
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909814248
GPR[SPVAP]-1659909814248
GPR[EPVAP]-1659909816132
GPR[SPVATF]-1659909816132
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909817787
GPR[EPVS]-1659909817787
========
if(a.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must not be empty.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909817789
GPR[SPVAP]-1659909817789
GPR[EPVAP]-1659909818847
GPR[EPVS]-1659909818847
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909818849
GPR[SPVAP]-1659909818849
GPR[EPVAP]-1659909820724
GPR[SPVATF]-1659909820724
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909822399
GPR[EPVS]-1659909822399
========
if(x.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Interpolation requires at least two points.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909822401
GPR[SPVAP]-1659909822401
GPR[EPVAP]-1659909823453
GPR[EPVS]-1659909823453
========
if(sample2.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909823455
GPR[SPVAP]-1659909823455
GPR[EPVAP]-1659909824511
GPR[EPVS]-1659909824511
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input arrays must have the same (positive) length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909824513
GPR[SPVAP]-1659909824513
GPR[EPVAP]-1659909826387
GPR[SPVATF]-1659909826387
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909828106
GPR[EPVS]-1659909828106
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input array lengths must be equal and at least 2.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909828108
GPR[SPVAP]-1659909828108
GPR[EPVAP]-1659909829983
GPR[SPVATF]-1659909829983
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909831642
GPR[EPVS]-1659909831642
========
if(expected.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909831644
GPR[SPVAP]-1659909831644
GPR[EPVAP]-1659909832701
GPR[EPVS]-1659909832701
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("observed, expected array lengths incorrect");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909832704
GPR[SPVAP]-1659909832704
GPR[EPVAP]-1659909834569
GPR[SPVATF]-1659909834569
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909836257
GPR[EPVS]-1659909836257
========
if(observed1.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909836259
GPR[SPVAP]-1659909836259
GPR[EPVAP]-1659909837312
GPR[EPVS]-1659909837312
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("oberved1, observed2 array lengths incorrect");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909837314
GPR[SPVAP]-1659909837314
GPR[EPVAP]-1659909839195
GPR[SPVATF]-1659909839195
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909840864
GPR[EPVS]-1659909840864
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Input table must have at least two columns");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909840866
GPR[SPVAP]-1659909840866
GPR[EPVAP]-1659909842709
GPR[SPVATF]-1659909842709
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909844386
GPR[EPVS]-1659909844386
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909844387
GPR[SPVAP]-1659909844387
GPR[EPVAP]-1659909846245
GPR[SPVATF]-1659909846245
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909847916
GPR[EPVS]-1659909847916
========
this.nRows=knots.length-1;
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909847918
GPR[SPVAP]-1659909847918
GPR[EPVAP]-1659909848976
GPR[EPVS]-1659909848976
========
if(knots.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909848978
GPR[SPVAP]-1659909848978
GPR[EPVAP]-1659909850022
GPR[EPVS]-1659909850022
========
if(covariance.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909850023
GPR[SPVAP]-1659909850023
GPR[EPVAP]-1659909851104
GPR[EPVS]-1659909851104
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("The covariance matrix must be square");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909851106
GPR[SPVAP]-1659909851106
GPR[EPVAP]-1659909852991
GPR[SPVATF]-1659909852991
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909854663
GPR[EPVS]-1659909854663
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(!isValidCoordinate(roundingMode,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909854665
GPR[SPVAP]-1659909854665
GPR[EPVAP]-1659909856538
GPR[SPVATF]-1659909856538
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909858202
GPR[EPVS]-1659909858202
========
System.arraycopy(data[roundingMode],0,new BigDecimal[nRows],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909858204
GPR[SPVAP]-1659909858204
GPR[EPVAP]-1659909859266
GPR[EPVS]-1659909859267
========
System.arraycopy(data[roundingMode],0,new double[nRows],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909859268
GPR[SPVAP]-1659909859268
GPR[EPVAP]-1659909860323
GPR[EPVS]-1659909860323
========
if(c.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909860324
GPR[SPVAP]-1659909860324
GPR[EPVAP]-1659909861381
GPR[EPVS]-1659909861381
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("Polynomial coefficient array must have postive length.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909861382
GPR[SPVAP]-1659909861382
GPR[EPVAP]-1659909863241
GPR[SPVATF]-1659909863241
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909864910
GPR[EPVS]-1659909864910
========
super();
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909864911
GPR[SPVAP]-1659909864911
GPR[EPVAP]-1659909865988
GPR[EPVS]-1659909865988
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data for t statistic");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909865990
GPR[SPVAP]-1659909865990
GPR[EPVAP]-1659909867869
GPR[SPVATF]-1659909867869
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909869580
GPR[EPVS]-1659909869580
========
System.arraycopy(data[roundingMode],0,new BigDecimal[1][nRows][0],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909869582
GPR[SPVAP]-1659909869582
GPR[EPVAP]-1659909870639
GPR[EPVS]-1659909870639
========
System.arraycopy(data[roundingMode],0,new double[1][nRows][0],0,nRows);
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909870640
GPR[SPVAP]-1659909870641
GPR[EPVAP]-1659909871701
GPR[EPVS]-1659909871701
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909871702
GPR[SPVAP]-1659909871702
GPR[EPVAP]-1659909873580
GPR[SPVATF]-1659909873580
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909875233
GPR[EPVS]-1659909875233
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909875234
GPR[SPVAP]-1659909875234
GPR[EPVAP]-1659909876295
GPR[EPVS]-1659909876295
========
if(selectedRows.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909876297
GPR[SPVAP]-1659909876297
GPR[EPVAP]-1659909877348
GPR[EPVS]-1659909877348
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909877349
GPR[SPVAP]-1659909877349
GPR[EPVAP]-1659909878401
GPR[EPVS]-1659909878401
========
if(v.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909878403
GPR[SPVAP]-1659909878403
GPR[EPVAP]-1659909880262
GPR[SPVATF]-1659909880262
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909881934
GPR[EPVS]-1659909881934
========
if(v.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909881935
GPR[SPVAP]-1659909881935
GPR[EPVAP]-1659909883816
GPR[SPVATF]-1659909883816
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909885508
GPR[EPVS]-1659909885508
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("insufficient data");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909885510
GPR[SPVAP]-1659909885510
GPR[EPVAP]-1659909887385
GPR[SPVATF]-1659909887385
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909889073
GPR[EPVS]-1659909889073
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(mean.length,nCols);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909889075
GPR[SPVAP]-1659909889075
GPR[EPVAP]-1659909890123
GPR[EPVS]-1659909890123
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" absolute tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecAbsoluteTolerance.length)});
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909890125
GPR[SPVAP]-1659909890125
GPR[EPVAP]-1659909891192
GPR[EPVS]-1659909891192
========
if(v.length!=this.getColumnDimension()){
throw new IntegratorException("dimensions mismatch: state vector has dimension {0},"+" relative tolerance vector has dimension {1}",new Object[]{Integer.valueOf(y0.length),Integer.valueOf(vecRelativeTolerance.length)});
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909891193
GPR[SPVAP]-1659909891193
GPR[EPVAP]-1659909892256
GPR[EPVS]-1659909892256
========
if(v.length!=this.getColumnDimension()){
if(x.length!=y.length){
return false;
}
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909892258
GPR[SPVAP]-1659909892258
GPR[EPVAP]-1659909893320
GPR[EPVS]-1659909893320
========
if(f.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909893322
GPR[SPVAP]-1659909893322
GPR[EPVAP]-1659909894374
GPR[EPVS]-1659909894374
========
if(f.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909894376
GPR[SPVAP]-1659909894376
GPR[EPVAP]-1659909895433
GPR[EPVS]-1659909895433
========
if(m.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909895435
GPR[SPVAP]-1659909895435
GPR[EPVAP]-1659909896487
GPR[EPVS]-1659909896487
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,sums.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909896489
GPR[SPVAP]-1659909896489
GPR[EPVAP]-1659909897558
GPR[EPVS]-1659909897558
========
if(v.length!=this.getColumnDimension()){
throw new DimensionMismatchException(v.length,means.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909897561
GPR[SPVAP]-1659909897561
GPR[EPVAP]-1659909898623
GPR[EPVS]-1659909898623
========
if(2*length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909898625
GPR[SPVAP]-1659909898625
GPR[EPVAP]-1659909899673
GPR[EPVS]-1659909899673
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909899677
GPR[SPVAP]-1659909899677
GPR[EPVAP]-1659909900730
GPR[EPVS]-1659909900730
========
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909900732
GPR[SPVAP]-1659909900732
GPR[EPVAP]-1659909901782
GPR[EPVS]-1659909901782
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909901784
GPR[SPVAP]-1659909901784
GPR[EPVAP]-1659909902854
GPR[EPVS]-1659909902854
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909902856
GPR[SPVAP]-1659909902856
GPR[EPVAP]-1659909903917
GPR[EPVS]-1659909903917
========
if(length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909903918
GPR[SPVAP]-1659909903918
GPR[EPVAP]-1659909904965
GPR[EPVS]-1659909904965
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909904966
GPR[SPVAP]-1659909904966
GPR[EPVAP]-1659909906057
GPR[EPVS]-1659909906057
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(v.length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909906059
GPR[SPVAP]-1659909906059
GPR[EPVAP]-1659909907127
GPR[EPVS]-1659909907127
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length!=this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909907129
GPR[SPVAP]-1659909907129
GPR[EPVAP]-1659909908197
GPR[EPVS]-1659909908197
========
if(nRows==0){
throw new IllegalArgumentException("Matrix must have at least one row.");
}
if(length==this.getColumnDimension()){
throw new NullPointerException();
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909908199
GPR[SPVAP]-1659909908199
GPR[EPVAP]-1659909909261
GPR[EPVS]-1659909909261
========
if(roundingMode!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909909263
GPR[SPVAP]-1659909909263
GPR[EPVAP]-1659909911133
GPR[SPVATF]-1659909911133
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909912803
GPR[EPVS]-1659909912803
========
if(v.length!=this.getColumnDimension()){
if(roundingMode==bytes.length){
return ;
}
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909912804
GPR[SPVAP]-1659909912804
GPR[EPVAP]-1659909913868
GPR[EPVS]-1659909913868
========
if(roundingMode==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909913870
GPR[SPVAP]-1659909913870
GPR[EPVAP]-1659909915744
GPR[SPVATF]-1659909915744
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909917424
GPR[EPVS]-1659909917424
========
if(interpolator.currentState!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909917426
GPR[SPVAP]-1659909917426
GPR[EPVAP]-1659909918489
GPR[EPVS]-1659909918489
========
if(data.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909918491
GPR[SPVAP]-1659909918491
GPR[EPVAP]-1659909920396
GPR[SPVATF]-1659909920396
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909922129
GPR[EPVS]-1659909922129
========
if(data.length!=this.getColumnDimension()){
throw new MatrixIndexException("invalid row or column index selection");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909922131
GPR[SPVAP]-1659909922131
GPR[EPVAP]-1659909923992
GPR[SPVATF]-1659909923992
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909925685
GPR[EPVS]-1659909925685
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909925686
GPR[SPVAP]-1659909925687
GPR[EPVAP]-1659909926755
GPR[EPVS]-1659909926755
========
if(selectedRows.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909926756
GPR[SPVAP]-1659909926756
GPR[EPVAP]-1659909927825
GPR[EPVS]-1659909927825
========
if(selectedColumns.length==this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909927826
GPR[SPVAP]-1659909927826
GPR[EPVAP]-1659909928888
GPR[EPVS]-1659909928888
========
if(selectedRows.length*selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909928889
GPR[SPVAP]-1659909928889
GPR[EPVAP]-1659909929965
GPR[EPVS]-1659909929965
========
if(selectedRows.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909929966
GPR[SPVAP]-1659909929966
GPR[EPVAP]-1659909931020
GPR[EPVS]-1659909931020
========
if(selectedColumns.length!=this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909931021
GPR[SPVAP]-1659909931021
GPR[EPVAP]-1659909932092
GPR[EPVS]-1659909932092
========
if(selectedRows.length*selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909932094
GPR[SPVAP]-1659909932094
GPR[EPVAP]-1659909933148
GPR[EPVS]-1659909933148
========
if(selectedRows.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909933150
GPR[SPVAP]-1659909933150
GPR[EPVAP]-1659909934207
GPR[EPVS]-1659909934207
========
if(selectedColumns.length==this.getColumnDimension()){
throw new MatrixIndexException("selected row and column index arrays must be non-empty");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();

========
GPR[SPVS]-1659909934208
GPR[SPVAP]-1659909934208
GPR[EPVAP]-1659909935273
GPR[EPVS]-1659909935273
GPR[ESUN]-1659909935276
GPR[SSUN]-1659909935276
org.apache.commons.math.linear.BigMatrixImpl,990
========
if(v.length!=this.getColumnDimension()){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909936219
GPR[SPVAP]-1659909936219
GPR[EPVAP]-1659909939935
GPR[SPVATF]-1659909939935
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909941674
GPR[EPVS]-1659909941674
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];

========
GPR[SPVS]-1659909941676
GPR[SPVAP]-1659909941676
GPR[EPVAP]-1659909943569
GPR[SPVATF]-1659909943569
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909945254
GPR[SPVATR]-1659909945254
TESTING : math_98
GPR[EPVATR]-1659909951516
GPR[EPVS]-1659909951516
GPR[PF]-1659909951516
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659909951525
GPR[SPVAP]-1659909951525
GPR[EPVAP]-1659909953412
GPR[SPVATF]-1659909953412
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909955086
GPR[EPVS]-1659909955086
========
if(v.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909955088
GPR[SPVAP]-1659909955088
GPR[EPVAP]-1659909956152
GPR[EPVS]-1659909956152
========
roundingMode=ret*31+nRows;
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909956153
GPR[SPVAP]-1659909956153
GPR[EPVAP]-1659909957209
GPR[EPVS]-1659909957209
========
if(nRows!=nCols){
throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909957211
GPR[SPVAP]-1659909957211
GPR[EPVAP]-1659909958285
GPR[EPVS]-1659909958285
========
if(v.length!=nRows){
throw new IllegalArgumentException("vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659909958286
GPR[SPVAP]-1659909958286
GPR[EPVAP]-1659909959341
GPR[EPVS]-1659909959341
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
if(v.length!=nCols){
throw new IllegalArgumentException("vector has wrong length");
}
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909959342
GPR[SPVAP]-1659909959342
GPR[EPVAP]-1659909961201
GPR[SPVATF]-1659909961201
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909962897
GPR[EPVS]-1659909962897
========
if(this.isSingular()){
throw new InvalidMatrixException("Matrix is singular.");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909962899
GPR[SPVAP]-1659909962899
GPR[EPVAP]-1659909964809
GPR[SPVATF]-1659909964809
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909966516
GPR[EPVS]-1659909966516
========
if(b.length!=nRows){
throw new IllegalArgumentException("constant vector has wrong length");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909966518
GPR[SPVAP]-1659909966518
GPR[EPVAP]-1659909967586
GPR[EPVS]-1659909967586
========
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909967588
GPR[SPVAP]-1659909967588
GPR[EPVAP]-1659909969503
GPR[SPVATF]-1659909969503
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909971179
GPR[EPVS]-1659909971179
========
if(!isValidCoordinate(0,roundingMode)){
throw new MatrixIndexException("illegal column argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];

========
GPR[SPVS]-1659909971181
GPR[SPVAP]-1659909971181
GPR[EPVAP]-1659909973061
GPR[SPVATF]-1659909973061
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909974762
GPR[EPVS]-1659909974762
========
if(!isValidCoordinate(roundingMode,0)){
throw new MatrixIndexException("illegal row argument");
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909974764
GPR[SPVAP]-1659909974764
GPR[EPVAP]-1659909976682
GPR[SPVATF]-1659909976682
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909978380
GPR[EPVS]-1659909978380
========
System.arraycopy(data[roundingMode],0,out,0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909978381
GPR[SPVAP]-1659909978381
GPR[EPVAP]-1659909979462
GPR[EPVS]-1659909979462
========
System.arraycopy(data[roundingMode],0,new double[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909979465
GPR[SPVAP]-1659909979465
GPR[EPVAP]-1659909980552
GPR[EPVS]-1659909980552
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909980554
GPR[SPVAP]-1659909980554
GPR[EPVAP]-1659909981631
GPR[EPVS]-1659909981631
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];

========
GPR[SPVS]-1659909981633
GPR[SPVAP]-1659909981633
GPR[EPVAP]-1659909982707
GPR[EPVS]-1659909982707
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[f.length];

========
GPR[SPVS]-1659909982709
GPR[SPVAP]-1659909982709
GPR[EPVAP]-1659909983801
GPR[EPVS]-1659909983801
========
if(!FastFourierTransformer.isPowerOf2(N)){
throw new IllegalArgumentException("Number of samples not power of 2 plus one: "+f.length);
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909983802
GPR[SPVAP]-1659909983802
GPR[EPVAP]-1659909984859
GPR[EPVS]-1659909984859
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[parameters.length];

========
GPR[SPVS]-1659909984861
GPR[SPVAP]-1659909984861
GPR[EPVAP]-1659909985922
GPR[EPVS]-1659909985922
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[coefficients.length];

========
GPR[SPVS]-1659909985924
GPR[SPVAP]-1659909985924
GPR[EPVAP]-1659909987140
GPR[EPVS]-1659909987140
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[a.length];

========
GPR[SPVS]-1659909987150
GPR[SPVAP]-1659909987150
GPR[EPVAP]-1659909988286
GPR[EPVS]-1659909988286
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[c.length];

========
GPR[SPVS]-1659909988287
GPR[SPVAP]-1659909988287
GPR[EPVAP]-1659909989345
GPR[EPVS]-1659909989345
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[x.length];

========
GPR[SPVS]-1659909989346
GPR[SPVAP]-1659909989346
GPR[EPVAP]-1659909990408
GPR[EPVS]-1659909990408
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y.length];

========
GPR[SPVS]-1659909990410
GPR[SPVAP]-1659909990410
GPR[EPVAP]-1659909991473
GPR[EPVS]-1659909991473
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];

========
GPR[SPVS]-1659909991474
GPR[SPVAP]-1659909991474
GPR[EPVAP]-1659909993373
GPR[SPVATF]-1659909993373
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909995058
GPR[EPVS]-1659909995058
========
System.arraycopy(permutation,0,new int[permutation.length],0,permutation.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659909995059
GPR[SPVAP]-1659909995059
GPR[EPVAP]-1659909996949
GPR[SPVATF]-1659909996949
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659909998633
GPR[EPVS]-1659909998633
========
System.arraycopy(permutation,0,new int[permutation.length],0,permutation.length);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];

========
GPR[SPVS]-1659909998634
GPR[SPVAP]-1659909998634
GPR[EPVAP]-1659910000504
GPR[SPVATF]-1659910000504
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910002189
GPR[EPVS]-1659910002189
========
System.arraycopy(data[roundingMode],0,new BigDecimal[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910002192
GPR[SPVAP]-1659910002192
GPR[EPVAP]-1659910003257
GPR[EPVS]-1659910003257
========
System.arraycopy(data[roundingMode],0,new double[1][nRows][0],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910003258
GPR[SPVAP]-1659910003258
GPR[EPVAP]-1659910004319
GPR[EPVS]-1659910004319
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y0.length];

========
GPR[SPVS]-1659910004321
GPR[SPVAP]-1659910004321
GPR[EPVAP]-1659910005379
GPR[EPVS]-1659910005379
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
updateJacobian();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910005381
GPR[SPVAP]-1659910005381
GPR[EPVAP]-1659910006445
GPR[EPVS]-1659910006445
========
System.arraycopy(length,0,new double[nRows],0,nRows);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910006447
GPR[SPVAP]-1659910006447
GPR[EPVAP]-1659910007507
GPR[EPVS]-1659910007507
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[b.length];

========
GPR[SPVS]-1659910007509
GPR[SPVAP]-1659910007509
GPR[EPVAP]-1659910008566
GPR[EPVS]-1659910008566
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[sequence.length];

========
GPR[SPVS]-1659910008568
GPR[SPVAP]-1659910008568
GPR[EPVAP]-1659910009634
GPR[EPVS]-1659910009634
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[stats.length];

========
GPR[SPVS]-1659910009636
GPR[SPVAP]-1659910009636
GPR[EPVAP]-1659910010690
GPR[EPVS]-1659910010690
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[means.length];

========
GPR[SPVS]-1659910010691
GPR[SPVAP]-1659910010691
GPR[EPVAP]-1659910011789
GPR[EPVS]-1659910011789
========
verifyDataSet(data);
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910011791
GPR[SPVAP]-1659910011791
GPR[EPVAP]-1659910012853
GPR[EPVS]-1659910012853
========
if(N==1){
new Complex[N][0]=data[0];
return f;
}
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];

========
GPR[SPVS]-1659910012855
GPR[SPVAP]-1659910012855
GPR[EPVAP]-1659910013912
GPR[EPVS]-1659910013912
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];

========
GPR[SPVS]-1659910013915
GPR[SPVAP]-1659910013915
GPR[EPVAP]-1659910014979
GPR[EPVS]-1659910014979
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[vertexA.length];

========
GPR[SPVS]-1659910014983
GPR[SPVAP]-1659910014983
GPR[EPVAP]-1659910016038
GPR[EPVS]-1659910016038
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedRows.length];

========
GPR[SPVS]-1659910016041
GPR[SPVAP]-1659910016042
GPR[EPVAP]-1659910017101
GPR[EPVS]-1659910017101
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedColumns.length];

========
GPR[SPVS]-1659910017102
GPR[SPVAP]-1659910017102
GPR[EPVAP]-1659910018157
GPR[EPVS]-1659910018157
========
 final int nRows=this.getRowDimension();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[currentState.length];

========
GPR[SPVS]-1659910018164
GPR[SPVAP]-1659910018164
GPR[EPVAP]-1659910019220
GPR[EPVS]-1659910019220
GPR[ESUN]-1659910019223
GPR[SSUN]-1659910019223
org.apache.commons.math.linear.BigMatrixImpl,991
========
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910020893
GPR[SPVAP]-1659910020893
GPR[EPVAP]-1659910024635
GPR[SPVATF]-1659910024635
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910026297
GPR[EPVS]-1659910026297
========
for(int i=0;i<nSum;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910026298
GPR[SPVAP]-1659910026298
GPR[EPVAP]-1659910027370
GPR[EPVS]-1659910027370
========
for(int i=nCols;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910027371
GPR[SPVAP]-1659910027371
GPR[EPVAP]-1659910029254
GPR[SPVATF]-1659910029254
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910030970
GPR[EPVS]-1659910030970
========
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910030972
GPR[SPVAP]-1659910030972
GPR[EPVAP]-1659910032872
GPR[SPVATF]-1659910032872
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910034556
GPR[EPVS]-1659910034556
========
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910034558
GPR[SPVAP]-1659910034558
GPR[EPVAP]-1659910035615
GPR[EPVS]-1659910035615
========
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910035616
GPR[SPVAP]-1659910035616
GPR[EPVAP]-1659910037489
GPR[SPVATF]-1659910037489
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910039175
GPR[EPVS]-1659910039175
========
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910039176
GPR[SPVAP]-1659910039176
GPR[EPVAP]-1659910041050
GPR[SPVATF]-1659910041050
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910042748
GPR[EPVS]-1659910042748
========
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910042750
GPR[SPVAP]-1659910042750
GPR[EPVAP]-1659910044633
GPR[SPVATF]-1659910044633
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910046316
GPR[EPVS]-1659910046316
========
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910046318
GPR[SPVAP]-1659910046318
GPR[EPVAP]-1659910047385
GPR[EPVS]-1659910047385
========
for(int i=0;i<N;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910047387
GPR[SPVAP]-1659910047387
GPR[EPVAP]-1659910048456
GPR[EPVS]-1659910048456
========
for(int i=0;i<binCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910048458
GPR[SPVAP]-1659910048458
GPR[EPVAP]-1659910049507
GPR[EPVS]-1659910049507
========
for(int i=0;i<parameters.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910049509
GPR[SPVAP]-1659910049509
GPR[EPVAP]-1659910050566
GPR[EPVS]-1659910050566
========
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910050567
GPR[SPVAP]-1659910050567
GPR[EPVAP]-1659910051638
GPR[EPVS]-1659910051639
========
for(int i=0;i<ncols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910051640
GPR[SPVAP]-1659910051640
GPR[EPVAP]-1659910052704
GPR[EPVS]-1659910052704
========
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910052706
GPR[SPVAP]-1659910052706
GPR[EPVAP]-1659910053769
GPR[EPVS]-1659910053769
========
for(int i=0;i<nrows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910053770
GPR[SPVAP]-1659910053770
GPR[EPVAP]-1659910054833
GPR[EPVS]-1659910054833
========
for(int i=0;i<values.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910054835
GPR[SPVAP]-1659910054835
GPR[EPVAP]-1659910055894
GPR[EPVS]-1659910055894
========
for(int i=0;i<dimension;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910055896
GPR[SPVAP]-1659910055896
GPR[EPVAP]-1659910056978
GPR[EPVS]-1659910056978
========
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910056981
GPR[SPVAP]-1659910056981
GPR[EPVAP]-1659910058864
GPR[SPVATF]-1659910058864
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910060522
GPR[EPVS]-1659910060522
========
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910060523
GPR[SPVAP]-1659910060523
GPR[EPVAP]-1659910061577
GPR[EPVS]-1659910061577
========
i++;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910061578
GPR[SPVAP]-1659910061578
GPR[EPVAP]-1659910062635
GPR[EPVS]-1659910062635
========
for(int i=0;i<=n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910062637
GPR[SPVAP]-1659910062637
GPR[EPVAP]-1659910063696
GPR[EPVS]-1659910063696
========
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910063698
GPR[SPVAP]-1659910063698
GPR[EPVAP]-1659910064762
GPR[EPVS]-1659910064762
========
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910064764
GPR[SPVAP]-1659910064764
GPR[EPVAP]-1659910065821
GPR[EPVS]-1659910065821
========
for(int i=0;i<rank;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910065823
GPR[SPVAP]-1659910065823
GPR[EPVAP]-1659910066877
GPR[EPVS]-1659910066877
========
for(int i=0;i<newPols.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910066878
GPR[SPVAP]-1659910066878
GPR[EPVAP]-1659910067936
GPR[EPVS]-1659910067936
========
for(int i=0;i<inputArray.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910067939
GPR[SPVAP]-1659910067939
GPR[EPVAP]-1659910068998
GPR[EPVS]-1659910068998
========
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910069000
GPR[SPVAP]-1659910069000
GPR[EPVAP]-1659910070890
GPR[SPVATF]-1659910070890
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910072576
GPR[EPVS]-1659910072576
========
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910072578
GPR[SPVAP]-1659910072578
GPR[EPVAP]-1659910073663
GPR[EPVS]-1659910073663
========
for(int i=0;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910073664
GPR[SPVAP]-1659910073664
GPR[EPVAP]-1659910074719
GPR[EPVS]-1659910074719
========
for(int i=0;i<f.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910074721
GPR[SPVAP]-1659910074721
GPR[EPVAP]-1659910075766
GPR[EPVS]-1659910075766
========
for(int i=0;i<scale.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910075767
GPR[SPVAP]-1659910075767
GPR[EPVAP]-1659910076825
GPR[EPVS]-1659910076825
========
for(int i=0;i<results.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910076827
GPR[SPVAP]-1659910076827
GPR[EPVAP]-1659910077884
GPR[EPVS]-1659910077884
========
for(int i=0;i<result.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910077886
GPR[SPVAP]-1659910077886
GPR[EPVAP]-1659910078969
GPR[EPVS]-1659910078970
========
for(int i=0;i<bd.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910078971
GPR[SPVAP]-1659910078971
GPR[EPVAP]-1659910080032
GPR[EPVS]-1659910080032
========
for(int i=0;i<v.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910080034
GPR[SPVAP]-1659910080034
GPR[EPVAP]-1659910081913
GPR[SPVATF]-1659910081913
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910083578
GPR[EPVS]-1659910083578
========
for(int i=0;i<coefficients.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910083580
GPR[SPVAP]-1659910083580
GPR[EPVAP]-1659910084641
GPR[EPVS]-1659910084641
========
for(int i=0;i<c.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910084643
GPR[SPVAP]-1659910084643
GPR[EPVAP]-1659910085693
GPR[EPVS]-1659910085693
========
for(int i=roundingMode;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910085695
GPR[SPVAP]-1659910085695
GPR[EPVAP]-1659910087568
GPR[SPVATF]-1659910087568
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910089230
GPR[EPVS]-1659910089230
========
for(int i=roundingMode;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910089231
GPR[SPVAP]-1659910089231
GPR[EPVAP]-1659910090344
GPR[EPVS]-1659910090344
========
for(int i=roundingMode;i<=n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910090346
GPR[SPVAP]-1659910090346
GPR[EPVAP]-1659910091411
GPR[EPVS]-1659910091411
========
for(int i=0;i<nCols-roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910091413
GPR[SPVAP]-1659910091413
GPR[EPVAP]-1659910093291
GPR[SPVATF]-1659910093291
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910094969
GPR[EPVS]-1659910094969
========
for(int i=0;i<=nCols-roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910094971
GPR[SPVAP]-1659910094971
GPR[EPVAP]-1659910096845
GPR[SPVATF]-1659910096845
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910098528
GPR[EPVS]-1659910098528
========
for(int i=0;i<=k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910098530
GPR[SPVAP]-1659910098530
GPR[EPVAP]-1659910099613
GPR[EPVS]-1659910099613
========
for(int i=0;i<data[0].nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910099625
GPR[SPVAP]-1659910099625
GPR[EPVAP]-1659910100679
GPR[EPVS]-1659910100679
========
for(int i=0;i<y0.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910100681
GPR[SPVAP]-1659910100681
GPR[EPVAP]-1659910101763
GPR[EPVS]-1659910101763
========
for(int i=0;i<x.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910101764
GPR[SPVAP]-1659910101764
GPR[EPVAP]-1659910102869
GPR[EPVS]-1659910102869
========
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910102870
GPR[SPVAP]-1659910102870
GPR[EPVAP]-1659910103957
GPR[EPVS]-1659910103957
========
for(int i=0;i<in.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910103959
GPR[SPVAP]-1659910103959
GPR[EPVAP]-1659910105025
GPR[EPVS]-1659910105025
========
for(int i=0;i<data.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910105026
GPR[SPVAP]-1659910105026
GPR[EPVAP]-1659910106913
GPR[SPVATF]-1659910106913
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910108585
GPR[EPVS]-1659910108585
========
for(int i=0;i<value.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910108587
GPR[SPVAP]-1659910108587
GPR[EPVAP]-1659910109655
GPR[EPVS]-1659910109655
========
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910109657
GPR[SPVAP]-1659910109657
GPR[EPVAP]-1659910111534
GPR[SPVATF]-1659910111534
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910113209
GPR[EPVS]-1659910113209
========
for(int i=0;i<roundingMode+nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910113211
GPR[SPVAP]-1659910113211
GPR[EPVAP]-1659910115073
GPR[SPVATF]-1659910115073
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910116765
GPR[EPVS]-1659910116765
========
for(int i=0;i<begin;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910116767
GPR[SPVAP]-1659910116767
GPR[EPVAP]-1659910117825
GPR[EPVS]-1659910117825
========
for(int i=roundingMode;i<roundingMode+nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910117826
GPR[SPVAP]-1659910117826
GPR[EPVAP]-1659910119712
GPR[SPVATF]-1659910119712
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910121448
GPR[EPVS]-1659910121448
========
for(int i=roundingMode;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910121450
GPR[SPVAP]-1659910121450
GPR[EPVAP]-1659910122509
GPR[EPVS]-1659910122509
========
for(int i=0;i<vertices.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910122510
GPR[SPVAP]-1659910122510
GPR[EPVAP]-1659910123565
GPR[EPVS]-1659910123565
========
for(int i=roundingMode;i<begin;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910123567
GPR[SPVAP]-1659910123567
GPR[EPVAP]-1659910124629
GPR[EPVS]-1659910124629
========
for(int i=roundingMode;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910124631
GPR[SPVAP]-1659910124631
GPR[EPVAP]-1659910126500
GPR[SPVATF]-1659910126500
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910128186
GPR[EPVS]-1659910128186
========
for(int i=0;i<endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910128188
GPR[SPVAP]-1659910128188
GPR[EPVAP]-1659910129234
GPR[EPVS]-1659910129234
========
for(int i=0;i<=roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910129236
GPR[SPVAP]-1659910129236
GPR[EPVAP]-1659910131105
GPR[SPVATF]-1659910131105
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910132786
GPR[EPVS]-1659910132786
========
for(int i=roundingMode;i<=roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910132788
GPR[SPVAP]-1659910132788
GPR[EPVAP]-1659910134660
GPR[SPVATF]-1659910134660
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910136369
GPR[EPVS]-1659910136369
========
for(int i=0;i<errors.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910136371
GPR[SPVAP]-1659910136371
GPR[EPVAP]-1659910137430
GPR[EPVS]-1659910137430
========
for(int i=0;i<observed.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910137432
GPR[SPVAP]-1659910137432
GPR[EPVAP]-1659910138483
GPR[EPVS]-1659910138483
========
for(int i=0;i<nCols;i++){
sumExpected+=expected[i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910138484
GPR[SPVAP]-1659910138484
GPR[EPVAP]-1659910139540
GPR[EPVS]-1659910139540
========
for(int i=0;i<observed1.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910139542
GPR[SPVAP]-1659910139542
GPR[EPVAP]-1659910140619
GPR[EPVS]-1659910140619
========
for(int i=0;i<wm.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910140621
GPR[SPVAP]-1659910140621
GPR[EPVAP]-1659910141701
GPR[EPVS]-1659910141701
========
for(int i=0;i<special.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910141703
GPR[SPVAP]-1659910141703
GPR[EPVAP]-1659910142819
GPR[EPVS]-1659910142819
========
++roundingMode;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910142821
GPR[SPVAP]-1659910142821
GPR[EPVAP]-1659910144692
GPR[SPVATF]-1659910144692
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910146371
GPR[EPVS]-1659910146371
========
for(int i=0;i<random.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910146373
GPR[SPVAP]-1659910146373
GPR[EPVAP]-1659910147429
GPR[EPVS]-1659910147429
========
for(int i=roundingMode;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910147431
GPR[SPVAP]-1659910147431
GPR[EPVAP]-1659910148485
GPR[EPVS]-1659910148485
========
for(int i=0;i<polynoms.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910148487
GPR[SPVAP]-1659910148487
GPR[EPVAP]-1659910149544
GPR[EPVS]-1659910149544
========
for(int i=0;i<interpolatedState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910149546
GPR[SPVAP]-1659910149546
GPR[EPVAP]-1659910150598
GPR[EPVS]-1659910150598
========
for(int i=0;i<root.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910150600
GPR[SPVAP]-1659910150600
GPR[EPVAP]-1659910151645
GPR[EPVS]-1659910151645
========
for(int i=0;i<simplex.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910151647
GPR[SPVAP]-1659910151647
GPR[EPVAP]-1659910152704
GPR[EPVS]-1659910152704
========
for(int i=0;i<j;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910152707
GPR[SPVAP]-1659910152707
GPR[EPVAP]-1659910153754
GPR[EPVS]-1659910153754
========
for(int i=0;i<=j;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910153756
GPR[SPVAP]-1659910153756
GPR[EPVAP]-1659910154801
GPR[EPVS]-1659910154801
========
for(int i=0;i<nCols;i++){
lu[max][i]=lu[col][i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910154803
GPR[SPVAP]-1659910154803
GPR[EPVAP]-1659910155863
GPR[EPVS]-1659910155863
========
for(int i=0;i<nCols;i++){
lu[col][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910155864
GPR[SPVAP]-1659910155864
GPR[EPVAP]-1659910156918
GPR[EPVS]-1659910156918
========
for(int i=0;i<nCols;i++){
lu[max][i]=lu[col][i];
lu[col][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910156919
GPR[SPVAP]-1659910156919
GPR[EPVAP]-1659910157985
GPR[EPVS]-1659910157985
========
if((roundingMode+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910157988
GPR[SPVAP]-1659910157988
GPR[EPVAP]-1659910159053
GPR[EPVS]-1659910159053
========
roundingMode=roundingMode;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910159054
GPR[SPVAP]-1659910159054
GPR[EPVAP]-1659910160921
GPR[SPVATF]-1659910160921
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910162598
GPR[EPVS]-1659910162598
========
for(int i=0;i<selectedRows.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910162600
GPR[SPVAP]-1659910162600
GPR[EPVAP]-1659910163668
GPR[EPVS]-1659910163668
========
for(int i=0;i<rows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910163670
GPR[SPVAP]-1659910163670
GPR[EPVAP]-1659910164735
GPR[EPVS]-1659910164735
========
for(int i=roundingMode;i<rows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910164738
GPR[SPVAP]-1659910164738
GPR[EPVAP]-1659910165791
GPR[EPVS]-1659910165791
========
for(int i=0;i<nSing;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910165793
GPR[SPVAP]-1659910165793
GPR[EPVAP]-1659910166847
GPR[EPVS]-1659910166847
========
for(int i=0;i<solvedCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910166849
GPR[SPVAP]-1659910166849
GPR[EPVAP]-1659910167909
GPR[EPVS]-1659910167909
========
for(int i=0;i<randomBytes.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910167912
GPR[SPVAP]-1659910167912
GPR[EPVAP]-1659910169031
GPR[EPVS]-1659910169031
========
for(int i=0;i<hash.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910169033
GPR[SPVAP]-1659910169033
GPR[EPVAP]-1659910170093
GPR[EPVS]-1659910170093
========
for(int i=0;i<(N>>1);i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910170094
GPR[SPVAP]-1659910170094
GPR[EPVAP]-1659910171147
GPR[EPVS]-1659910171147
========
if(i<0){
i=-i-2;
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910171149
GPR[SPVAP]-1659910171149
GPR[EPVAP]-1659910172213
GPR[EPVS]-1659910172213
========
for(int i=0;i<vertexA.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910172216
GPR[SPVAP]-1659910172216
GPR[EPVAP]-1659910173271
GPR[EPVS]-1659910173271
========
for(int i=roundingMode;i<solvedCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910173273
GPR[SPVAP]-1659910173273
GPR[EPVAP]-1659910174335
GPR[EPVS]-1659910174335
========
for(int i=0;i<end;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910174338
GPR[SPVAP]-1659910174338
GPR[EPVAP]-1659910175387
GPR[EPVS]-1659910175388
========
for(int i=0;i<last.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910175390
GPR[SPVAP]-1659910175390
GPR[EPVAP]-1659910176452
GPR[EPVS]-1659910176452
========
for(int i=0;i<nCols;i++){
diff=sample1[i]-sample2[i];
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910176454
GPR[SPVAP]-1659910176454
GPR[EPVAP]-1659910177510
GPR[EPVS]-1659910177510
========
for(int i=row;i<order;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910177512
GPR[SPVAP]-1659910177512
GPR[EPVAP]-1659910178577
GPR[EPVS]-1659910178577
========
for(int i=0;i<nCol;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910178579
GPR[SPVAP]-1659910178579
GPR[EPVAP]-1659910179637
GPR[EPVS]-1659910179637
========
for(int i=0;i<=nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910179640
GPR[SPVAP]-1659910179640
GPR[EPVAP]-1659910181525
GPR[SPVATF]-1659910181525
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910183210
GPR[EPVS]-1659910183210
========
data=new BigDecimal[nCols][1];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910183213
GPR[SPVAP]-1659910183213
GPR[EPVAP]-1659910185078
GPR[SPVATF]-1659910185078
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910186758
GPR[EPVS]-1659910186758
========
data=new BigDecimal[nCols][1];
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910186759
GPR[SPVAP]-1659910186759
GPR[EPVAP]-1659910188651
GPR[SPVATF]-1659910188651
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910190343
GPR[EPVS]-1659910190343
========
for(int i=0;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910190345
GPR[SPVAP]-1659910190345
GPR[EPVAP]-1659910191395
GPR[EPVS]-1659910191395
========
for(int i=0;i<mu;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910191398
GPR[SPVAP]-1659910191398
GPR[EPVAP]-1659910192457
GPR[EPVS]-1659910192457
========
for(int i=roundingMode;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910192459
GPR[SPVAP]-1659910192459
GPR[EPVAP]-1659910193517
GPR[EPVS]-1659910193517
========
for(int i=0;i<rowCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910193521
GPR[SPVAP]-1659910193521
GPR[EPVAP]-1659910194593
GPR[EPVS]-1659910194593
========
System.arraycopy(data[row],0,out,0,this.getColumnDimension());
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910194595
GPR[SPVAP]-1659910194596
GPR[EPVAP]-1659910196460
GPR[SPVATF]-1659910196460
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910198177
GPR[EPVS]-1659910198177
========
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910198179
GPR[SPVAP]-1659910198179
GPR[EPVAP]-1659910200036
GPR[SPVATF]-1659910200036
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910201712
GPR[EPVS]-1659910201712
========
for(int i=0;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910201717
GPR[SPVAP]-1659910201717
GPR[EPVAP]-1659910202792
GPR[EPVS]-1659910202792
========
for(int i=roundingMode;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910202795
GPR[SPVAP]-1659910202795
GPR[EPVAP]-1659910203873
GPR[EPVS]-1659910203873
========
for(int i=row;i<m;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910203875
GPR[SPVAP]-1659910203875
GPR[EPVAP]-1659910204946
GPR[EPVS]-1659910204946
========
System.arraycopy(data[row],0,out[0],0,this.getColumnDimension());
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910204950
GPR[SPVAP]-1659910204950
GPR[EPVAP]-1659910206816
GPR[SPVATF]-1659910206816
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910208485
GPR[EPVS]-1659910208485
========
for(int i=roundingMode;i<endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910208488
GPR[SPVAP]-1659910208488
GPR[EPVAP]-1659910209549
GPR[EPVS]-1659910209549
========
for(int i=0;i<=endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910209550
GPR[SPVAP]-1659910209550
GPR[EPVAP]-1659910210633
GPR[EPVS]-1659910210633
========
for(int i=roundingMode;i<=endRow;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910210635
GPR[SPVAP]-1659910210635
GPR[EPVAP]-1659910211688
GPR[EPVS]-1659910211688
========
data=new BigDecimal[roundingMode][nCols];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910211691
GPR[SPVAP]-1659910211691
GPR[EPVAP]-1659910213577
GPR[SPVATF]-1659910213577
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910215322
GPR[EPVS]-1659910215322
========
lu=null;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910215324
GPR[SPVAP]-1659910215324
GPR[EPVAP]-1659910217195
GPR[SPVATF]-1659910217195
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910218875
GPR[EPVS]-1659910218875
========
data=new BigDecimal[roundingMode][nCols];
lu=null;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910218877
GPR[SPVAP]-1659910218877
GPR[EPVAP]-1659910220756
GPR[SPVATF]-1659910220757
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910222425
GPR[EPVS]-1659910222425
========
if(i==0){
throw new IllegalArgumentException("Matrix must have at least one column.");
}
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}

========
GPR[SPVS]-1659910222429
GPR[SPVAP]-1659910222429
GPR[EPVAP]-1659910223491
GPR[EPVS]-1659910223491
========
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910225078
GPR[SPVAP]-1659910225078
GPR[EPVAP]-1659910226937
GPR[SPVATF]-1659910226937
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910228601
GPR[SPVATR]-1659910228602
TESTING : math_98
GPR[EPVATR]-1659910234822
GPR[EPVS]-1659910234822
GPR[PF]-1659910234822
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910234831
GPR[SPVAP]-1659910234831
GPR[EPVAP]-1659910236706
GPR[SPVATF]-1659910236706
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910238393
GPR[EPVS]-1659910238393
========
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910238394
GPR[SPVAP]-1659910238394
GPR[EPVAP]-1659910240277
GPR[SPVATF]-1659910240277
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910241956
GPR[EPVS]-1659910241956
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nSum;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910241958
GPR[SPVAP]-1659910241958
GPR[EPVAP]-1659910243009
GPR[EPVS]-1659910243009
========
for(int row=nRows;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910243011
GPR[SPVAP]-1659910243011
GPR[EPVAP]-1659910244886
GPR[SPVATF]-1659910244886
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910246580
GPR[EPVS]-1659910246580
========
for(int row=nCols;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910246582
GPR[SPVAP]-1659910246582
GPR[EPVAP]-1659910248477
GPR[SPVATF]-1659910248477
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910250161
GPR[EPVS]-1659910250161
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910250164
GPR[SPVAP]-1659910250164
GPR[EPVAP]-1659910252039
GPR[SPVATF]-1659910252039
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910253713
GPR[EPVS]-1659910253713
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910253714
GPR[SPVAP]-1659910253714
GPR[EPVAP]-1659910255583
GPR[SPVATF]-1659910255583
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910257268
GPR[EPVS]-1659910257268
========
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910257269
GPR[SPVAP]-1659910257269
GPR[EPVAP]-1659910258336
GPR[EPVS]-1659910258336
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910258338
GPR[SPVAP]-1659910258338
GPR[EPVAP]-1659910260221
GPR[SPVATF]-1659910260221
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910261901
GPR[EPVS]-1659910261901
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910261903
GPR[SPVAP]-1659910261903
GPR[EPVAP]-1659910262956
GPR[EPVS]-1659910262956
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910262958
GPR[SPVAP]-1659910262958
GPR[EPVAP]-1659910264023
GPR[EPVS]-1659910264023
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910264024
GPR[SPVAP]-1659910264024
GPR[EPVAP]-1659910265090
GPR[EPVS]-1659910265090
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910265092
GPR[SPVAP]-1659910265092
GPR[EPVAP]-1659910266955
GPR[SPVATF]-1659910266955
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910268644
GPR[EPVS]-1659910268644
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910268646
GPR[SPVAP]-1659910268646
GPR[EPVAP]-1659910270509
GPR[SPVATF]-1659910270509
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910272186
GPR[EPVS]-1659910272186
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910272188
GPR[SPVAP]-1659910272188
GPR[EPVAP]-1659910274060
GPR[SPVATF]-1659910274060
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910275723
GPR[EPVS]-1659910275723
========
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910275724
GPR[SPVAP]-1659910275724
GPR[EPVAP]-1659910277608
GPR[SPVATF]-1659910277609
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910279276
GPR[EPVS]-1659910279276
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910279278
GPR[SPVAP]-1659910279278
GPR[EPVAP]-1659910280334
GPR[EPVS]-1659910280334
========
for(int row=0;row<nRows;row++){
maxColSum=ZERO.max(sum);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910280336
GPR[SPVAP]-1659910280336
GPR[EPVAP]-1659910281385
GPR[EPVS]-1659910281385
========
for(int row=0;row<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910281386
GPR[SPVAP]-1659910281386
GPR[EPVAP]-1659910282435
GPR[EPVS]-1659910282435
========
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910282437
GPR[SPVAP]-1659910282437
GPR[EPVAP]-1659910283498
GPR[EPVS]-1659910283498
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910283500
GPR[SPVAP]-1659910283500
GPR[EPVAP]-1659910284550
GPR[EPVS]-1659910284550
========
for(int row=0;row<ncols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910284551
GPR[SPVAP]-1659910284551
GPR[EPVAP]-1659910285603
GPR[EPVS]-1659910285603
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910285604
GPR[SPVAP]-1659910285604
GPR[EPVAP]-1659910287495
GPR[SPVATF]-1659910287495
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910289162
GPR[EPVS]-1659910289162
========
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910289163
GPR[SPVAP]-1659910289163
GPR[EPVAP]-1659910290218
GPR[EPVS]-1659910290218
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910290219
GPR[SPVAP]-1659910290219
GPR[EPVAP]-1659910291274
GPR[EPVS]-1659910291274
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910291276
GPR[SPVAP]-1659910291276
GPR[EPVAP]-1659910292330
GPR[EPVS]-1659910292330
========
for(int row=0;row<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910292332
GPR[SPVAP]-1659910292332
GPR[EPVAP]-1659910293388
GPR[EPVS]-1659910293388
========
for(int row=0;i<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910293390
GPR[SPVAP]-1659910293390
GPR[EPVAP]-1659910294477
GPR[EPVS]-1659910294477
========
data=new BigDecimal[nRows][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910294479
GPR[SPVAP]-1659910294479
GPR[EPVAP]-1659910296408
GPR[SPVATF]-1659910296408
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910298081
GPR[EPVS]-1659910298081
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910298084
GPR[SPVAP]-1659910298084
GPR[EPVAP]-1659910299146
GPR[EPVS]-1659910299146
========
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910299147
GPR[SPVAP]-1659910299147
GPR[EPVAP]-1659910300208
GPR[EPVS]-1659910300208
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910300209
GPR[SPVAP]-1659910300209
GPR[EPVAP]-1659910301266
GPR[EPVS]-1659910301266
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910301268
GPR[SPVAP]-1659910301268
GPR[EPVAP]-1659910302337
GPR[EPVS]-1659910302337
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910302338
GPR[SPVAP]-1659910302338
GPR[EPVAP]-1659910303453
GPR[EPVS]-1659910303453
========
for(int row=0;row<roundingMode;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910303454
GPR[SPVAP]-1659910303454
GPR[EPVAP]-1659910304512
GPR[EPVS]-1659910304512
========
for(int row=0;row<col;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910304514
GPR[SPVAP]-1659910304514
GPR[EPVAP]-1659910305569
GPR[EPVS]-1659910305569
========
for(int row=0;row<col;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910305570
GPR[SPVAP]-1659910305570
GPR[EPVAP]-1659910306633
GPR[EPVS]-1659910306633
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910306635
GPR[SPVAP]-1659910306635
GPR[EPVAP]-1659910307708
GPR[EPVS]-1659910307708
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910307709
GPR[SPVAP]-1659910307709
GPR[EPVAP]-1659910308759
GPR[EPVS]-1659910308759
========
for(int row=0;row<roundingMode;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910308760
GPR[SPVAP]-1659910308760
GPR[EPVAP]-1659910309815
GPR[EPVS]-1659910309815
========
for(int row=0;row<col;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910309817
GPR[SPVAP]-1659910309817
GPR[EPVAP]-1659910310868
GPR[EPVS]-1659910310868
========
for(int row=0;row<col;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910310870
GPR[SPVAP]-1659910310870
GPR[EPVAP]-1659910311923
GPR[EPVS]-1659910311923
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910311925
GPR[SPVAP]-1659910311925
GPR[EPVAP]-1659910312986
GPR[EPVS]-1659910312986
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910312988
GPR[SPVAP]-1659910312988
GPR[EPVAP]-1659910314026
GPR[EPVS]-1659910314026
========
for(int row=0;row<col;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910314028
GPR[SPVAP]-1659910314028
GPR[EPVAP]-1659910315091
GPR[EPVS]-1659910315091
========
for(int row=0;row<roundingMode;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910315093
GPR[SPVAP]-1659910315093
GPR[EPVAP]-1659910316184
GPR[EPVS]-1659910316184
========
for(int row=0;row<col;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910316186
GPR[SPVAP]-1659910316186
GPR[EPVAP]-1659910317243
GPR[EPVS]-1659910317243
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910317245
GPR[SPVAP]-1659910317245
GPR[EPVAP]-1659910318295
GPR[EPVS]-1659910318295
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910318298
GPR[SPVAP]-1659910318298
GPR[EPVAP]-1659910320159
GPR[SPVATF]-1659910320159
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910321821
GPR[EPVS]-1659910321821
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910321822
GPR[SPVAP]-1659910321822
GPR[EPVAP]-1659910323706
GPR[SPVATF]-1659910323706
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910325387
GPR[EPVS]-1659910325387
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910325388
GPR[SPVAP]-1659910325388
GPR[EPVAP]-1659910326447
GPR[EPVS]-1659910326447
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910326448
GPR[SPVAP]-1659910326448
GPR[EPVAP]-1659910327504
GPR[EPVS]-1659910327504
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910327506
GPR[SPVAP]-1659910327506
GPR[EPVAP]-1659910328588
GPR[EPVS]-1659910328588
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910328589
GPR[SPVAP]-1659910328589
GPR[EPVAP]-1659910329652
GPR[EPVS]-1659910329652
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910329653
GPR[SPVAP]-1659910329653
GPR[EPVAP]-1659910330747
GPR[EPVS]-1659910330747
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910330748
GPR[SPVAP]-1659910330748
GPR[EPVAP]-1659910331808
GPR[EPVS]-1659910331808
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910331809
GPR[SPVAP]-1659910331809
GPR[EPVAP]-1659910332885
GPR[EPVS]-1659910332885
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910332886
GPR[SPVAP]-1659910332886
GPR[EPVAP]-1659910333945
GPR[EPVS]-1659910333945
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910333946
GPR[SPVAP]-1659910333946
GPR[EPVAP]-1659910335021
GPR[EPVS]-1659910335021
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910335023
GPR[SPVAP]-1659910335023
GPR[EPVAP]-1659910336076
GPR[EPVS]-1659910336076
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910336078
GPR[SPVAP]-1659910336078
GPR[EPVAP]-1659910337132
GPR[EPVS]-1659910337132
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910337133
GPR[SPVAP]-1659910337133
GPR[EPVAP]-1659910338201
GPR[EPVS]-1659910338201
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910338203
GPR[SPVAP]-1659910338203
GPR[EPVAP]-1659910339263
GPR[EPVS]-1659910339263
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910339265
GPR[SPVAP]-1659910339265
GPR[EPVAP]-1659910340330
GPR[EPVS]-1659910340330
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910340331
GPR[SPVAP]-1659910340331
GPR[EPVAP]-1659910341393
GPR[EPVS]-1659910341393
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910341394
GPR[SPVAP]-1659910341394
GPR[EPVAP]-1659910342455
GPR[EPVS]-1659910342455
========
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910342457
GPR[SPVAP]-1659910342457
GPR[EPVAP]-1659910343518
GPR[EPVS]-1659910343518
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910343520
GPR[SPVAP]-1659910343520
GPR[EPVAP]-1659910344576
GPR[EPVS]-1659910344577
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910344578
GPR[SPVAP]-1659910344578
GPR[EPVAP]-1659910345640
GPR[EPVS]-1659910345640
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910345642
GPR[SPVAP]-1659910345642
GPR[EPVAP]-1659910346700
GPR[EPVS]-1659910346700
========
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910346702
GPR[SPVAP]-1659910346702
GPR[EPVAP]-1659910347764
GPR[EPVS]-1659910347764
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910347767
GPR[SPVAP]-1659910347767
GPR[EPVAP]-1659910349197
GPR[EPVS]-1659910349197
========
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910349199
GPR[SPVAP]-1659910349199
GPR[EPVAP]-1659910350263
GPR[EPVS]-1659910350263
========
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910350264
GPR[SPVAP]-1659910350264
GPR[EPVAP]-1659910351334
GPR[EPVS]-1659910351334
========
i++;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910351336
GPR[SPVAP]-1659910351336
GPR[EPVAP]-1659910352391
GPR[EPVS]-1659910352391
========
for(int row=0;row<nrows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910352392
GPR[SPVAP]-1659910352392
GPR[EPVAP]-1659910353446
GPR[EPVS]-1659910353446
========
for(int row=0;row<values.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910353449
GPR[SPVAP]-1659910353449
GPR[EPVAP]-1659910354517
GPR[EPVS]-1659910354517
========
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910354518
GPR[SPVAP]-1659910354518
GPR[EPVAP]-1659910355589
GPR[EPVS]-1659910355589
========
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910355590
GPR[SPVAP]-1659910355590
GPR[EPVAP]-1659910356640
GPR[EPVS]-1659910356640
========
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910356641
GPR[SPVAP]-1659910356641
GPR[EPVAP]-1659910357701
GPR[EPVS]-1659910357701
========
for(int row=0;row<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910357702
GPR[SPVAP]-1659910357702
GPR[EPVAP]-1659910358754
GPR[EPVS]-1659910358754
========
for(int row=0;row<stages;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910358755
GPR[SPVAP]-1659910358755
GPR[EPVAP]-1659910359807
GPR[EPVS]-1659910359807
========
for(int row=0;row<rank;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910359809
GPR[SPVAP]-1659910359809
GPR[EPVAP]-1659910360875
GPR[EPVS]-1659910360875
========
System.arraycopy(data[roundingMode],0,out,0,this.getColumnDimension());
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910360877
GPR[SPVAP]-1659910360877
GPR[EPVAP]-1659910362753
GPR[SPVATF]-1659910362753
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910364596
GPR[EPVS]-1659910364596
========
data=new double[nRows][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910364599
GPR[SPVAP]-1659910364599
GPR[EPVAP]-1659910365693
GPR[EPVS]-1659910365693
========
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910365694
GPR[SPVAP]-1659910365694
GPR[EPVAP]-1659910367557
GPR[SPVATF]-1659910367557
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910369374
GPR[EPVS]-1659910369374
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910369375
GPR[SPVAP]-1659910369375
GPR[EPVAP]-1659910370432
GPR[EPVS]-1659910370432
========
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910370434
GPR[SPVAP]-1659910370434
GPR[EPVAP]-1659910371481
GPR[EPVS]-1659910371481
========
for(int row=0;row<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910371483
GPR[SPVAP]-1659910371483
GPR[EPVAP]-1659910372547
GPR[EPVS]-1659910372547
========
for(int row=0;i<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910372548
GPR[SPVAP]-1659910372548
GPR[EPVAP]-1659910373596
GPR[EPVS]-1659910373596
========
for(int row=0;row<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910373598
GPR[SPVAP]-1659910373598
GPR[EPVAP]-1659910374659
GPR[EPVS]-1659910374659
========
for(int row=0;row<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910374661
GPR[SPVAP]-1659910374661
GPR[EPVAP]-1659910375717
GPR[EPVS]-1659910375717
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910375719
GPR[SPVAP]-1659910375719
GPR[EPVAP]-1659910376786
GPR[EPVS]-1659910376786
========
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910376788
GPR[SPVAP]-1659910376788
GPR[EPVAP]-1659910377831
GPR[EPVS]-1659910377831
========
for(int row=0;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910377833
GPR[SPVAP]-1659910377833
GPR[EPVAP]-1659910378879
GPR[EPVS]-1659910378879
========
for(int row=0;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910378881
GPR[SPVAP]-1659910378881
GPR[EPVAP]-1659910379946
GPR[EPVS]-1659910379946
========
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910379948
GPR[SPVAP]-1659910379948
GPR[EPVAP]-1659910380999
GPR[EPVS]-1659910380999
========
for(int row=0;row<results.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910381001
GPR[SPVAP]-1659910381001
GPR[EPVAP]-1659910382058
GPR[EPVS]-1659910382058
========
for(int row=0;row<result.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910382060
GPR[SPVAP]-1659910382060
GPR[EPVAP]-1659910383114
GPR[EPVS]-1659910383114
========
for(int row=0;row<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910383115
GPR[SPVAP]-1659910383115
GPR[EPVAP]-1659910384172
GPR[EPVS]-1659910384172
========
for(int row=0;i<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910384174
GPR[SPVAP]-1659910384174
GPR[EPVAP]-1659910385227
GPR[EPVS]-1659910385227
========
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910385229
GPR[SPVAP]-1659910385229
GPR[EPVAP]-1659910386290
GPR[EPVS]-1659910386290
========
for(int row=0;row<c.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910386292
GPR[SPVAP]-1659910386292
GPR[EPVAP]-1659910387360
GPR[EPVS]-1659910387360
========
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910387362
GPR[SPVAP]-1659910387362
GPR[EPVAP]-1659910389247
GPR[SPVATF]-1659910389247
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910390906
GPR[SPVATR]-1659910390906
TESTING : math_98
GPR[EPVATR]-1659910397151
GPR[EPVS]-1659910397151
GPR[PF]-1659910397151
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
for(int row=0;row<coefficients.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910397161
GPR[SPVAP]-1659910397161
GPR[EPVAP]-1659910398247
GPR[EPVS]-1659910398247
========
for(int row=0;i<c.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910398248
GPR[SPVAP]-1659910398248
GPR[EPVAP]-1659910399354
GPR[EPVS]-1659910399355
========
for(int row=0;row<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910399356
GPR[SPVAP]-1659910399356
GPR[EPVAP]-1659910400420
GPR[EPVS]-1659910400420
========
for(int row=nCols;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910400421
GPR[SPVAP]-1659910400421
GPR[EPVAP]-1659910402270
GPR[SPVATF]-1659910402270
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910403945
GPR[EPVS]-1659910403945
========
for(int row=nCols;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910403947
GPR[SPVAP]-1659910403947
GPR[EPVAP]-1659910405001
GPR[EPVS]-1659910405001
========
for(int row=nCols;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910405002
GPR[SPVAP]-1659910405002
GPR[EPVAP]-1659910406076
GPR[EPVS]-1659910406076
========
for(int row=nCols;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910406078
GPR[SPVAP]-1659910406078
GPR[EPVAP]-1659910407156
GPR[EPVS]-1659910407156
========
for(int row=nCols;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910407157
GPR[SPVAP]-1659910407157
GPR[EPVAP]-1659910408216
GPR[EPVS]-1659910408216
========
for(int row=nCols;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910408217
GPR[SPVAP]-1659910408217
GPR[EPVAP]-1659910409272
GPR[EPVS]-1659910409272
========
for(int row=nCols;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910409274
GPR[SPVAP]-1659910409274
GPR[EPVAP]-1659910410354
GPR[EPVS]-1659910410354
========
for(int row=0;row<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910410355
GPR[SPVAP]-1659910410355
GPR[EPVAP]-1659910412223
GPR[SPVATF]-1659910412223
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910413880
GPR[SPVATR]-1659910413881
TESTING : math_98
GPR[EPVATR]-1659910420081
GPR[EPVS]-1659910420081
========
for(int row=0;row<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910420083
GPR[SPVAP]-1659910420083
GPR[EPVAP]-1659910421961
GPR[SPVATF]-1659910421961
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910423643
GPR[SPVATR]-1659910423643
TESTING : math_98
GPR[EPVATR]-1659910429828
GPR[EPVS]-1659910429828
========
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910429829
GPR[SPVAP]-1659910429829
GPR[EPVAP]-1659910430910
GPR[EPVS]-1659910430910
========
for(int row=0;i<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910430911
GPR[SPVAP]-1659910430911
GPR[EPVAP]-1659910431965
GPR[EPVS]-1659910431965
========
for(int row=0;i<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910431966
GPR[SPVAP]-1659910431966
GPR[EPVAP]-1659910433035
GPR[EPVS]-1659910433035
========
for(int row=0;i<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910433037
GPR[SPVAP]-1659910433037
GPR[EPVAP]-1659910434090
GPR[EPVS]-1659910434090
========
for(int row=0;i<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910434092
GPR[SPVAP]-1659910434092
GPR[EPVAP]-1659910435163
GPR[EPVS]-1659910435163
========
for(int row=0;row<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910435168
GPR[SPVAP]-1659910435168
GPR[EPVAP]-1659910436229
GPR[EPVS]-1659910436229
========
for(int row=0;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910436231
GPR[SPVAP]-1659910436231
GPR[EPVAP]-1659910438101
GPR[SPVATF]-1659910438101
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910439799
GPR[EPVS]-1659910439799
========
for(int row=0;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910439801
GPR[SPVAP]-1659910439801
GPR[EPVAP]-1659910440875
GPR[EPVS]-1659910440875
========
for(int row=nCols;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910440877
GPR[SPVAP]-1659910440877
GPR[EPVAP]-1659910442759
GPR[SPVATF]-1659910442759
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910444418
GPR[EPVS]-1659910444418
========
for(int row=nCols;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910444420
GPR[SPVAP]-1659910444420
GPR[EPVAP]-1659910445481
GPR[EPVS]-1659910445481
========
for(int row=0;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910445482
GPR[SPVAP]-1659910445482
GPR[EPVAP]-1659910446537
GPR[EPVS]-1659910446537
========
for(int row=nCols;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910446539
GPR[SPVAP]-1659910446539
GPR[EPVAP]-1659910447601
GPR[EPVS]-1659910447601
========
for(int row=nCols;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910447603
GPR[SPVAP]-1659910447603
GPR[EPVAP]-1659910448661
GPR[EPVS]-1659910448661
========
for(int row=0;row<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910448662
GPR[SPVAP]-1659910448662
GPR[EPVAP]-1659910449716
GPR[EPVS]-1659910449716
========
for(int row=0;row<value.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910449718
GPR[SPVAP]-1659910449718
GPR[EPVAP]-1659910450773
GPR[EPVS]-1659910450773
========
for(int row=nCols;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910450775
GPR[SPVAP]-1659910450775
GPR[EPVAP]-1659910451834
GPR[EPVS]-1659910451834
========
for(int row=0;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910451836
GPR[SPVAP]-1659910451836
GPR[EPVAP]-1659910452881
GPR[EPVS]-1659910452881
========
for(int row=nCols;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910452882
GPR[SPVAP]-1659910452882
GPR[EPVAP]-1659910453943
GPR[EPVS]-1659910453943
========
for(int row=0;row<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910453946
GPR[SPVAP]-1659910453946
GPR[EPVAP]-1659910455029
GPR[EPVS]-1659910455029
========
for(int row=0;row<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910455031
GPR[SPVAP]-1659910455031
GPR[EPVAP]-1659910456153
GPR[EPVS]-1659910456153
========
for(int row=0;row<vertices.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910456154
GPR[SPVAP]-1659910456154
GPR[EPVAP]-1659910457226
GPR[EPVS]-1659910457226
========
for(int row=0;row<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910457229
GPR[SPVAP]-1659910457229
GPR[EPVAP]-1659910458295
GPR[EPVS]-1659910458295
========
for(int row=0;row<i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910458297
GPR[SPVAP]-1659910458297
GPR[EPVAP]-1659910459356
GPR[EPVS]-1659910459356
========
for(int row=0;row<=i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910459358
GPR[SPVAP]-1659910459358
GPR[EPVAP]-1659910460470
GPR[EPVS]-1659910460470
========
for(int row=0;row<special.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910460473
GPR[SPVAP]-1659910460473
GPR[EPVAP]-1659910461523
GPR[EPVS]-1659910461523
========
for(int row=0;row<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910461524
GPR[SPVAP]-1659910461524
GPR[EPVAP]-1659910463418
GPR[SPVATF]-1659910463418
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910465086
GPR[EPVS]-1659910465086
========
for(int row=0;i<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910465087
GPR[SPVAP]-1659910465087
GPR[EPVAP]-1659910466134
GPR[EPVS]-1659910466134
========
for(int row=0;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910466136
GPR[SPVAP]-1659910466136
GPR[EPVAP]-1659910468013
GPR[SPVATF]-1659910468013
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910469692
GPR[EPVS]-1659910469692
========
for(int row=roundingMode;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910469694
GPR[SPVAP]-1659910469694
GPR[EPVAP]-1659910471618
GPR[SPVATF]-1659910471618
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910473294
GPR[EPVS]-1659910473294
========
for(int row=roundingMode;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910473295
GPR[SPVAP]-1659910473295
GPR[EPVAP]-1659910474351
GPR[EPVS]-1659910474351
========
for(int row=roundingMode;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910474353
GPR[SPVAP]-1659910474353
GPR[EPVAP]-1659910475391
GPR[EPVS]-1659910475392
========
for(int row=0;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910475393
GPR[SPVAP]-1659910475393
GPR[EPVAP]-1659910476447
GPR[EPVS]-1659910476447
========
for(int row=roundingMode;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910476448
GPR[SPVAP]-1659910476448
GPR[EPVAP]-1659910477524
GPR[EPVS]-1659910477524
========
for(int row=roundingMode;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910477526
GPR[SPVAP]-1659910477526
GPR[EPVAP]-1659910478585
GPR[EPVS]-1659910478585
========
for(int row=roundingMode;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910478587
GPR[SPVAP]-1659910478587
GPR[EPVAP]-1659910479640
GPR[EPVS]-1659910479640
========
for(int row=0;row<parameters.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910479642
GPR[SPVAP]-1659910479642
GPR[EPVAP]-1659910480689
GPR[EPVS]-1659910480689
========
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910480690
GPR[SPVAP]-1659910480690
GPR[EPVAP]-1659910481739
GPR[EPVS]-1659910481739
========
for(int row=0;row<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910481740
GPR[SPVAP]-1659910481740
GPR[EPVAP]-1659910482810
GPR[EPVS]-1659910482810
========
for(int row=0;i<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910482812
GPR[SPVAP]-1659910482812
GPR[EPVAP]-1659910483877
GPR[EPVS]-1659910483877
========
for(int row=0;i<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910483879
GPR[SPVAP]-1659910483879
GPR[EPVAP]-1659910484933
GPR[EPVS]-1659910484933
========
for(int row=0;row<random.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910484935
GPR[SPVAP]-1659910484935
GPR[EPVAP]-1659910485992
GPR[EPVS]-1659910485992
========
for(int row=0;row<polynoms.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910485993
GPR[SPVAP]-1659910485993
GPR[EPVAP]-1659910487055
GPR[EPVS]-1659910487055
========
verifyDataSet(data);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910487057
GPR[SPVAP]-1659910487057
GPR[EPVAP]-1659910488108
GPR[EPVS]-1659910488108
========
for(int row=0;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910488110
GPR[SPVAP]-1659910488110
GPR[EPVAP]-1659910489180
GPR[EPVS]-1659910489180
========
for(int row=roundingMode;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910489182
GPR[SPVAP]-1659910489182
GPR[EPVAP]-1659910490258
GPR[EPVS]-1659910490258
========
for(int row=0;i<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910490261
GPR[SPVAP]-1659910490261
GPR[EPVAP]-1659910491333
GPR[EPVS]-1659910491333
========
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910491334
GPR[SPVAP]-1659910491334
GPR[EPVAP]-1659910492397
GPR[EPVS]-1659910492397
========
for(int row=0;i<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910492399
GPR[SPVAP]-1659910492399
GPR[EPVAP]-1659910493459
GPR[EPVS]-1659910493459
========
for(int row=0;row<root.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910493462
GPR[SPVAP]-1659910493462
GPR[EPVAP]-1659910494521
GPR[EPVS]-1659910494521
========
for(int row=0;row<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910494523
GPR[SPVAP]-1659910494523
GPR[EPVAP]-1659910495576
GPR[EPVS]-1659910495576
========
for(int row=0;row<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910495577
GPR[SPVAP]-1659910495577
GPR[EPVAP]-1659910496632
GPR[EPVS]-1659910496632
========
for(int row=0;i<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910496634
GPR[SPVAP]-1659910496634
GPR[EPVAP]-1659910497693
GPR[EPVS]-1659910497693
========
for(int row=0;i<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910497694
GPR[SPVAP]-1659910497694
GPR[EPVAP]-1659910498729
GPR[EPVS]-1659910498729
========
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910498730
GPR[SPVAP]-1659910498730
GPR[EPVAP]-1659910499790
GPR[EPVS]-1659910499790
========
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910499791
GPR[SPVAP]-1659910499791
GPR[EPVAP]-1659910500846
GPR[EPVS]-1659910500846
========
for(int row=0;row<nRows;row++){
BigDecimal sum=binStats;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910500848
GPR[SPVAP]-1659910500848
GPR[EPVAP]-1659910501904
GPR[EPVS]-1659910501904
========
for(int row=0;i<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910501906
GPR[SPVAP]-1659910501906
GPR[EPVAP]-1659910502981
GPR[EPVS]-1659910502981
========
for(int row=0;row<simplex.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910502984
GPR[SPVAP]-1659910502984
GPR[EPVAP]-1659910504051
GPR[EPVS]-1659910504051
========
for(int row=0;i<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910504053
GPR[SPVAP]-1659910504053
GPR[EPVAP]-1659910505112
GPR[EPVS]-1659910505112
========
for(int row=0;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910505114
GPR[SPVAP]-1659910505114
GPR[EPVAP]-1659910506164
GPR[EPVS]-1659910506164
========
for(int row=roundingMode;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910506166
GPR[SPVAP]-1659910506166
GPR[EPVAP]-1659910507252
GPR[EPVS]-1659910507252
========
for(int row=0;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910507542
GPR[SPVAP]-1659910507542
GPR[EPVAP]-1659910508582
GPR[EPVS]-1659910508582
========
for(int row=roundingMode;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910508583
GPR[SPVAP]-1659910508583
GPR[EPVAP]-1659910509623
GPR[EPVS]-1659910509623
========
for(int row=0;i<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910509625
GPR[SPVAP]-1659910509625
GPR[EPVAP]-1659910510680
GPR[EPVS]-1659910510680
========
for(int row=0;i<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910510681
GPR[SPVAP]-1659910510681
GPR[EPVAP]-1659910511799
GPR[EPVS]-1659910511799
========
for(int row=0;row<nRows;row++){
bytes[bytesOut++]=(byte)row;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910511802
GPR[SPVAP]-1659910511802
GPR[EPVAP]-1659910512858
GPR[EPVS]-1659910512858
========
for(int row=0;row<nRows;row++){
if(nCols==bytes.length){
return ;
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910512860
GPR[SPVAP]-1659910512860
GPR[EPVAP]-1659910513913
GPR[EPVS]-1659910513913
========
for(int row=0;row<nRows;row++){
bytes[bytesOut++]=(byte)row;
if(nCols==bytes.length){
return ;
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910513915
GPR[SPVAP]-1659910513915
GPR[EPVAP]-1659910514973
GPR[EPVS]-1659910514973
========
for(int row=0;row<nSing;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910514975
GPR[SPVAP]-1659910514975
GPR[EPVAP]-1659910516059
GPR[EPVS]-1659910516059
========
for(int row=0;row<nRows;row++){
yTmp[i]=y0[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910516061
GPR[SPVAP]-1659910516061
GPR[EPVAP]-1659910517119
GPR[EPVS]-1659910517119
========
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910517121
GPR[SPVAP]-1659910517121
GPR[EPVAP]-1659910518185
GPR[EPVS]-1659910518185
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910518186
GPR[SPVAP]-1659910518186
GPR[EPVAP]-1659910520092
GPR[SPVATF]-1659910520092
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910521773
GPR[EPVS]-1659910521773
========
for(int row=0;row<nRows;row++){
sums[i]+=v[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910521774
GPR[SPVAP]-1659910521774
GPR[EPVAP]-1659910522829
GPR[EPVS]-1659910522829
========
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910522830
GPR[SPVAP]-1659910522830
GPR[EPVAP]-1659910523894
GPR[EPVS]-1659910523894
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910523895
GPR[SPVAP]-1659910523895
GPR[EPVAP]-1659910524948
GPR[EPVS]-1659910524948
========
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910524949
GPR[SPVAP]-1659910524949
GPR[EPVAP]-1659910526853
GPR[SPVATF]-1659910526853
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910528566
GPR[EPVS]-1659910528566
========
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910528568
GPR[SPVAP]-1659910528568
GPR[EPVAP]-1659910529616
GPR[EPVS]-1659910529616
========
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910529617
GPR[SPVAP]-1659910529617
GPR[EPVAP]-1659910530671
GPR[EPVS]-1659910530671
========
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910530673
GPR[SPVAP]-1659910530673
GPR[EPVAP]-1659910531741
GPR[EPVS]-1659910531741
========
for(int row=0;row<nRows;row++){
correlated[i]=mean[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910531743
GPR[SPVAP]-1659910531743
GPR[EPVAP]-1659910532797
GPR[EPVS]-1659910532797
========
for(int row=0;row<randomBytes.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910532798
GPR[SPVAP]-1659910532798
GPR[EPVAP]-1659910533864
GPR[EPVS]-1659910533864
========
for(int row=0;row<hash.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910533865
GPR[SPVAP]-1659910533865
GPR[EPVAP]-1659910534931
GPR[EPVS]-1659910534931
========
nRows=degree()+1;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910534934
GPR[SPVAP]-1659910534934
GPR[EPVAP]-1659910535995
GPR[EPVS]-1659910535995
========
if((nCols+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910535998
GPR[SPVAP]-1659910535998
GPR[EPVAP]-1659910537069
GPR[EPVS]-1659910537069
========
roundingMode=roundingMode;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910537071
GPR[SPVAP]-1659910537071
GPR[EPVAP]-1659910538960
GPR[SPVATF]-1659910538960
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910540650
GPR[EPVS]-1659910540650
========
for(int row=0;row<vertexA.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910540653
GPR[SPVAP]-1659910540653
GPR[EPVAP]-1659910541702
GPR[EPVS]-1659910541702
========
for(int row=0;row<end;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910541703
GPR[SPVAP]-1659910541703
GPR[EPVAP]-1659910542786
GPR[EPVS]-1659910542786
========
for(int row=0;row<nRows;row++){
list[target]=list[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910542788
GPR[SPVAP]-1659910542788
GPR[EPVAP]-1659910543870
GPR[EPVS]-1659910543870
========
for(int row=0;row<nRows;row++){
list[i]=permutation[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910543872
GPR[SPVAP]-1659910543872
GPR[EPVAP]-1659910545013
GPR[EPVS]-1659910545013
========
for(int row=0;row<nRows;row++){
list[target]=list[i];
list[i]=permutation[row];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910545015
GPR[SPVAP]-1659910545015
GPR[EPVAP]-1659910546083
GPR[EPVS]-1659910546083
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<cols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910546085
GPR[SPVAP]-1659910546085
GPR[EPVAP]-1659910547166
GPR[EPVS]-1659910547166
========
nRows=x.length;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910547169
GPR[SPVAP]-1659910547169
GPR[EPVAP]-1659910548229
GPR[EPVS]-1659910548229
========
for(int row=0;row<nRows;row++){
f[i]=data[j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910548231
GPR[SPVAP]-1659910548231
GPR[EPVAP]-1659910549295
GPR[EPVS]-1659910549295
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
k=N>>1;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910549296
GPR[SPVAP]-1659910549296
GPR[EPVAP]-1659910550389
GPR[EPVS]-1659910550389
========
for(int row=0;row<nRows;row++){
j+=roundingMode;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910550390
GPR[SPVAP]-1659910550390
GPR[EPVAP]-1659910551460
GPR[EPVS]-1659910551460
========
for(int row=0;row<nRows;row++){
f[i]=data[j];
k=N>>1;
j+=roundingMode;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910551462
GPR[SPVAP]-1659910551462
GPR[EPVAP]-1659910552537
GPR[EPVS]-1659910552537
========
roundingMode=ret*31+nRows;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910552539
GPR[SPVAP]-1659910552539
GPR[EPVAP]-1659910553627
GPR[EPVS]-1659910553627
========
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910553629
GPR[SPVAP]-1659910553629
GPR[EPVAP]-1659910554676
GPR[EPVS]-1659910554676
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910554678
GPR[SPVAP]-1659910554678
GPR[EPVAP]-1659910556556
GPR[SPVATF]-1659910556557
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910558214
GPR[EPVS]-1659910558214
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910558215
GPR[SPVAP]-1659910558215
GPR[EPVAP]-1659910559275
GPR[EPVS]-1659910559275
========
for(int row=0;row<nRows;row++){
r[row][row]=rDiag[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910559277
GPR[SPVAP]-1659910559277
GPR[EPVAP]-1659910560339
GPR[EPVS]-1659910560339
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910560340
GPR[SPVAP]-1659910560340
GPR[EPVAP]-1659910562204
GPR[SPVATF]-1659910562204
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910563880
GPR[EPVS]-1659910563880
========
System.arraycopy(data[roundingMode],0,out[0],0,this.getColumnDimension());
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910563882
GPR[SPVAP]-1659910563882
GPR[EPVAP]-1659910565758
GPR[SPVATF]-1659910565758
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910567445
GPR[EPVS]-1659910567445
========
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910567446
GPR[SPVAP]-1659910567446
GPR[EPVAP]-1659910568499
GPR[EPVS]-1659910568499
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910568500
GPR[SPVAP]-1659910568500
GPR[EPVAP]-1659910569548
GPR[EPVS]-1659910569548
========
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910569549
GPR[SPVAP]-1659910569549
GPR[EPVAP]-1659910570630
GPR[EPVS]-1659910570630
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910570632
GPR[SPVAP]-1659910570632
GPR[EPVAP]-1659910571699
GPR[EPVS]-1659910571699
========
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910571700
GPR[SPVAP]-1659910571700
GPR[EPVAP]-1659910572764
GPR[EPVS]-1659910572764
========
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910572766
GPR[SPVAP]-1659910572766
GPR[EPVAP]-1659910573819
GPR[EPVS]-1659910573819
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910573821
GPR[SPVAP]-1659910573821
GPR[EPVAP]-1659910574882
GPR[EPVS]-1659910574882
========
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910574883
GPR[SPVAP]-1659910574883
GPR[EPVAP]-1659910575934
GPR[EPVS]-1659910575934
========
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910575936
GPR[SPVAP]-1659910575936
GPR[EPVAP]-1659910577005
GPR[EPVS]-1659910577005
========
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910577006
GPR[SPVAP]-1659910577006
GPR[EPVAP]-1659910578075
GPR[EPVS]-1659910578075
========
for(int row=0;row<nRows;row++){
simplex[i]=new PointCostPair(new double[nRows],Double.NaN);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910578078
GPR[SPVAP]-1659910578078
GPR[EPVAP]-1659910579155
GPR[EPVS]-1659910579155
========
for(int row=nCols;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910579156
GPR[SPVAP]-1659910579156
GPR[EPVAP]-1659910580227
GPR[EPVS]-1659910580227
========
for(int row=nCols;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910580229
GPR[SPVAP]-1659910580229
GPR[EPVAP]-1659910581279
GPR[EPVS]-1659910581279
========
for(int row=0;row<nRows;row++){
c[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910581281
GPR[SPVAP]-1659910581281
GPR[EPVAP]-1659910582341
GPR[EPVS]-1659910582341
========
for(int row=0;row<nRows;row++){
d[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910582342
GPR[SPVAP]-1659910582342
GPR[EPVAP]-1659910583402
GPR[EPVS]-1659910583402
========
for(int row=0;row<nRows;row++){
c[i]=y[i];
d[i]=y[i];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910583403
GPR[SPVAP]-1659910583403
GPR[EPVAP]-1659910584465
GPR[EPVS]-1659910584465
========
for(int row=0;row<nRows;row++){
simplex[i]=new PointCostPair(new double[nCols],Double.NaN);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910584467
GPR[SPVAP]-1659910584467
GPR[EPVAP]-1659910585569
GPR[EPVS]-1659910585569
========
if(i<0){
i=-i-2;
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910585571
GPR[SPVAP]-1659910585571
GPR[EPVAP]-1659910586640
GPR[EPVS]-1659910586640
========
if(i>=polynomials.length){
i--;
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910586641
GPR[SPVAP]-1659910586641
GPR[EPVAP]-1659910587700
GPR[EPVS]-1659910587700
========
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910587701
GPR[SPVAP]-1659910587701
GPR[EPVAP]-1659910588765
GPR[EPVS]-1659910588765
========
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910588766
GPR[SPVAP]-1659910588766
GPR[EPVAP]-1659910589896
GPR[EPVS]-1659910589896
========
for(int row=0;row<nRows;row++){
sumImpl[i]=new Sum();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910589898
GPR[SPVAP]-1659910589898
GPR[EPVAP]-1659910590985
GPR[EPVS]-1659910590985
========
for(int row=0;row<nRows;row++){
sumSqImpl[i]=new SumOfSquares();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910590986
GPR[SPVAP]-1659910590986
GPR[EPVAP]-1659910592047
GPR[EPVS]-1659910592047
========
for(int row=0;row<nRows;row++){
maxImpl[i]=new Max();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910592048
GPR[SPVAP]-1659910592048
GPR[EPVAP]-1659910593115
GPR[EPVS]-1659910593115
========
for(int row=0;row<nRows;row++){
sumLogImpl[i]=new SumOfLogs();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910593117
GPR[SPVAP]-1659910593117
GPR[EPVAP]-1659910594170
GPR[EPVS]-1659910594170
========
for(int row=0;row<nRows;row++){
geoMeanImpl[i]=new GeometricMean();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910594172
GPR[SPVAP]-1659910594172
GPR[EPVAP]-1659910595216
GPR[EPVS]-1659910595216
========
for(int row=0;row<nRows;row++){
meanImpl[i]=new Mean();
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910595217
GPR[SPVAP]-1659910595218
GPR[EPVAP]-1659910596296
GPR[EPVS]-1659910596296
========
for(int row=0;row<nRows;row++){
sumImpl[i]=new Sum();
sumSqImpl[i]=new SumOfSquares();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910596297
GPR[SPVAP]-1659910596297
GPR[EPVAP]-1659910597374
GPR[EPVS]-1659910597374
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910597376
GPR[SPVAP]-1659910597376
GPR[EPVAP]-1659910598434
GPR[EPVS]-1659910598434
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluateSimplex();
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910598435
GPR[SPVAP]-1659910598435
GPR[EPVAP]-1659910599510
GPR[EPVS]-1659910599510
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
evaluateSimplex();

for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910599512
GPR[SPVAP]-1659910599512
GPR[EPVAP]-1659910600576
GPR[EPVS]-1659910600576
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910600579
GPR[SPVAP]-1659910600579
GPR[EPVAP]-1659910601644
GPR[EPVS]-1659910601644
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[j][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910601646
GPR[SPVAP]-1659910601646
GPR[EPVAP]-1659910602699
GPR[EPVS]-1659910602699
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
jTj[j][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910602700
GPR[SPVAP]-1659910602700
GPR[EPVAP]-1659910603769
GPR[EPVS]-1659910603769
========
for(int row=0;row<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910603777
GPR[SPVAP]-1659910603777
GPR[EPVAP]-1659910604859
GPR[EPVS]-1659910604859
========
for(int row=0;i<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910604862
GPR[SPVAP]-1659910604862
GPR[EPVAP]-1659910605920
GPR[EPVS]-1659910605920
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=nCols*roundingMode+permutation[i];i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910605921
GPR[SPVAP]-1659910605921
GPR[EPVAP]-1659910606982
GPR[EPVS]-1659910606982
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910606984
GPR[SPVAP]-1659910606984
GPR[EPVAP]-1659910608065
GPR[EPVS]-1659910608065
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910608067
GPR[SPVAP]-1659910608067
GPR[EPVAP]-1659910609926
GPR[SPVATF]-1659910609926
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910611617
GPR[EPVS]-1659910611617
========
for(int row=0;row<nRows;row++){
a[i]=divdiff[0];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910611620
GPR[SPVAP]-1659910611620
GPR[EPVAP]-1659910612696
GPR[EPVS]-1659910612696
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910612697
GPR[SPVAP]-1659910612697
GPR[EPVAP]-1659910613773
GPR[EPVS]-1659910613773
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910613775
GPR[SPVAP]-1659910613775
GPR[EPVAP]-1659910614820
GPR[EPVS]-1659910614820
========
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910614822
GPR[SPVAP]-1659910614822
GPR[EPVAP]-1659910615885
GPR[EPVS]-1659910615885
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910615886
GPR[SPVAP]-1659910615886
GPR[EPVAP]-1659910616953
GPR[EPVS]-1659910616953
========
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910616955
GPR[SPVAP]-1659910616955
GPR[EPVAP]-1659910618017
GPR[EPVS]-1659910618017
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
dev=((double)observed[i]-expected[i]);
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910618019
GPR[SPVAP]-1659910618019
GPR[EPVAP]-1659910619087
GPR[EPVS]-1659910619087
========
for(int row=0;i<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910619088
GPR[SPVAP]-1659910619088
GPR[EPVAP]-1659910620155
GPR[EPVS]-1659910620155
========
for(int row=0;row<mu;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910620158
GPR[SPVAP]-1659910620158
GPR[EPVAP]-1659910621207
GPR[EPVS]-1659910621207
========
for(int row=0;row<degree();row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910621209
GPR[SPVAP]-1659910621209
GPR[EPVAP]-1659910622317
GPR[EPVS]-1659910622317
========
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910622320
GPR[SPVAP]-1659910622320
GPR[EPVAP]-1659910624194
GPR[SPVATF]-1659910624194
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910625869
GPR[EPVS]-1659910625869
========
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910625871
GPR[SPVAP]-1659910625871
GPR[EPVAP]-1659910627723
GPR[SPVATF]-1659910627723
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910629402
GPR[EPVS]-1659910629402
========
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910629403
GPR[SPVAP]-1659910629403
GPR[EPVAP]-1659910630468
GPR[EPVS]-1659910630468
========
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910630469
GPR[SPVAP]-1659910630469
GPR[EPVAP]-1659910631530
GPR[EPVS]-1659910631530
========
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910631532
GPR[SPVAP]-1659910631532
GPR[EPVAP]-1659910632583
GPR[EPVS]-1659910632583
========
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910632584
GPR[SPVAP]-1659910632584
GPR[EPVAP]-1659910633653
GPR[EPVS]-1659910633653
========
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910633654
GPR[SPVAP]-1659910633654
GPR[EPVAP]-1659910634705
GPR[EPVS]-1659910634705
========
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910634708
GPR[SPVAP]-1659910634708
GPR[EPVAP]-1659910635757
GPR[EPVS]-1659910635757
========
for(int row=0;i<i;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910635760
GPR[SPVAP]-1659910635760
GPR[EPVAP]-1659910636836
GPR[EPVS]-1659910636836
========
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910636837
GPR[SPVAP]-1659910636837
GPR[EPVAP]-1659910638721
GPR[SPVATF]-1659910638721
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910640390
GPR[EPVS]-1659910640390
========
for(int row=0;row<nRows;row++){
divider=x[j]-x[i+j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910640391
GPR[SPVAP]-1659910640391
GPR[EPVAP]-1659910641459
GPR[EPVS]-1659910641459
========
for(int row=0;i<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910641460
GPR[SPVAP]-1659910641460
GPR[EPVAP]-1659910642514
GPR[EPVS]-1659910642514
========
for(int row=0;i<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910642516
GPR[SPVAP]-1659910642516
GPR[EPVAP]-1659910643569
GPR[EPVS]-1659910643569
========
for(int row=0;i<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910643571
GPR[SPVAP]-1659910643571
GPR[EPVAP]-1659910644626
GPR[EPVS]-1659910644626
========
for(int row=0;i<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910644628
GPR[SPVAP]-1659910644628
GPR[EPVAP]-1659910645693
GPR[EPVS]-1659910645693
========
if(fraction.numerator==0){
throw new ArithmeticException("The fraction to divide by must not be zero");
}
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910645699
GPR[SPVAP]-1659910645699
GPR[EPVAP]-1659910646752
GPR[EPVS]-1659910646752
========
for(int row=0;row<nRows;row++){
v[2][i]=v[0][i]-v[1][i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910646754
GPR[SPVAP]-1659910646754
GPR[EPVAP]-1659910647829
GPR[EPVS]-1659910647829
========
data=new BigDecimal[nCols][nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910647831
GPR[SPVAP]-1659910647831
GPR[EPVAP]-1659910649703
GPR[SPVATF]-1659910649703
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910651378
GPR[EPVS]-1659910651378
========
lu=null;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910651380
GPR[SPVAP]-1659910651380
GPR[EPVAP]-1659910653285
GPR[SPVATF]-1659910653285
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910654954
GPR[EPVS]-1659910654954
========
data=new BigDecimal[nCols][nRows];
lu=null;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910654956
GPR[SPVAP]-1659910654956
GPR[EPVAP]-1659910656831
GPR[SPVATF]-1659910656831
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910658522
GPR[EPVS]-1659910658522
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910660369
GPR[SPVAP]-1659910660369
GPR[EPVAP]-1659910662231
GPR[SPVATF]-1659910662231
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910663894
GPR[SPVATR]-1659910663894
TESTING : math_98
GPR[EPVATR]-1659910670030
GPR[EPVS]-1659910670030
GPR[PF]-1659910670030
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910670039
GPR[SPVAP]-1659910670039
GPR[EPVAP]-1659910671947
GPR[SPVATF]-1659910671947
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910673626
GPR[EPVS]-1659910673626
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910673628
GPR[SPVAP]-1659910673628
GPR[EPVAP]-1659910675497
GPR[SPVATF]-1659910675497
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910677178
GPR[SPVATR]-1659910677179
TESTING : math_98
GPR[EPVATR]-1659910683390
GPR[EPVS]-1659910683390
GPR[PF]-1659910683390
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910683399
GPR[SPVAP]-1659910683399
GPR[EPVAP]-1659910685268
GPR[SPVATF]-1659910685268
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910686932
GPR[EPVS]-1659910686932
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910686934
GPR[SPVAP]-1659910686934
GPR[EPVAP]-1659910688828
GPR[SPVATF]-1659910688828
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910690514
GPR[EPVS]-1659910690514
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nRows;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910690519
GPR[SPVAP]-1659910690519
GPR[EPVAP]-1659910692390
GPR[SPVATF]-1659910692390
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910694074
GPR[EPVS]-1659910694074
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910694076
GPR[SPVAP]-1659910694076
GPR[EPVAP]-1659910695139
GPR[EPVS]-1659910695139
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910695141
GPR[SPVAP]-1659910695141
GPR[EPVAP]-1659910696194
GPR[EPVS]-1659910696194
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=row;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910696196
GPR[SPVAP]-1659910696196
GPR[EPVAP]-1659910697252
GPR[EPVS]-1659910697252
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
maxColSum=ZERO.max(sum);
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910697254
GPR[SPVAP]-1659910697254
GPR[EPVAP]-1659910698340
GPR[EPVS]-1659910698340
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910698342
GPR[SPVAP]-1659910698342
GPR[EPVAP]-1659910699409
GPR[EPVS]-1659910699409
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
outDataRow[col]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910699410
GPR[SPVAP]-1659910699410
GPR[EPVAP]-1659910700462
GPR[EPVS]-1659910700462
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910700465
GPR[SPVAP]-1659910700465
GPR[EPVAP]-1659910701559
GPR[EPVS]-1659910701559
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910701560
GPR[SPVAP]-1659910701560
GPR[EPVAP]-1659910702616
GPR[EPVS]-1659910702616
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910702617
GPR[SPVAP]-1659910702617
GPR[EPVAP]-1659910703678
GPR[EPVS]-1659910703678
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910703680
GPR[SPVAP]-1659910703680
GPR[EPVAP]-1659910704740
GPR[EPVS]-1659910704740
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<columnCount;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910704741
GPR[SPVAP]-1659910704741
GPR[EPVAP]-1659910705801
GPR[EPVS]-1659910705801
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910705802
GPR[SPVAP]-1659910705802
GPR[EPVAP]-1659910707683
GPR[SPVATF]-1659910707683
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910709357
GPR[EPVS]-1659910709357
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910709359
GPR[SPVAP]-1659910709359
GPR[EPVAP]-1659910711676
GPR[SPVATF]-1659910711676
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910713364
GPR[EPVS]-1659910713364
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910713366
GPR[SPVAP]-1659910713366
GPR[EPVAP]-1659910715243
GPR[SPVATF]-1659910715243
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910716922
GPR[EPVS]-1659910716922
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910716924
GPR[SPVAP]-1659910716924
GPR[EPVAP]-1659910718000
GPR[EPVS]-1659910718000
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910718002
GPR[SPVAP]-1659910718002
GPR[EPVAP]-1659910719876
GPR[SPVATF]-1659910719876
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910721592
GPR[EPVS]-1659910721592
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910721595
GPR[SPVAP]-1659910721595
GPR[EPVAP]-1659910722646
GPR[EPVS]-1659910722646
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(sum.abs().compareTo(ZERO)==1){
largest=sum.abs();
max=row;
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910722648
GPR[SPVAP]-1659910722648
GPR[EPVAP]-1659910723695
GPR[EPVS]-1659910723695
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
if(sum.abs().compareTo(ZERO)==1){
largest=sum.abs();
max=row;
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910723697
GPR[SPVAP]-1659910723697
GPR[EPVAP]-1659910724739
GPR[EPVS]-1659910724739
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910724740
GPR[SPVAP]-1659910724740
GPR[EPVAP]-1659910726597
GPR[SPVATF]-1659910726597
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910728285
GPR[EPVS]-1659910728285
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910728287
GPR[SPVAP]-1659910728287
GPR[EPVAP]-1659910730166
GPR[SPVATF]-1659910730166
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910731820
GPR[EPVS]-1659910731820
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.subtract(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910731821
GPR[SPVAP]-1659910731821
GPR[EPVAP]-1659910733681
GPR[SPVATF]-1659910733681
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910735353
GPR[EPVS]-1659910735353
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910735354
GPR[SPVAP]-1659910735354
GPR[EPVAP]-1659910736405
GPR[EPVS]-1659910736405
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910736406
GPR[SPVAP]-1659910736406
GPR[EPVAP]-1659910737456
GPR[EPVS]-1659910737456
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910737458
GPR[SPVAP]-1659910737458
GPR[EPVAP]-1659910738509
GPR[EPVS]-1659910738509
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910738515
GPR[SPVAP]-1659910738515
GPR[EPVAP]-1659910739563
GPR[EPVS]-1659910739563
========
System.arraycopy(data[roundingMode],0,out,0,this.getColumnDimension());
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910739565
GPR[SPVAP]-1659910739565
GPR[EPVAP]-1659910740625
GPR[EPVS]-1659910740625
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<ncols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910740626
GPR[SPVAP]-1659910740626
GPR[EPVAP]-1659910741683
GPR[EPVS]-1659910741683
========
G2=G.multiply(G);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910741686
GPR[SPVAP]-1659910741686
GPR[EPVAP]-1659910742744
GPR[EPVS]-1659910742744
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910742746
GPR[SPVAP]-1659910742746
GPR[EPVAP]-1659910743812
GPR[EPVS]-1659910743812
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910743813
GPR[SPVAP]-1659910743814
GPR[EPVAP]-1659910744878
GPR[EPVS]-1659910744878
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910744879
GPR[SPVAP]-1659910744879
GPR[EPVAP]-1659910745937
GPR[EPVS]-1659910745937
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
verifyDataSet(data);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910745939
GPR[SPVAP]-1659910745939
GPR[EPVAP]-1659910747012
GPR[EPVS]-1659910747012
========
if(N==2){
new Complex[N][0]=data[0].add(data[1]);
f[1]=data[0].subtract(data[1]);
return f;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910747014
GPR[SPVAP]-1659910747014
GPR[EPVAP]-1659910748078
GPR[EPVS]-1659910748078
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nRows;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910748079
GPR[SPVAP]-1659910748079
GPR[EPVAP]-1659910749140
GPR[EPVS]-1659910749140
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910749142
GPR[SPVAP]-1659910749142
GPR[EPVAP]-1659910750189
GPR[EPVS]-1659910750189
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
roundingMode=ret*31+nRows;
roundingMode=ret*31+nCols;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910750190
GPR[SPVAP]-1659910750190
GPR[EPVAP]-1659910751243
GPR[EPVS]-1659910751243
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910751244
GPR[SPVAP]-1659910751244
GPR[EPVAP]-1659910753109
GPR[SPVATF]-1659910753109
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910754772
GPR[EPVS]-1659910754772
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910754774
GPR[SPVAP]-1659910754774
GPR[EPVAP]-1659910756633
GPR[SPVATF]-1659910756633
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910758301
GPR[SPVATR]-1659910758302
TESTING : math_98
GPR[EPVATR]-1659910764452
GPR[EPVS]-1659910764452
GPR[PF]-1659910764452
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rowCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<getColumnDimension();i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910764460
GPR[SPVAP]-1659910764460
GPR[EPVAP]-1659910765520
GPR[EPVS]-1659910765520
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nCols][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910765522
GPR[SPVAP]-1659910765522
GPR[EPVAP]-1659910767410
GPR[SPVATF]-1659910767410
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910769081
GPR[EPVS]-1659910769081
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nCols][1];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910769083
GPR[SPVAP]-1659910769083
GPR[EPVAP]-1659910770977
GPR[SPVATF]-1659910770977
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910772633
GPR[EPVS]-1659910772633
========
System.arraycopy(data[roundingMode],0,out[0],0,this.getColumnDimension());
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910772635
GPR[SPVAP]-1659910772635
GPR[EPVAP]-1659910773692
GPR[EPVS]-1659910773692
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nRows];
for(int row=0;row<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910773693
GPR[SPVAP]-1659910773693
GPR[EPVAP]-1659910775578
GPR[SPVATF]-1659910775578
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910777235
GPR[SPVATR]-1659910777235
TESTING : math_98
GPR[EPVATR]-1659910783420
GPR[EPVS]-1659910783420
GPR[PF]-1659910783420
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910783429
GPR[SPVAP]-1659910783429
GPR[EPVAP]-1659910785364
GPR[SPVATF]-1659910785364
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910787052
GPR[EPVS]-1659910787052
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910787053
GPR[SPVAP]-1659910787053
GPR[EPVAP]-1659910788933
GPR[SPVATF]-1659910788933
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910790612
GPR[EPVS]-1659910790612
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<col;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910790613
GPR[SPVAP]-1659910790613
GPR[EPVAP]-1659910791661
GPR[EPVS]-1659910791661
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910791662
GPR[SPVAP]-1659910791662
GPR[EPVAP]-1659910792713
GPR[EPVS]-1659910792713
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910792714
GPR[SPVAP]-1659910792714
GPR[EPVAP]-1659910793777
GPR[EPVS]-1659910793777
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910793779
GPR[SPVAP]-1659910793779
GPR[EPVAP]-1659910794843
GPR[EPVS]-1659910794843
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<row;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910794845
GPR[SPVAP]-1659910794845
GPR[EPVAP]-1659910796700
GPR[SPVATF]-1659910796700
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910798354
GPR[EPVS]-1659910798354
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<values.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910798357
GPR[SPVAP]-1659910798357
GPR[EPVAP]-1659910799416
GPR[EPVS]-1659910799416
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910799418
GPR[SPVAP]-1659910799418
GPR[EPVAP]-1659910800469
GPR[EPVS]-1659910800469
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910800470
GPR[SPVAP]-1659910800470
GPR[EPVAP]-1659910801611
GPR[EPVS]-1659910801611
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910801614
GPR[SPVAP]-1659910801614
GPR[EPVAP]-1659910802667
GPR[EPVS]-1659910802667
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<stages;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910802669
GPR[SPVAP]-1659910802669
GPR[EPVAP]-1659910803722
GPR[EPVS]-1659910803722
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910803724
GPR[SPVAP]-1659910803724
GPR[EPVAP]-1659910804777
GPR[EPVS]-1659910804777
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910804779
GPR[SPVAP]-1659910804779
GPR[EPVAP]-1659910805827
GPR[EPVS]-1659910805827
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910805829
GPR[SPVAP]-1659910805829
GPR[EPVAP]-1659910806885
GPR[EPVS]-1659910806885
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910806887
GPR[SPVAP]-1659910806887
GPR[EPVAP]-1659910807939
GPR[EPVS]-1659910807939
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910807941
GPR[SPVAP]-1659910807941
GPR[EPVAP]-1659910808990
GPR[EPVS]-1659910808990
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910808991
GPR[SPVAP]-1659910808991
GPR[EPVAP]-1659910810049
GPR[EPVS]-1659910810049
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910810050
GPR[SPVAP]-1659910810050
GPR[EPVAP]-1659910811114
GPR[EPVS]-1659910811114
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910811116
GPR[SPVAP]-1659910811116
GPR[EPVAP]-1659910812174
GPR[EPVS]-1659910812174
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910812176
GPR[SPVAP]-1659910812176
GPR[EPVAP]-1659910813231
GPR[EPVS]-1659910813231
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910813232
GPR[SPVAP]-1659910813232
GPR[EPVAP]-1659910814285
GPR[EPVS]-1659910814285
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910814286
GPR[SPVAP]-1659910814286
GPR[EPVAP]-1659910815336
GPR[EPVS]-1659910815336
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910815337
GPR[SPVAP]-1659910815337
GPR[EPVAP]-1659910816395
GPR[EPVS]-1659910816395
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910816397
GPR[SPVAP]-1659910816397
GPR[EPVAP]-1659910817461
GPR[EPVS]-1659910817461
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910817462
GPR[SPVAP]-1659910817462
GPR[EPVAP]-1659910818574
GPR[EPVS]-1659910818574
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910818576
GPR[SPVAP]-1659910818576
GPR[EPVAP]-1659910819635
GPR[EPVS]-1659910819635
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910819637
GPR[SPVAP]-1659910819637
GPR[EPVAP]-1659910820697
GPR[EPVS]-1659910820697
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910820698
GPR[SPVAP]-1659910820698
GPR[EPVAP]-1659910821757
GPR[EPVS]-1659910821757
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910821759
GPR[SPVAP]-1659910821759
GPR[EPVAP]-1659910822831
GPR[EPVS]-1659910822831
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910822832
GPR[SPVAP]-1659910822832
GPR[EPVAP]-1659910823892
GPR[EPVS]-1659910823892
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910823894
GPR[SPVAP]-1659910823894
GPR[EPVAP]-1659910824984
GPR[EPVS]-1659910824984
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910824985
GPR[SPVAP]-1659910824985
GPR[EPVAP]-1659910826038
GPR[EPVS]-1659910826038
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910826040
GPR[SPVAP]-1659910826040
GPR[EPVAP]-1659910827105
GPR[EPVS]-1659910827105
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910827106
GPR[SPVAP]-1659910827106
GPR[EPVAP]-1659910828163
GPR[EPVS]-1659910828163
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910828165
GPR[SPVAP]-1659910828165
GPR[EPVAP]-1659910829262
GPR[EPVS]-1659910829262
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910829264
GPR[SPVAP]-1659910829264
GPR[EPVAP]-1659910830316
GPR[EPVS]-1659910830316
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910830317
GPR[SPVAP]-1659910830317
GPR[EPVAP]-1659910831429
GPR[EPVS]-1659910831429
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910831430
GPR[SPVAP]-1659910831430
GPR[EPVAP]-1659910832483
GPR[EPVS]-1659910832483
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910832484
GPR[SPVAP]-1659910832484
GPR[EPVAP]-1659910833535
GPR[EPVS]-1659910833535
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910833536
GPR[SPVAP]-1659910833536
GPR[EPVAP]-1659910834597
GPR[EPVS]-1659910834597
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910834598
GPR[SPVAP]-1659910834598
GPR[EPVAP]-1659910835650
GPR[EPVS]-1659910835650
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910835652
GPR[SPVAP]-1659910835652
GPR[EPVAP]-1659910836755
GPR[EPVS]-1659910836755
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910836756
GPR[SPVAP]-1659910836756
GPR[EPVAP]-1659910837849
GPR[EPVS]-1659910837849
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910837850
GPR[SPVAP]-1659910837850
GPR[EPVAP]-1659910838909
GPR[EPVS]-1659910838909
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910838910
GPR[SPVAP]-1659910838910
GPR[EPVAP]-1659910839969
GPR[EPVS]-1659910839969
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910839970
GPR[SPVAP]-1659910839970
GPR[EPVAP]-1659910841022
GPR[EPVS]-1659910841022
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910841024
GPR[SPVAP]-1659910841024
GPR[EPVAP]-1659910842125
GPR[EPVS]-1659910842125
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910842126
GPR[SPVAP]-1659910842126
GPR[EPVAP]-1659910843186
GPR[EPVS]-1659910843186
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910843188
GPR[SPVAP]-1659910843188
GPR[EPVAP]-1659910844254
GPR[EPVS]-1659910844254
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910844255
GPR[SPVAP]-1659910844255
GPR[EPVAP]-1659910845314
GPR[EPVS]-1659910845314
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
luRow[col]=sum;
sum=luRow[col];
luRow[col]=sum;

BigDecimal sum=ZERO;
sum=luRow[col];
for(int i=0;i<col;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910845315
GPR[SPVAP]-1659910845315
GPR[EPVAP]-1659910846384
GPR[EPVS]-1659910846384
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910846385
GPR[SPVAP]-1659910846385
GPR[EPVAP]-1659910848269
GPR[SPVATF]-1659910848269
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910849961
GPR[EPVS]-1659910849961
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910849963
GPR[SPVAP]-1659910849963
GPR[EPVAP]-1659910851841
GPR[SPVATF]-1659910851841
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910853514
GPR[EPVS]-1659910853514
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910853515
GPR[SPVAP]-1659910853515
GPR[EPVAP]-1659910854578
GPR[EPVS]-1659910854578
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910854579
GPR[SPVAP]-1659910854579
GPR[EPVAP]-1659910855628
GPR[EPVS]-1659910855628
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910855630
GPR[SPVAP]-1659910855630
GPR[EPVAP]-1659910857487
GPR[SPVATF]-1659910857487
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910859165
GPR[EPVS]-1659910859165
========
lu=null;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new BigDecimal[nRows][nCols];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910859167
GPR[SPVAP]-1659910859167
GPR[EPVAP]-1659910860230
GPR[EPVS]-1659910860230
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910860232
GPR[SPVAP]-1659910860232
GPR[EPVAP]-1659910861280
GPR[EPVS]-1659910861280
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910861282
GPR[SPVAP]-1659910861282
GPR[EPVAP]-1659910862339
GPR[EPVS]-1659910862339
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910862340
GPR[SPVAP]-1659910862340
GPR[EPVAP]-1659910863476
GPR[EPVS]-1659910863476
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<bd.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910863478
GPR[SPVAP]-1659910863478
GPR[EPVAP]-1659910864562
GPR[EPVS]-1659910864562
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
data=new double[nCols][1];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910864565
GPR[SPVAP]-1659910864565
GPR[EPVAP]-1659910865618
GPR[EPVS]-1659910865618
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910865620
GPR[SPVAP]-1659910865620
GPR[EPVAP]-1659910867607
GPR[SPVATF]-1659910867607
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910869308
GPR[SPVATR]-1659910869309
TESTING : math_98
GPR[EPVATR]-1659910875537
GPR[EPVS]-1659910875537
GPR[PF]-1659910875537
sourceFile  script/workingdir/SimFix/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
location   script/workingdir/SimFix/math/math_98_buggy
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<coefficients.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910875546
GPR[SPVAP]-1659910875546
GPR[EPVAP]-1659910876599
GPR[EPVS]-1659910876599
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910876601
GPR[SPVAP]-1659910876601
GPR[EPVAP]-1659910877657
GPR[EPVS]-1659910877657
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nrows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910877659
GPR[SPVAP]-1659910877659
GPR[EPVAP]-1659910878706
GPR[EPVS]-1659910878706
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<vertices.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910878708
GPR[SPVAP]-1659910878708
GPR[EPVAP]-1659910879763
GPR[EPVS]-1659910879763
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910879765
GPR[SPVAP]-1659910879765
GPR[EPVAP]-1659910880838
GPR[EPVS]-1659910880838
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<value.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910880839
GPR[SPVAP]-1659910880839
GPR[EPVAP]-1659910881900
GPR[EPVS]-1659910881900
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[stats.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910881903
GPR[SPVAP]-1659910881903
GPR[EPVAP]-1659910882969
GPR[EPVS]-1659910882969
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[means.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910882970
GPR[SPVAP]-1659910882970
GPR[EPVAP]-1659910884021
GPR[EPVS]-1659910884021
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910884023
GPR[SPVAP]-1659910884023
GPR[EPVAP]-1659910885087
GPR[EPVS]-1659910885087
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<parameters.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910885089
GPR[SPVAP]-1659910885089
GPR[EPVAP]-1659910886144
GPR[EPVS]-1659910886144
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910886146
GPR[SPVAP]-1659910886146
GPR[EPVAP]-1659910887199
GPR[EPVS]-1659910887199
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910887201
GPR[SPVAP]-1659910887201
GPR[EPVAP]-1659910888261
GPR[EPVS]-1659910888261
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910888262
GPR[SPVAP]-1659910888262
GPR[EPVAP]-1659910890137
GPR[SPVATF]-1659910890137
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910891838
GPR[EPVS]-1659910891838
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<data.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910891839
GPR[SPVAP]-1659910891839
GPR[EPVAP]-1659910892887
GPR[EPVS]-1659910892887
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<special.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910892889
GPR[SPVAP]-1659910892889
GPR[EPVAP]-1659910893941
GPR[EPVS]-1659910893941
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<polynoms.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910893942
GPR[SPVAP]-1659910893942
GPR[EPVAP]-1659910894997
GPR[EPVS]-1659910894997
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910894998
GPR[SPVAP]-1659910894998
GPR[EPVAP]-1659910896047
GPR[EPVS]-1659910896047
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<root.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910896049
GPR[SPVAP]-1659910896049
GPR[EPVAP]-1659910897121
GPR[EPVS]-1659910897121
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<wm.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910897122
GPR[SPVAP]-1659910897122
GPR[EPVAP]-1659910898202
GPR[EPVS]-1659910898202
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910898203
GPR[SPVAP]-1659910898203
GPR[EPVAP]-1659910900108
GPR[SPVATF]-1659910900108
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910901785
GPR[EPVS]-1659910901785
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910901787
GPR[SPVAP]-1659910901787
GPR[EPVAP]-1659910902839
GPR[EPVS]-1659910902839
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910902841
GPR[SPVAP]-1659910902841
GPR[EPVAP]-1659910903885
GPR[EPVS]-1659910903885
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910903887
GPR[SPVAP]-1659910903887
GPR[EPVAP]-1659910904938
GPR[EPVS]-1659910904938
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<f.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910904940
GPR[SPVAP]-1659910904940
GPR[EPVAP]-1659910906001
GPR[EPVS]-1659910906001
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=binStats;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910906003
GPR[SPVAP]-1659910906003
GPR[EPVAP]-1659910907054
GPR[EPVS]-1659910907054
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<inputArray.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910907055
GPR[SPVAP]-1659910907055
GPR[EPVAP]-1659910908105
GPR[EPVS]-1659910908105
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910908107
GPR[SPVAP]-1659910908107
GPR[EPVAP]-1659910909167
GPR[EPVS]-1659910909167
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910909169
GPR[SPVAP]-1659910909169
GPR[EPVAP]-1659910910237
GPR[EPVS]-1659910910237
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910910238
GPR[SPVAP]-1659910910238
GPR[EPVAP]-1659910911298
GPR[EPVS]-1659910911298
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<x.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910911299
GPR[SPVAP]-1659910911299
GPR[EPVAP]-1659910912357
GPR[EPVS]-1659910912357
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910912360
GPR[SPVAP]-1659910912360
GPR[EPVAP]-1659910913416
GPR[EPVS]-1659910913416
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<in.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910913418
GPR[SPVAP]-1659910913418
GPR[EPVAP]-1659910914479
GPR[EPVS]-1659910914479
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<simplex.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910914480
GPR[SPVAP]-1659910914480
GPR[EPVAP]-1659910915533
GPR[EPVS]-1659910915533
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910915534
GPR[SPVAP]-1659910915534
GPR[EPVAP]-1659910916600
GPR[EPVS]-1659910916600
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910916602
GPR[SPVAP]-1659910916602
GPR[EPVAP]-1659910917717
GPR[EPVS]-1659910917717
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910917719
GPR[SPVAP]-1659910917719
GPR[EPVAP]-1659910918770
GPR[EPVS]-1659910918770
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[coefficients.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910918772
GPR[SPVAP]-1659910918772
GPR[EPVAP]-1659910919831
GPR[EPVS]-1659910919831
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<kMax;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910919833
GPR[SPVAP]-1659910919833
GPR[EPVAP]-1659910920884
GPR[EPVS]-1659910920884
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910920886
GPR[SPVAP]-1659910920886
GPR[EPVAP]-1659910921944
GPR[EPVS]-1659910921944
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910921946
GPR[SPVAP]-1659910921946
GPR[EPVAP]-1659910922999
GPR[EPVS]-1659910922999
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
yDotK[k]=new double[currentState.length];
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910923001
GPR[SPVAP]-1659910923001
GPR[EPVAP]-1659910924061
GPR[EPVS]-1659910924061
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910924063
GPR[SPVAP]-1659910924063
GPR[EPVAP]-1659910925925
GPR[SPVATF]-1659910925925
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910927604
GPR[EPVS]-1659910927604
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910927606
GPR[SPVAP]-1659910927606
GPR[EPVAP]-1659910929483
GPR[SPVATF]-1659910929483
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910931152
GPR[EPVS]-1659910931152
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910931154
GPR[SPVAP]-1659910931154
GPR[EPVAP]-1659910932211
GPR[EPVS]-1659910932211
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910932213
GPR[SPVAP]-1659910932213
GPR[EPVAP]-1659910933265
GPR[EPVS]-1659910933265
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910933266
GPR[SPVAP]-1659910933266
GPR[EPVAP]-1659910934319
GPR[EPVS]-1659910934319
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910934320
GPR[SPVAP]-1659910934320
GPR[EPVAP]-1659910935373
GPR[EPVS]-1659910935373
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910935374
GPR[SPVAP]-1659910935374
GPR[EPVAP]-1659910936431
GPR[EPVS]-1659910936431
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<=n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910936433
GPR[SPVAP]-1659910936433
GPR[EPVAP]-1659910937509
GPR[EPVS]-1659910937509
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910937511
GPR[SPVAP]-1659910937511
GPR[EPVAP]-1659910939395
GPR[SPVATF]-1659910939395
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910941089
GPR[SPVATR]-1659910941090
TESTING : math_98
GPR[EPVATR]-1659910947277
GPR[EPVS]-1659910947277
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910947278
GPR[SPVAP]-1659910947278
GPR[EPVAP]-1659910949165
GPR[SPVATF]-1659910949165
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910950868
GPR[SPVATR]-1659910950868
TESTING : math_98
GPR[EPVATR]-1659910957041
GPR[EPVS]-1659910957041
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910957043
GPR[SPVAP]-1659910957043
GPR[EPVAP]-1659910958115
GPR[EPVS]-1659910958115
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910958116
GPR[SPVAP]-1659910958116
GPR[EPVAP]-1659910959171
GPR[EPVS]-1659910959171
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910959172
GPR[SPVAP]-1659910959172
GPR[EPVAP]-1659910960228
GPR[EPVS]-1659910960228
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=nRows-nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910960230
GPR[SPVAP]-1659910960230
GPR[EPVAP]-1659910961284
GPR[EPVS]-1659910961284
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910961286
GPR[SPVAP]-1659910961286
GPR[EPVAP]-1659910962336
GPR[EPVS]-1659910962336
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910962338
GPR[SPVAP]-1659910962338
GPR[EPVAP]-1659910963401
GPR[EPVS]-1659910963401
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<yDotK.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910963403
GPR[SPVAP]-1659910963403
GPR[EPVAP]-1659910964496
GPR[EPVS]-1659910964496
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910964498
GPR[SPVAP]-1659910964498
GPR[EPVAP]-1659910965569
GPR[EPVS]-1659910965569
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
out.writeInt(yDotK.length);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910965570
GPR[SPVAP]-1659910965570
GPR[EPVAP]-1659910966619
GPR[EPVS]-1659910966619
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<currentState.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910966620
GPR[SPVAP]-1659910966620
GPR[EPVAP]-1659910967677
GPR[EPVS]-1659910967677
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<scale.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910967680
GPR[SPVAP]-1659910967680
GPR[EPVAP]-1659910968770
GPR[EPVS]-1659910968770
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<columnCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910968772
GPR[SPVAP]-1659910968772
GPR[EPVAP]-1659910969817
GPR[EPVS]-1659910969817
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910969818
GPR[SPVAP]-1659910969818
GPR[EPVAP]-1659910971701
GPR[SPVATF]-1659910971701
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910973360
GPR[EPVS]-1659910973360
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910973361
GPR[SPVAP]-1659910973361
GPR[EPVAP]-1659910974424
GPR[EPVS]-1659910974424
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910974426
GPR[SPVAP]-1659910974426
GPR[EPVAP]-1659910976306
GPR[SPVATF]-1659910976306
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659910978042
GPR[EPVS]-1659910978042
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910978044
GPR[SPVAP]-1659910978044
GPR[EPVAP]-1659910979093
GPR[EPVS]-1659910979093
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910979094
GPR[SPVAP]-1659910979094
GPR[EPVAP]-1659910980147
GPR[EPVS]-1659910980147
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<nCols+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910980149
GPR[SPVAP]-1659910980149
GPR[EPVAP]-1659910981207
GPR[EPVS]-1659910981207
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910981209
GPR[SPVAP]-1659910981209
GPR[EPVAP]-1659910982278
GPR[EPVS]-1659910982278
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910982280
GPR[SPVAP]-1659910982280
GPR[EPVAP]-1659910983327
GPR[EPVS]-1659910983327
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910983330
GPR[SPVAP]-1659910983330
GPR[EPVAP]-1659910984406
GPR[EPVS]-1659910984406
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<randomBytes.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910984408
GPR[SPVAP]-1659910984408
GPR[EPVAP]-1659910985467
GPR[EPVS]-1659910985467
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<hash.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910985469
GPR[SPVAP]-1659910985469
GPR[EPVAP]-1659910986521
GPR[EPVS]-1659910986521
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910986523
GPR[SPVAP]-1659910986523
GPR[EPVAP]-1659910987572
GPR[EPVS]-1659910987572
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910987574
GPR[SPVAP]-1659910987574
GPR[EPVAP]-1659910988633
GPR[EPVS]-1659910988633
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910988635
GPR[SPVAP]-1659910988635
GPR[EPVAP]-1659910989697
GPR[EPVS]-1659910989697
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910989699
GPR[SPVAP]-1659910989699
GPR[EPVAP]-1659910990753
GPR[EPVS]-1659910990753
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910990755
GPR[SPVAP]-1659910990755
GPR[EPVAP]-1659910991809
GPR[EPVS]-1659910991809
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
Arrays.fill(out,BigMatrixImpl.ZERO);
out[row]=sum;
}

========
GPR[SPVS]-1659910991811
GPR[SPVAP]-1659910991811
GPR[EPVAP]-1659910992862
GPR[EPVS]-1659910992862
========
if((roundingMode+roundingMode)>internalArray.length){
expandTo(startIndex+i);
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910992864
GPR[SPVAP]-1659910992864
GPR[EPVAP]-1659910993928
GPR[EPVS]-1659910993928
========
nCols=roundingMode;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910993930
GPR[SPVAP]-1659910993930
GPR[EPVAP]-1659910994987
GPR[EPVS]-1659910994988
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedRows.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910994990
GPR[SPVAP]-1659910994990
GPR[EPVAP]-1659910996051
GPR[EPVS]-1659910996052
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[selectedColumns.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910996053
GPR[SPVAP]-1659910996053
GPR[EPVAP]-1659910997106
GPR[EPVS]-1659910997106
========
try{
for(int i=0;i<selectedRows.length;i++){
 final BigDecimal[] new BigDecimal[selectedRows.length][selectedColumns.length][i]=new BigDecimal[selectedRows.length][selectedColumns.length][i];
 final BigDecimal[] out=data[permutation[i]];
for(int row=0;j<selectedColumns.length;j++){
subI[j]=dataSelectedI[permutation[j]];
}
}
}catch (ArrayIndexOutOfBoundsException e) {
  throw new MatrixIndexException("matrix dimension mismatch");
}

 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910997108
GPR[SPVAP]-1659910997108
GPR[EPVAP]-1659910998029
GPR[EPVS]-1659910998029
========
out.writeInt(currentState.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910998031
GPR[SPVAP]-1659910998031
GPR[EPVAP]-1659910999079
GPR[EPVS]-1659910999079
========
super.writeExternal(out);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659910999081
GPR[SPVAP]-1659910999081
GPR[EPVAP]-1659911000135
GPR[EPVS]-1659911000135
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[f.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911000137
GPR[SPVAP]-1659911000137
GPR[EPVAP]-1659911001208
GPR[EPVS]-1659911001208
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911001210
GPR[SPVAP]-1659911001210
GPR[EPVAP]-1659911003108
GPR[SPVATF]-1659911003108
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911004778
GPR[EPVS]-1659911004778
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
sums[i]+=v[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911004779
GPR[SPVAP]-1659911004779
GPR[EPVAP]-1659911005837
GPR[EPVS]-1659911005837
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911005839
GPR[SPVAP]-1659911005839
GPR[EPVAP]-1659911006895
GPR[EPVS]-1659911006895
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911006896
GPR[SPVAP]-1659911006896
GPR[EPVAP]-1659911007964
GPR[EPVS]-1659911007964
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911007966
GPR[SPVAP]-1659911007966
GPR[EPVAP]-1659911009798
GPR[SPVATF]-1659911009798
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911011465
GPR[EPVS]-1659911011465
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911011467
GPR[SPVAP]-1659911011467
GPR[EPVAP]-1659911012523
GPR[EPVS]-1659911012523
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<v.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911012525
GPR[SPVAP]-1659911012525
GPR[EPVAP]-1659911013581
GPR[EPVS]-1659911013581
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<=nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911013583
GPR[SPVAP]-1659911013583
GPR[EPVAP]-1659911014631
GPR[EPVS]-1659911014631
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911014633
GPR[SPVAP]-1659911014633
GPR[EPVAP]-1659911015700
GPR[EPVS]-1659911015700
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<m;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911015702
GPR[SPVAP]-1659911015702
GPR[EPVAP]-1659911016771
GPR[EPVS]-1659911016771
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<end;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911016773
GPR[SPVAP]-1659911016773
GPR[EPVAP]-1659911017841
GPR[EPVS]-1659911017841
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[target]=list[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911017843
GPR[SPVAP]-1659911017843
GPR[EPVAP]-1659911018910
GPR[EPVS]-1659911018910
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[i]=nCols;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911018911
GPR[SPVAP]-1659911018911
GPR[EPVAP]-1659911019981
GPR[EPVS]-1659911019981
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
list[target]=list[i];
list[i]=nCols;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911019983
GPR[SPVAP]-1659911019983
GPR[EPVAP]-1659911021047
GPR[EPVS]-1659911021047
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911021049
GPR[SPVAP]-1659911021049
GPR[EPVAP]-1659911022116
GPR[EPVS]-1659911022116
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911022118
GPR[SPVAP]-1659911022119
GPR[EPVAP]-1659911023182
GPR[EPVS]-1659911023182
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911023184
GPR[SPVAP]-1659911023184
GPR[EPVAP]-1659911024248
GPR[EPVS]-1659911024248
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<=j;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911024250
GPR[SPVAP]-1659911024250
GPR[EPVAP]-1659911025326
GPR[EPVS]-1659911025326
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911025328
GPR[SPVAP]-1659911025328
GPR[EPVAP]-1659911026398
GPR[EPVS]-1659911026398
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911026399
GPR[SPVAP]-1659911026399
GPR[EPVAP]-1659911027476
GPR[EPVS]-1659911027476
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=x.length;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911027479
GPR[SPVAP]-1659911027479
GPR[EPVAP]-1659911028543
GPR[EPVS]-1659911028543
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911028545
GPR[SPVAP]-1659911028545
GPR[EPVAP]-1659911029629
GPR[EPVS]-1659911029629
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911029630
GPR[SPVAP]-1659911029630
GPR[EPVAP]-1659911030688
GPR[EPVS]-1659911030688
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911030689
GPR[SPVAP]-1659911030689
GPR[EPVAP]-1659911031743
GPR[EPVS]-1659911031743
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<rows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911031745
GPR[SPVAP]-1659911031745
GPR[EPVAP]-1659911032834
GPR[EPVS]-1659911032834
========
try{
for(int i=0;i<selectedRows.length;i++){
 final double[] new double[selectedRows.length][selectedColumns.length][i]=new double[selectedRows.length][selectedColumns.length][i];
 final double[] data[permutation[i]]=data[permutation[i]];
for(int row=0;j<selectedColumns.length;j++){
subI[j]=dataSelectedI[permutation[j]];
}
}
}catch (ArrayIndexOutOfBoundsException e) {
  throw new MatrixIndexException("matrix dimension mismatch");
}

 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911032836
GPR[SPVAP]-1659911032836
GPR[EPVAP]-1659911033770
GPR[EPVS]-1659911033770
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911033772
GPR[SPVAP]-1659911033772
GPR[EPVAP]-1659911035662
GPR[SPVATF]-1659911035662
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911037325
GPR[EPVS]-1659911037325
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911037327
GPR[SPVAP]-1659911037327
GPR[EPVAP]-1659911039198
GPR[SPVATF]-1659911039198
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911040872
GPR[EPVS]-1659911040872
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911040874
GPR[SPVAP]-1659911040874
GPR[EPVAP]-1659911041923
GPR[EPVS]-1659911041923
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911041924
GPR[SPVAP]-1659911041924
GPR[EPVAP]-1659911042986
GPR[EPVS]-1659911042986
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911042987
GPR[SPVAP]-1659911042987
GPR[EPVAP]-1659911044041
GPR[EPVS]-1659911044041
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<roundingMode+nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911044042
GPR[SPVAP]-1659911044042
GPR[EPVAP]-1659911045099
GPR[EPVS]-1659911045099
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<begin;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911045101
GPR[SPVAP]-1659911045101
GPR[EPVAP]-1659911046172
GPR[EPVS]-1659911046172
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911046174
GPR[SPVAP]-1659911046174
GPR[EPVAP]-1659911047231
GPR[EPVS]-1659911047231
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[vertexA.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911047234
GPR[SPVAP]-1659911047234
GPR[EPVAP]-1659911048301
GPR[EPVS]-1659911048301
========
new JDKRandomGenerator().setSeed(length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911048302
GPR[SPVAP]-1659911048302
GPR[EPVAP]-1659911049350
GPR[EPVS]-1659911049350
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<binCount;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911049352
GPR[SPVAP]-1659911049352
GPR[EPVAP]-1659911050429
GPR[EPVS]-1659911050429
========
if(i<0){
i=-i-2;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911050431
GPR[SPVAP]-1659911050431
GPR[EPVAP]-1659911051490
GPR[EPVS]-1659911051490
========
if(i>=polynomials.length){
i--;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911051491
GPR[SPVAP]-1659911051491
GPR[EPVAP]-1659911052555
GPR[EPVS]-1659911052555
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nSing;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911052557
GPR[SPVAP]-1659911052557
GPR[EPVAP]-1659911053615
GPR[EPVS]-1659911053615
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<rank;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911053617
GPR[SPVAP]-1659911053617
GPR[EPVAP]-1659911054681
GPR[EPVS]-1659911054681
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[mean.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911054683
GPR[SPVAP]-1659911054683
GPR[EPVAP]-1659911055737
GPR[EPVS]-1659911055737
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<dimension;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911055739
GPR[SPVAP]-1659911055739
GPR[EPVAP]-1659911056804
GPR[EPVS]-1659911056804
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911056807
GPR[SPVAP]-1659911056807
GPR[EPVAP]-1659911057896
GPR[EPVS]-1659911057896
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
checkDimension(value.length);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911057899
GPR[SPVAP]-1659911057899
GPR[EPVAP]-1659911058961
GPR[EPVS]-1659911058961
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911058963
GPR[SPVAP]-1659911058963
GPR[EPVAP]-1659911060018
GPR[EPVS]-1659911060018
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
f[i]=data[j];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911060020
GPR[SPVAP]-1659911060020
GPR[EPVAP]-1659911061081
GPR[EPVS]-1659911061081
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
k=N>>1;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911061083
GPR[SPVAP]-1659911061083
GPR[EPVAP]-1659911062134
GPR[EPVS]-1659911062134
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
j+=nCols;
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911062135
GPR[SPVAP]-1659911062135
GPR[EPVAP]-1659911063196
GPR[EPVS]-1659911063196
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
f[i]=data[j];
k=N>>1;
j+=nCols;

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911063197
GPR[SPVAP]-1659911063197
GPR[EPVAP]-1659911064281
GPR[EPVS]-1659911064281
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911064282
GPR[SPVAP]-1659911064282
GPR[EPVAP]-1659911066175
GPR[SPVATF]-1659911066175
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911067838
GPR[EPVS]-1659911067838
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
r[row][row]=rDiag[row];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911067840
GPR[SPVAP]-1659911067840
GPR[EPVAP]-1659911068900
GPR[EPVS]-1659911068901
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911068902
GPR[SPVAP]-1659911068902
GPR[EPVAP]-1659911070775
GPR[SPVATF]-1659911070775
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911072586
GPR[EPVS]-1659911072586
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=row;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911072588
GPR[SPVAP]-1659911072588
GPR[EPVAP]-1659911073653
GPR[EPVS]-1659911073653
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911073654
GPR[SPVAP]-1659911073654
GPR[EPVAP]-1659911074702
GPR[EPVS]-1659911074702
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911074703
GPR[SPVAP]-1659911074703
GPR[EPVAP]-1659911075768
GPR[EPVS]-1659911075768
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911075770
GPR[SPVAP]-1659911075770
GPR[EPVAP]-1659911076825
GPR[EPVS]-1659911076825
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911076827
GPR[SPVAP]-1659911076827
GPR[EPVAP]-1659911077953
GPR[EPVS]-1659911077953
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911077954
GPR[SPVAP]-1659911077954
GPR[EPVAP]-1659911079028
GPR[EPVS]-1659911079028
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911079029
GPR[SPVAP]-1659911079029
GPR[EPVAP]-1659911080087
GPR[EPVS]-1659911080087
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911080088
GPR[SPVAP]-1659911080088
GPR[EPVAP]-1659911081151
GPR[EPVS]-1659911081151
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911081152
GPR[SPVAP]-1659911081152
GPR[EPVAP]-1659911082200
GPR[EPVS]-1659911082200
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911082202
GPR[SPVAP]-1659911082202
GPR[EPVAP]-1659911083259
GPR[EPVS]-1659911083259
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nCol;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nColB;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911083261
GPR[SPVAP]-1659911083261
GPR[EPVAP]-1659911084318
GPR[EPVS]-1659911084318
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911084320
GPR[SPVAP]-1659911084320
GPR[EPVAP]-1659911085362
GPR[EPVS]-1659911085362
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode*roundingMode+permutation[i];i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911085365
GPR[SPVAP]-1659911085365
GPR[EPVAP]-1659911086423
GPR[EPVS]-1659911086423
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911086426
GPR[SPVAP]-1659911086426
GPR[EPVAP]-1659911087495
GPR[EPVS]-1659911087495
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<order;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911087496
GPR[SPVAP]-1659911087496
GPR[EPVAP]-1659911088571
GPR[EPVS]-1659911088571
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
c[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911088574
GPR[SPVAP]-1659911088574
GPR[EPVAP]-1659911089628
GPR[EPVS]-1659911089628
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
d[i]=y[i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911089629
GPR[SPVAP]-1659911089629
GPR[EPVAP]-1659911090688
GPR[EPVS]-1659911090688
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
c[i]=y[i];
d[i]=y[i];

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911090689
GPR[SPVAP]-1659911090689
GPR[EPVAP]-1659911091768
GPR[EPVS]-1659911091768
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<observed1.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911091769
GPR[SPVAP]-1659911091769
GPR[EPVAP]-1659911092818
GPR[EPVS]-1659911092818
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=degree()+1;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911092821
GPR[SPVAP]-1659911092821
GPR[EPVAP]-1659911093872
GPR[EPVS]-1659911093872
========
clearResult();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911093874
GPR[SPVAP]-1659911093874
GPR[EPVAP]-1659911094930
GPR[EPVS]-1659911094930
========
verifyIterationCount();
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911094932
GPR[SPVAP]-1659911094932
GPR[EPVAP]-1659911095979
GPR[EPVS]-1659911095979
========
i++;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911095982
GPR[SPVAP]-1659911095982
GPR[EPVAP]-1659911097029
GPR[EPVS]-1659911097029
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
dev=((double)observed[i]-expected[i]);
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911097030
GPR[SPVAP]-1659911097030
GPR[EPVAP]-1659911098080
GPR[EPVS]-1659911098080
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<observed.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911098081
GPR[SPVAP]-1659911098081
GPR[EPVAP]-1659911099147
GPR[EPVS]-1659911099147
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911099149
GPR[SPVAP]-1659911099149
GPR[EPVAP]-1659911100199
GPR[EPVS]-1659911100199
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[j][i]=sum;
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911100201
GPR[SPVAP]-1659911100201
GPR[EPVAP]-1659911101265
GPR[EPVS]-1659911101265
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
jTj[i][j]=sum;
jTj[j][i]=sum;

sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911101267
GPR[SPVAP]-1659911101267
GPR[EPVAP]-1659911102325
GPR[EPVS]-1659911102325
========
 final int nCols=this.getColumnDimension();
updateJacobian();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911102326
GPR[SPVAP]-1659911102326
GPR[EPVAP]-1659911103384
GPR[EPVS]-1659911103384
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluations=0;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911103386
GPR[SPVAP]-1659911103386
GPR[EPVAP]-1659911104439
GPR[EPVS]-1659911104439
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
evaluateSimplex();
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911104441
GPR[SPVAP]-1659911104441
GPR[EPVAP]-1659911105530
GPR[EPVS]-1659911105530
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(i<(roundingMode-1)){
buildSimplex(length);
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911105532
GPR[SPVAP]-1659911105532
GPR[EPVAP]-1659911106616
GPR[EPVS]-1659911106616
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
evaluations=0;
evaluateSimplex();
if(i<(roundingMode-1)){
buildSimplex(length);
}

BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911106618
GPR[SPVAP]-1659911106618
GPR[EPVAP]-1659911107671
GPR[EPVS]-1659911107671
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911107673
GPR[SPVAP]-1659911107673
GPR[EPVAP]-1659911108729
GPR[EPVS]-1659911108729
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911108733
GPR[SPVAP]-1659911108733
GPR[EPVAP]-1659911110619
GPR[SPVATF]-1659911110619
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911112277
GPR[EPVS]-1659911112277
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911112278
GPR[SPVAP]-1659911112278
GPR[EPVAP]-1659911114153
GPR[SPVATF]-1659911114153
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911115807
GPR[EPVS]-1659911115807
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<l2;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911115809
GPR[SPVAP]-1659911115809
GPR[EPVAP]-1659911116907
GPR[EPVS]-1659911116908
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<y0.length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911116910
GPR[SPVAP]-1659911116910
GPR[EPVAP]-1659911117961
GPR[EPVS]-1659911117961
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
factor=Math.pow(0.5*permutation[roundingMode+roundingMode],roundingMode);
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911117962
GPR[SPVAP]-1659911117962
GPR[EPVAP]-1659911119018
GPR[EPVS]-1659911119018
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911119019
GPR[SPVAP]-1659911119019
GPR[EPVAP]-1659911120908
GPR[SPVATF]-1659911120908
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911122588
GPR[EPVS]-1659911122588
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911122590
GPR[SPVAP]-1659911122590
GPR[EPVAP]-1659911124488
GPR[SPVATF]-1659911124488
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911126238
GPR[EPVS]-1659911126238
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911126239
GPR[SPVAP]-1659911126239
GPR[EPVAP]-1659911127294
GPR[EPVS]-1659911127294
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911127295
GPR[SPVAP]-1659911127295
GPR[EPVAP]-1659911129160
GPR[SPVATF]-1659911129160
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911130824
GPR[EPVS]-1659911130824
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911130826
GPR[SPVAP]-1659911130826
GPR[EPVAP]-1659911131903
GPR[EPVS]-1659911131903
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911131905
GPR[SPVAP]-1659911131905
GPR[EPVAP]-1659911132966
GPR[EPVS]-1659911132966
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911132968
GPR[SPVAP]-1659911132968
GPR[EPVAP]-1659911134021
GPR[EPVS]-1659911134021
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911134022
GPR[SPVAP]-1659911134022
GPR[EPVAP]-1659911135071
GPR[EPVS]-1659911135071
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911135073
GPR[SPVAP]-1659911135073
GPR[EPVAP]-1659911136998
GPR[SPVATF]-1659911136998
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911138676
GPR[EPVS]-1659911138676
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911138677
GPR[SPVAP]-1659911138677
GPR[EPVAP]-1659911139741
GPR[EPVS]-1659911139741
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911139742
GPR[SPVAP]-1659911139742
GPR[EPVAP]-1659911140837
GPR[EPVS]-1659911140837
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911140839
GPR[SPVAP]-1659911140839
GPR[EPVAP]-1659911141896
GPR[EPVS]-1659911141896
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911141897
GPR[SPVAP]-1659911141897
GPR[EPVAP]-1659911142977
GPR[EPVS]-1659911142977
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911142978
GPR[SPVAP]-1659911142978
GPR[EPVAP]-1659911144025
GPR[EPVS]-1659911144025
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911144027
GPR[SPVAP]-1659911144027
GPR[EPVAP]-1659911145086
GPR[EPVS]-1659911145086
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=nRows-roundingMode;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911145087
GPR[SPVAP]-1659911145087
GPR[EPVAP]-1659911146133
GPR[EPVS]-1659911146133
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<=k;row++){
BigDecimal sum=ZERO;
for(int i=0;i<length;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911146135
GPR[SPVAP]-1659911146135
GPR[EPVAP]-1659911147185
GPR[EPVS]-1659911147185
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
clearResult();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911147187
GPR[SPVAP]-1659911147187
GPR[EPVAP]-1659911148246
GPR[EPVS]-1659911148246
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
verifyIterationCount();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911148248
GPR[SPVAP]-1659911148248
GPR[EPVAP]-1659911149308
GPR[EPVS]-1659911149308
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911149311
GPR[SPVAP]-1659911149311
GPR[EPVAP]-1659911150377
GPR[EPVS]-1659911150377
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911150378
GPR[SPVAP]-1659911150378
GPR[EPVAP]-1659911152296
GPR[SPVATF]-1659911152296
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911153967
GPR[EPVS]-1659911153967
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
a[i]=divdiff[0];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911153968
GPR[SPVAP]-1659911153968
GPR[EPVAP]-1659911155023
GPR[EPVS]-1659911155023
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911155025
GPR[SPVAP]-1659911155025
GPR[EPVAP]-1659911156083
GPR[EPVS]-1659911156083
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911156084
GPR[SPVAP]-1659911156084
GPR[EPVAP]-1659911157150
GPR[EPVS]-1659911157150
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911157152
GPR[SPVAP]-1659911157152
GPR[EPVAP]-1659911158217
GPR[EPVS]-1659911158217
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows-i;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911158218
GPR[SPVAP]-1659911158218
GPR[EPVAP]-1659911159275
GPR[EPVS]-1659911159275
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<n;row++){
BigDecimal sum=ZERO;
for(int i=0;i<n;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911159277
GPR[SPVAP]-1659911159277
GPR[EPVAP]-1659911160328
GPR[EPVS]-1659911160328
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<mu;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911160331
GPR[SPVAP]-1659911160331
GPR[EPVAP]-1659911161385
GPR[EPVS]-1659911161385
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<degree();row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911161387
GPR[SPVAP]-1659911161387
GPR[EPVAP]-1659911162445
GPR[EPVS]-1659911162445
========
System.arraycopy(length,0,data[0],0,nCols);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[nCols];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911162446
GPR[SPVAP]-1659911162446
GPR[EPVAP]-1659911163496
GPR[EPVS]-1659911163496
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911163498
GPR[SPVAP]-1659911163498
GPR[EPVAP]-1659911165388
GPR[SPVATF]-1659911165388
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911167064
GPR[EPVS]-1659911167064
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911167065
GPR[SPVAP]-1659911167065
GPR[EPVAP]-1659911168945
GPR[SPVATF]-1659911168945
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911170618
GPR[EPVS]-1659911170618
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911170620
GPR[SPVAP]-1659911170620
GPR[EPVAP]-1659911171667
GPR[EPVS]-1659911171667
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911171669
GPR[SPVAP]-1659911171669
GPR[EPVAP]-1659911172728
GPR[EPVS]-1659911172729
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911172730
GPR[SPVAP]-1659911172730
GPR[EPVAP]-1659911173780
GPR[EPVS]-1659911173780
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;row<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911173781
GPR[SPVAP]-1659911173781
GPR[EPVAP]-1659911174841
GPR[EPVS]-1659911174841
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911174842
GPR[SPVAP]-1659911174842
GPR[EPVAP]-1659911175883
GPR[EPVS]-1659911175883
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=roundingMode;i<order;row++){
BigDecimal sum=ZERO;
for(int i=roundingMode;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911175885
GPR[SPVAP]-1659911175885
GPR[EPVAP]-1659911176936
GPR[EPVS]-1659911176936
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;row<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911176938
GPR[SPVAP]-1659911176938
GPR[EPVAP]-1659911177991
GPR[EPVS]-1659911177991
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911177993
GPR[SPVAP]-1659911177993
GPR[EPVAP]-1659911179050
GPR[EPVS]-1659911179051
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=nCols;i<solvedCols;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911179052
GPR[SPVAP]-1659911179052
GPR[EPVAP]-1659911180107
GPR[EPVS]-1659911180107
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<interpolatedState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911180109
GPR[SPVAP]-1659911180109
GPR[EPVAP]-1659911181177
GPR[EPVS]-1659911181177
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
if(row<0.5*(nRows-i+1)){
value+=c[nearest];
}else {
row--;
value+=d[nearest];
}
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911181180
GPR[SPVAP]-1659911181180
GPR[EPVAP]-1659911182260
GPR[EPVS]-1659911182260
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<yDotKLast.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911182262
GPR[SPVAP]-1659911182262
GPR[EPVAP]-1659911183319
GPR[EPVS]-1659911183319
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<interpolator.yDotK.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911183321
GPR[SPVAP]-1659911183321
GPR[EPVAP]-1659911184396
GPR[EPVS]-1659911184396
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<yDotKLast.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911184398
GPR[SPVAP]-1659911184398
GPR[EPVAP]-1659911185459
GPR[EPVS]-1659911185459
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<currentDegree;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911185462
GPR[SPVAP]-1659911185462
GPR[EPVAP]-1659911186521
GPR[EPVS]-1659911186521
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<dimension;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911186523
GPR[SPVAP]-1659911186523
GPR[EPVAP]-1659911187582
GPR[EPVS]-1659911187582
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
out.writeInt(nRows);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911187583
GPR[SPVAP]-1659911187583
GPR[EPVAP]-1659911188634
GPR[EPVS]-1659911188634
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;row<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911188635
GPR[SPVAP]-1659911188635
GPR[EPVAP]-1659911189707
GPR[EPVS]-1659911189707
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;i<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911189709
GPR[SPVAP]-1659911189709
GPR[EPVAP]-1659911190775
GPR[EPVS]-1659911190775
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
writeBaseExternal(out);
for(int row=0;i<=nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911190776
GPR[SPVAP]-1659911190776
GPR[EPVAP]-1659911191828
GPR[EPVS]-1659911191828
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<lmDir.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911191830
GPR[SPVAP]-1659911191830
GPR[EPVAP]-1659911192888
GPR[EPVS]-1659911192888
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
resetTables(roundingMode);
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911192889
GPR[SPVAP]-1659911192889
GPR[EPVAP]-1659911193938
GPR[EPVS]-1659911193938
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
nCols=roundingMode;
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911193939
GPR[SPVAP]-1659911193939
GPR[EPVAP]-1659911194993
GPR[EPVS]-1659911194993
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<staticE.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911194994
GPR[SPVAP]-1659911194994
GPR[EPVAP]-1659911196045
GPR[EPVS]-1659911196045
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<jacobian.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911196047
GPR[SPVAP]-1659911196047
GPR[EPVAP]-1659911197097
GPR[EPVS]-1659911197097
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<jacobian.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911197098
GPR[SPVAP]-1659911197098
GPR[EPVAP]-1659911198155
GPR[EPVS]-1659911198155
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[a.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911198157
GPR[SPVAP]-1659911198157
GPR[EPVAP]-1659911199217
GPR[EPVS]-1659911199217
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[c.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911199218
GPR[SPVAP]-1659911199218
GPR[EPVAP]-1659911200266
GPR[EPVS]-1659911200266
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[x.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911200268
GPR[SPVAP]-1659911200268
GPR[EPVAP]-1659911201323
GPR[EPVS]-1659911201323
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[y.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911201325
GPR[SPVAP]-1659911201325
GPR[EPVAP]-1659911202377
GPR[EPVS]-1659911202377
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911202378
GPR[SPVAP]-1659911202378
GPR[EPVAP]-1659911204269
GPR[SPVATF]-1659911204269
TESTING : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2
GPR[EPVATF]-1659911205952
GPR[EPVS]-1659911205952
========
System.arraycopy(permutation,0,out,0,permutation.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911205954
GPR[SPVAP]-1659911205954
GPR[EPVAP]-1659911207037
GPR[EPVS]-1659911207037
========
System.arraycopy(length,0,out,0,upperBounds.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911207038
GPR[SPVAP]-1659911207038
GPR[EPVAP]-1659911208090
GPR[EPVS]-1659911208090
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911208096
GPR[SPVAP]-1659911208096
GPR[EPVAP]-1659911209151
GPR[EPVS]-1659911209151
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911209153
GPR[SPVAP]-1659911209153
GPR[EPVAP]-1659911210209
GPR[EPVS]-1659911210209
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nRows;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911210211
GPR[SPVAP]-1659911210211
GPR[EPVAP]-1659911211269
GPR[EPVS]-1659911211269
========
if(N==1){
F[0]=0.0;
return F;
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911211271
GPR[SPVAP]-1659911211271
GPR[EPVAP]-1659911212331
GPR[EPVS]-1659911212331
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<nColB;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911212334
GPR[SPVAP]-1659911212334
GPR[EPVAP]-1659911213391
GPR[EPVS]-1659911213391
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
super();
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911213394
GPR[SPVAP]-1659911213394
GPR[EPVAP]-1659911214456
GPR[EPVS]-1659911214456
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911214458
GPR[SPVAP]-1659911214458
GPR[EPVAP]-1659911215517
GPR[EPVS]-1659911215517
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911215518
GPR[SPVAP]-1659911215518
GPR[EPVAP]-1659911216579
GPR[EPVS]-1659911216579
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<roundingMode;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911216580
GPR[SPVAP]-1659911216580
GPR[EPVAP]-1659911217633
GPR[EPVS]-1659911217633
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911217636
GPR[SPVAP]-1659911217636
GPR[EPVAP]-1659911218696
GPR[EPVS]-1659911218696
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<stages;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911218697
GPR[SPVAP]-1659911218697
GPR[EPVAP]-1659911219752
GPR[EPVS]-1659911219752
========
System.arraycopy(permutation,0,out,0,permutation.length);
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[permutation.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911219754
GPR[SPVAP]-1659911219754
GPR[EPVAP]-1659911220801
GPR[EPVS]-1659911220801
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;i<data[0].nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911220803
GPR[SPVAP]-1659911220803
GPR[EPVAP]-1659911221885
GPR[EPVS]-1659911221885
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<y0.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911221889
GPR[SPVAP]-1659911221889
GPR[EPVAP]-1659911222939
GPR[EPVS]-1659911222939
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<k;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911222940
GPR[SPVAP]-1659911222940
GPR[EPVAP]-1659911223993
GPR[EPVS]-1659911223993
========
if(knots.length-1!=polynomials.length){
throw new IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911223996
GPR[SPVAP]-1659911223996
GPR[EPVAP]-1659911225049
GPR[EPVS]-1659911225049
========
this.nCols=knots.length-1;
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911225050
GPR[SPVAP]-1659911225050
GPR[EPVAP]-1659911226125
GPR[EPVS]-1659911226125
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[currentState.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911226127
GPR[SPVAP]-1659911226127
GPR[EPVAP]-1659911227183
GPR[EPVS]-1659911227183
========
if(fraction.numerator==0){
throw new ArithmeticException("The fraction to divide by must not be zero");
}
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911227187
GPR[SPVAP]-1659911227187
GPR[EPVAP]-1659911228236
GPR[EPVS]-1659911228236
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
v[2][i]=v[0][i]-v[1][i];
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911228238
GPR[SPVAP]-1659911228238
GPR[EPVAP]-1659911229293
GPR[EPVS]-1659911229293
========
data=new BigDecimal[nCols][nRows];
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;row<nRows;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911229296
GPR[SPVAP]-1659911229296
GPR[EPVAP]-1659911230369
GPR[EPVS]-1659911230369
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<currentState.length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911230371
GPR[SPVAP]-1659911230371
GPR[EPVAP]-1659911231421
GPR[EPVS]-1659911231421
========
 final int nCols=this.getColumnDimension();
 final BigDecimal[] out=new BigDecimal[v.length];
for(int row=0;roundingMode<length;row++){
BigDecimal sum=ZERO;
for(int i=0;i<nCols;i++){
sum=sum.add(data[row][i].multiply(v[i]));
}
out[row]=sum;
}

========
GPR[SPVS]-1659911231422
GPR[SPVAP]-1659911231422
GPR[EPVAP]-1659911232469
GPR[EPVS]-1659911232469
GPR[ESUN]-1659911232470
GPR[SSUN]-1659911232470
org.apache.commons.math.linear.BigMatrixImpl,992
GPR[ESUN]-1659911232666
GPR[SSUN]-1659911232666
org.apache.commons.math.linear.BigMatrixImpl,993
GPR[ESUN]-1659911232776
GPR[SSUN]-1659911232776
org.apache.commons.math.linear.BigMatrixImpl,994
GPR[ESUN]-1659911232893
GPR[SSUN]-1659911232893
org.apache.commons.math.linear.BigMatrixImpl,995
GPR[ESUN]-1659911233084
GPR[SSUN]-1659911233084
org.apache.commons.math.linear.BigMatrixImpl,997
GPR[ESUN]-1659911233238
GPR[SSUN]-1659911233238
org.apache.commons.math.linear.RealMatrixImpl,774
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f77d612fe15, pid=1789847, tid=140153026332416
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 4828 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f77d612fe15 [0x00007f77d612d460+0x29b5]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_98_buggy/hs_err_pid1789847.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/98 results at /experiment_home///results/SimFix/Math/98/seed_262/
\n\nNode: host-71\n
\n\nDate: Sun 07 Aug 2022 03:27:14 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_98_buggy
GPR[SSLE]-1659911234179
GPR[ESLE]-1659911294183
