Sleep 1m start
GPR[SSLI]-1661307912727
GPR[ESLI]-1661307972731
Running SimFix Math 85b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 284
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Math/85/seed_284/
Project lc: math
New out script/workingdir/SimFix/math/math_85_buggy
The file script/workingdir/SimFix/math/math_85_buggy does not exist!
script/workingdir/SimFix/math/math_85_buggy
Current directory: script/workingdir/SimFix/math/math_85_buggy
classpath:  script/workingdir/SimFix/math/math_85_buggy/target/classes:script/workingdir/SimFix/math/math_85_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_85_buggy/lib/junit-4.4.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/test-classes
GPR[SSLB]-1661307987872
GPR[ESLB]-1661308047875
Calling SimFix: at script/workingdir/SimFix/math/math_85_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
NOTICE.txt
pom.xml
PROPOSAL.html
release-notes.jsl
RELEASE-NOTES.txt
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt NOTICE.txt pom.xml PROPOSAL.html release-notes.jsl RELEASE-NOTES.txt src target test-jar.xml
Node: host-60
Date init: Tue 23 Aug 2022 07:27:29 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661308050023
=================================================
Project : math_85	start : 22/08/23 19:27

GPR[ESUP]-1661308052010
MM Purify? false
GPR[SFL]-1661308052377
GPR[EFL]-1661308052419
GPR[SFP]-1661308052419
TIMEOUT : 18000000
GPR[SSUN]-1661308052428
org.apache.commons.math.MathException,119
GPR[ESUN]-1661308053640
GPR[SSUN]-1661308053640
org.apache.commons.math.MathException,120
GPR[ESUN]-1661308053824
GPR[SSUN]-1661308053824
org.apache.commons.math.MathException,121
GPR[ESUN]-1661308054003
GPR[SSUN]-1661308054003
org.apache.commons.math.MathException,122
Find no block!
GPR[SSUN]-1661308054190
org.apache.commons.math.MathException,166
GPR[ESUN]-1661308055202
GPR[SSUN]-1661308055202
org.apache.commons.math.MathException,172
GPR[ESUN]-1661308056195
GPR[SSUN]-1661308056195
org.apache.commons.math.distribution.AbstractContinuousDistribution,88
Find no block!
GPR[SSUN]-1661308056388
org.apache.commons.math.distribution.AbstractContinuousDistribution,97
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308057860
GPR[SPVAP]-1661308057860
GPR[EPVAP]-1661308062826
GPR[SPVATF]-1661308062826
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308064642
GPR[EPVS]-1661308064642
========
p=rootFindingFunction.value(x);
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308064645
GPR[SPVAP]-1661308064645
GPR[EPVAP]-1661308065691
GPR[EPVS]-1661308065691
========
if(Math.abs(rootFindingFunction.value(lowerBound))<0.0){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308065694
GPR[SPVAP]-1661308065694
GPR[EPVAP]-1661308067618
GPR[SPVATF]-1661308067618
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308069434
GPR[EPVS]-1661308069434
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return min;
}

========
MM Copying to MM
GPR[SPVS]-1661308069435
GPR[SPVAP]-1661308069435
GPR[EPVAP]-1661308070453
GPR[EPVS]-1661308070453
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return max;
}

========
MM Copying to MM
GPR[SPVS]-1661308070455
GPR[SPVAP]-1661308070455
GPR[EPVAP]-1661308071465
GPR[EPVS]-1661308071465
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return initial;
}

========
MM Copying to MM
GPR[SPVS]-1661308071466
GPR[SPVAP]-1661308071466
GPR[EPVAP]-1661308072482
GPR[EPVS]-1661308072482
========
if(Math.abs(lowerBound)<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308072485
GPR[SPVAP]-1661308072485
GPR[EPVAP]-1661308074370
GPR[SPVATF]-1661308074370
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308076173
GPR[EPVS]-1661308076173
========
if(Math.abs(rootFindingFunction.value(lowerBound))<=1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308076177
GPR[SPVAP]-1661308076177
GPR[EPVAP]-1661308078055
GPR[SPVATF]-1661308078055
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308079874
GPR[EPVS]-1661308079874
========
if(Math.abs(lowerBound)<=1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308079876
GPR[SPVAP]-1661308079876
GPR[EPVAP]-1661308081754
GPR[SPVATF]-1661308081754
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308083568
GPR[EPVS]-1661308083568
========
if(Math.abs(lowerBound-x)<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308083571
GPR[SPVAP]-1661308083571
GPR[EPVAP]-1661308084584
GPR[EPVS]-1661308084584
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return x1;
}

========
MM Copying to MM
GPR[SPVS]-1661308084585
GPR[SPVAP]-1661308084585
GPR[EPVAP]-1661308085587
GPR[EPVS]-1661308085587
========
if(Math.abs(serialVersionUID-p)<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308085588
GPR[SPVAP]-1661308085588
GPR[EPVAP]-1661308087489
GPR[SPVATF]-1661308087489
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308089307
GPR[EPVS]-1661308089307
========
if(Math.abs(p)<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308089309
GPR[SPVAP]-1661308089309
GPR[EPVAP]-1661308091166
GPR[SPVATF]-1661308091166
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308093002
GPR[EPVS]-1661308093002
========
if(Math.abs(p)<=1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308093003
GPR[SPVAP]-1661308093003
GPR[EPVAP]-1661308094869
GPR[SPVATF]-1661308094869
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308096681
GPR[EPVS]-1661308096681
========
if(Math.abs(rootFindingFunction.value(lowerBound))<2.2204E-16){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308096686
GPR[SPVAP]-1661308096686
GPR[EPVAP]-1661308098555
GPR[SPVATF]-1661308098555
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308100356
GPR[EPVS]-1661308100356
========
if(Math.abs(rootFindingFunction.value(lowerBound))<0.0){
return min;
}

========
MM Copying to MM
GPR[SPVS]-1661308100359
GPR[SPVAP]-1661308100359
GPR[EPVAP]-1661308101375
GPR[EPVS]-1661308101375
========
if(Math.abs(rootFindingFunction.value(lowerBound))<0.0){
return max;
}

========
MM Copying to MM
GPR[SPVS]-1661308101376
GPR[SPVAP]-1661308101376
GPR[EPVAP]-1661308102387
GPR[EPVS]-1661308102387
========
if(Math.abs(rootFindingFunction.value(lowerBound))<0.0){
return initial;
}

========
MM Copying to MM
GPR[SPVS]-1661308102388
GPR[SPVAP]-1661308102388
GPR[EPVAP]-1661308103398
GPR[EPVS]-1661308103398
========
if(Math.compareTo(rootFindingFunction.value(lowerBound))<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308103402
GPR[SPVAP]-1661308103402
GPR[EPVAP]-1661308104419
GPR[EPVS]-1661308104419
GPR[ESUN]-1661308104421
GPR[SSUN]-1661308104421
org.apache.commons.math.distribution.AbstractContinuousDistribution,100
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return lowerBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308105944
GPR[SPVAP]-1661308105944
GPR[EPVAP]-1661308110803
GPR[SPVATF]-1661308110803
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308112612
GPR[EPVS]-1661308112612
========
p=rootFindingFunction.value(x);
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308112614
GPR[SPVAP]-1661308112614
GPR[EPVAP]-1661308113634
GPR[EPVS]-1661308113634
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308113637
GPR[SPVAP]-1661308113637
GPR[EPVAP]-1661308115515
GPR[SPVATF]-1661308115515
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308117360
GPR[EPVS]-1661308117360
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return min;
}

========
MM Copying to MM
GPR[SPVS]-1661308117361
GPR[SPVAP]-1661308117361
GPR[EPVAP]-1661308118399
GPR[EPVS]-1661308118399
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return max;
}

========
MM Copying to MM
GPR[SPVS]-1661308118400
GPR[SPVAP]-1661308118400
GPR[EPVAP]-1661308119422
GPR[EPVS]-1661308119422
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return initial;
}

========
MM Copying to MM
GPR[SPVS]-1661308119423
GPR[SPVAP]-1661308119423
GPR[EPVAP]-1661308120451
GPR[EPVS]-1661308120451
========
if(Math.abs(upperBound)<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308120453
GPR[SPVAP]-1661308120453
GPR[EPVAP]-1661308122308
GPR[SPVATF]-1661308122308
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308124108
GPR[EPVS]-1661308124108
========
if(Math.abs(rootFindingFunction.value(upperBound))<=1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308124111
GPR[SPVAP]-1661308124111
GPR[EPVAP]-1661308125979
GPR[SPVATF]-1661308125979
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308127823
GPR[EPVS]-1661308127823
========
if(Math.abs(upperBound)<=1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308127824
GPR[SPVAP]-1661308127824
GPR[EPVAP]-1661308129782
GPR[SPVATF]-1661308129782
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308131607
GPR[EPVS]-1661308131607
========
if(Math.abs(upperBound-x)<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308131609
GPR[SPVAP]-1661308131609
GPR[EPVAP]-1661308132633
GPR[EPVS]-1661308132633
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return x1;
}

========
MM Copying to MM
GPR[SPVS]-1661308132634
GPR[SPVAP]-1661308132634
GPR[EPVAP]-1661308133634
GPR[EPVS]-1661308133634
========
if(Math.abs(serialVersionUID-p)<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308133636
GPR[SPVAP]-1661308133636
GPR[EPVAP]-1661308135509
GPR[SPVATF]-1661308135509
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308137347
GPR[EPVS]-1661308137347
========
if(Math.abs(p)<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308137349
GPR[SPVAP]-1661308137349
GPR[EPVAP]-1661308139252
GPR[SPVATF]-1661308139252
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308141155
GPR[EPVS]-1661308141155
========
if(Math.abs(p)<=1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308141156
GPR[SPVAP]-1661308141156
GPR[EPVAP]-1661308143040
GPR[SPVATF]-1661308143040
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308144886
GPR[EPVS]-1661308144886
========
if(Math.abs(rootFindingFunction.value(upperBound))<2.2204E-16){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308144890
GPR[SPVAP]-1661308144890
GPR[EPVAP]-1661308146787
GPR[SPVATF]-1661308146787
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308148577
GPR[EPVS]-1661308148577
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return min;
}

========
MM Copying to MM
GPR[SPVS]-1661308148579
GPR[SPVAP]-1661308148579
GPR[EPVAP]-1661308149596
GPR[EPVS]-1661308149596
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return max;
}

========
MM Copying to MM
GPR[SPVS]-1661308149597
GPR[SPVAP]-1661308149597
GPR[EPVAP]-1661308150610
GPR[EPVS]-1661308150611
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return initial;
}

========
MM Copying to MM
GPR[SPVS]-1661308150612
GPR[SPVAP]-1661308150612
GPR[EPVAP]-1661308151619
GPR[EPVS]-1661308151619
========
if(Math.compareTo(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}

========
MM Copying to MM
GPR[SPVS]-1661308151622
GPR[SPVAP]-1661308151622
GPR[EPVAP]-1661308152631
GPR[EPVS]-1661308152631
GPR[ESUN]-1661308152633
GPR[SSUN]-1661308152633
org.apache.commons.math.distribution.AbstractContinuousDistribution,104
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return lowerBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308154201
GPR[SPVAP]-1661308154201
GPR[EPVAP]-1661308159140
GPR[SPVATF]-1661308159140
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308160959
GPR[EPVS]-1661308160959
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308160960
GPR[SPVAP]-1661308160960
GPR[EPVAP]-1661308162866
GPR[SPVATF]-1661308162866
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308164698
GPR[EPVS]-1661308164698
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308164699
GPR[SPVAP]-1661308164699
GPR[EPVAP]-1661308166554
GPR[SPVATF]-1661308166554
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308168374
GPR[EPVS]-1661308168374
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return lowerBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308168375
GPR[SPVAP]-1661308168375
GPR[EPVAP]-1661308170257
GPR[SPVATF]-1661308170257
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308172115
GPR[EPVS]-1661308172115
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return lowerBound;
}
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308172116
GPR[SPVAP]-1661308172116
GPR[EPVAP]-1661308174001
GPR[SPVATF]-1661308174001
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308175811
GPR[EPVS]-1661308175811
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return upperBound;
}
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308175813
GPR[SPVAP]-1661308175813
GPR[EPVAP]-1661308177674
GPR[SPVATF]-1661308177674
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308179482
GPR[EPVS]-1661308179482
========
if(Math.abs(rootFindingFunction.value(lowerBound))<1.0E-6){
return lowerBound;
}
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308179483
GPR[SPVAP]-1661308179483
GPR[EPVAP]-1661308181387
GPR[SPVATF]-1661308181388
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308183221
GPR[EPVS]-1661308183221
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if((Math.abs(p-p)>(Math.max(Math.abs(p),Math.abs(p))*p))&&(difference>p)){
return false;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308183224
GPR[SPVAP]-1661308183224
GPR[EPVAP]-1661308184249
GPR[EPVS]-1661308184249
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if((p>(p*p))&&(difference>p)){
return false;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308184250
GPR[SPVAP]-1661308184250
GPR[EPVAP]-1661308185253
GPR[EPVS]-1661308185253
========
p=rootFindingFunction.value(x);
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308185254
GPR[SPVAP]-1661308185254
GPR[EPVAP]-1661308186264
GPR[EPVS]-1661308186264
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new IntegratorException("too small integration interval: length = {0}",Math.abs(p-p));

========
MM Copying to MM
GPR[SPVS]-1661308186265
GPR[SPVAP]-1661308186265
GPR[EPVAP]-1661308187283
GPR[EPVS]-1661308187283
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",p,p,rootFindingFunction.value(upperBound),rootFindingFunction.value(x));

========
MM Copying to MM
GPR[SPVS]-1661308187285
GPR[SPVAP]-1661308187285
GPR[EPVAP]-1661308188306
GPR[EPVS]-1661308188306
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(rootFindingFunction.value(p)*p<=0){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308188308
GPR[SPVAP]-1661308188308
GPR[EPVAP]-1661308190178
GPR[SPVATF]-1661308190178
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308192007
GPR[EPVS]-1661308192007
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  "+"Endpoints: [{0}, {1}], Values: [{2}, {3}]",lowerBound,upperBound,rootFindingFunction.value(lower),f.value(upper));

========
MM Copying to MM
GPR[SPVS]-1661308192009
GPR[SPVAP]-1661308192009
GPR[EPVAP]-1661308193053
GPR[EPVS]-1661308193053
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308193054
GPR[SPVAP]-1661308193054
GPR[EPVAP]-1661308194927
GPR[SPVATF]-1661308194927
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308196742
GPR[EPVS]-1661308196742
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return min;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308196743
GPR[SPVAP]-1661308196743
GPR[EPVAP]-1661308197750
GPR[EPVS]-1661308197750
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return max;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308197751
GPR[SPVAP]-1661308197751
GPR[EPVAP]-1661308198758
GPR[EPVS]-1661308198758
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return initial;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308198760
GPR[SPVAP]-1661308198760
GPR[EPVAP]-1661308199771
GPR[EPVS]-1661308199771
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p==0.0&&p==0.0){
return createComplex(0.0,0.0);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308199773
GPR[SPVAP]-1661308199773
GPR[EPVAP]-1661308200773
GPR[EPVS]-1661308200773
========
if(p>=0.0){
return createComplex(Math.sqrt((Math.abs(p)+abs())/2.0),p/(2.0*t));
}else {
return createComplex(Math.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308200774
GPR[SPVAP]-1661308200774
GPR[EPVAP]-1661308201794
GPR[EPVS]-1661308201795
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p==0.0){
return Math.abs(p);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308201796
GPR[SPVAP]-1661308201796
GPR[EPVAP]-1661308203687
GPR[SPVATF]-1661308203687
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308205522
GPR[EPVS]-1661308205522
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p==0.0){
return p;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308205523
GPR[SPVAP]-1661308205523
GPR[EPVAP]-1661308207393
GPR[SPVATF]-1661308207393
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308209196
GPR[EPVS]-1661308209196
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=p;
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308209197
GPR[SPVAP]-1661308209197
GPR[EPVAP]-1661308211066
GPR[SPVATF]-1661308211066
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308212879
GPR[EPVS]-1661308212879
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
p=rootFindingFunction.value(upperBound);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308212880
GPR[SPVAP]-1661308212880
GPR[EPVAP]-1661308213891
GPR[EPVS]-1661308213891
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=p;
if(p==0.0){
return p;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308213892
GPR[SPVAP]-1661308213892
GPR[EPVAP]-1661308215796
GPR[SPVATF]-1661308215796
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308217626
GPR[EPVS]-1661308217626
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=0.5*(x+x);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308217628
GPR[SPVAP]-1661308217628
GPR[EPVAP]-1661308218643
GPR[EPVS]-1661308218643
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
p=rootFindingFunction.value(upperBound);
if(p==0.0){
return p;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308218644
GPR[SPVAP]-1661308218644
GPR[EPVAP]-1661308219657
GPR[EPVS]-1661308219657
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=0.5*(x+x);
if(p==0.0){
return p;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308219659
GPR[SPVAP]-1661308219659
GPR[EPVAP]-1661308220685
GPR[EPVS]-1661308220685
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=0.5*(x+x);
p=rootFindingFunction.value(upperBound);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308220686
GPR[SPVAP]-1661308220686
GPR[EPVAP]-1661308221697
GPR[EPVS]-1661308221697
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
upperBound=0.5*(x+x);
p=rootFindingFunction.value(upperBound);
if(p==0.0){
return p;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308221699
GPR[SPVAP]-1661308221699
GPR[EPVAP]-1661308222724
GPR[EPVS]-1661308222724
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
p=Math.min(upper,p+100*MathUtils.EPSILON);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308222725
GPR[SPVAP]-1661308222725
GPR[EPVAP]-1661308223730
GPR[EPVS]-1661308223730
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(p)<10*Double.MIN_VALUE){
return Double.NaN;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308223731
GPR[SPVAP]-1661308223731
GPR[EPVAP]-1661308225607
GPR[SPVATF]-1661308225607
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308227410
GPR[EPVS]-1661308227410
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(p)<=p){
setResult(p,0);
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308227412
GPR[SPVAP]-1661308227412
GPR[EPVAP]-1661308228430
GPR[EPVS]-1661308228430
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(p)<=p){
setResult(yMin,0);
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308228431
GPR[SPVAP]-1661308228431
GPR[EPVAP]-1661308229448
GPR[EPVS]-1661308229449
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(p)<=p){
setResult(yMax,0);
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308229450
GPR[SPVAP]-1661308229450
GPR[EPVAP]-1661308230488
GPR[EPVS]-1661308230488
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(serialVersionUID<0){
xInt=SGN_MASK-xInt;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308230490
GPR[SPVAP]-1661308230490
GPR[EPVAP]-1661308231503
GPR[EPVS]-1661308231503
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(serialVersionUID<0){
yInt=SGN_MASK-yInt;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308231504
GPR[SPVAP]-1661308231504
GPR[EPVAP]-1661308232546
GPR[EPVS]-1661308232546
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(((Math.abs(p)<=p)&&(p<=costRelativeTolerance))||(p<=p*x)){
return ;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308232547
GPR[SPVAP]-1661308232547
GPR[EPVAP]-1661308233578
GPR[EPVS]-1661308233578
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new NotSymmetricMatrixException();

========
MM Copying to MM
GPR[SPVS]-1661308233581
GPR[SPVAP]-1661308233581
GPR[EPVAP]-1661308234594
GPR[EPVS]-1661308234594
========
if(Math.abs(rootFindingFunction.value(upperBound))<=1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308234596
GPR[SPVAP]-1661308234596
GPR[EPVAP]-1661308236466
GPR[SPVATF]-1661308236467
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308238268
GPR[EPVS]-1661308238268
========
if(Math.abs(upperBound-x)<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308238269
GPR[SPVAP]-1661308238269
GPR[EPVAP]-1661308239276
GPR[EPVS]-1661308239276
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return x1;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308239277
GPR[SPVAP]-1661308239277
GPR[EPVAP]-1661308240282
GPR[EPVS]-1661308240282
========
if(Math.abs(serialVersionUID-p)<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308240284
GPR[SPVAP]-1661308240284
GPR[EPVAP]-1661308242144
GPR[SPVATF]-1661308242144
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308243967
GPR[EPVS]-1661308243967
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new FunctionEvaluationException(bracket,"dimension mismatch {0} != {1}",residuals.length,observations.length);

========
MM Copying to MM
GPR[SPVS]-1661308243968
GPR[SPVAP]-1661308243968
GPR[EPVAP]-1661308244979
GPR[EPVS]-1661308244979
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(((Math.abs(p)<=p)&&(p<=costRelativeTolerance))||(p<=p*x)){
return new VectorialPointValuePair(bracket,bracket);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308244980
GPR[SPVAP]-1661308244980
GPR[EPVAP]-1661308245980
GPR[EPVS]-1661308245980
========
if(Math.abs(upperBound)<1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308245982
GPR[SPVAP]-1661308245982
GPR[EPVAP]-1661308247857
GPR[SPVATF]-1661308247857
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308249659
GPR[EPVS]-1661308249659
========
if(Math.abs(upperBound)<=1.0E-6){
return upperBound;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308249661
GPR[SPVAP]-1661308249661
GPR[EPVAP]-1661308251522
GPR[SPVATF]-1661308251522
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308253334
GPR[EPVS]-1661308253334
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  "+"Endpoints: [{0}, {1}], Values: [{2}, {3}]",upperBound,p,p,p);

========
MM Copying to MM
GPR[SPVS]-1661308253335
GPR[SPVAP]-1661308253335
GPR[EPVAP]-1661308255199
GPR[SPVATF]-1661308255199
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308257016
GPR[EPVS]-1661308257016
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p==0.0){
return createComplex(p/p,p/c);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308257018
GPR[SPVAP]-1661308257018
GPR[EPVAP]-1661308258028
GPR[EPVS]-1661308258028
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Math.abs(p)<Math.abs(p)){
if(d==0.0){
return createComplex(p/c,p/c);
}
double p/p=c/d;
double p*p/p+p=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
if(c==0.0){
return createComplex(imaginary/d,-real/c);
}
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308258029
GPR[SPVAP]-1661308258029
GPR[EPVAP]-1661308258970
GPR[EPVS]-1661308258970
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p==0.0){
return createComplex(p/p,-p/c);
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308258971
GPR[SPVAP]-1661308258971
GPR[EPVAP]-1661308259971
GPR[EPVS]-1661308259971
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new SingularMatrixException();

========
MM Copying to MM
GPR[SPVS]-1661308259972
GPR[SPVAP]-1661308259972
GPR[EPVAP]-1661308260973
GPR[EPVS]-1661308260973
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(p+0.01*p<=0.0){
den=1.0;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308260975
GPR[SPVAP]-1661308260975
GPR[EPVAP]-1661308261999
GPR[EPVS]-1661308261999
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(Double.isNaN(p)){
return false;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308262000
GPR[SPVAP]-1661308262000
GPR[EPVAP]-1661308263044
GPR[EPVS]-1661308263044
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
if(isNaN()){
return Complex.NaN;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308263045
GPR[SPVAP]-1661308263045
GPR[EPVAP]-1661308264044
GPR[EPVS]-1661308264044
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
new CombinedEventsManager().addEventHandler(new EndTimeChecker(upperBound),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(p),Math.abs(endTime))),100);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308264045
GPR[SPVAP]-1661308264045
GPR[EPVAP]-1661308265063
GPR[EPVS]-1661308265063
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
p=df(p,p,p,p);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308265064
GPR[SPVAP]-1661308265064
GPR[EPVAP]-1661308266065
GPR[EPVS]-1661308266065
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new EstimationException("cost relative tolerance is too small ({0}),"+" no further reduction in the",upperBound);

========
MM Copying to MM
GPR[SPVS]-1661308266067
GPR[SPVAP]-1661308266067
GPR[EPVAP]-1661308267079
GPR[EPVS]-1661308267079
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new EstimationException("parameters relative tolerance is too small"+" ({0}), no further improvement in",p);

========
MM Copying to MM
GPR[SPVS]-1661308267080
GPR[SPVAP]-1661308267080
GPR[EPVAP]-1661308268078
GPR[EPVS]-1661308268078
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new EstimationException("orthogonality tolerance is too small ({0}),"+" solution is orthogonal to the jacobian",p);

========
MM Copying to MM
GPR[SPVS]-1661308268079
GPR[SPVAP]-1661308268079
GPR[EPVAP]-1661308269092
GPR[EPVS]-1661308269092
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new OptimizationException("cost relative tolerance is too small ({0}),"+" no further reduction in the",upperBound);

========
MM Copying to MM
GPR[SPVS]-1661308269093
GPR[SPVAP]-1661308269093
GPR[EPVAP]-1661308270103
GPR[EPVS]-1661308270104
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new OptimizationException("parameters relative tolerance is too small"+" ({0}), no further improvement in",p);

========
MM Copying to MM
GPR[SPVS]-1661308270104
GPR[SPVAP]-1661308270104
GPR[EPVAP]-1661308271118
GPR[EPVS]-1661308271118
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new OptimizationException("orthogonality tolerance is too small ({0}),"+" solution is orthogonal to the jacobian",p);

========
MM Copying to MM
GPR[SPVS]-1661308271119
GPR[SPVAP]-1661308271119
GPR[EPVAP]-1661308272128
GPR[EPVS]-1661308272128
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return min;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308272130
GPR[SPVAP]-1661308272130
GPR[EPVAP]-1661308273142
GPR[EPVS]-1661308273142
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return max;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308273143
GPR[SPVAP]-1661308273143
GPR[EPVAP]-1661308274158
GPR[EPVS]-1661308274158
========
if(Math.abs(rootFindingFunction.value(upperBound))<0.0){
return initial;
}
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308274159
GPR[SPVAP]-1661308274159
GPR[EPVAP]-1661308275162
GPR[EPVS]-1661308275162
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("cannot convert NaN value");

========
MM Copying to MM
GPR[SPVS]-1661308275164
GPR[SPVAP]-1661308275164
GPR[EPVAP]-1661308277041
GPR[SPVATF]-1661308277041
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308278877
GPR[EPVS]-1661308278877
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("cannot convert infinite value");

========
MM Copying to MM
GPR[SPVS]-1661308278878
GPR[SPVAP]-1661308278878
GPR[EPVAP]-1661308280776
GPR[SPVATF]-1661308280777
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308282605
GPR[EPVS]-1661308282605
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("cannot format given object as a fraction number");

========
MM Copying to MM
GPR[SPVS]-1661308282607
GPR[SPVAP]-1661308282607
GPR[EPVAP]-1661308284503
GPR[SPVATF]-1661308284503
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308286393
GPR[EPVS]-1661308286393
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw new IntegratorException("minimal step size ({0}) reached, integration needs {1}",p,Math.abs(p));

========
MM Copying to MM
GPR[SPVS]-1661308286395
GPR[SPVAP]-1661308286395
GPR[EPVAP]-1661308287409
GPR[EPVS]-1661308287409
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createArrayIndexOutOfBoundsException("cannot substitute an element from an empty array");

========
MM Copying to MM
GPR[SPVS]-1661308287411
GPR[SPVAP]-1661308287411
GPR[EPVAP]-1661308289272
GPR[SPVATF]-1661308289272
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308291084
GPR[EPVS]-1661308291084
========
if(Math.abs(rootFindingFunction.value(upperBound))<1.0E-6){
return upperBound;
}
verifyInputArray(bracket,bracket);
throw new MathException(ex);

========
MM Copying to MM
GPR[SPVS]-1661308291086
GPR[SPVAP]-1661308291086
GPR[EPVAP]-1661308292109
GPR[EPVS]-1661308292109
GPR[ESUN]-1661308292110
GPR[SSUN]-1661308292110
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,199
========
if(initial*initial>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308293372
GPR[SPVAP]-1661308293372
GPR[EPVAP]-1661308298276
GPR[SPVATF]-1661308298276
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308300087
GPR[EPVS]-1661308300087
========
if(initial*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308300089
GPR[SPVAP]-1661308300089
GPR[EPVAP]-1661308302002
GPR[SPVATF]-1661308302002
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308303826
GPR[EPVS]-1661308303826
========
if(lowerBound*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308303828
GPR[SPVAP]-1661308303828
GPR[EPVAP]-1661308305697
GPR[SPVATF]-1661308305697
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308307543
GPR[EPVS]-1661308307543
========
if(fa*initial>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308307545
GPR[SPVAP]-1661308307545
GPR[EPVAP]-1661308309447
GPR[SPVATF]-1661308309447
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 0
GPR[EPVATF]-1661308311317
GPR[SPVATR]-1661308311318
TESTING : math_85
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveMultiple
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testInference
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveXY
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveSingle
MM message  - org.apache.commons.math.distribution.TDistributionTest::testInverseCumulativeProbabilities
MM message  - org.apache.commons.math.distribution.TDistributionTest::testSmallDf
MM message  - org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest::testBracketSin
MM messageFailing tests: 7
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661308318618
GPR[EPVS]-1661308318618
========
if(fa*upperBound>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308318619
GPR[SPVAP]-1661308318619
GPR[EPVAP]-1661308320519
GPR[SPVATF]-1661308320519
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 0
GPR[EPVATF]-1661308322340
GPR[SPVATR]-1661308322340
TESTING : math_85
MM messageFailing tests: 0
GPR[EPVATR]-1661308329519
GPR[EPVS]-1661308329519
GPR[PF]-1661308329519
sourceFile  script/workingdir/SimFix/math/math_85_buggy/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
location   script/workingdir/SimFix/math/math_85_buggy
MM Out patch at /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/patch_277103_1_ts_1661308329519.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /tmp/tmpDirMM7212147665221834196/UnivariateRealSolverUtils.java  /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/1_UnivariateRealSolverUtils.java  --unified=3  > /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/patch_277103_1_ts_1661308329519.diff
MMOut command diff: []
========
if(fa*fb>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308329529
GPR[SPVAP]-1661308329529
GPR[EPVAP]-1661308331407
GPR[SPVATF]-1661308331407
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308333251
GPR[EPVS]-1661308333251
========
if(initial*fb>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308333253
GPR[SPVAP]-1661308333253
GPR[EPVAP]-1661308335123
GPR[SPVATF]-1661308335123
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308336944
GPR[EPVS]-1661308336944
========
if(lowerBound*initial>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308336945
GPR[SPVAP]-1661308336945
GPR[EPVAP]-1661308338816
GPR[SPVATF]-1661308338816
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308340685
GPR[EPVS]-1661308340685
========
if(fa*initial>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308340686
GPR[SPVAP]-1661308340686
GPR[EPVAP]-1661308342588
GPR[SPVATF]-1661308342588
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 0
GPR[EPVATF]-1661308344404
GPR[SPVATR]-1661308344404
TESTING : math_85
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveMultiple
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testInference
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveXY
MM message  - org.apache.commons.math.stat.regression.SimpleRegressionTest::testRemoveSingle
MM message  - org.apache.commons.math.distribution.TDistributionTest::testInverseCumulativeProbabilities
MM message  - org.apache.commons.math.distribution.TDistributionTest::testSmallDf
MM message  - org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest::testBracketSin
MM messageFailing tests: 7
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661308351461
GPR[EPVS]-1661308351461
========
if(lowerBound*fb>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308351463
GPR[SPVAP]-1661308351463
GPR[EPVAP]-1661308353352
GPR[SPVATF]-1661308353352
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308355179
GPR[EPVS]-1661308355179
========
if(initial*initial>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308355180
GPR[SPVAP]-1661308355180
GPR[EPVAP]-1661308357059
GPR[SPVATF]-1661308357059
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308358883
GPR[EPVS]-1661308358883
========
if(lowerBound*initial>=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",fb,initial,fa);
}

========
MM Copying to MM
GPR[SPVS]-1661308358885
GPR[SPVAP]-1661308358885
GPR[EPVAP]-1661308360755
GPR[SPVATF]-1661308360755
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308362582
GPR[EPVS]-1661308362582
========
if(yA*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308362584
GPR[SPVAP]-1661308362584
GPR[EPVAP]-1661308363618
GPR[EPVS]-1661308363618
========
if(fa*yB>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308363619
GPR[SPVAP]-1661308363619
GPR[EPVAP]-1661308364639
GPR[EPVS]-1661308364639
========
if(fa*fb>=0.0){
if(fb*a<=0){
return b;
}
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308364640
GPR[SPVAP]-1661308364640
GPR[EPVAP]-1661308365647
GPR[EPVS]-1661308365647
========
if(fa*fb>=0.0){
if(Math.abs(a)<=fa){
setResult(initial,0);
return b;
}
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308365649
GPR[SPVAP]-1661308365649
GPR[EPVAP]-1661308366667
GPR[EPVS]-1661308366667
========
if(fa*fb>=0.0){
setResult(initial,0);
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308366668
GPR[SPVAP]-1661308366668
GPR[EPVAP]-1661308367682
GPR[EPVS]-1661308367682
========
if(yInitial*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308367684
GPR[SPVAP]-1661308367684
GPR[EPVAP]-1661308368678
GPR[EPVS]-1661308368678
========
if(fa*yMin>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308368680
GPR[SPVAP]-1661308368680
GPR[EPVAP]-1661308369690
GPR[EPVS]-1661308369690
========
if(fa*fb>=0.0){
if(fa*fb<0){
return solve(function,b,yMin,initial,yInitial,min,yMin);
}
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308369691
GPR[SPVAP]-1661308369691
GPR[EPVAP]-1661308370704
GPR[EPVS]-1661308370704
========
if(fa*yMax>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308370706
GPR[SPVAP]-1661308370706
GPR[EPVAP]-1661308371719
GPR[EPVS]-1661308371719
========
if(fa*fb>=0.0){
if(fb*fa<0){
return solve(function,initial,yInitial,a,yMax,initial,yInitial);
}
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308371720
GPR[SPVAP]-1661308371720
GPR[EPVAP]-1661308372721
GPR[EPVS]-1661308372721
========
if(c1*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308372722
GPR[SPVAP]-1661308372722
GPR[EPVAP]-1661308373726
GPR[EPVS]-1661308373726
========
if(c2*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308373728
GPR[SPVAP]-1661308373728
GPR[EPVAP]-1661308374739
GPR[EPVS]-1661308374739
========
if(fa*fb>=0.0){
throw new OptimizationException("unable to first guess the harmonic coefficients");
}

========
MM Copying to MM
GPR[SPVS]-1661308374740
GPR[SPVAP]-1661308374740
GPR[EPVAP]-1661308375750
GPR[EPVS]-1661308375750
========
a=Math.sqrt(fb/a);
if(fa*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308375752
GPR[SPVAP]-1661308375752
GPR[EPVAP]-1661308377626
GPR[SPVATF]-1661308377626
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308379463
GPR[EPVS]-1661308379463
========
a=Math.sqrt(a/fa);
if(fa*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308379464
GPR[SPVAP]-1661308379464
GPR[EPVAP]-1661308381422
GPR[SPVATF]-1661308381422
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308383235
GPR[EPVS]-1661308383235
========
a=Math.sqrt(fb/a);
a=Math.sqrt(a/fa);
if(fa*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308383236
GPR[SPVAP]-1661308383236
GPR[EPVAP]-1661308385104
GPR[SPVATF]-1661308385104
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308386929
GPR[EPVS]-1661308386929
========
if(fa*fb>=0.0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1661308386931
GPR[SPVAP]-1661308386931
GPR[EPVAP]-1661308388823
GPR[SPVATF]-1661308388823
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308390636
GPR[EPVS]-1661308390636
========
if(x*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308390639
GPR[SPVAP]-1661308390639
GPR[EPVAP]-1661308391659
GPR[EPVS]-1661308391659
========
if(fa*a>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308391661
GPR[SPVAP]-1661308391661
GPR[EPVAP]-1661308393549
GPR[SPVATF]-1661308393549
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308395349
GPR[EPVS]-1661308395349
========
if(fa*fb>=1.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}

========
MM Copying to MM
GPR[SPVS]-1661308395350
GPR[SPVAP]-1661308395350
GPR[EPVAP]-1661308397211
GPR[SPVATF]-1661308397211
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 0
GPR[EPVATF]-1661308399026
GPR[SPVATR]-1661308399027
TESTING : math_85
MM messageFailing tests: 0
GPR[EPVATR]-1661308406117
GPR[EPVS]-1661308406117
GPR[PF]-1661308406117
sourceFile  script/workingdir/SimFix/math/math_85_buggy/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
location   script/workingdir/SimFix/math/math_85_buggy
MM Out patch at /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/patch_353698_2_ts_1661308406117.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /tmp/tmpDirMM5558413434031389541/UnivariateRealSolverUtils.java  /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/2_UnivariateRealSolverUtils.java  --unified=3  > /experiment_home///results/SimFix/Math/85/seed_284/patch/math/85/0/patch_353698_2_ts_1661308406117.diff
MMOut command diff: []
========
if(fa*fb>=0.0){
throw new MaxIterationsExceededException(numIterations);
}

========
MM Copying to MM
GPR[SPVS]-1661308406128
GPR[SPVAP]-1661308406128
GPR[EPVAP]-1661308407140
GPR[EPVS]-1661308407140
GPR[ESUN]-1661308407144
GPR[SSUN]-1661308407144
org.apache.commons.math.MathException,106
========
super(buildMessage(Locale.US,pattern,arguments));
if(observations.length!=weights.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1661308408303
GPR[SPVAP]-1661308408303
GPR[EPVAP]-1661308410094
GPR[EPVS]-1661308410094
========
super(buildMessage(Locale.US,pattern,arguments));
if(mean.length!=standardDeviation.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1661308410096
GPR[SPVAP]-1661308410096
GPR[EPVAP]-1661308411893
GPR[EPVS]-1661308411893
GPR[ESUN]-1661308411894
GPR[SSUN]-1661308411894
org.apache.commons.math.MathException,107
GPR[ESUN]-1661308412085
GPR[SSUN]-1661308412085
org.apache.commons.math.MathException,108
GPR[ESUN]-1661308412261
GPR[SSUN]-1661308412261
org.apache.commons.math.MathException,109
Find no block!
GPR[SSUN]-1661308412441
org.apache.commons.math.MathException,60
GPR[ESUN]-1661308413465
GPR[SSUN]-1661308413465
org.apache.commons.math.MathException,67
Find no block!
GPR[SSUN]-1661308413648
org.apache.commons.math.MathException,73
GPR[ESUN]-1661308413834
GPR[SSUN]-1661308413834
org.apache.commons.math.MathException,85
GPR[ESUN]-1661308414811
GPR[SSUN]-1661308414811
org.apache.commons.math.MaxIterationsExceededException,43
GPR[ESUN]-1661308415769
GPR[SSUN]-1661308415769
org.apache.commons.math.MaxIterationsExceededException,44
GPR[ESUN]-1661308415980
GPR[SSUN]-1661308415980
org.apache.commons.math.MaxIterationsExceededException,45
Find no block!
GPR[SSUN]-1661308416146
org.apache.commons.math.ConvergenceException,45
========
this.pattern=null;
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308417094
GPR[SPVAP]-1661308417094
GPR[EPVAP]-1661308418881
GPR[EPVS]-1661308418881
========
this.arguments=new Object[0];
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308418882
GPR[SPVAP]-1661308418882
GPR[EPVAP]-1661308420667
GPR[EPVS]-1661308420667
========
this.pattern=getMessage();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308420668
GPR[SPVAP]-1661308420668
GPR[EPVAP]-1661308422443
GPR[EPVS]-1661308422443
========
this.pattern=pattern;
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308422445
GPR[SPVAP]-1661308422445
GPR[EPVAP]-1661308424220
GPR[EPVS]-1661308424220
========
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308424221
GPR[SPVAP]-1661308424221
GPR[EPVAP]-1661308426032
GPR[EPVS]-1661308426032
========
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308426033
GPR[SPVAP]-1661308426033
GPR[EPVAP]-1661308427843
GPR[EPVS]-1661308427843
========
this.pattern=getMessage();
this.arguments=new Object[0];
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1661308427844
GPR[SPVAP]-1661308427844
GPR[EPVAP]-1661308429627
GPR[EPVS]-1661308429627
GPR[ESUN]-1661308429627
GPR[SSUN]-1661308429627
org.apache.commons.math.ConvergenceException,46
Find no block!
GPR[SSUN]-1661308429827
org.apache.commons.math.distribution.NormalDistributionImpl,128
Find no block!
GPR[SSUN]-1661308430006
org.apache.commons.math.distribution.NormalDistributionImpl,129
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x<mean){
return -1;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308431186
GPR[SPVAP]-1661308431186
GPR[EPVAP]-1661308436067
GPR[SPVATF]-1661308436067
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308437874
GPR[EPVS]-1661308437874
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x>0&&x<=S_LIMIT){
return -GAMMA-1/x;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308437876
GPR[SPVAP]-1661308437876
GPR[EPVAP]-1661308438919
GPR[EPVS]-1661308438919
========
if(mean>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308438920
GPR[SPVAP]-1661308438920
GPR[EPVAP]-1661308440835
GPR[SPVATF]-1661308440835
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308442631
GPR[EPVS]-1661308442631
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308442632
GPR[SPVAP]-1661308442632
GPR[EPVAP]-1661308444537
GPR[SPVATF]-1661308444537
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308446380
GPR[EPVS]-1661308446380
========
if(mean>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308446381
GPR[SPVAP]-1661308446381
GPR[EPVAP]-1661308448279
GPR[SPVATF]-1661308448279
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308450118
GPR[EPVS]-1661308450118
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308450119
GPR[SPVAP]-1661308450119
GPR[EPVAP]-1661308451990
GPR[SPVATF]-1661308451990
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308453809
GPR[EPVS]-1661308453809
========
if(mean>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308453810
GPR[SPVAP]-1661308453810
GPR[EPVAP]-1661308455695
GPR[SPVATF]-1661308455695
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308457519
GPR[EPVS]-1661308457519
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x>0&&x<=S_LIMIT){
return 1/(x*x);
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308457521
GPR[SPVAP]-1661308457521
GPR[EPVAP]-1661308458561
GPR[EPVS]-1661308458561
========
if(fl>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308458562
GPR[SPVAP]-1661308458562
GPR[EPVAP]-1661308459614
GPR[EPVS]-1661308459614
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(mean==x){
return this.probability((int)x);
}else {
return 0;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308459616
GPR[SPVAP]-1661308459616
GPR[EPVAP]-1661308460638
GPR[EPVS]-1661308460638
========
if(sd>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308460639
GPR[SPVAP]-1661308460639
GPR[EPVAP]-1661308461664
GPR[EPVS]-1661308461664
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308461665
GPR[SPVAP]-1661308461665
GPR[EPVAP]-1661308463556
GPR[SPVATF]-1661308463556
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308465375
GPR[EPVS]-1661308465375
========
standardDeviation=mean;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308465376
GPR[SPVAP]-1661308465376
GPR[EPVAP]-1661308467274
GPR[SPVATF]-1661308467274
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308470223
GPR[EPVS]-1661308470223
========
standardDeviation=mean;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",mean);
}

========
MM Copying to MM
GPR[SPVS]-1661308470224
GPR[SPVAP]-1661308470224
GPR[EPVAP]-1661308472108
GPR[SPVATF]-1661308472108
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308473926
GPR[EPVS]-1661308473926
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x<0){
return 0;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308473928
GPR[SPVAP]-1661308473928
GPR[EPVAP]-1661308475809
GPR[SPVATF]-1661308475809
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308477632
GPR[EPVS]-1661308477632
========
if(x==Integer.MAX_VALUE){
return 1;
}
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308477634
GPR[SPVAP]-1661308477634
GPR[EPVAP]-1661308479560
GPR[SPVATF]-1661308479560
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308481367
GPR[EPVS]-1661308481367
========
if(x==Integer.MAX_VALUE){
return 1;
}
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x<0){
return 0;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308481369
GPR[SPVAP]-1661308481369
GPR[EPVAP]-1661308483263
GPR[SPVATF]-1661308483263
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308485088
GPR[EPVS]-1661308485088
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x<0||x==Integer.MAX_VALUE){
return 0;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308485089
GPR[SPVAP]-1661308485089
GPR[EPVAP]-1661308486950
GPR[SPVATF]-1661308486950
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308488781
GPR[EPVS]-1661308488781
========
if(x>=(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308488783
GPR[SPVAP]-1661308488783
GPR[EPVAP]-1661308490672
GPR[SPVATF]-1661308490672
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308492478
GPR[EPVS]-1661308492478
========
if(x>C_LIMIT){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308492479
GPR[SPVAP]-1661308492479
GPR[EPVAP]-1661308493503
GPR[EPVS]-1661308493503
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x>=C_LIMIT){
double 1/(x*x)=1/(x*x);
return Math.log(x)-0.5/x-inv*((1.0/12)+inv*(1.0/120-inv/252));
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308493504
GPR[SPVAP]-1661308493504
GPR[EPVAP]-1661308494460
GPR[EPVS]-1661308494460
========
if(c3>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308494462
GPR[SPVAP]-1661308494462
GPR[EPVAP]-1661308495503
GPR[EPVS]-1661308495503
========
if(u>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308495504
GPR[SPVAP]-1661308495504
GPR[EPVAP]-1661308496528
GPR[EPVS]-1661308496528
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x>=C_LIMIT){
double 1/(x*x)=1/(x*x);
return 1/x+inv/2+inv/x*(1.0/6-inv*(1.0/30+inv/42));
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308496529
GPR[SPVAP]-1661308496529
GPR[EPVAP]-1661308497449
GPR[EPVS]-1661308497449
========
if(x>=C_LIMIT){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308497450
GPR[SPVAP]-1661308497450
GPR[EPVAP]-1661308498478
GPR[EPVS]-1661308498478
========
SQRT2PI+=x;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308498479
GPR[SPVAP]-1661308498479
GPR[EPVAP]-1661308499499
GPR[EPVS]-1661308499499
========
SQRT2PI+=SQRT2PI;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308499500
GPR[SPVAP]-1661308499500
GPR[EPVAP]-1661308500515
GPR[EPVS]-1661308500515
========
serialVersionUID++;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308500516
GPR[SPVAP]-1661308500516
GPR[EPVAP]-1661308501538
GPR[EPVS]-1661308501538
========
if(r>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308501539
GPR[SPVAP]-1661308501539
GPR[EPVAP]-1661308502566
GPR[EPVS]-1661308502566
========
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(SQRT2PI>=x){
serialVersionUID++;
}else {
return n;
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308502567
GPR[SPVAP]-1661308502567
GPR[EPVAP]-1661308503608
GPR[EPVS]-1661308503608
========
if(n>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308503609
GPR[SPVAP]-1661308503609
GPR[EPVAP]-1661308504651
GPR[EPVS]-1661308504651
========
if(x>SQRT2PI){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308504653
GPR[SPVAP]-1661308504653
GPR[EPVAP]-1661308506623
GPR[SPVATF]-1661308506623
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308508446
GPR[EPVS]-1661308508446
========
SQRT2PI=1.0+Math.abs(nextGaussian(0.0,1.0))*Math.sqrt(SQRT2PI);
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308508448
GPR[SPVAP]-1661308508448
GPR[EPVAP]-1661308509465
GPR[EPVS]-1661308509465
========
x=Math.ceil(SQRT2PI);
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308509466
GPR[SPVAP]-1661308509466
GPR[EPVAP]-1661308511364
GPR[SPVATF]-1661308511364
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308513187
GPR[EPVS]-1661308513187
========
SQRT2PI=(-SQRT2PI*y+2.0*y)/mean-standardDeviation-x*x;
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308513188
GPR[SPVAP]-1661308513188
GPR[EPVAP]-1661308514283
GPR[EPVS]-1661308514283
========
x=Math.ceil(SQRT2PI);
if(x>SQRT2PI){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308514284
GPR[SPVAP]-1661308514284
GPR[EPVAP]-1661308516189
GPR[SPVATF]-1661308516189
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308518029
GPR[EPVS]-1661308518029
========
if(threshold>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308518031
GPR[SPVAP]-1661308518031
GPR[EPVAP]-1661308519073
GPR[EPVS]-1661308519073
========
if(fu>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308519075
GPR[SPVAP]-1661308519075
GPR[EPVAP]-1661308520093
GPR[EPVS]-1661308520093
========
if(fv>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308520094
GPR[SPVAP]-1661308520094
GPR[EPVAP]-1661308521135
GPR[EPVS]-1661308521135
========
if(x>(v+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308521136
GPR[SPVAP]-1661308521136
GPR[EPVAP]-1661308522154
GPR[EPVS]-1661308522155
========
if(p>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308522156
GPR[SPVAP]-1661308522156
GPR[EPVAP]-1661308523222
GPR[EPVS]-1661308523222
========
if(q>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308523223
GPR[SPVAP]-1661308523223
GPR[EPVAP]-1661308524252
GPR[EPVS]-1661308524252
========
if(a>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308524253
GPR[SPVAP]-1661308524253
GPR[EPVAP]-1661308525275
GPR[EPVS]-1661308525275
========
SQRT2PI=x+((Math.abs(SQRT2PI)>SQRT2PI)?d:((d>0)?tol:-tol));
if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308525276
GPR[SPVAP]-1661308525276
GPR[EPVAP]-1661308526290
GPR[EPVS]-1661308526290
========
if(x<mean){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308527286
GPR[SPVAP]-1661308527286
GPR[EPVAP]-1661308529151
GPR[SPVATF]-1661308529151
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308531029
GPR[EPVS]-1661308531029
========
if(mean<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308531030
GPR[SPVAP]-1661308531030
GPR[EPVAP]-1661308532915
GPR[SPVATF]-1661308532915
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308534737
GPR[EPVS]-1661308534737
========
if(x<-SQRT2PI){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308534739
GPR[SPVAP]-1661308534739
GPR[EPVAP]-1661308536617
GPR[SPVATF]-1661308536617
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308538435
GPR[EPVS]-1661308538435
========
if(fl<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308538437
GPR[SPVAP]-1661308538437
GPR[EPVAP]-1661308539469
GPR[EPVS]-1661308539469
========
if(x==Integer.MAX_VALUE){
return 1;
}
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308539471
GPR[SPVAP]-1661308539471
GPR[EPVAP]-1661308541353
GPR[SPVATF]-1661308541353
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308543190
GPR[EPVS]-1661308543190
========
if(x<=(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308543192
GPR[SPVAP]-1661308543192
GPR[EPVAP]-1661308545112
GPR[SPVATF]-1661308545112
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308546952
GPR[EPVS]-1661308546952
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>=(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308546954
GPR[SPVAP]-1661308546954
GPR[EPVAP]-1661308548830
GPR[SPVATF]-1661308548830
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308550638
GPR[EPVS]-1661308550638
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if(x>=1){
return 1;
}else {
return Beta.regularizedBeta(x,SQRT2PI,SQRT2PI);
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308550640
GPR[SPVAP]-1661308550640
GPR[EPVAP]-1661308551668
GPR[EPVS]-1661308551668
========
if(x<=(mean-20*standardDeviation)){
return 0.0;
}else if(x>=(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308551669
GPR[SPVAP]-1661308551669
GPR[EPVAP]-1661308553536
GPR[SPVATF]-1661308553536
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308555355
GPR[EPVS]-1661308555355
========
if(x<(mean-20*standardDeviation)){
return 1.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308555358
GPR[SPVAP]-1661308555358
GPR[EPVAP]-1661308557230
GPR[SPVATF]-1661308557231
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308559054
GPR[EPVS]-1661308559054
========
if(x<=mean){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308559056
GPR[SPVAP]-1661308559056
GPR[EPVAP]-1661308560934
GPR[SPVATF]-1661308560934
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308562740
GPR[EPVS]-1661308562740
========
if(c3<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308562741
GPR[SPVAP]-1661308562741
GPR[EPVAP]-1661308563764
GPR[EPVS]-1661308563764
========
if(u<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308563765
GPR[SPVAP]-1661308563765
GPR[EPVAP]-1661308564794
GPR[EPVS]-1661308564794
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(c4>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308564795
GPR[SPVAP]-1661308564795
GPR[EPVAP]-1661308565854
GPR[EPVS]-1661308565854
========
if(b<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308565855
GPR[SPVAP]-1661308565855
GPR[EPVAP]-1661308566890
GPR[EPVS]-1661308566890
========
assert maxUlps > 0 && maxUlps < NAN_GAP;

if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308566892
GPR[SPVAP]-1661308566892
GPR[EPVAP]-1661308567952
GPR[EPVS]-1661308567952
========
if(Double.doubleToLongBits(SQRT2PI)<0){
yInt=SGN_MASK-yInt;
}
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308567953
GPR[SPVAP]-1661308567953
GPR[EPVAP]-1661308569011
GPR[EPVS]-1661308569011
========
if(denominator<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308569012
GPR[SPVAP]-1661308569012
GPR[EPVAP]-1661308570064
GPR[EPVS]-1661308570064
========
if(r<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308570066
GPR[SPVAP]-1661308570066
GPR[EPVAP]-1661308571095
GPR[EPVS]-1661308571095
========
SQRT2PI-=mean*x/(serialVersionUID-1.0);
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308571096
GPR[SPVAP]-1661308571096
GPR[EPVAP]-1661308572169
GPR[EPVS]-1661308572170
========
SQRT2PI-=mean/(serialVersionUID-1.0);
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308572171
GPR[SPVAP]-1661308572171
GPR[EPVAP]-1661308573206
GPR[EPVS]-1661308573206
========
SQRT2PI-=x/(serialVersionUID-1.0);
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308573207
GPR[SPVAP]-1661308573207
GPR[EPVAP]-1661308574232
GPR[EPVS]-1661308574232
========
SQRT2PI-=x;
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308574233
GPR[SPVAP]-1661308574233
GPR[EPVAP]-1661308575258
GPR[EPVS]-1661308575258
========
SQRT2PI-=SQRT2PI;
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308575259
GPR[SPVAP]-1661308575259
GPR[EPVAP]-1661308576277
GPR[EPVS]-1661308576277
========
serialVersionUID--;
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308576278
GPR[SPVAP]-1661308576278
GPR[EPVAP]-1661308577306
GPR[EPVS]-1661308577306
========
if(threshold<(mean-20*standardDeviation)){
return 0.0;
}else if(threshold>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308577308
GPR[SPVAP]-1661308577308
GPR[EPVAP]-1661308578338
GPR[EPVS]-1661308578338
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(y>(y+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308578340
GPR[SPVAP]-1661308578340
GPR[EPVAP]-1661308579364
GPR[EPVS]-1661308579364
========
if(threshold<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308579365
GPR[SPVAP]-1661308579365
GPR[EPVAP]-1661308580378
GPR[EPVS]-1661308580378
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(y>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308580379
GPR[SPVAP]-1661308580379
GPR[EPVAP]-1661308581410
GPR[EPVS]-1661308581410
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(threshold>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308581411
GPR[SPVAP]-1661308581411
GPR[EPVAP]-1661308582435
GPR[EPVS]-1661308582435
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(y+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308582436
GPR[SPVAP]-1661308582436
GPR[EPVAP]-1661308583469
GPR[EPVS]-1661308583469
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
if((standardDeviation>=-mean)&&(y<=threshold)){
double 1/Math.sqrt(x*x+SQRT2PI*z)=1/Math.sqrt(x*x+SQRT2PI*z);
return new Vector3D(-inverse*z,0,inverse*x);
}
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308583470
GPR[SPVAP]-1661308583470
GPR[EPVAP]-1661308584398
GPR[EPVS]-1661308584398
========
if(fu<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308584400
GPR[SPVAP]-1661308584400
GPR[EPVAP]-1661308585419
GPR[EPVS]-1661308585419
========
if(fv<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308585420
GPR[SPVAP]-1661308585420
GPR[EPVAP]-1661308586442
GPR[EPVS]-1661308586442
========
if(x<(v-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308586443
GPR[SPVAP]-1661308586443
GPR[EPVAP]-1661308587470
GPR[EPVS]-1661308587470
========
if(x<SQRT2PI){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308587471
GPR[SPVAP]-1661308587471
GPR[EPVAP]-1661308589400
GPR[SPVATF]-1661308589400
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308591233
GPR[EPVS]-1661308591233
========
if(x<=SQRT2PI){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308591234
GPR[SPVAP]-1661308591234
GPR[EPVAP]-1661308593143
GPR[SPVATF]-1661308593143
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308594976
GPR[EPVS]-1661308594976
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(a>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308594977
GPR[SPVAP]-1661308594977
GPR[EPVAP]-1661308595998
GPR[EPVS]-1661308595998
========
if(a<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308596000
GPR[SPVAP]-1661308596000
GPR[EPVAP]-1661308597024
GPR[EPVS]-1661308597024
========
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(n>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308597025
GPR[SPVAP]-1661308597025
GPR[EPVAP]-1661308598040
GPR[EPVS]-1661308598040
========
if(meanXSquared<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308598042
GPR[SPVAP]-1661308598042
GPR[EPVAP]-1661308599072
GPR[EPVS]-1661308599072
========
if(p<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308599074
GPR[SPVAP]-1661308599074
GPR[EPVAP]-1661308600105
GPR[EPVS]-1661308600105
========
if(q<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308600106
GPR[SPVAP]-1661308600106
GPR[EPVAP]-1661308601127
GPR[EPVS]-1661308601127
========
SQRT2PI=x+((Math.abs(SQRT2PI)>SQRT2PI)?d:((d>0)?tol:-tol));
if(x<(mean-20*standardDeviation)){
return 0.0;
}else if(x>(mean+20*standardDeviation)){
return 1.0;
}else {
throw ex;
}

========
MM Copying to MM
GPR[SPVS]-1661308601128
GPR[SPVAP]-1661308601128
GPR[EPVAP]-1661308602152
GPR[EPVS]-1661308602152
GPR[ESUN]-1661308602153
GPR[SSUN]-1661308602153
org.apache.commons.math.distribution.NormalDistributionImpl,131
GPR[ESUN]-1661308602498
GPR[SSUN]-1661308602498
org.apache.commons.math.distribution.NormalDistributionImpl,132
GPR[ESUN]-1661308602675
GPR[SSUN]-1661308602675
org.apache.commons.math.distribution.NormalDistributionImpl,178
========
if(p<1.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308603777
GPR[SPVAP]-1661308603777
GPR[EPVAP]-1661308608649
GPR[SPVATF]-1661308608649
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308610473
GPR[EPVS]-1661308610473
========
if(p<=0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308610475
GPR[SPVAP]-1661308610475
GPR[EPVAP]-1661308612384
GPR[SPVATF]-1661308612384
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308614212
GPR[EPVS]-1661308614212
========
if(p<0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308614213
GPR[SPVAP]-1661308614213
GPR[EPVAP]-1661308616103
GPR[SPVATF]-1661308616103
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308617925
GPR[EPVS]-1661308617925
========
if(x<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308617926
GPR[SPVAP]-1661308617926
GPR[EPVAP]-1661308618947
GPR[EPVS]-1661308618947
========
if(p<=0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308618948
GPR[SPVAP]-1661308618948
GPR[EPVAP]-1661308620850
GPR[SPVATF]-1661308620850
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308622676
GPR[EPVS]-1661308622676
========
if(p<0.5){
ret=-ret;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308622677
GPR[SPVAP]-1661308622677
GPR[EPVAP]-1661308623698
GPR[EPVS]-1661308623698
========
if(x<=0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308623700
GPR[SPVAP]-1661308623700
GPR[EPVAP]-1661308624737
GPR[EPVS]-1661308624737
========
if(x<0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308624738
GPR[SPVAP]-1661308624738
GPR[EPVAP]-1661308625767
GPR[EPVS]-1661308625767
========
if(x<=0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308625768
GPR[SPVAP]-1661308625768
GPR[EPVAP]-1661308626769
GPR[EPVS]-1661308626769
========
if(d<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308626771
GPR[SPVAP]-1661308626771
GPR[EPVAP]-1661308627790
GPR[EPVS]-1661308627790
========
if(p<2.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308627792
GPR[SPVAP]-1661308627792
GPR[EPVAP]-1661308629676
GPR[SPVATF]-1661308629676
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308631509
GPR[EPVS]-1661308631509
========
if(yMin<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308631510
GPR[SPVAP]-1661308631510
GPR[EPVAP]-1661308632527
GPR[EPVS]-1661308632527
========
if(q<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308632529
GPR[SPVAP]-1661308632529
GPR[EPVAP]-1661308633564
GPR[EPVS]-1661308633564
========
if(p<0.5){
ret=-p;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308633565
GPR[SPVAP]-1661308633565
GPR[EPVAP]-1661308635445
GPR[SPVATF]-1661308635446
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308637240
GPR[EPVS]-1661308637240
========
ret=p;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308637242
GPR[SPVAP]-1661308637242
GPR[EPVAP]-1661308639115
GPR[SPVATF]-1661308639115
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308640931
GPR[EPVS]-1661308640931
========
ret=p;
if(p<1.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308640933
GPR[SPVAP]-1661308640933
GPR[EPVAP]-1661308642813
GPR[SPVATF]-1661308642813
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308644660
GPR[EPVS]-1661308644660
========
if(p<0.5){
setResult(SQRT2PI,0);
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308644662
GPR[SPVAP]-1661308644662
GPR[EPVAP]-1661308645733
GPR[EPVS]-1661308645733
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308645735
GPR[SPVAP]-1661308645735
GPR[EPVAP]-1661308647611
GPR[SPVATF]-1661308647611
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308649497
GPR[EPVS]-1661308649497
========
if(p==1){
return Double.POSITIVE_INFINITY;
}
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308649498
GPR[SPVAP]-1661308649498
GPR[EPVAP]-1661308651394
GPR[SPVATF]-1661308651394
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308653207
GPR[EPVS]-1661308653207
========
if(dx<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308653209
GPR[SPVAP]-1661308653209
GPR[EPVAP]-1661308654238
GPR[EPVS]-1661308654238
========
if(p<0.5){
delta=0.5*SQRT2PI;
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308654239
GPR[SPVAP]-1661308654239
GPR[EPVAP]-1661308655274
GPR[EPVS]-1661308655274
========
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
delta=p/SQRT2PI;
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308655276
GPR[SPVAP]-1661308655276
GPR[EPVAP]-1661308656315
GPR[EPVS]-1661308656315
========
if(r<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308656317
GPR[SPVAP]-1661308656317
GPR[EPVAP]-1661308657333
GPR[EPVS]-1661308657333
========
if(pm<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308657334
GPR[SPVAP]-1661308657334
GPR[EPVAP]-1661308658358
GPR[EPVS]-1661308658358
========
if(a<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308658360
GPR[SPVAP]-1661308658360
GPR[EPVAP]-1661308659375
GPR[EPVS]-1661308659375
========
if(p<0.5){
u=SQRT2PI+ret;
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308659376
GPR[SPVAP]-1661308659376
GPR[EPVAP]-1661308660398
GPR[EPVS]-1661308660398
GPR[ESUN]-1661308660399
GPR[SSUN]-1661308660399
org.apache.commons.math.distribution.NormalDistributionImpl,181
GPR[ESUN]-1661308660722
GPR[SSUN]-1661308660722
org.apache.commons.math.distribution.NormalDistributionImpl,184
========
double ret;
if(p<=0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308661785
GPR[SPVAP]-1661308661785
GPR[EPVAP]-1661308666645
GPR[SPVATF]-1661308666645
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308668471
GPR[EPVS]-1661308668471
========
double ret;
if(p<0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308668473
GPR[SPVAP]-1661308668473
GPR[EPVAP]-1661308670377
GPR[SPVATF]-1661308670377
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308672248
GPR[EPVS]-1661308672248
========
double ret;
if(x<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308672249
GPR[SPVAP]-1661308672249
GPR[EPVAP]-1661308673279
GPR[EPVS]-1661308673279
========
double ret;
if(p<=0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308673280
GPR[SPVAP]-1661308673280
GPR[EPVAP]-1661308675164
GPR[SPVATF]-1661308675164
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308677006
GPR[EPVS]-1661308677006
========
double ret;
if(p<1.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308677007
GPR[SPVAP]-1661308677007
GPR[EPVAP]-1661308678889
GPR[SPVATF]-1661308678889
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308680720
GPR[EPVS]-1661308680720
========
double ret;
if(yMin<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308680722
GPR[SPVAP]-1661308680722
GPR[EPVAP]-1661308681740
GPR[EPVS]-1661308681740
========
double ret;
if(x<=0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308681742
GPR[SPVAP]-1661308681742
GPR[EPVAP]-1661308682778
GPR[EPVS]-1661308682778
========
double ret;
if(x<0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308682779
GPR[SPVAP]-1661308682779
GPR[EPVAP]-1661308683799
GPR[EPVS]-1661308683799
========
double ret;
if(x<=0.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308683800
GPR[SPVAP]-1661308683800
GPR[EPVAP]-1661308684859
GPR[EPVS]-1661308684859
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
if(getDenominatorDegreesOfFreedom()>2.0){
ret=d/(d-2.0);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308684861
GPR[SPVAP]-1661308684861
GPR[EPVAP]-1661308685877
GPR[EPVS]-1661308685877
========
double ret;
if(p<0.5){
ret=-ret;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308685878
GPR[SPVAP]-1661308685878
GPR[EPVAP]-1661308686904
GPR[EPVS]-1661308686904
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
if(SQRT2PI==0.0){
ret=0.5;
}else {
double p=Beta.regularizedBeta(getDegreesOfFreedom()/(getDegreesOfFreedom()+(x*x)),0.5*getDegreesOfFreedom(),0.5);
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308686906
GPR[SPVAP]-1661308686906
GPR[EPVAP]-1661308687962
GPR[EPVS]-1661308687962
========
double ret;
if(p<0.5){
setResult(SQRT2PI,0);
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308687963
GPR[SPVAP]-1661308687963
GPR[EPVAP]-1661308689035
GPR[EPVS]-1661308689035
========
ret=p;
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308689037
GPR[SPVAP]-1661308689037
GPR[EPVAP]-1661308690080
GPR[EPVS]-1661308690080
========
double ret;
if(q<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308690082
GPR[SPVAP]-1661308690082
GPR[EPVAP]-1661308691120
GPR[EPVS]-1661308691120
========
ret=p;
double ret;
if(p<1.0){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308691121
GPR[SPVAP]-1661308691121
GPR[EPVAP]-1661308692175
GPR[EPVS]-1661308692175
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return Math.exp(-ret*x0/(2*getStandardDeviation()))/(getStandardDeviation()*SQRT2PI);

========
MM Copying to MM
GPR[SPVS]-1661308692176
GPR[SPVAP]-1661308692176
GPR[EPVAP]-1661308693196
GPR[EPVS]-1661308693196
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return SQRT2PI;

========
MM Copying to MM
GPR[SPVS]-1661308693197
GPR[SPVAP]-1661308693197
GPR[EPVAP]-1661308695097
GPR[SPVATF]-1661308695097
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308696914
GPR[EPVS]-1661308696914
========
this.mean=p;
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308696915
GPR[SPVAP]-1661308696915
GPR[EPVAP]-1661308698815
GPR[SPVATF]-1661308698815
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308700623
GPR[EPVS]-1661308700623
========
this.mean=p;
double ret;
if(p<=0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308700624
GPR[SPVAP]-1661308700624
GPR[EPVAP]-1661308702489
GPR[SPVATF]-1661308702489
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308704325
GPR[EPVS]-1661308704325
========
double ret;
if(r<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308704327
GPR[SPVAP]-1661308704327
GPR[EPVAP]-1661308705355
GPR[EPVS]-1661308705355
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return MAX_VALUE;

========
MM Copying to MM
GPR[SPVS]-1661308705357
GPR[SPVAP]-1661308705357
GPR[EPVAP]-1661308706375
GPR[EPVS]-1661308706375
========
double ret;
if(dx<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308706376
GPR[SPVAP]-1661308706376
GPR[EPVAP]-1661308707410
GPR[EPVS]-1661308707410
========
double ret;
if(p<0.5){
delta=0.5*SQRT2PI;
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308707411
GPR[SPVAP]-1661308707411
GPR[EPVAP]-1661308708454
GPR[EPVS]-1661308708454
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
delta=p/SQRT2PI;
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308708455
GPR[SPVAP]-1661308708455
GPR[EPVAP]-1661308709469
GPR[EPVS]-1661308709469
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return POSITIVE_INFINITY;

========
MM Copying to MM
GPR[SPVS]-1661308709471
GPR[SPVAP]-1661308709471
GPR[EPVAP]-1661308710497
GPR[EPVS]-1661308710497
========
double ret;
if(pm<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308710499
GPR[SPVAP]-1661308710499
GPR[EPVAP]-1661308711516
GPR[EPVS]-1661308711516
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return difference;

========
MM Copying to MM
GPR[SPVS]-1661308711517
GPR[SPVAP]-1661308711517
GPR[EPVAP]-1661308712552
GPR[EPVS]-1661308712552
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return size;

========
MM Copying to MM
GPR[SPVS]-1661308712553
GPR[SPVAP]-1661308712553
GPR[EPVAP]-1661308713605
GPR[EPVS]-1661308713605
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return relativeThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308713606
GPR[SPVAP]-1661308713606
GPR[EPVAP]-1661308714631
GPR[EPVS]-1661308714631
========
double ret;
if(p<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return absoluteThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308714632
GPR[SPVAP]-1661308714632
GPR[EPVAP]-1661308715683
GPR[EPVS]-1661308715683
========
double ret;
if(a<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308715685
GPR[SPVAP]-1661308715685
GPR[EPVAP]-1661308716712
GPR[EPVS]-1661308716712
========
double ret;
if(p<0.5){
u=SQRT2PI+ret;
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308716713
GPR[SPVAP]-1661308716713
GPR[EPVAP]-1661308717729
GPR[EPVS]-1661308717729
GPR[ESUN]-1661308717730
GPR[SSUN]-1661308717730
org.apache.commons.math.distribution.NormalDistributionImpl,200
========
if(p<=0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308718894
GPR[SPVAP]-1661308718894
GPR[EPVAP]-1661308723806
GPR[SPVATF]-1661308723806
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308725621
GPR[EPVS]-1661308725621
========
if(p<0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308725622
GPR[SPVAP]-1661308725622
GPR[EPVAP]-1661308727530
GPR[SPVATF]-1661308727530
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308729343
GPR[EPVS]-1661308729343
========
if(x<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308729344
GPR[SPVAP]-1661308729344
GPR[EPVAP]-1661308730361
GPR[EPVS]-1661308730361
========
if(p<=0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308730362
GPR[SPVAP]-1661308730362
GPR[EPVAP]-1661308732235
GPR[SPVATF]-1661308732235
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308734080
GPR[EPVS]-1661308734080
========
if(p<1.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308734081
GPR[SPVAP]-1661308734081
GPR[EPVAP]-1661308735947
GPR[SPVATF]-1661308735947
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308737779
GPR[EPVS]-1661308737779
========
if(p<0.5){
ret=getMean();
}else {
ret=ret;
}

========
MM Copying to MM
GPR[SPVS]-1661308737781
GPR[SPVAP]-1661308737781
GPR[EPVAP]-1661308738823
GPR[EPVS]-1661308738823
========
if(x<=0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308738825
GPR[SPVAP]-1661308738825
GPR[EPVAP]-1661308739850
GPR[EPVS]-1661308739850
========
if(x<0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308739852
GPR[SPVAP]-1661308739852
GPR[EPVAP]-1661308740882
GPR[EPVS]-1661308740882
========
if(x<=0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308740883
GPR[SPVAP]-1661308740883
GPR[EPVAP]-1661308741910
GPR[EPVS]-1661308741910
========
if(yMin<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308741912
GPR[SPVAP]-1661308741912
GPR[EPVAP]-1661308742982
GPR[EPVS]-1661308742982
========
ret=p;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308742985
GPR[SPVAP]-1661308742985
GPR[EPVAP]-1661308744865
GPR[SPVATF]-1661308744865
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308746729
GPR[EPVS]-1661308746729
========
ret=p;
if(p<1.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308746730
GPR[SPVAP]-1661308746730
GPR[EPVAP]-1661308748631
GPR[SPVATF]-1661308748631
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308750467
GPR[EPVS]-1661308750467
========
if(q<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308750468
GPR[SPVAP]-1661308750468
GPR[EPVAP]-1661308751489
GPR[EPVS]-1661308751489
========
if(p<0.5){
setResult(SQRT2PI,0);
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308751490
GPR[SPVAP]-1661308751490
GPR[EPVAP]-1661308752513
GPR[EPVS]-1661308752513
========
if(p==1){
return Double.POSITIVE_INFINITY;
}
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308752515
GPR[SPVAP]-1661308752515
GPR[EPVAP]-1661308754399
GPR[SPVATF]-1661308754400
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308756222
GPR[EPVS]-1661308756222
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308756224
GPR[SPVAP]-1661308756224
GPR[EPVAP]-1661308758130
GPR[SPVATF]-1661308758130
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308759944
GPR[EPVS]-1661308759944
========
if(r<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308759945
GPR[SPVAP]-1661308759945
GPR[EPVAP]-1661308760973
GPR[EPVS]-1661308760973
========
if(pm<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308760974
GPR[SPVAP]-1661308760974
GPR[EPVAP]-1661308762012
GPR[EPVS]-1661308762012
========
if(dx<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308762014
GPR[SPVAP]-1661308762014
GPR[EPVAP]-1661308763036
GPR[EPVS]-1661308763036
========
if(p<0.5){
delta=0.5*SQRT2PI;
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308763037
GPR[SPVAP]-1661308763037
GPR[EPVAP]-1661308764097
GPR[EPVS]-1661308764097
========
if(p<0.5){
ret=getMean();
}else {
delta=p/SQRT2PI;
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308764098
GPR[SPVAP]-1661308764098
GPR[EPVAP]-1661308765107
GPR[EPVS]-1661308765107
========
if(a<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308765108
GPR[SPVAP]-1661308765108
GPR[EPVAP]-1661308766130
GPR[EPVS]-1661308766130
========
if(p<0.5){
u=SQRT2PI+ret;
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661308766131
GPR[SPVAP]-1661308766131
GPR[EPVAP]-1661308767146
GPR[EPVS]-1661308767146
GPR[ESUN]-1661308767147
GPR[SSUN]-1661308767147
org.apache.commons.math.distribution.NormalDistributionImpl,203
GPR[ESUN]-1661308767455
GPR[SSUN]-1661308767455
org.apache.commons.math.distribution.NormalDistributionImpl,206
========
double ret;
if(p<=0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308768511
GPR[SPVAP]-1661308768511
GPR[EPVAP]-1661308773378
GPR[SPVATF]-1661308773378
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308775184
GPR[EPVS]-1661308775184
========
double ret;
if(p<0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308775185
GPR[SPVAP]-1661308775185
GPR[EPVAP]-1661308777147
GPR[SPVATF]-1661308777147
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308778993
GPR[EPVS]-1661308778993
========
double ret;
if(x<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308778995
GPR[SPVAP]-1661308778995
GPR[EPVAP]-1661308780029
GPR[EPVS]-1661308780029
========
double ret;
if(p<=0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308780030
GPR[SPVAP]-1661308780030
GPR[EPVAP]-1661308781948
GPR[SPVATF]-1661308781948
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308783811
GPR[EPVS]-1661308783811
========
double ret;
if(p<1.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308783812
GPR[SPVAP]-1661308783812
GPR[EPVAP]-1661308785687
GPR[SPVATF]-1661308785687
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308787500
GPR[EPVS]-1661308787500
========
double ret;
if(yMin<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308787501
GPR[SPVAP]-1661308787501
GPR[EPVAP]-1661308788532
GPR[EPVS]-1661308788532
========
double ret;
if(x<=0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308788534
GPR[SPVAP]-1661308788534
GPR[EPVAP]-1661308789555
GPR[EPVS]-1661308789555
========
double ret;
if(x<0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308789556
GPR[SPVAP]-1661308789556
GPR[EPVAP]-1661308790606
GPR[EPVS]-1661308790606
========
double ret;
if(x<=0.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308790607
GPR[SPVAP]-1661308790607
GPR[EPVAP]-1661308791626
GPR[EPVS]-1661308791626
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
if(getDenominatorDegreesOfFreedom()>2.0){
ret=d/(d-2.0);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308791628
GPR[SPVAP]-1661308791628
GPR[EPVAP]-1661308792634
GPR[EPVS]-1661308792634
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308792635
GPR[SPVAP]-1661308792635
GPR[EPVAP]-1661308793676
GPR[EPVS]-1661308793676
========
double ret;
if(p<0.5){
setResult(SQRT2PI,0);
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308793677
GPR[SPVAP]-1661308793677
GPR[EPVAP]-1661308794706
GPR[EPVS]-1661308794707
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
if(SQRT2PI==0.0){
ret=0.5;
}else {
double p=Beta.regularizedBeta(getDegreesOfFreedom()/(getDegreesOfFreedom()+(x*x)),0.5*getDegreesOfFreedom(),0.5);
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308794708
GPR[SPVAP]-1661308794708
GPR[EPVAP]-1661308795753
GPR[EPVS]-1661308795753
========
ret=p;
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308795755
GPR[SPVAP]-1661308795755
GPR[EPVAP]-1661308796782
GPR[EPVS]-1661308796782
========
ret=p;
double ret;
if(p<1.0){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308796784
GPR[SPVAP]-1661308796784
GPR[EPVAP]-1661308797818
GPR[EPVS]-1661308797818
========
double ret;
if(q<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308797820
GPR[SPVAP]-1661308797820
GPR[EPVAP]-1661308798842
GPR[EPVS]-1661308798842
========
this.mean=p;
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308798843
GPR[SPVAP]-1661308798843
GPR[EPVAP]-1661308800744
GPR[SPVATF]-1661308800744
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308802559
GPR[EPVS]-1661308802559
========
this.mean=p;
double ret;
if(p<=0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308802560
GPR[SPVAP]-1661308802560
GPR[EPVAP]-1661308804424
GPR[SPVATF]-1661308804424
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308806239
GPR[EPVS]-1661308806239
========
double ret;
if(r<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308806241
GPR[SPVAP]-1661308806241
GPR[EPVAP]-1661308807269
GPR[EPVS]-1661308807269
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return POSITIVE_INFINITY;

========
MM Copying to MM
GPR[SPVS]-1661308807270
GPR[SPVAP]-1661308807270
GPR[EPVAP]-1661308808273
GPR[EPVS]-1661308808273
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return MAX_VALUE;

========
MM Copying to MM
GPR[SPVS]-1661308808275
GPR[SPVAP]-1661308808275
GPR[EPVAP]-1661308809296
GPR[EPVS]-1661308809296
========
double ret;
if(pm<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308809298
GPR[SPVAP]-1661308809298
GPR[EPVAP]-1661308810322
GPR[EPVS]-1661308810322
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return Math.exp(-ret*x0/(2*getStandardDeviation()))/(getStandardDeviation()*SQRT2PI);

========
MM Copying to MM
GPR[SPVS]-1661308810324
GPR[SPVAP]-1661308810324
GPR[EPVAP]-1661308811334
GPR[EPVS]-1661308811334
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return SQRT2PI;

========
MM Copying to MM
GPR[SPVS]-1661308811335
GPR[SPVAP]-1661308811335
GPR[EPVAP]-1661308813219
GPR[SPVATF]-1661308813219
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308815051
GPR[EPVS]-1661308815051
========
double ret;
if(dx<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308815052
GPR[SPVAP]-1661308815052
GPR[EPVAP]-1661308816083
GPR[EPVS]-1661308816083
========
double ret;
if(p<0.5){
delta=0.5*SQRT2PI;
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308816084
GPR[SPVAP]-1661308816084
GPR[EPVAP]-1661308817111
GPR[EPVS]-1661308817111
========
double ret;
if(p<0.5){
ret=getMean();
}else {
delta=p/SQRT2PI;
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308817112
GPR[SPVAP]-1661308817112
GPR[EPVAP]-1661308818122
GPR[EPVS]-1661308818122
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return difference;

========
MM Copying to MM
GPR[SPVS]-1661308818124
GPR[SPVAP]-1661308818124
GPR[EPVAP]-1661308819145
GPR[EPVS]-1661308819145
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return size;

========
MM Copying to MM
GPR[SPVS]-1661308819145
GPR[SPVAP]-1661308819145
GPR[EPVAP]-1661308820183
GPR[EPVS]-1661308820183
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return relativeThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308820184
GPR[SPVAP]-1661308820184
GPR[EPVAP]-1661308821205
GPR[EPVS]-1661308821205
========
double ret;
if(p<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return absoluteThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308821206
GPR[SPVAP]-1661308821206
GPR[EPVAP]-1661308822235
GPR[EPVS]-1661308822235
========
double ret;
if(a<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308822237
GPR[SPVAP]-1661308822237
GPR[EPVAP]-1661308823263
GPR[EPVS]-1661308823263
========
double ret;
if(p<0.5){
u=SQRT2PI+ret;
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308823265
GPR[SPVAP]-1661308823265
GPR[EPVAP]-1661308824283
GPR[EPVS]-1661308824283
GPR[ESUN]-1661308824283
GPR[SSUN]-1661308824283
org.apache.commons.math.distribution.NormalDistributionImpl,221
========
if(p>1.0){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308825528
GPR[SPVAP]-1661308825528
GPR[EPVAP]-1661308830434
GPR[SPVATF]-1661308830434
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308832248
GPR[EPVS]-1661308832248
========
if(x>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308832249
GPR[SPVAP]-1661308832249
GPR[EPVAP]-1661308833298
GPR[EPVS]-1661308833298
========
if(p>0.0){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308833299
GPR[SPVAP]-1661308833299
GPR[EPVAP]-1661308835218
GPR[SPVATF]-1661308835218
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308837083
GPR[EPVS]-1661308837083
========
if(x>0.0){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308837085
GPR[SPVAP]-1661308837085
GPR[EPVAP]-1661308838195
GPR[EPVS]-1661308838195
========
if(yMin>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308838196
GPR[SPVAP]-1661308838196
GPR[EPVAP]-1661308839226
GPR[EPVS]-1661308839226
========
if(q>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308839228
GPR[SPVAP]-1661308839228
GPR[EPVAP]-1661308840266
GPR[EPVS]-1661308840266
========
if(p>0.5){
setResult(SQRT2PI,0);
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308840267
GPR[SPVAP]-1661308840267
GPR[EPVAP]-1661308841282
GPR[EPVS]-1661308841282
========
ret=p;
if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308841283
GPR[SPVAP]-1661308841283
GPR[EPVAP]-1661308843187
GPR[SPVATF]-1661308843187
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308844989
GPR[EPVS]-1661308844989
========
this.ret=p;
if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308844990
GPR[SPVAP]-1661308844990
GPR[EPVAP]-1661308846004
GPR[EPVS]-1661308846004
========
ret=p;
if(p>1.0){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308846005
GPR[SPVAP]-1661308846005
GPR[EPVAP]-1661308847886
GPR[SPVATF]-1661308847886
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308849744
GPR[EPVS]-1661308849744
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308849745
GPR[SPVAP]-1661308849745
GPR[EPVAP]-1661308851616
GPR[SPVATF]-1661308851616
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308853445
GPR[EPVS]-1661308853445
========
if(p==1){
return Double.POSITIVE_INFINITY;
}
if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308853447
GPR[SPVAP]-1661308853447
GPR[EPVAP]-1661308855347
GPR[SPVATF]-1661308855347
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308857146
GPR[EPVS]-1661308857146
========
if(p>=0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308857148
GPR[SPVAP]-1661308857148
GPR[EPVAP]-1661308859024
GPR[SPVATF]-1661308859024
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308860874
GPR[EPVS]-1661308860874
========
if(r>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308860876
GPR[SPVAP]-1661308860876
GPR[EPVAP]-1661308861896
GPR[EPVS]-1661308861896
========
if(dx>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308861897
GPR[SPVAP]-1661308861897
GPR[EPVAP]-1661308862918
GPR[EPVS]-1661308862918
========
if(p>0.5){
delta=0.5*SQRT2PI;
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308862919
GPR[SPVAP]-1661308862919
GPR[EPVAP]-1661308863950
GPR[EPVS]-1661308863950
========
if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
delta=p/SQRT2PI;
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308863951
GPR[SPVAP]-1661308863951
GPR[EPVAP]-1661308864982
GPR[EPVS]-1661308864982
========
if(pm>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308864984
GPR[SPVAP]-1661308864984
GPR[EPVAP]-1661308866027
GPR[EPVS]-1661308866027
========
if(a>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308866028
GPR[SPVAP]-1661308866028
GPR[EPVAP]-1661308867054
GPR[EPVS]-1661308867054
========
if(p>0.5){
u=SQRT2PI+ret;
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308867055
GPR[SPVAP]-1661308867055
GPR[EPVAP]-1661308868098
GPR[EPVS]-1661308868098
========
if(p<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308869002
GPR[SPVAP]-1661308869002
GPR[EPVAP]-1661308870863
GPR[SPVATF]-1661308870863
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308872716
GPR[EPVS]-1661308872716
========
if(p<=0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308872718
GPR[SPVAP]-1661308872718
GPR[EPVAP]-1661308874605
GPR[SPVATF]-1661308874605
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308876423
GPR[EPVS]-1661308876423
========
if(p<0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308876425
GPR[SPVAP]-1661308876425
GPR[EPVAP]-1661308878315
GPR[SPVATF]-1661308878315
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308880169
GPR[EPVS]-1661308880169
========
if(x<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308880170
GPR[SPVAP]-1661308880170
GPR[EPVAP]-1661308881194
GPR[EPVS]-1661308881194
========
if(p<=0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308881195
GPR[SPVAP]-1661308881195
GPR[EPVAP]-1661308883097
GPR[SPVATF]-1661308883097
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308884926
GPR[EPVS]-1661308884926
========
if(x<=0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308884928
GPR[SPVAP]-1661308884928
GPR[EPVAP]-1661308885949
GPR[EPVS]-1661308885949
========
if(x<0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308885950
GPR[SPVAP]-1661308885950
GPR[EPVAP]-1661308886957
GPR[EPVS]-1661308886957
========
if(x<=0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308886959
GPR[SPVAP]-1661308886959
GPR[EPVAP]-1661308887990
GPR[EPVS]-1661308887990
========
if(yMin<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308887992
GPR[SPVAP]-1661308887992
GPR[EPVAP]-1661308889018
GPR[EPVS]-1661308889018
========
if(d<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308889019
GPR[SPVAP]-1661308889019
GPR[EPVAP]-1661308890041
GPR[EPVS]-1661308890041
========
if(p<2.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308890042
GPR[SPVAP]-1661308890042
GPR[EPVAP]-1661308891911
GPR[SPVATF]-1661308891911
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308893758
GPR[EPVS]-1661308893758
========
ret=p;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308893760
GPR[SPVAP]-1661308893760
GPR[EPVAP]-1661308895705
GPR[SPVATF]-1661308895705
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308897556
GPR[EPVS]-1661308897556
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308897558
GPR[SPVAP]-1661308897558
GPR[EPVAP]-1661308899430
GPR[SPVATF]-1661308899430
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308901272
GPR[EPVS]-1661308901272
========
ret=p;
if(p<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308901273
GPR[SPVAP]-1661308901273
GPR[EPVAP]-1661308903138
GPR[SPVATF]-1661308903138
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308904956
GPR[EPVS]-1661308904956
========
if(p==1){
return Double.POSITIVE_INFINITY;
}
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308904957
GPR[SPVAP]-1661308904957
GPR[EPVAP]-1661308906816
GPR[SPVATF]-1661308906816
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308908650
GPR[EPVS]-1661308908650
========
this.ret=p;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308908652
GPR[SPVAP]-1661308908652
GPR[EPVAP]-1661308909691
GPR[EPVS]-1661308909691
========
if(p<0.5){
setResult(SQRT2PI,0);
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308909692
GPR[SPVAP]-1661308909692
GPR[EPVAP]-1661308910706
GPR[EPVS]-1661308910706
========
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
setResult(SQRT2PI,0);
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308910707
GPR[SPVAP]-1661308910707
GPR[EPVAP]-1661308911728
GPR[EPVS]-1661308911728
========
if(a<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308911729
GPR[SPVAP]-1661308911729
GPR[EPVAP]-1661308912747
GPR[EPVS]-1661308912747
========
if(x<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308912748
GPR[SPVAP]-1661308912748
GPR[EPVAP]-1661308913766
GPR[EPVS]-1661308913766
========
if(r<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308913768
GPR[SPVAP]-1661308913768
GPR[EPVAP]-1661308914785
GPR[EPVS]-1661308914785
========
if(dx<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308914786
GPR[SPVAP]-1661308914786
GPR[EPVAP]-1661308915813
GPR[EPVS]-1661308915813
========
if(p<0.5){
delta=0.5*SQRT2PI;
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308915814
GPR[SPVAP]-1661308915814
GPR[EPVAP]-1661308916840
GPR[EPVS]-1661308916840
========
if(pm<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308916841
GPR[SPVAP]-1661308916841
GPR[EPVAP]-1661308917863
GPR[EPVS]-1661308917863
========
if(q<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308917864
GPR[SPVAP]-1661308917864
GPR[EPVAP]-1661308918890
GPR[EPVS]-1661308918890
========
if(p<0.5){
u=SQRT2PI+ret;
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}

========
MM Copying to MM
GPR[SPVS]-1661308918892
GPR[SPVAP]-1661308918892
GPR[EPVAP]-1661308919903
GPR[EPVS]-1661308919903
GPR[ESUN]-1661308919903
GPR[SSUN]-1661308919903
org.apache.commons.math.distribution.NormalDistributionImpl,223
GPR[ESUN]-1661308920212
GPR[SSUN]-1661308920212
org.apache.commons.math.distribution.NormalDistributionImpl,224
GPR[ESUN]-1661308920426
GPR[SSUN]-1661308920426
org.apache.commons.math.distribution.NormalDistributionImpl,229
========
double ret;
if(p<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308921498
GPR[SPVAP]-1661308921498
GPR[EPVAP]-1661308926310
GPR[SPVATF]-1661308926310
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308928162
GPR[EPVS]-1661308928162
========
double ret;
if(p<=0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308928164
GPR[SPVAP]-1661308928164
GPR[EPVAP]-1661308930085
GPR[SPVATF]-1661308930085
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308931910
GPR[EPVS]-1661308931910
========
double ret;
if(p<0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308931911
GPR[SPVAP]-1661308931911
GPR[EPVAP]-1661308933785
GPR[SPVATF]-1661308933785
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308935625
GPR[EPVS]-1661308935625
========
double ret;
if(x<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308935627
GPR[SPVAP]-1661308935627
GPR[EPVAP]-1661308936653
GPR[EPVS]-1661308936653
========
double ret;
if(p<=0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308936654
GPR[SPVAP]-1661308936654
GPR[EPVAP]-1661308938595
GPR[SPVATF]-1661308938595
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308940426
GPR[EPVS]-1661308940426
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return Math.exp(-p*x0/(2*getStandardDeviation()))/(getStandardDeviation()*SQRT2PI);

========
MM Copying to MM
GPR[SPVS]-1661308940428
GPR[SPVAP]-1661308940428
GPR[EPVAP]-1661308941455
GPR[EPVS]-1661308941455
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return SQRT2PI;

========
MM Copying to MM
GPR[SPVS]-1661308941456
GPR[SPVAP]-1661308941456
GPR[EPVAP]-1661308943361
GPR[SPVATF]-1661308943361
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308945201
GPR[EPVS]-1661308945201
========
double ret;
if(x<=0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308945203
GPR[SPVAP]-1661308945203
GPR[EPVAP]-1661308946222
GPR[EPVS]-1661308946222
========
double ret;
if(x<0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308946223
GPR[SPVAP]-1661308946223
GPR[EPVAP]-1661308947295
GPR[EPVS]-1661308947295
========
double ret;
if(x<=0.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308947296
GPR[SPVAP]-1661308947296
GPR[EPVAP]-1661308948324
GPR[EPVS]-1661308948324
========
double ret;
if(d<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308948326
GPR[SPVAP]-1661308948326
GPR[EPVAP]-1661308949346
GPR[EPVS]-1661308949346
========
double ret;
if(p<2.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308949347
GPR[SPVAP]-1661308949347
GPR[EPVAP]-1661308951246
GPR[SPVATF]-1661308951246
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308953059
GPR[EPVS]-1661308953059
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
if(SQRT2PI==0.0){
ret=0.5;
}else {
double p=Beta.regularizedBeta(getDegreesOfFreedom()/(getDegreesOfFreedom()+(x*x)),0.5*getDegreesOfFreedom(),0.5);
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308953060
GPR[SPVAP]-1661308953060
GPR[EPVAP]-1661308954086
GPR[EPVS]-1661308954086
========
double ret;
if(p<0.5){
setResult(SQRT2PI,0);
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308954088
GPR[SPVAP]-1661308954088
GPR[EPVAP]-1661308955108
GPR[EPVS]-1661308955108
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
setResult(SQRT2PI,0);
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308955109
GPR[SPVAP]-1661308955109
GPR[EPVAP]-1661308956124
GPR[EPVS]-1661308956124
========
double ret;
if(sign<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308956125
GPR[SPVAP]-1661308956125
GPR[EPVAP]-1661308957178
GPR[EPVS]-1661308957178
========
double ret;
if(a<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308957180
GPR[SPVAP]-1661308957180
GPR[EPVAP]-1661308958205
GPR[EPVS]-1661308958205
========
double ret;
if(x<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308958206
GPR[SPVAP]-1661308958206
GPR[EPVAP]-1661308959299
GPR[EPVS]-1661308959299
========
ret=p;
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308959300
GPR[SPVAP]-1661308959300
GPR[EPVAP]-1661308960316
GPR[EPVS]-1661308960316
========
this.mean=p;
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308960317
GPR[SPVAP]-1661308960317
GPR[EPVAP]-1661308962194
GPR[SPVATF]-1661308962194
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308964060
GPR[EPVS]-1661308964060
========
this.mean=p;
double ret;
if(p<=0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308964061
GPR[SPVAP]-1661308964061
GPR[EPVAP]-1661308965942
GPR[SPVATF]-1661308965942
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308967766
GPR[EPVS]-1661308967766
========
ret=p;
double ret;
if(p<1.0){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308967768
GPR[SPVAP]-1661308967768
GPR[EPVAP]-1661308968777
GPR[EPVS]-1661308968777
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return MAX_VALUE;

========
MM Copying to MM
GPR[SPVS]-1661308968779
GPR[SPVAP]-1661308968779
GPR[EPVAP]-1661308969791
GPR[EPVS]-1661308969791
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return POSITIVE_INFINITY;

========
MM Copying to MM
GPR[SPVS]-1661308969793
GPR[SPVAP]-1661308969793
GPR[EPVAP]-1661308970831
GPR[EPVS]-1661308970831
========
double ret;
if(r<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308970832
GPR[SPVAP]-1661308970832
GPR[EPVAP]-1661308971850
GPR[EPVS]-1661308971850
========
double ret;
if(dx<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308971851
GPR[SPVAP]-1661308971851
GPR[EPVAP]-1661308972886
GPR[EPVS]-1661308972886
========
double ret;
if(p<0.5){
delta=0.5*SQRT2PI;
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308972887
GPR[SPVAP]-1661308972887
GPR[EPVAP]-1661308973919
GPR[EPVS]-1661308973919
========
double ret;
if(pm<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308973920
GPR[SPVAP]-1661308973920
GPR[EPVAP]-1661308974942
GPR[EPVS]-1661308974942
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return difference;

========
MM Copying to MM
GPR[SPVS]-1661308974944
GPR[SPVAP]-1661308974944
GPR[EPVAP]-1661308975962
GPR[EPVS]-1661308975962
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return size;

========
MM Copying to MM
GPR[SPVS]-1661308975964
GPR[SPVAP]-1661308975964
GPR[EPVAP]-1661308976979
GPR[EPVS]-1661308976979
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return relativeThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308976980
GPR[SPVAP]-1661308976980
GPR[EPVAP]-1661308978063
GPR[EPVS]-1661308978063
========
double ret;
if(p<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return absoluteThreshold;

========
MM Copying to MM
GPR[SPVS]-1661308978064
GPR[SPVAP]-1661308978064
GPR[EPVAP]-1661308979078
GPR[EPVS]-1661308979079
========
double ret;
if(q<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308979080
GPR[SPVAP]-1661308979080
GPR[EPVAP]-1661308980102
GPR[EPVS]-1661308980102
========
double ret;
if(p<0.5){
u=SQRT2PI+ret;
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661308980103
GPR[SPVAP]-1661308980103
GPR[EPVAP]-1661308981112
GPR[EPVS]-1661308981112
GPR[ESUN]-1661308981113
GPR[SSUN]-1661308981113
org.apache.commons.math.special.Gamma,181
========
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308982627
GPR[SPVAP]-1661308982627
GPR[EPVAP]-1661308987661
GPR[SPVATF]-1661308987661
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308989515
GPR[EPVS]-1661308989515
========
if(n>=maxIterations){
throw new MathException("Cannot compute beta density at 1 when beta = %.3g",a);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308989516
GPR[SPVAP]-1661308989516
GPR[EPVAP]-1661308991414
GPR[SPVATF]-1661308991414
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308993219
GPR[EPVS]-1661308993219
========
if(n>=maxIterations){
return 0;
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308993220
GPR[SPVAP]-1661308993220
GPR[EPVAP]-1661308994278
GPR[EPVS]-1661308994278
========
if(u>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308994279
GPR[SPVAP]-1661308994279
GPR[EPVAP]-1661308995314
GPR[EPVS]-1661308995314
========
if(n>=x){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308995316
GPR[SPVAP]-1661308995316
GPR[EPVAP]-1661308997211
GPR[SPVATF]-1661308997211
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661308999036
GPR[EPVS]-1661308999036
========
if(u>=x){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661308999037
GPR[SPVAP]-1661308999037
GPR[EPVAP]-1661309000050
GPR[EPVS]-1661309000050
========
if(n>=tolerance){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309000053
GPR[SPVAP]-1661309000053
GPR[EPVAP]-1661309001078
GPR[EPVS]-1661309001078
========
if(n>=maxIterations){
if(Math.abs(a-sum)<=n){
setResult(x,maxIterations);
return GAMMA;
}
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309001080
GPR[SPVAP]-1661309001080
GPR[EPVAP]-1661309002099
GPR[EPVS]-1661309002099
========
if(n>=maxIterations){
setResult(a,maxIterations);
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309002100
GPR[SPVAP]-1661309002100
GPR[EPVAP]-1661309003128
GPR[EPVS]-1661309003128
========
if(n>=maxIterations){
throw new FractionConversionException(a,maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309003130
GPR[SPVAP]-1661309003130
GPR[EPVAP]-1661309004151
GPR[EPVS]-1661309004151
========
if(n>maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309004153
GPR[SPVAP]-1661309004153
GPR[EPVAP]-1661309006076
GPR[SPVATF]-1661309006076
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309007880
GPR[EPVS]-1661309007880
========
if(n>=maxIterations){
throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309007881
GPR[SPVAP]-1661309007881
GPR[EPVAP]-1661309008932
GPR[EPVS]-1661309008932
========
if(n>=i){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309008934
GPR[SPVAP]-1661309008934
GPR[EPVAP]-1661309009968
GPR[EPVS]-1661309009968
========
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*x;
}

========
MM Copying to MM
GPR[SPVS]-1661309009969
GPR[SPVAP]-1661309009969
GPR[EPVAP]-1661309011871
GPR[SPVATF]-1661309011871
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309013732
GPR[EPVS]-1661309013732
========
if(x>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309013734
GPR[SPVAP]-1661309013734
GPR[EPVAP]-1661309015614
GPR[SPVATF]-1661309015614
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309017425
GPR[EPVS]-1661309017425
========
if(n>=y){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309017426
GPR[SPVAP]-1661309017426
GPR[EPVAP]-1661309018454
GPR[EPVS]-1661309018454
========
if(n>=maxIterations){
if(sum<n){
return -1;
}
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309018455
GPR[SPVAP]-1661309018455
GPR[EPVAP]-1661309020318
GPR[SPVATF]-1661309020318
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309022143
GPR[EPVS]-1661309022143
========
if(x>=maxIterations){
if(sum<n){
return -1;
}
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309022144
GPR[SPVAP]-1661309022144
GPR[EPVAP]-1661309024732
GPR[SPVATF]-1661309024732
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309026570
GPR[EPVS]-1661309026570
========
sum+=x;
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309026572
GPR[SPVAP]-1661309026572
GPR[EPVAP]-1661309029517
GPR[SPVATF]-1661309029517
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309031361
GPR[EPVS]-1661309031361
========
ret+=GAMMA;
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309031362
GPR[SPVAP]-1661309031362
GPR[EPVAP]-1661309032385
GPR[EPVS]-1661309032385
========
n++;
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309032387
GPR[SPVAP]-1661309032387
GPR[EPVAP]-1661309034326
GPR[SPVATF]-1661309034326
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309036187
GPR[EPVS]-1661309036187
========
sum+=x;
if(n>maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309036189
GPR[SPVAP]-1661309036189
GPR[EPVAP]-1661309038064
GPR[SPVATF]-1661309038064
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309039887
GPR[EPVS]-1661309039887
========
n++;
if(n>maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309039887
GPR[SPVAP]-1661309039887
GPR[EPVAP]-1661309041797
GPR[SPVATF]-1661309041797
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309043843
GPR[EPVS]-1661309043843
========
sum+=x;
n++;
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309043844
GPR[SPVAP]-1661309043844
GPR[EPVAP]-1661309045737
GPR[SPVATF]-1661309045737
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309047547
GPR[EPVS]-1661309047547
========
sum+=x;
n++;
if(n>maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309047548
GPR[SPVAP]-1661309047548
GPR[EPVAP]-1661309049410
GPR[SPVATF]-1661309049410
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309051237
GPR[EPVS]-1661309051237
========
if(u>=u){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309051241
GPR[SPVAP]-1661309051241
GPR[EPVAP]-1661309052249
GPR[EPVS]-1661309052249
========
if(c3>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309052251
GPR[SPVAP]-1661309052251
GPR[EPVAP]-1661309053772
GPR[EPVS]-1661309053772
========
if(n>=u){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309053775
GPR[SPVAP]-1661309053775
GPR[EPVAP]-1661309055109
GPR[EPVS]-1661309055109
========
if(n>=c4){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309055112
GPR[SPVAP]-1661309055112
GPR[EPVAP]-1661309056175
GPR[EPVS]-1661309056175
========
if(n>=maxIterations){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309056178
GPR[SPVAP]-1661309056178
GPR[EPVAP]-1661309057205
GPR[EPVS]-1661309057205
========
if(GAMMA<sum||initial>a||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309057206
GPR[SPVAP]-1661309057206
GPR[EPVAP]-1661309058236
GPR[EPVS]-1661309058236
========
if(pos>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309058239
GPR[SPVAP]-1661309058239
GPR[EPVAP]-1661309059242
GPR[EPVS]-1661309059242
========
if(n>=maxIterations){
if(sum>=n){
return lanczos[maxIterations-1];
}
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309059243
GPR[SPVAP]-1661309059243
GPR[EPVAP]-1661309061115
GPR[SPVATF]-1661309061115
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309062952
GPR[EPVS]-1661309062952
========
if(n>=epsilon){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309062955
GPR[SPVAP]-1661309062955
GPR[EPVAP]-1661309064855
GPR[SPVATF]-1661309064855
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309066693
GPR[EPVS]-1661309066693
========
if(max>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309066696
GPR[SPVAP]-1661309066696
GPR[EPVAP]-1661309067748
GPR[EPVS]-1661309067748
========
if(epsilon>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309067751
GPR[SPVAP]-1661309067751
GPR[EPVAP]-1661309069620
GPR[SPVATF]-1661309069620
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309071452
GPR[EPVS]-1661309071452
========
if(n>=q2){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309071453
GPR[SPVAP]-1661309071453
GPR[EPVAP]-1661309072470
GPR[EPVS]-1661309072470
========
if(n>=maxDenominator){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309072471
GPR[SPVAP]-1661309072471
GPR[EPVAP]-1661309073497
GPR[EPVS]-1661309073497
========
if(fu>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309073500
GPR[SPVAP]-1661309073500
GPR[EPVAP]-1661309074520
GPR[EPVS]-1661309074520
========
if(fw>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309074522
GPR[SPVAP]-1661309074522
GPR[EPVAP]-1661309075545
GPR[EPVS]-1661309075545
========
if(n>=w){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309075546
GPR[SPVAP]-1661309075546
GPR[EPVAP]-1661309076575
GPR[EPVS]-1661309076575
========
if(n>=variance){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309076576
GPR[SPVAP]-1661309076576
GPR[EPVAP]-1661309077579
GPR[EPVS]-1661309077579
========
if(yMin>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309077582
GPR[SPVAP]-1661309077582
GPR[EPVAP]-1661309078595
GPR[EPVS]-1661309078595
========
if(n>maxIterations){
throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}

========
MM Copying to MM
GPR[SPVS]-1661309078598
GPR[SPVAP]-1661309078598
GPR[EPVAP]-1661309079612
GPR[EPVS]-1661309079612
GPR[ESUN]-1661309079613
GPR[SSUN]-1661309079613
org.apache.commons.math.distribution.NormalDistributionImpl,162
========
if(p==0){
return Double.POSITIVE_INFINITY;
}

========
MM Copying to MM
GPR[SPVS]-1661309080770
GPR[SPVAP]-1661309080770
GPR[EPVAP]-1661309085594
GPR[SPVATF]-1661309085594
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309087415
GPR[EPVS]-1661309087415
========
if(p==0){
return Integer.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309087416
GPR[SPVAP]-1661309087416
GPR[EPVAP]-1661309089316
GPR[SPVATF]-1661309089316
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309091135
GPR[EPVS]-1661309091135
========
if(p==0){
return Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309091136
GPR[SPVAP]-1661309091136
GPR[EPVAP]-1661309093015
GPR[SPVATF]-1661309093015
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309094851
GPR[EPVS]-1661309094851
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p==0){
return Double.NEGATIVE_INFINITY;
}

========
MM Copying to MM
GPR[SPVS]-1661309094852
GPR[SPVAP]-1661309094852
GPR[EPVAP]-1661309096731
GPR[SPVATF]-1661309096731
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309098550
GPR[EPVS]-1661309098550
========
if(p==1){
return Double.NEGATIVE_INFINITY;
}

========
MM Copying to MM
GPR[SPVS]-1661309099352
GPR[SPVAP]-1661309099352
GPR[EPVAP]-1661309101229
GPR[SPVATF]-1661309101229
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309103111
GPR[EPVS]-1661309103111
========
if(p==1){
return Integer.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309103112
GPR[SPVAP]-1661309103112
GPR[EPVAP]-1661309105022
GPR[SPVATF]-1661309105022
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309106891
GPR[EPVS]-1661309106891
========
if(p==1){
return Double.MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309106892
GPR[SPVAP]-1661309106892
GPR[EPVAP]-1661309108793
GPR[SPVATF]-1661309108793
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309110626
GPR[EPVS]-1661309110626
========
if(p==1){
return Integer.MAX_VALUE;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}

========
MM Copying to MM
GPR[SPVS]-1661309110627
GPR[SPVAP]-1661309110627
GPR[EPVAP]-1661309112487
GPR[SPVATF]-1661309112487
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309114303
GPR[EPVS]-1661309114303
========
if(p==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Integer.MAX_VALUE;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309115135
GPR[SPVAP]-1661309115135
GPR[EPVAP]-1661309117026
GPR[SPVATF]-1661309117026
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309118879
GPR[EPVS]-1661309118879
========
if(p==0){
return Double.MAX_VALUE;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309118880
GPR[SPVAP]-1661309118880
GPR[EPVAP]-1661309120765
GPR[SPVATF]-1661309120765
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309122612
GPR[EPVS]-1661309122612
========
if(alpha==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309122613
GPR[SPVAP]-1661309122613
GPR[EPVAP]-1661309123651
GPR[EPVS]-1661309123651
========
if(r==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309123653
GPR[SPVAP]-1661309123653
GPR[EPVAP]-1661309124670
GPR[EPVS]-1661309124670
========
if(pm==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309124672
GPR[SPVAP]-1661309124672
GPR[EPVAP]-1661309125698
GPR[EPVS]-1661309125698
========
if(dx==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309125699
GPR[SPVAP]-1661309125699
GPR[EPVAP]-1661309126716
GPR[EPVS]-1661309126716
========
if(q==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309126718
GPR[SPVAP]-1661309126718
GPR[EPVAP]-1661309127750
GPR[EPVS]-1661309127750
========
if(a==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309127751
GPR[SPVAP]-1661309127751
GPR[EPVAP]-1661309128795
GPR[EPVS]-1661309128795
========
if(x==0){
return Double.NEGATIVE_INFINITY;
}
if(p==1){
return Double.POSITIVE_INFINITY;
}
return super.inverseCumulativeProbability(p);

========
MM Copying to MM
GPR[SPVS]-1661309128795
GPR[SPVAP]-1661309128795
GPR[EPVAP]-1661309129833
GPR[EPVS]-1661309129833
GPR[ESUN]-1661309129833
GPR[SSUN]-1661309129833
org.apache.commons.math.distribution.NormalDistributionImpl,156
GPR[ESUN]-1661309130164
GPR[SSUN]-1661309130164
org.apache.commons.math.distribution.NormalDistributionImpl,159
GPR[ESUN]-1661309130424
GPR[SSUN]-1661309130424
org.apache.commons.math.distribution.NormalDistributionImpl,72
========
return -mean*Math.log(SQRT2PI);

========
MM Copying to MM
GPR[SPVS]-1661309131379
GPR[SPVAP]-1661309131379
GPR[EPVAP]-1661309136355
GPR[SPVATF]-1661309136355
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309138198
GPR[EPVS]-1661309138198
GPR[ESUN]-1661309138198
GPR[SSUN]-1661309138198
org.apache.commons.math.distribution.NormalDistributionImpl,88
GPR[ESUN]-1661309139242
GPR[SSUN]-1661309139242
org.apache.commons.math.distribution.NormalDistributionImpl,126
GPR[ESUN]-1661309140749
GPR[SSUN]-1661309140749
org.apache.commons.math.special.Erf,51
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<=0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309141903
GPR[SPVAP]-1661309141903
GPR[EPVAP]-1661309146805
GPR[SPVATF]-1661309146805
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309148634
GPR[EPVS]-1661309148634
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(p<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309148635
GPR[SPVAP]-1661309148635
GPR[EPVAP]-1661309149655
GPR[EPVS]-1661309149655
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309149656
GPR[SPVAP]-1661309149656
GPR[EPVAP]-1661309150647
GPR[EPVS]-1661309150647
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(p<0){
ret=-MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309150648
GPR[SPVAP]-1661309150648
GPR[EPVAP]-1661309151641
GPR[EPVS]-1661309151641
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(d<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309151642
GPR[SPVAP]-1661309151642
GPR[EPVAP]-1661309152642
GPR[EPVS]-1661309152642
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0.0||x>1.0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309152643
GPR[SPVAP]-1661309152643
GPR[EPVAP]-1661309154504
GPR[SPVATF]-1661309154504
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309156335
GPR[EPVS]-1661309156335
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return 31*(23*MathUtils.hash(x)+19*MathUtils.hash(ret)+MathUtils.hash(ret));

========
MM Copying to MM
GPR[SPVS]-1661309156337
GPR[SPVAP]-1661309156337
GPR[EPVAP]-1661309157361
GPR[EPVS]-1661309157361
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
if(isNaN()){
return 8;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309157362
GPR[SPVAP]-1661309157362
GPR[EPVAP]-1661309158345
GPR[EPVS]-1661309158345
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0||x>getNumberOfTrials()){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309158346
GPR[SPVAP]-1661309158346
GPR[EPVAP]-1661309159334
GPR[EPVS]-1661309159334
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return 1-x*x*tmp;

========
MM Copying to MM
GPR[SPVS]-1661309159335
GPR[SPVAP]-1661309159335
GPR[EPVAP]-1661309160345
GPR[EPVS]-1661309160345
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return tmp;

========
MM Copying to MM
GPR[SPVS]-1661309160346
GPR[SPVAP]-1661309160346
GPR[EPVAP]-1661309161331
GPR[EPVS]-1661309161331
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(fl<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309161332
GPR[SPVAP]-1661309161332
GPR[EPVAP]-1661309162347
GPR[EPVS]-1661309162347
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return getIntercept(getSlope())+b1*x;

========
MM Copying to MM
GPR[SPVS]-1661309162348
GPR[SPVAP]-1661309162348
GPR[EPVAP]-1661309163342
GPR[EPVS]-1661309163342
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return b1;

========
MM Copying to MM
GPR[SPVS]-1661309163343
GPR[SPVAP]-1661309163343
GPR[EPVAP]-1661309164334
GPR[EPVS]-1661309164334
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return x;

========
MM Copying to MM
GPR[SPVS]-1661309164335
GPR[SPVAP]-1661309164335
GPR[EPVAP]-1661309166183
GPR[SPVATF]-1661309166183
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309168018
GPR[EPVS]-1661309168018
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else {
ret=Gamma.logGamma(a)+Gamma.logGamma(b)-Gamma.logGamma(a+b);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309168019
GPR[SPVAP]-1661309168019
GPR[EPVAP]-1661309169046
GPR[EPVS]-1661309169046
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
ret+=x;
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309169048
GPR[SPVAP]-1661309169048
GPR[EPVAP]-1661309170894
GPR[SPVATF]-1661309170894
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309172712
GPR[EPVS]-1661309172712
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
ret+=ret;
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309172713
GPR[SPVAP]-1661309172713
GPR[EPVAP]-1661309174562
GPR[SPVATF]-1661309174562
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309176380
GPR[EPVS]-1661309176380
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
ret+=x;
ret+=ret;
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309176381
GPR[SPVAP]-1661309176381
GPR[EPVAP]-1661309178281
GPR[SPVATF]-1661309178281
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309180128
GPR[EPVS]-1661309180128
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(u<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309180130
GPR[SPVAP]-1661309180130
GPR[EPVAP]-1661309181135
GPR[EPVS]-1661309181135
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(sign<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309181137
GPR[SPVAP]-1661309181137
GPR[EPVAP]-1661309182131
GPR[EPVS]-1661309182131
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return y;

========
MM Copying to MM
GPR[SPVS]-1661309182132
GPR[SPVAP]-1661309182132
GPR[EPVAP]-1661309183135
GPR[EPVS]-1661309183135
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return ret*Math.cos(ret*x+ret);

========
MM Copying to MM
GPR[SPVS]-1661309183136
GPR[SPVAP]-1661309183136
GPR[EPVAP]-1661309184968
GPR[SPVATF]-1661309184968
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309186806
GPR[EPVS]-1661309186806
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return a;

========
MM Copying to MM
GPR[SPVS]-1661309186808
GPR[SPVAP]-1661309186808
GPR[EPVAP]-1661309187820
GPR[EPVS]-1661309187820
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(fu<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309187822
GPR[SPVAP]-1661309187822
GPR[EPVAP]-1661309188813
GPR[EPVS]-1661309188813
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(fv<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309188814
GPR[SPVAP]-1661309188814
GPR[EPVAP]-1661309189815
GPR[EPVS]-1661309189815
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(b<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309189816
GPR[SPVAP]-1661309189816
GPR[EPVAP]-1661309190802
GPR[EPVS]-1661309190802
========
long ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309190803
GPR[SPVAP]-1661309190803
GPR[EPVAP]-1661309191801
GPR[EPVS]-1661309191801
========
assert maxUlps > 0 && maxUlps < NAN_GAP;

double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309191803
GPR[SPVAP]-1661309191803
GPR[EPVAP]-1661309192803
GPR[EPVS]-1661309192803
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return Math.abs(v2.x-v1.x)+Math.abs(v2.y-v1.y);

========
MM Copying to MM
GPR[SPVS]-1661309192804
GPR[SPVAP]-1661309192804
GPR[EPVAP]-1661309193817
GPR[EPVS]-1661309193817
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return dx;

========
MM Copying to MM
GPR[SPVS]-1661309193818
GPR[SPVAP]-1661309193818
GPR[EPVAP]-1661309194828
GPR[EPVS]-1661309194828
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return dy;

========
MM Copying to MM
GPR[SPVS]-1661309194829
GPR[SPVAP]-1661309194829
GPR[EPVAP]-1661309195858
GPR[EPVS]-1661309195859
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
ret=Math.max(ret*Math.abs(x),ret);
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309195860
GPR[SPVAP]-1661309195860
GPR[EPVAP]-1661309197758
GPR[SPVATF]-1661309197758
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309199571
GPR[EPVS]-1661309199571
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return v2.x-v1.x*dx+v2.y-v1.y*dy+v2.z-v1.z*dz;

========
MM Copying to MM
GPR[SPVS]-1661309199573
GPR[SPVAP]-1661309199573
GPR[EPVAP]-1661309200580
GPR[EPVS]-1661309200580
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return dz;

========
MM Copying to MM
GPR[SPVS]-1661309200581
GPR[SPVAP]-1661309200581
GPR[EPVAP]-1661309201586
GPR[EPVS]-1661309201586
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-ret;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1661309201587
GPR[SPVAP]-1661309201587
GPR[EPVAP]-1661309202572
GPR[EPVS]-1661309202572
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
ret=(MathUtils.sign(ret)*MathUtils.sign(ret))*(x-ret)/Math.sqrt(ret);
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309202573
GPR[SPVAP]-1661309202573
GPR[EPVAP]-1661309203551
GPR[EPVS]-1661309203551
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
x=x-ret;
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309203552
GPR[SPVAP]-1661309203552
GPR[EPVAP]-1661309205427
GPR[SPVATF]-1661309205427
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309207254
GPR[EPVS]-1661309207254
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
x=x-ret;
ret=Math.max(ret*Math.abs(x),ret);
if(x<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309207255
GPR[SPVAP]-1661309207255
GPR[EPVAP]-1661309209090
GPR[SPVATF]-1661309209090
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309210913
GPR[EPVS]-1661309210913
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(c3<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309210914
GPR[SPVAP]-1661309210914
GPR[EPVAP]-1661309211904
GPR[EPVS]-1661309211904
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
ret=-e;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309211905
GPR[SPVAP]-1661309211905
GPR[EPVAP]-1661309212902
GPR[EPVS]-1661309212902
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(x<0){
x=1.0;
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309212903
GPR[SPVAP]-1661309212903
GPR[EPVAP]-1661309214748
GPR[SPVATF]-1661309214748
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309216552
GPR[EPVS]-1661309216552
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(u<0){
x=1.0;
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309216552
GPR[SPVAP]-1661309216552
GPR[EPVAP]-1661309217566
GPR[EPVS]-1661309217566
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(q<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309217567
GPR[SPVAP]-1661309217567
GPR[EPVAP]-1661309218562
GPR[EPVS]-1661309218562
========
double ret=Gamma.regularizedGammaP(0.5,x*x,1.0E-15,10000);
if(a<0){
ret=-ret;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661309218563
GPR[SPVAP]-1661309218563
GPR[EPVAP]-1661309219569
GPR[EPVS]-1661309219569
GPR[ESUN]-1661309219569
GPR[SSUN]-1661309219569
org.apache.commons.math.special.Erf,52
========
if(x<=0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309220820
GPR[SPVAP]-1661309220820
GPR[EPVAP]-1661309225742
GPR[SPVATF]-1661309225742
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309227580
GPR[EPVS]-1661309227580
========
if(d<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309227581
GPR[SPVAP]-1661309227581
GPR[EPVAP]-1661309228599
GPR[EPVS]-1661309228599
========
if(p<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309228600
GPR[SPVAP]-1661309228600
GPR[EPVAP]-1661309229595
GPR[EPVS]-1661309229595
========
if(x<0){
ret=-MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309229596
GPR[SPVAP]-1661309229596
GPR[EPVAP]-1661309230589
GPR[EPVS]-1661309230589
========
if(p<0){
ret=-MAX_VALUE;
}

========
MM Copying to MM
GPR[SPVS]-1661309230590
GPR[SPVAP]-1661309230590
GPR[EPVAP]-1661309231590
GPR[EPVS]-1661309231590
========
if(yMin<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309231591
GPR[SPVAP]-1661309231591
GPR[EPVAP]-1661309232578
GPR[EPVS]-1661309232578
========
if(x<0||x>getNumberOfTrials()){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309232580
GPR[SPVAP]-1661309232580
GPR[EPVAP]-1661309233579
GPR[EPVS]-1661309233579
========
if(a<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309233580
GPR[SPVAP]-1661309233580
GPR[EPVAP]-1661309234599
GPR[EPVS]-1661309234599
========
if(x<0){
ret=-fx;
}

========
MM Copying to MM
GPR[SPVS]-1661309234600
GPR[SPVAP]-1661309234600
GPR[EPVAP]-1661309235602
GPR[EPVS]-1661309235602
========
if(u<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309235603
GPR[SPVAP]-1661309235603
GPR[EPVAP]-1661309236602
GPR[EPVS]-1661309236602
========
if(fu<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309236603
GPR[SPVAP]-1661309236603
GPR[EPVAP]-1661309237592
GPR[EPVS]-1661309237592
========
if(fv<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309237593
GPR[SPVAP]-1661309237593
GPR[EPVAP]-1661309238581
GPR[EPVS]-1661309238581
========
if(fl<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309238582
GPR[SPVAP]-1661309238582
GPR[EPVAP]-1661309239590
GPR[EPVS]-1661309239590
========
if(c4<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309239592
GPR[SPVAP]-1661309239592
GPR[EPVAP]-1661309240585
GPR[EPVS]-1661309240585
========
if(x<0){
ret=-delta;
}

========
MM Copying to MM
GPR[SPVS]-1661309240586
GPR[SPVAP]-1661309240586
GPR[EPVAP]-1661309241595
GPR[EPVS]-1661309241595
========
if(threshold<0){
ret=-ret;
}

========
MM Copying to MM
GPR[SPVS]-1661309241596
GPR[SPVAP]-1661309241596
GPR[EPVAP]-1661309242586
GPR[EPVS]-1661309242586
GPR[ESUN]-1661309242586
GPR[SSUN]-1661309242586
org.apache.commons.math.special.Erf,55
GPR[ESUN]-1661309242914
GPR[SSUN]-1661309242914
org.apache.commons.math.special.Gamma,162
========
{
ret=1.0;
}

========
MM Copying to MM
GPR[SPVS]-1661309243889
GPR[SPVAP]-1661309243889
GPR[EPVAP]-1661309245044
GPR[EPVS]-1661309245044
========
{
return ret;
ret=0.0;
}

========
MM Copying to MM
GPR[SPVS]-1661309245045
GPR[SPVAP]-1661309245045
GPR[EPVAP]-1661309246224
GPR[EPVS]-1661309246224
GPR[ESUN]-1661309246224
GPR[SSUN]-1661309246224
org.apache.commons.math.distribution.NormalDistributionImpl,54
========
super();
setMean(mean);
setMean(sd);

========
MM Copying to MM
GPR[SPVS]-1661309247198
GPR[SPVAP]-1661309247198
GPR[EPVAP]-1661309252147
GPR[SPVATF]-1661309252147
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309253951
GPR[EPVS]-1661309253951
GPR[ESUN]-1661309253951
GPR[SSUN]-1661309253951
org.apache.commons.math.distribution.NormalDistributionImpl,43
Find no block!
GPR[SSUN]-1661309254285
org.apache.commons.math.distribution.NormalDistributionImpl,46
Find no block!
GPR[SSUN]-1661309254508
org.apache.commons.math.distribution.NormalDistributionImpl,55
GPR[ESUN]-1661309254691
GPR[SSUN]-1661309254691
org.apache.commons.math.distribution.NormalDistributionImpl,56
GPR[ESUN]-1661309254886
GPR[SSUN]-1661309254886
org.apache.commons.math.distribution.NormalDistributionImpl,57
Find no block!
GPR[SSUN]-1661309255076
org.apache.commons.math.distribution.NormalDistributionImpl,40
Find no block!
GPR[SSUN]-1661309255305
org.apache.commons.math.distribution.NormalDistributionImpl,80
========
this.mean=sum;

========
MM Copying to MM
GPR[SPVS]-1661309256299
GPR[SPVAP]-1661309256299
GPR[EPVAP]-1661309258206
GPR[EPVS]-1661309258206
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",mean);
}
this.mean=mean;

========
MM Copying to MM
GPR[SPVS]-1661309258207
GPR[SPVAP]-1661309258207
GPR[EPVAP]-1661309262871
GPR[SPVATF]-1661309262871
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309264717
GPR[EPVS]-1661309264717
========
this.mean=p;

========
MM Copying to MM
GPR[SPVS]-1661309264718
GPR[SPVAP]-1661309264718
GPR[EPVAP]-1661309265767
GPR[EPVS]-1661309265767
========
if(SQRT2PI<=0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",p);
}
this.mean=mean;

========
MM Copying to MM
GPR[SPVS]-1661309265769
GPR[SPVAP]-1661309265769
GPR[EPVAP]-1661309266794
GPR[EPVS]-1661309266794
========
this.mean=delta;

========
MM Copying to MM
GPR[SPVS]-1661309266796
GPR[SPVAP]-1661309266796
GPR[EPVAP]-1661309267816
GPR[EPVS]-1661309267816
========
this.mean=mu2delta;

========
MM Copying to MM
GPR[SPVS]-1661309267817
GPR[SPVAP]-1661309267817
GPR[EPVAP]-1661309268852
GPR[EPVS]-1661309268852
========
this.mean=y;

========
MM Copying to MM
GPR[SPVS]-1661309268854
GPR[SPVAP]-1661309268854
GPR[EPVAP]-1661309269878
GPR[EPVS]-1661309269879
========
this.mean=e;

========
MM Copying to MM
GPR[SPVS]-1661309269879
GPR[SPVAP]-1661309269879
GPR[EPVAP]-1661309270910
GPR[EPVS]-1661309270910
========
this.mean=x;

========
MM Copying to MM
GPR[SPVS]-1661309270911
GPR[SPVAP]-1661309270911
GPR[EPVAP]-1661309271952
GPR[EPVS]-1661309271952
========
this.mean=logMeanMu;

========
MM Copying to MM
GPR[SPVS]-1661309271953
GPR[SPVAP]-1661309271953
GPR[EPVAP]-1661309272979
GPR[EPVS]-1661309272979
GPR[ESUN]-1661309272979
GPR[SSUN]-1661309272979
org.apache.commons.math.distribution.NormalDistributionImpl,81
Find no block!
GPR[SSUN]-1661309273270
org.apache.commons.math.distribution.NormalDistributionImpl,97
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309274399
GPR[SPVAP]-1661309274399
GPR[EPVAP]-1661309279349
GPR[SPVATF]-1661309279349
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309281175
GPR[EPVS]-1661309281175
========
if(r<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309281177
GPR[SPVAP]-1661309281177
GPR[EPVAP]-1661309282233
GPR[EPVS]-1661309282233
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309282234
GPR[SPVAP]-1661309282234
GPR[EPVAP]-1661309284135
GPR[SPVATF]-1661309284135
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309285994
GPR[EPVS]-1661309285994
========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309285994
GPR[SPVAP]-1661309285994
GPR[EPVAP]-1661309287890
GPR[SPVATF]-1661309287890
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309289744
GPR[EPVS]-1661309289744
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309289745
GPR[SPVAP]-1661309289745
GPR[EPVAP]-1661309290766
GPR[EPVS]-1661309290766
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309290767
GPR[SPVAP]-1661309290767
GPR[EPVAP]-1661309292671
GPR[SPVATF]-1661309292671
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309294525
GPR[EPVS]-1661309294525
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309294526
GPR[SPVAP]-1661309294526
GPR[EPVAP]-1661309295551
GPR[EPVS]-1661309295551
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309295552
GPR[SPVAP]-1661309295552
GPR[EPVAP]-1661309297416
GPR[SPVATF]-1661309297416
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309299227
GPR[EPVS]-1661309299227
========
if(beta<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309299228
GPR[SPVAP]-1661309299228
GPR[EPVAP]-1661309300249
GPR[EPVS]-1661309300249
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309300250
GPR[SPVAP]-1661309300250
GPR[EPVAP]-1661309302155
GPR[SPVATF]-1661309302155
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309303970
GPR[EPVS]-1661309303970
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309303971
GPR[SPVAP]-1661309303971
GPR[EPVAP]-1661309305901
GPR[SPVATF]-1661309305901
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309307765
GPR[EPVS]-1661309307765
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309307766
GPR[SPVAP]-1661309307766
GPR[EPVAP]-1661309308803
GPR[EPVS]-1661309308803
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309308804
GPR[SPVAP]-1661309308804
GPR[EPVAP]-1661309310723
GPR[SPVATF]-1661309310723
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309312528
GPR[EPVS]-1661309312528
========
if(beta<=0.0){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309312529
GPR[SPVAP]-1661309312529
GPR[EPVAP]-1661309313563
GPR[EPVS]-1661309313563
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309313565
GPR[SPVAP]-1661309313565
GPR[EPVAP]-1661309315444
GPR[SPVATF]-1661309315444
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309317284
GPR[EPVS]-1661309317284
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309317285
GPR[SPVAP]-1661309317285
GPR[EPVAP]-1661309319176
GPR[SPVATF]-1661309319176
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309320993
GPR[EPVS]-1661309320993
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309320993
GPR[SPVAP]-1661309320993
GPR[EPVAP]-1661309322871
GPR[SPVATF]-1661309322871
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309324676
GPR[EPVS]-1661309324676
========
if(s<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309324677
GPR[SPVAP]-1661309324677
GPR[EPVAP]-1661309325727
GPR[EPVS]-1661309325727
========
if(degreesOfFreedom<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309325728
GPR[SPVAP]-1661309325728
GPR[EPVAP]-1661309326761
GPR[EPVS]-1661309326761
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309326762
GPR[SPVAP]-1661309326762
GPR[EPVAP]-1661309328645
GPR[SPVATF]-1661309328645
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309330492
GPR[EPVS]-1661309330492
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309330493
GPR[SPVAP]-1661309330493
GPR[EPVAP]-1661309332372
GPR[SPVATF]-1661309332372
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309334195
GPR[EPVS]-1661309334195
========
if(s<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309334196
GPR[SPVAP]-1661309334196
GPR[EPVAP]-1661309335233
GPR[EPVS]-1661309335233
========
if(sd<=1.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309335234
GPR[SPVAP]-1661309335234
GPR[EPVAP]-1661309337109
GPR[SPVATF]-1661309337109
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309338931
GPR[EPVS]-1661309338931
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309338933
GPR[SPVAP]-1661309338933
GPR[EPVAP]-1661309340834
GPR[SPVATF]-1661309340834
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309342659
GPR[EPVS]-1661309342659
========
if(sigma<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309342660
GPR[SPVAP]-1661309342660
GPR[EPVAP]-1661309343714
GPR[EPVS]-1661309343714
========
if(mean<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309343716
GPR[SPVAP]-1661309343716
GPR[EPVAP]-1661309345587
GPR[SPVATF]-1661309345587
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309347405
GPR[EPVS]-1661309347405
========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309347406
GPR[SPVAP]-1661309347406
GPR[EPVAP]-1661309349278
GPR[SPVATF]-1661309349278
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309351098
GPR[EPVS]-1661309351098
========
if(mean<0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309351099
GPR[SPVAP]-1661309351099
GPR[EPVAP]-1661309353002
GPR[SPVATF]-1661309353002
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309354836
GPR[EPVS]-1661309354836
========
if(knots.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309354837
GPR[SPVAP]-1661309354837
GPR[EPVAP]-1661309355857
GPR[EPVS]-1661309355857
========
if(length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309355857
GPR[SPVAP]-1661309355857
GPR[EPVAP]-1661309356875
GPR[EPVS]-1661309356875
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309356876
GPR[SPVAP]-1661309356876
GPR[EPVAP]-1661309357914
GPR[EPVS]-1661309357914
========
if(x.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309357915
GPR[SPVAP]-1661309357915
GPR[EPVAP]-1661309358939
GPR[EPVS]-1661309358939
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309358940
GPR[SPVAP]-1661309358940
GPR[EPVAP]-1661309359975
GPR[EPVS]-1661309359975
========
if(length<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309359976
GPR[SPVAP]-1661309359976
GPR[EPVAP]-1661309361005
GPR[EPVS]-1661309361005
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309361006
GPR[SPVAP]-1661309361006
GPR[EPVAP]-1661309362027
GPR[EPVS]-1661309362028
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}

========
MM Copying to MM
GPR[SPVS]-1661309362029
GPR[SPVAP]-1661309362029
GPR[EPVAP]-1661309363919
GPR[SPVATF]-1661309363919
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309365759
GPR[EPVS]-1661309365759
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1661309365760
GPR[SPVAP]-1661309365760
GPR[EPVAP]-1661309367640
GPR[SPVATF]-1661309367640
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309369489
GPR[EPVS]-1661309369489
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}

========
MM Copying to MM
GPR[SPVS]-1661309369490
GPR[SPVAP]-1661309369490
GPR[EPVAP]-1661309371362
GPR[SPVATF]-1661309371362
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309373195
GPR[EPVS]-1661309373195
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}

========
MM Copying to MM
GPR[SPVS]-1661309373197
GPR[SPVAP]-1661309373197
GPR[EPVAP]-1661309375098
GPR[SPVATF]-1661309375098
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309376927
GPR[EPVS]-1661309376927
========
if(normProduct<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309376928
GPR[SPVAP]-1661309376928
GPR[EPVAP]-1661309377955
GPR[EPVS]-1661309377955
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}

========
MM Copying to MM
GPR[SPVS]-1661309377956
GPR[SPVAP]-1661309377956
GPR[EPVAP]-1661309379901
GPR[SPVATF]-1661309379901
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309381741
GPR[EPVS]-1661309381741
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1661309381742
GPR[SPVAP]-1661309381742
GPR[EPVAP]-1661309383619
GPR[SPVATF]-1661309383619
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309385490
GPR[EPVS]-1661309385490
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1661309385491
GPR[SPVAP]-1661309385491
GPR[EPVAP]-1661309387363
GPR[SPVATF]-1661309387363
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309389198
GPR[EPVS]-1661309389198
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1661309389199
GPR[SPVAP]-1661309389199
GPR[EPVAP]-1661309391086
GPR[SPVATF]-1661309391086
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309392906
GPR[EPVS]-1661309392906
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1661309392907
GPR[SPVAP]-1661309392907
GPR[EPVAP]-1661309394774
GPR[SPVATF]-1661309394774
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309396593
GPR[EPVS]-1661309396593
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309396595
GPR[SPVAP]-1661309396595
GPR[EPVAP]-1661309398509
GPR[SPVATF]-1661309398509
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309400331
GPR[EPVS]-1661309400331
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309400333
GPR[SPVAP]-1661309400333
GPR[EPVAP]-1661309401371
GPR[EPVS]-1661309401371
========
if(expected.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309401372
GPR[SPVAP]-1661309401372
GPR[EPVAP]-1661309402399
GPR[EPVS]-1661309402399
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309402400
GPR[SPVAP]-1661309402400
GPR[EPVAP]-1661309403423
GPR[EPVS]-1661309403423
========
if(observed1.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309403424
GPR[SPVAP]-1661309403424
GPR[EPVAP]-1661309404448
GPR[EPVS]-1661309404448
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309404449
GPR[SPVAP]-1661309404449
GPR[EPVAP]-1661309405479
GPR[EPVS]-1661309405479
========
if(in.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309405480
GPR[SPVAP]-1661309405480
GPR[EPVAP]-1661309406507
GPR[EPVS]-1661309406507
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309406508
GPR[SPVAP]-1661309406508
GPR[EPVAP]-1661309407540
GPR[EPVS]-1661309407540
========
if(array.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309407541
GPR[SPVAP]-1661309407541
GPR[EPVAP]-1661309408576
GPR[EPVS]-1661309408576
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309408577
GPR[SPVAP]-1661309408577
GPR[EPVAP]-1661309409606
GPR[EPVS]-1661309409607
========
if(u1u1<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309409608
GPR[SPVAP]-1661309409608
GPR[EPVAP]-1661309410631
GPR[EPVS]-1661309410631
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309410632
GPR[SPVAP]-1661309410632
GPR[EPVAP]-1661309412532
GPR[SPVATF]-1661309412532
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309414374
GPR[EPVS]-1661309414374
========
if(p<=1.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309414375
GPR[SPVAP]-1661309414375
GPR[EPVAP]-1661309415398
GPR[EPVS]-1661309415398
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309415399
GPR[SPVAP]-1661309415399
GPR[EPVAP]-1661309416432
GPR[EPVS]-1661309416432
========
if(sd<=1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309416433
GPR[SPVAP]-1661309416433
GPR[EPVAP]-1661309418314
GPR[SPVATF]-1661309418314
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309420132
GPR[EPVS]-1661309420132
========
if(p<=1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309420133
GPR[SPVAP]-1661309420133
GPR[EPVAP]-1661309421157
GPR[EPVS]-1661309421157
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309421158
GPR[SPVAP]-1661309421158
GPR[EPVAP]-1661309423037
GPR[SPVATF]-1661309423037
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309424883
GPR[EPVS]-1661309424883
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1661309424885
GPR[SPVAP]-1661309424885
GPR[EPVAP]-1661309425903
GPR[EPVS]-1661309425903
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1661309425905
GPR[SPVAP]-1661309425905
GPR[EPVAP]-1661309427804
GPR[SPVATF]-1661309427804
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309429627
GPR[EPVS]-1661309429627
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1661309429628
GPR[SPVAP]-1661309429628
GPR[EPVAP]-1661309430652
GPR[EPVS]-1661309430652
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1661309430653
GPR[SPVAP]-1661309430653
GPR[EPVAP]-1661309432550
GPR[SPVATF]-1661309432550
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309434386
GPR[EPVS]-1661309434386
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1661309434387
GPR[SPVAP]-1661309434387
GPR[EPVAP]-1661309435427
GPR[EPVS]-1661309435427
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309435429
GPR[SPVAP]-1661309435429
GPR[EPVAP]-1661309436443
GPR[EPVS]-1661309436443
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309436444
GPR[SPVAP]-1661309436444
GPR[EPVAP]-1661309438310
GPR[SPVATF]-1661309438310
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309440165
GPR[EPVS]-1661309440165
========
if(x0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309440166
GPR[SPVAP]-1661309440166
GPR[EPVAP]-1661309441205
GPR[EPVS]-1661309441205
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309441206
GPR[SPVAP]-1661309441206
GPR[EPVAP]-1661309443101
GPR[SPVATF]-1661309443101
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309444923
GPR[EPVS]-1661309444923
========
if(y0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309444924
GPR[SPVAP]-1661309444924
GPR[EPVAP]-1661309445960
GPR[EPVS]-1661309445960
========
if(y1<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309445961
GPR[SPVAP]-1661309445961
GPR[EPVAP]-1661309446988
GPR[EPVS]-1661309446988
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",SQRT2PI,SQRT2PI,sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309446989
GPR[SPVAP]-1661309446990
GPR[EPVAP]-1661309448848
GPR[SPVATF]-1661309448848
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309450674
GPR[EPVS]-1661309450674
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1661309450676
GPR[SPVAP]-1661309450676
GPR[EPVAP]-1661309452563
GPR[SPVATF]-1661309452563
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309454390
GPR[EPVS]-1661309454390
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}

========
MM Copying to MM
GPR[SPVS]-1661309454391
GPR[SPVAP]-1661309454391
GPR[EPVAP]-1661309456279
GPR[SPVATF]-1661309456279
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309458082
GPR[EPVS]-1661309458082
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}

========
MM Copying to MM
GPR[SPVS]-1661309458084
GPR[SPVAP]-1661309458084
GPR[EPVAP]-1661309459976
GPR[SPVATF]-1661309459976
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309461794
GPR[EPVS]-1661309461794
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}

========
MM Copying to MM
GPR[SPVS]-1661309461795
GPR[SPVAP]-1661309461795
GPR[EPVAP]-1661309463697
GPR[SPVATF]-1661309463697
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309465547
GPR[EPVS]-1661309465547
========
if(d.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309465548
GPR[SPVAP]-1661309465548
GPR[EPVAP]-1661309466579
GPR[EPVS]-1661309466579
========
if(initial<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309466580
GPR[SPVAP]-1661309466580
GPR[EPVAP]-1661309467610
GPR[EPVS]-1661309467610
========
if(lowerBound<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309467611
GPR[SPVAP]-1661309467611
GPR[EPVAP]-1661309468641
GPR[EPVS]-1661309468641
========
if(upperBound<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309468642
GPR[SPVAP]-1661309468642
GPR[EPVAP]-1661309469658
GPR[EPVS]-1661309469658
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",sd,SQRT2PI,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309469659
GPR[SPVAP]-1661309469659
GPR[EPVAP]-1661309471544
GPR[SPVATF]-1661309471544
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309473368
GPR[EPVS]-1661309473368
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1661309473370
GPR[SPVAP]-1661309473370
GPR[EPVAP]-1661309474395
GPR[EPVS]-1661309474395
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(SQRT2PI));
}

========
MM Copying to MM
GPR[SPVS]-1661309474396
GPR[SPVAP]-1661309474396
GPR[EPVAP]-1661309476267
GPR[SPVATF]-1661309476267
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309478107
GPR[EPVS]-1661309478107
========
if(degreesOfFreedom<=0.0){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309478109
GPR[SPVAP]-1661309478109
GPR[EPVAP]-1661309479125
GPR[EPVS]-1661309479125
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",serialVersionUID,serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661309479127
GPR[SPVAP]-1661309479127
GPR[EPVAP]-1661309481047
GPR[SPVATF]-1661309481047
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309482860
GPR[EPVS]-1661309482860
========
if(length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1661309482861
GPR[SPVAP]-1661309482861
GPR[EPVAP]-1661309483887
GPR[EPVS]-1661309483887
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309483890
GPR[SPVAP]-1661309483890
GPR[EPVAP]-1661309484912
GPR[EPVS]-1661309484912
========
if(x0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309484913
GPR[SPVAP]-1661309484913
GPR[EPVAP]-1661309485939
GPR[EPVS]-1661309485939
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",serialVersionUID,serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661309485940
GPR[SPVAP]-1661309485940
GPR[EPVAP]-1661309487832
GPR[SPVATF]-1661309487832
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309489659
GPR[EPVS]-1661309489659
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309489660
GPR[SPVAP]-1661309489660
GPR[EPVAP]-1661309491532
GPR[SPVATF]-1661309491532
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309493386
GPR[EPVS]-1661309493386
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",sd,SQRT2PI);
}

========
MM Copying to MM
GPR[SPVS]-1661309493387
GPR[SPVAP]-1661309493387
GPR[EPVAP]-1661309494411
GPR[EPVS]-1661309494411
========
if(d.length<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}

========
MM Copying to MM
GPR[SPVS]-1661309494413
GPR[SPVAP]-1661309494413
GPR[EPVAP]-1661309495463
GPR[EPVS]-1661309495463
GPR[ESUN]-1661309495463
GPR[SSUN]-1661309495463
org.apache.commons.math.distribution.NormalDistributionImpl,102
UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309496734
GPR[SPVAP]-1661309496734
GPR[EPVAP]-1661309501637
GPR[SPVATF]-1661309501637
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309503496
GPR[EPVS]-1661309503496
========
if(expected.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309503497
GPR[SPVAP]-1661309503497
GPR[EPVAP]-1661309504540
GPR[EPVS]-1661309504540
========
if(length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309504542
GPR[SPVAP]-1661309504542
GPR[EPVAP]-1661309505589
GPR[EPVS]-1661309505589
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309505590
GPR[SPVAP]-1661309505590
GPR[EPVAP]-1661309506605
GPR[EPVS]-1661309506605
========
if(observed1.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309506606
GPR[SPVAP]-1661309506606
GPR[EPVAP]-1661309507627
GPR[EPVS]-1661309507627
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309507628
GPR[SPVAP]-1661309507628
GPR[EPVAP]-1661309508651
GPR[EPVS]-1661309508651
========
if(length<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309508652
GPR[SPVAP]-1661309508652
GPR[EPVAP]-1661309509683
GPR[EPVS]-1661309509683
========
if(in.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309509684
GPR[SPVAP]-1661309509684
GPR[EPVAP]-1661309510722
GPR[EPVS]-1661309510722
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309510723
GPR[SPVAP]-1661309510723
GPR[EPVAP]-1661309511751
GPR[EPVS]-1661309511751
========
if(array.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309511752
GPR[SPVAP]-1661309511752
GPR[EPVAP]-1661309512780
GPR[EPVS]-1661309512780
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309512781
GPR[SPVAP]-1661309512781
GPR[EPVAP]-1661309513807
GPR[EPVS]-1661309513807
========
if(knots.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309513808
GPR[SPVAP]-1661309513808
GPR[EPVAP]-1661309514847
GPR[EPVS]-1661309514847
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309514848
GPR[SPVAP]-1661309514848
GPR[EPVAP]-1661309515871
GPR[EPVS]-1661309515871
========
if(x.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309515872
GPR[SPVAP]-1661309515872
GPR[EPVAP]-1661309516899
GPR[EPVS]-1661309516899
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309516900
GPR[SPVAP]-1661309516900
GPR[EPVAP]-1661309517923
GPR[EPVS]-1661309517923
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",0,dimensionSize.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309517924
GPR[SPVAP]-1661309517924
GPR[EPVAP]-1661309518948
GPR[EPVS]-1661309518948
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309518949
GPR[SPVAP]-1661309518949
GPR[EPVAP]-1661309519972
GPR[EPVS]-1661309519972
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309519973
GPR[SPVAP]-1661309519973
GPR[EPVAP]-1661309521865
GPR[SPVATF]-1661309521865
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309523719
GPR[EPVS]-1661309523719
========
if(x0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309523720
GPR[SPVAP]-1661309523720
GPR[EPVAP]-1661309524752
GPR[EPVS]-1661309524752
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309524753
GPR[SPVAP]-1661309524753
GPR[EPVAP]-1661309526660
GPR[SPVATF]-1661309526660
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309528498
GPR[EPVS]-1661309528498
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309528500
GPR[SPVAP]-1661309528500
GPR[EPVAP]-1661309530375
GPR[SPVATF]-1661309530375
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309532199
GPR[EPVS]-1661309532199
========
if(r<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309532201
GPR[SPVAP]-1661309532201
GPR[EPVAP]-1661309533222
GPR[EPVS]-1661309533222
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309533223
GPR[SPVAP]-1661309533223
GPR[EPVAP]-1661309535119
GPR[SPVATF]-1661309535119
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309536944
GPR[EPVS]-1661309536944
========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309536945
GPR[SPVAP]-1661309536945
GPR[EPVAP]-1661309538898
GPR[SPVATF]-1661309538898
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309540731
GPR[EPVS]-1661309540731
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309540732
GPR[SPVAP]-1661309540732
GPR[EPVAP]-1661309541777
GPR[EPVS]-1661309541777
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309541778
GPR[SPVAP]-1661309541778
GPR[EPVAP]-1661309543681
GPR[SPVATF]-1661309543681
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309545519
GPR[EPVS]-1661309545519
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309545521
GPR[SPVAP]-1661309545521
GPR[EPVAP]-1661309546552
GPR[EPVS]-1661309546552
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309546553
GPR[SPVAP]-1661309546553
GPR[EPVAP]-1661309548452
GPR[SPVATF]-1661309548452
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309550246
GPR[EPVS]-1661309550246
========
if(beta<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309550247
GPR[SPVAP]-1661309550247
GPR[EPVAP]-1661309551278
GPR[EPVS]-1661309551278
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309551279
GPR[SPVAP]-1661309551279
GPR[EPVAP]-1661309553187
GPR[SPVATF]-1661309553187
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309555002
GPR[EPVS]-1661309555002
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309555003
GPR[SPVAP]-1661309555003
GPR[EPVAP]-1661309556891
GPR[SPVATF]-1661309556891
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309558714
GPR[EPVS]-1661309558714
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309558715
GPR[SPVAP]-1661309558715
GPR[EPVAP]-1661309559752
GPR[EPVS]-1661309559752
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309559752
GPR[SPVAP]-1661309559752
GPR[EPVAP]-1661309561644
GPR[SPVATF]-1661309561644
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309563458
GPR[EPVS]-1661309563458
========
if(beta<=0.0){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309563459
GPR[SPVAP]-1661309563459
GPR[EPVAP]-1661309564478
GPR[EPVS]-1661309564478
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309564480
GPR[SPVAP]-1661309564480
GPR[EPVAP]-1661309566362
GPR[SPVATF]-1661309566362
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309568168
GPR[EPVS]-1661309568168
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309568169
GPR[SPVAP]-1661309568169
GPR[EPVAP]-1661309570055
GPR[SPVATF]-1661309570055
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309571851
GPR[EPVS]-1661309571851
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309571852
GPR[SPVAP]-1661309571852
GPR[EPVAP]-1661309573745
GPR[SPVATF]-1661309573745
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309575565
GPR[EPVS]-1661309575565
========
if(s<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309575567
GPR[SPVAP]-1661309575567
GPR[EPVAP]-1661309576595
GPR[EPVS]-1661309576595
========
if(degreesOfFreedom<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309576597
GPR[SPVAP]-1661309576597
GPR[EPVAP]-1661309577636
GPR[EPVS]-1661309577636
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309577637
GPR[SPVAP]-1661309577637
GPR[EPVAP]-1661309579509
GPR[SPVATF]-1661309579509
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309581332
GPR[EPVS]-1661309581332
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309581333
GPR[SPVAP]-1661309581334
GPR[EPVAP]-1661309584134
GPR[SPVATF]-1661309584134
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309585972
GPR[EPVS]-1661309585972
========
if(s<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309585973
GPR[SPVAP]-1661309585973
GPR[EPVAP]-1661309587826
GPR[EPVS]-1661309587826
========
if(sd<=1.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309587832
GPR[SPVAP]-1661309587832
GPR[EPVAP]-1661309589804
GPR[SPVATF]-1661309589804
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309591624
GPR[EPVS]-1661309591624
========
if(mean<=0.0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309591625
GPR[SPVAP]-1661309591625
GPR[EPVAP]-1661309593498
GPR[SPVATF]-1661309593498
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309595335
GPR[EPVS]-1661309595335
========
if(sigma<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309595336
GPR[SPVAP]-1661309595336
GPR[EPVAP]-1661309596393
GPR[EPVS]-1661309596393
========
if(mean<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309596394
GPR[SPVAP]-1661309596394
GPR[EPVAP]-1661309598303
GPR[SPVATF]-1661309598303
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309600107
GPR[EPVS]-1661309600107
========
if(sd<0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309600108
GPR[SPVAP]-1661309600108
GPR[EPVAP]-1661309601976
GPR[SPVATF]-1661309601976
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309603772
GPR[EPVS]-1661309603772
========
if(mean<0.0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309603773
GPR[SPVAP]-1661309603773
GPR[EPVAP]-1661309605675
GPR[SPVATF]-1661309605675
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309607479
GPR[EPVS]-1661309607479
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309607480
GPR[SPVAP]-1661309607480
GPR[EPVAP]-1661309609391
GPR[SPVATF]-1661309609391
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309611219
GPR[EPVS]-1661309611219
========
if(y0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309611221
GPR[SPVAP]-1661309611221
GPR[EPVAP]-1661309612237
GPR[EPVS]-1661309612237
========
if(y1<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309612238
GPR[SPVAP]-1661309612238
GPR[EPVAP]-1661309613276
GPR[EPVS]-1661309613276
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",SQRT2PI,SQRT2PI,sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309613277
GPR[SPVAP]-1661309613277
GPR[EPVAP]-1661309615174
GPR[SPVATF]-1661309615174
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309617001
GPR[EPVS]-1661309617001
========
if(d.length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309617003
GPR[SPVAP]-1661309617003
GPR[EPVAP]-1661309618031
GPR[EPVS]-1661309618031
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309618032
GPR[SPVAP]-1661309618032
GPR[EPVAP]-1661309619903
GPR[SPVATF]-1661309619903
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309621723
GPR[EPVS]-1661309621723
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309621724
GPR[SPVAP]-1661309621724
GPR[EPVAP]-1661309622753
GPR[EPVS]-1661309622753
========
if(initial<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309622755
GPR[SPVAP]-1661309622755
GPR[EPVAP]-1661309623781
GPR[EPVS]-1661309623781
========
if(lowerBound<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309623782
GPR[SPVAP]-1661309623782
GPR[EPVAP]-1661309624790
GPR[EPVS]-1661309624790
========
if(upperBound<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309624791
GPR[SPVAP]-1661309624791
GPR[EPVAP]-1661309625826
GPR[EPVS]-1661309625826
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",sd,SQRT2PI,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309625827
GPR[SPVAP]-1661309625827
GPR[EPVAP]-1661309627754
GPR[SPVATF]-1661309627754
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309629559
GPR[EPVS]-1661309629559
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309629561
GPR[SPVAP]-1661309629561
GPR[EPVAP]-1661309631459
GPR[SPVATF]-1661309631459
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309633267
GPR[EPVS]-1661309633267
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309633268
GPR[SPVAP]-1661309633268
GPR[EPVAP]-1661309635167
GPR[SPVATF]-1661309635167
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309637019
GPR[EPVS]-1661309637019
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309637020
GPR[SPVAP]-1661309637020
GPR[EPVAP]-1661309638885
GPR[SPVATF]-1661309638885
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309640685
GPR[EPVS]-1661309640685
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309640686
GPR[SPVAP]-1661309640686
GPR[EPVAP]-1661309642575
GPR[SPVATF]-1661309642575
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309644412
GPR[EPVS]-1661309644412
========
if(normProduct<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309644413
GPR[SPVAP]-1661309644413
GPR[EPVAP]-1661309645434
GPR[EPVS]-1661309645434
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309645435
GPR[SPVAP]-1661309645435
GPR[EPVAP]-1661309647311
GPR[SPVATF]-1661309647311
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309649124
GPR[EPVS]-1661309649124
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309649125
GPR[SPVAP]-1661309649125
GPR[EPVAP]-1661309650991
GPR[SPVATF]-1661309650991
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309652835
GPR[EPVS]-1661309652835
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309652836
GPR[SPVAP]-1661309652836
GPR[EPVAP]-1661309654735
GPR[SPVATF]-1661309654735
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309656576
GPR[EPVS]-1661309656576
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309656577
GPR[SPVAP]-1661309656577
GPR[EPVAP]-1661309658468
GPR[SPVATF]-1661309658468
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309660305
GPR[EPVS]-1661309660305
========
if(u1u1<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309660307
GPR[SPVAP]-1661309660307
GPR[EPVAP]-1661309661324
GPR[EPVS]-1661309661324
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309661325
GPR[SPVAP]-1661309661325
GPR[EPVAP]-1661309663201
GPR[SPVATF]-1661309663201
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309665040
GPR[EPVS]-1661309665040
========
if(p<=1.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309665041
GPR[SPVAP]-1661309665041
GPR[EPVAP]-1661309666070
GPR[EPVS]-1661309666070
========
if(p<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309666071
GPR[SPVAP]-1661309666071
GPR[EPVAP]-1661309667118
GPR[EPVS]-1661309667118
========
if(sd<=1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309667119
GPR[SPVAP]-1661309667119
GPR[EPVAP]-1661309668986
GPR[SPVATF]-1661309668986
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309670802
GPR[EPVS]-1661309670802
========
if(p<=1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309670803
GPR[SPVAP]-1661309670803
GPR[EPVAP]-1661309671827
GPR[EPVS]-1661309671827
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309671828
GPR[SPVAP]-1661309671828
GPR[EPVAP]-1661309673698
GPR[SPVATF]-1661309673698
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309675519
GPR[EPVS]-1661309675519
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,1.0);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309675520
GPR[SPVAP]-1661309675520
GPR[EPVAP]-1661309676562
GPR[EPVS]-1661309676562
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0,0.5);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309676563
GPR[SPVAP]-1661309676563
GPR[EPVAP]-1661309678448
GPR[SPVATF]-1661309678448
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309680270
GPR[EPVS]-1661309680270
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0,0.5);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309680271
GPR[SPVAP]-1661309680271
GPR[EPVAP]-1661309681295
GPR[EPVS]-1661309681295
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,0.5);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309681296
GPR[SPVAP]-1661309681296
GPR[EPVAP]-1661309683181
GPR[SPVATF]-1661309683181
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309685036
GPR[EPVS]-1661309685036
========
if(alpha<=0.0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",sd,0.0,0.5);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309685037
GPR[SPVAP]-1661309685037
GPR[EPVAP]-1661309686067
GPR[EPVS]-1661309686067
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309686068
GPR[SPVAP]-1661309686068
GPR[EPVAP]-1661309687930
GPR[SPVATF]-1661309687930
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309689758
GPR[EPVS]-1661309689758
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309689759
GPR[SPVAP]-1661309689759
GPR[EPVAP]-1661309691643
GPR[SPVATF]-1661309691643
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309693459
GPR[EPVS]-1661309693459
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=max;

========
MM Copying to MM
GPR[SPVS]-1661309693461
GPR[SPVAP]-1661309693461
GPR[EPVAP]-1661309694495
GPR[EPVS]-1661309694495
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309694496
GPR[SPVAP]-1661309694496
GPR[EPVAP]-1661309695524
GPR[EPVS]-1661309695524
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(SQRT2PI));
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309695526
GPR[SPVAP]-1661309695526
GPR[EPVAP]-1661309697449
GPR[SPVATF]-1661309697449
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309699286
GPR[EPVS]-1661309699286
========
if(x<=0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309699288
GPR[SPVAP]-1661309699288
GPR[EPVAP]-1661309700300
GPR[EPVS]-1661309700300
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",serialVersionUID,serialVersionUID);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309700301
GPR[SPVAP]-1661309700301
GPR[EPVAP]-1661309702203
GPR[SPVATF]-1661309702203
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309703996
GPR[EPVS]-1661309703996
========
if(length<=0.0){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",0,dimensionSize.length);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309703997
GPR[SPVAP]-1661309703997
GPR[EPVAP]-1661309705023
GPR[EPVS]-1661309705023
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309705024
GPR[SPVAP]-1661309705024
GPR[EPVAP]-1661309706051
GPR[EPVS]-1661309706051
========
if(x0<=0.0){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309706052
GPR[SPVAP]-1661309706052
GPR[EPVAP]-1661309707082
GPR[EPVS]-1661309707082
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",serialVersionUID,serialVersionUID);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309707083
GPR[SPVAP]-1661309707083
GPR[EPVAP]-1661309708949
GPR[SPVATF]-1661309708949
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309710777
GPR[EPVS]-1661309710777
========
if(sd<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309710779
GPR[SPVAP]-1661309710779
GPR[EPVAP]-1661309712663
GPR[SPVATF]-1661309712663
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309714487
GPR[EPVS]-1661309714487
========
if(lower<=0.0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",sd,SQRT2PI);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309714488
GPR[SPVAP]-1661309714488
GPR[EPVAP]-1661309715515
GPR[EPVS]-1661309715515
========
if(degreesOfFreedom<=0.0){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309715517
GPR[SPVAP]-1661309715517
GPR[EPVAP]-1661309716545
GPR[EPVS]-1661309716545
========
if(d.length<0.0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",sd);
}
standardDeviation=sd;

========
MM Copying to MM
GPR[SPVS]-1661309716547
GPR[SPVAP]-1661309716547
GPR[EPVAP]-1661309717606
GPR[EPVS]-1661309717606
GPR[ESUN]-1661309717610
GPR[SSUN]-1661309717610
org.apache.commons.math.distribution.NormalDistributionImpl,103
Find no block!
GPR[SSUN]-1661309717917
org.apache.commons.math.distribution.AbstractContinuousDistribution,69
GPR[ESUN]-1661309718864
GPR[SSUN]-1661309718864
org.apache.commons.math.distribution.AbstractContinuousDistribution,81
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
double lowerBound=abs(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309719858
GPR[SPVAP]-1661309719858
GPR[EPVAP]-1661309721761
GPR[EPVS]-1661309721761
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
double lowerBound=exp(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309721762
GPR[SPVAP]-1661309721762
GPR[EPVAP]-1661309723483
GPR[EPVS]-1661309723483
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
double lowerBound=floor(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309723484
GPR[SPVAP]-1661309723484
GPR[EPVAP]-1661309725207
GPR[EPVS]-1661309725207
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
if((p>100)||(p<=0)){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",p);
}
double lowerBound=getDomainLowerBound(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309725208
GPR[SPVAP]-1661309725208
GPR[EPVAP]-1661309730047
GPR[SPVATF]-1661309730047
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309731888
GPR[EPVS]-1661309731888
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
double lowerBound=sqrt(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309731889
GPR[SPVAP]-1661309731889
GPR[EPVAP]-1661309732923
GPR[EPVS]-1661309732923
========
UnivariateRealFunction rootFindingFunction=new UnivariateRealFunction(){
  public double value(  double x) throws FunctionEvaluationException {
    try {
      return cumulativeProbability(x) - p;
    }
 catch (    MathException ex) {
      throw new FunctionEvaluationException(ex,x,ex.getPattern(),ex.getArguments());
    }
  }
}
;
if(p+lowerBound*s-4*p<0){
throw new InvalidMatrixException("cannot solve degree {0} equation",2);
}
double lowerBound=getDomainLowerBound(p);
double upperBound=getDomainUpperBound(p);

========
MM Copying to MM
GPR[SPVS]-1661309732924
GPR[SPVAP]-1661309732924
GPR[EPVAP]-1661309733954
GPR[EPVS]-1661309733955
GPR[ESUN]-1661309733955
GPR[SSUN]-1661309733955
org.apache.commons.math.distribution.AbstractContinuousDistribution,82
========
int lowerBound=getDomainLowerBound(p);
int upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309735076
GPR[SPVAP]-1661309735076
GPR[EPVAP]-1661309736966
GPR[EPVS]-1661309736966
========
int lowerBound=getDomainLowerBound(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309736967
GPR[SPVAP]-1661309736967
GPR[EPVAP]-1661309738702
GPR[EPVS]-1661309738702
========
double lowerBound=getDomainLowerBound(p);
int upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309738703
GPR[SPVAP]-1661309738703
GPR[EPVAP]-1661309740439
GPR[EPVS]-1661309740439
========
if(p<0.0||p>1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",p,0.0,1.0);
}
double lowerBound=getDomainLowerBound(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309740440
GPR[SPVAP]-1661309740440
GPR[EPVAP]-1661309745199
GPR[SPVATF]-1661309745199
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309747056
GPR[EPVS]-1661309747056
========
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}

double lowerBound=getDomainLowerBound(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309747057
GPR[SPVAP]-1661309747057
GPR[EPVAP]-1661309748086
GPR[EPVS]-1661309748086
========
double lowerBound=exp(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309748087
GPR[SPVAP]-1661309748087
GPR[EPVAP]-1661309749089
GPR[EPVS]-1661309749089
========
double lowerBound=floor(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309749091
GPR[SPVAP]-1661309749091
GPR[EPVAP]-1661309750120
GPR[EPVS]-1661309750120
========
double lowerBound=abs(p);
double upperBound=getDomainUpperBound(p);
double[] bracket=null;

========
MM Copying to MM
GPR[SPVS]-1661309750121
GPR[SPVAP]-1661309750121
GPR[EPVAP]-1661309751127
GPR[EPVS]-1661309751127
GPR[ESUN]-1661309751127
GPR[SSUN]-1661309751127
org.apache.commons.math.distribution.AbstractContinuousDistribution,83
========
double upperBound=getDomainLowerBound(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309752301
GPR[SPVAP]-1661309752301
GPR[EPVAP]-1661309753444
GPR[EPVS]-1661309753444
========
double upperBound=abs(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309753445
GPR[SPVAP]-1661309753445
GPR[EPVAP]-1661309754583
GPR[EPVS]-1661309754583
========
double upperBound=exp(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309754584
GPR[SPVAP]-1661309754584
GPR[EPVAP]-1661309755703
GPR[EPVS]-1661309755703
========
double upperBound=floor(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309755704
GPR[SPVAP]-1661309755704
GPR[EPVAP]-1661309756882
GPR[EPVS]-1661309756882
========
if((p>100)||(p<=0)){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",p);
}
double upperBound=getDomainUpperBound(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309756883
GPR[SPVAP]-1661309756883
GPR[EPVAP]-1661309758042
GPR[EPVS]-1661309758042
========
double upperBound=sqrt(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309758044
GPR[SPVAP]-1661309758044
GPR[EPVAP]-1661309759223
GPR[EPVS]-1661309759223
========
if(upperBound<0){
throw new InvalidMatrixException("cannot solve degree {0} equation",2);
}
double upperBound=getDomainUpperBound(p);
double[] bracket=null;
try{
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
}catch (ConvergenceException ex) {
  if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
    return lowerBound;
  }
  if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
    return upperBound;
  }
  throw new MathException(ex);
}


========
MM Copying to MM
GPR[SPVS]-1661309759224
GPR[SPVAP]-1661309759224
GPR[EPVAP]-1661309760349
GPR[EPVS]-1661309760349
GPR[ESUN]-1661309760349
GPR[SSUN]-1661309760349
org.apache.commons.math.distribution.AbstractContinuousDistribution,85
GPR[ESUN]-1661309761407
GPR[SSUN]-1661309761407
org.apache.commons.math.distribution.AbstractContinuousDistribution,70
Find no block!
GPR[SSUN]-1661309761593
org.apache.commons.math.distribution.AbstractContinuousDistribution,73
GPR[ESUN]-1661309762586
GPR[SSUN]-1661309762586
org.apache.commons.math.special.Gamma,159
========
lanczos[maxIterations]=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309764218
GPR[SPVAP]-1661309764218
GPR[EPVAP]-1661309769141
GPR[SPVATF]-1661309769141
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309770970
GPR[EPVS]-1661309770970
========
if(Math.abs(GAMMA)>epsilon){
largest=Math.abs(sum);
sum=maxIterations;
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309770971
GPR[SPVAP]-1661309770971
GPR[EPVAP]-1661309771997
GPR[EPVS]-1661309771997
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x0=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309771999
GPR[SPVAP]-1661309771999
GPR[EPVAP]-1661309773019
GPR[EPVS]-1661309773019
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309773020
GPR[SPVAP]-1661309773020
GPR[EPVAP]-1661309774064
GPR[EPVS]-1661309774064
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309774066
GPR[SPVAP]-1661309774066
GPR[EPVAP]-1661309775102
GPR[EPVS]-1661309775102
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309775103
GPR[SPVAP]-1661309775103
GPR[EPVAP]-1661309776114
GPR[EPVS]-1661309776114
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309776116
GPR[SPVAP]-1661309776116
GPR[EPVAP]-1661309777137
GPR[EPVS]-1661309777137
========
while(Math.abs(an)>epsilon&&n<maxIterations){
r0=GAMMA;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309777142
GPR[SPVAP]-1661309777142
GPR[EPVAP]-1661309778164
GPR[EPVS]-1661309778164
========
while(Math.abs(an)>epsilon&&n<maxIterations){
this.denominator=1;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309778167
GPR[SPVAP]-1661309778167
GPR[EPVAP]-1661309779203
GPR[EPVS]-1661309779203
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(meanXSquared/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309779204
GPR[SPVAP]-1661309779204
GPR[EPVAP]-1661309780210
GPR[EPVS]-1661309780210
========
lanczos[maxIterations]=an*x+sum;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309780211
GPR[SPVAP]-1661309780211
GPR[EPVAP]-1661309782119
GPR[SPVATF]-1661309782119
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309783923
GPR[EPVS]-1661309783923
========
lanczos[maxIterations]=Math.abs(lanczos[i]-lanczos[i]);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309783924
GPR[SPVAP]-1661309783924
GPR[EPVAP]-1661309784955
GPR[EPVS]-1661309784955
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
ratio=epsilon/a;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309784958
GPR[SPVAP]-1661309784958
GPR[EPVAP]-1661309785982
GPR[EPVS]-1661309785982
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
hNew=Math.abs(an);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309785985
GPR[SPVAP]-1661309785985
GPR[EPVAP]-1661309786995
GPR[EPVS]-1661309786995
========
if(GAMMA+0.01*GAMMA<=0.0){
den=1.0;
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309786997
GPR[SPVAP]-1661309786997
GPR[EPVAP]-1661309788030
GPR[EPVS]-1661309788030
========
while(Math.abs(an)>epsilon&&n<maxIterations){
iterationCount=maxIterations;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309788032
GPR[SPVAP]-1661309788032
GPR[EPVAP]-1661309789066
GPR[EPVS]-1661309789066
========
if(Math.abs(GAMMA)<=epsilon){
setResult(an,maxIterations);
return GAMMA;
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309789069
GPR[SPVAP]-1661309789069
GPR[EPVAP]-1661309790077
GPR[EPVS]-1661309790077
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sin=1.0/Math.sqrt(1.0+an/lanczos[maxIterations]*cotan);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309790079
GPR[SPVAP]-1661309790079
GPR[EPVAP]-1661309791119
GPR[EPVS]-1661309791119
========
while(Math.abs(an)>epsilon&&n<maxIterations){
sin=sum*n;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309791120
GPR[SPVAP]-1661309791120
GPR[EPVAP]-1661309792153
GPR[EPVS]-1661309792153
========
GAMMA=Math.min(upper,an+100*MathUtils.EPSILON);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309792157
GPR[SPVAP]-1661309792157
GPR[EPVAP]-1661309793186
GPR[EPVS]-1661309793186
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
setResult(GAMMA,0);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309793188
GPR[SPVAP]-1661309793188
GPR[EPVAP]-1661309794210
GPR[EPVS]-1661309794210
========
if(an==maxIterations){
return ;
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309794212
GPR[SPVAP]-1661309794212
GPR[EPVAP]-1661309795239
GPR[EPVS]-1661309795239
========
n=1.0+Math.abs(GAMMA)*Math.sqrt(GAMMA);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309795240
GPR[SPVAP]-1661309795240
GPR[EPVAP]-1661309797118
GPR[SPVATF]-1661309797118
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661309798939
GPR[EPVS]-1661309798939
========
an=Math.ceil(n);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661309798940
GPR[SPVAP]-1661309798940
GPR[EPVAP]-1661309800826
GPR[SPVATF]-1661309800826
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661310457250
GPR[EPVS]-1661310457250
========
sum=(-n*y+2.0*y)/epsilon-x-an*a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310457252
GPR[SPVAP]-1661310457252
GPR[EPVAP]-1661310458294
GPR[EPVS]-1661310458294
========
n=1.0+Math.abs(GAMMA)*Math.sqrt(GAMMA);
an=Math.ceil(n);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310458295
GPR[SPVAP]-1661310458295
GPR[EPVAP]-1661310460190
GPR[SPVATF]-1661310460190
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661310462019
GPR[EPVS]-1661310462019
========
assert maxUlps > 0 && maxUlps < NAN_GAP;

while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310462021
GPR[SPVAP]-1661310462021
GPR[EPVAP]-1661310463034
GPR[EPVS]-1661310463034
========
if(an<0){
yInt=SGN_MASK-yInt;
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310463036
GPR[SPVAP]-1661310463036
GPR[EPVAP]-1661310464037
GPR[EPVS]-1661310464037
========
GAMMA=-Math.abs(x)*Math.sqrt(GAMMA)-1.0;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310464039
GPR[SPVAP]-1661310464039
GPR[EPVAP]-1661310465049
GPR[EPVS]-1661310465049
========
an=Math.floor(GAMMA);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661310465050
GPR[SPVAP]-1661310465050
GPR[EPVAP]-1661310466919
GPR[SPVATF]-1661310466919
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311125262
GPR[EPVS]-1661311125262
========
sum=-x*z/2.0-a-an*epsilon;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311125263
GPR[SPVAP]-1661311125263
GPR[EPVAP]-1661311126310
GPR[EPVS]-1661311126310
========
while(Math.abs(an)>x1&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311126313
GPR[SPVAP]-1661311126313
GPR[EPVAP]-1661311127334
GPR[EPVS]-1661311127334
========
GAMMA=Math.max(a*Math.abs(an),GAMMA);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311127335
GPR[SPVAP]-1661311127335
GPR[EPVAP]-1661311128361
GPR[EPVS]-1661311128361
========
if(sum==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311128373
GPR[SPVAP]-1661311128373
GPR[EPVAP]-1661311130305
GPR[SPVATF]-1661311130305
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311132115
GPR[EPVS]-1661311132115
========
while(Math.abs(an)>epsilon&&n<maxIterations){
ret=Math.exp(-x+(n*Math.log(x))-logGamma(a))*sum;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311132116
GPR[SPVAP]-1661311132116
GPR[EPVAP]-1661311134010
GPR[SPVATF]-1661311134010
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311135830
GPR[EPVS]-1661311135830
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x+=an;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311135831
GPR[SPVAP]-1661311135831
GPR[EPVAP]-1661311137711
GPR[SPVATF]-1661311137711
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311139511
GPR[EPVS]-1661311139511
========
x=x+0.5*an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311139512
GPR[SPVAP]-1661311139512
GPR[EPVAP]-1661311141384
GPR[SPVATF]-1661311141384
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311143213
GPR[EPVS]-1661311143213
========
x=x+0.5*an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x+=an;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311143214
GPR[SPVAP]-1661311143214
GPR[EPVAP]-1661311145079
GPR[SPVATF]-1661311145079
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311146906
GPR[EPVS]-1661311146906
========
while(Math.abs(an)>epsilon&&n<maxIterations){
k+=maxIterations;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311146911
GPR[SPVAP]-1661311146911
GPR[EPVAP]-1661311147963
GPR[EPVS]-1661311147963
========
while(Math.abs(an)>epsilon&&n<maxIterations){
p2=(n/GAMMA*x)+epsilon;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311147968
GPR[SPVAP]-1661311147968
GPR[EPVAP]-1661311148997
GPR[EPVS]-1661311148997
========
new CombinedEventsManager().addEventHandler(new EndTimeChecker(GAMMA),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(an),Math.abs(endTime))),100);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311148999
GPR[SPVAP]-1661311148999
GPR[EPVAP]-1661311150025
GPR[EPVS]-1661311150025
========
sum=Math.sqrt(GAMMA/n);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311150028
GPR[SPVAP]-1661311150028
GPR[EPVAP]-1661311151900
GPR[SPVATF]-1661311151900
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311153736
GPR[EPVS]-1661311153736
========
GAMMA=Math.sqrt(n/an);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311153737
GPR[SPVAP]-1661311153737
GPR[EPVAP]-1661311154761
GPR[EPVS]-1661311154761
========
while(Math.abs(an)>epsilon&&n<maxIterations){
p+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311154765
GPR[SPVAP]-1661311154765
GPR[EPVAP]-1661311155791
GPR[EPVS]-1661311155791
========
GAMMA+=x;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311155792
GPR[SPVAP]-1661311155792
GPR[EPVAP]-1661311156798
GPR[EPVS]-1661311156798
========
sum+=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311156799
GPR[SPVAP]-1661311156799
GPR[EPVAP]-1661311158671
GPR[SPVATF]-1661311158671
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311160480
GPR[EPVS]-1661311160480
========
n++;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311160481
GPR[SPVAP]-1661311160481
GPR[EPVAP]-1661311162341
GPR[SPVATF]-1661311162341
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311164143
GPR[EPVS]-1661311164143
========
sum+=GAMMA;
n++;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311164144
GPR[SPVAP]-1661311164144
GPR[EPVAP]-1661311166006
GPR[SPVATF]-1661311166007
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311167819
GPR[EPVS]-1661311167819
========
while(Math.abs(an)>epsilon&&n<maxIterations){
l+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311167821
GPR[SPVAP]-1661311167821
GPR[EPVAP]-1661311168837
GPR[EPVS]-1661311168837
========
while(Math.abs(an)>epsilon&&n<maxIterations){
secondaryTridiagonal[i-1]=n*an;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311168840
GPR[SPVAP]-1661311168840
GPR[EPVAP]-1661311169865
GPR[EPVS]-1661311169865
========
lanczos[n]=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311169867
GPR[SPVAP]-1661311169867
GPR[EPVAP]-1661311170891
GPR[EPVS]-1661311170891
========
lanczos[maxIterations]=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311170895
GPR[SPVAP]-1661311170895
GPR[EPVAP]-1661311172759
GPR[SPVATF]-1661311172759
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311174584
GPR[EPVS]-1661311174584
========
while(Math.abs(an)>epsilon&&n<maxIterations){
q+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311174586
GPR[SPVAP]-1661311174586
GPR[EPVAP]-1661311175598
GPR[EPVS]-1661311175598
========
lanczos[maxIterations]+=sum;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311175599
GPR[SPVAP]-1661311175599
GPR[EPVAP]-1661311177472
GPR[SPVATF]-1661311177472
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311179296
GPR[EPVS]-1661311179296
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311179297
GPR[SPVAP]-1661311179297
GPR[EPVAP]-1661311180325
GPR[EPVS]-1661311180325
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311180326
GPR[SPVAP]-1661311180326
GPR[EPVAP]-1661311181354
GPR[EPVS]-1661311181354
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x2=x;
y2=GAMMA;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311181355
GPR[SPVAP]-1661311181355
GPR[EPVAP]-1661311182378
GPR[EPVS]-1661311182378
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
y1=GAMMA;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311182380
GPR[SPVAP]-1661311182380
GPR[EPVAP]-1661311183387
GPR[EPVS]-1661311183387
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x1=x;
y1=GAMMA;

an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311183388
GPR[SPVAP]-1661311183388
GPR[EPVAP]-1661311184426
GPR[EPVS]-1661311184426
========
sum=values.length;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311184432
GPR[SPVAP]-1661311184432
GPR[EPVAP]-1661311185438
GPR[EPVS]-1661311185438
========
this.epsilon=epsilon;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311185439
GPR[SPVAP]-1661311185439
GPR[EPVAP]-1661311186456
GPR[EPVS]-1661311186456
========
while(Math.abs(an)>epsilon&&n<maxIterations){
sin=sum*n;
n=n+1.0;
an=an*(x/(a+n));
sin=1.0/Math.sqrt(1.0+an/lanczos[maxIterations]*cotan);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311186459
GPR[SPVAP]-1661311186459
GPR[EPVAP]-1661311187473
GPR[EPVS]-1661311187473
========
sum=values.length;
this.epsilon=epsilon;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311187475
GPR[SPVAP]-1661311187475
GPR[EPVAP]-1661311188546
GPR[EPVS]-1661311188546
========
if(GAMMA<n||initial>an||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311188549
GPR[SPVAP]-1661311188549
GPR[EPVAP]-1661311189605
GPR[EPVS]-1661311189605
========
while(Math.abs(an)>epsilon&&n<maxIterations){
minPos=maxIterations;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311189606
GPR[SPVAP]-1661311189606
GPR[EPVAP]-1661311190638
GPR[EPVS]-1661311190638
========
epsilon=DEFAULT_ZERO_TOLERANCE;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311190641
GPR[SPVAP]-1661311190641
GPR[EPVAP]-1661311191670
GPR[EPVS]-1661311191670
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311191674
GPR[SPVAP]-1661311191674
GPR[EPVAP]-1661311192700
GPR[EPVS]-1661311192700
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311192701
GPR[SPVAP]-1661311192701
GPR[EPVAP]-1661311193743
GPR[EPVS]-1661311193743
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x0=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311193744
GPR[SPVAP]-1661311193744
GPR[EPVAP]-1661311194760
GPR[EPVS]-1661311194760
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311194761
GPR[SPVAP]-1661311194761
GPR[EPVAP]-1661311195771
GPR[EPVS]-1661311195771
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311195772
GPR[SPVAP]-1661311195772
GPR[EPVAP]-1661311196779
GPR[EPVS]-1661311196779
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311196780
GPR[SPVAP]-1661311196780
GPR[EPVAP]-1661311197791
GPR[EPVS]-1661311197791
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311197792
GPR[SPVAP]-1661311197792
GPR[EPVAP]-1661311198800
GPR[EPVS]-1661311198800
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311198802
GPR[SPVAP]-1661311198802
GPR[EPVAP]-1661311199823
GPR[EPVS]-1661311199823
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311199825
GPR[SPVAP]-1661311199825
GPR[EPVAP]-1661311200839
GPR[EPVS]-1661311200839
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311200841
GPR[SPVAP]-1661311200841
GPR[EPVAP]-1661311201845
GPR[EPVS]-1661311201845
========
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311201846
GPR[SPVAP]-1661311201846
GPR[EPVAP]-1661311202869
GPR[EPVS]-1661311202869
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311202870
GPR[SPVAP]-1661311202870
GPR[EPVAP]-1661311203901
GPR[EPVS]-1661311203901
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311203902
GPR[SPVAP]-1661311203902
GPR[EPVAP]-1661311204914
GPR[EPVS]-1661311204914
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311204915
GPR[SPVAP]-1661311204915
GPR[EPVAP]-1661311205936
GPR[EPVS]-1661311205936
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311205937
GPR[SPVAP]-1661311205937
GPR[EPVAP]-1661311206953
GPR[EPVS]-1661311206953
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311206954
GPR[SPVAP]-1661311206954
GPR[EPVAP]-1661311207984
GPR[EPVS]-1661311207984
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311207986
GPR[SPVAP]-1661311207986
GPR[EPVAP]-1661311209001
GPR[EPVS]-1661311209001
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311209002
GPR[SPVAP]-1661311209002
GPR[EPVAP]-1661311210020
GPR[EPVS]-1661311210020
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311210022
GPR[SPVAP]-1661311210022
GPR[EPVAP]-1661311211048
GPR[EPVS]-1661311211048
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311211049
GPR[SPVAP]-1661311211049
GPR[EPVAP]-1661311212087
GPR[EPVS]-1661311212087
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311212088
GPR[SPVAP]-1661311212088
GPR[EPVAP]-1661311213115
GPR[EPVS]-1661311213115
========
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311213116
GPR[SPVAP]-1661311213116
GPR[EPVAP]-1661311214146
GPR[EPVS]-1661311214146
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311214147
GPR[SPVAP]-1661311214147
GPR[EPVAP]-1661311215182
GPR[EPVS]-1661311215182
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x0=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311215183
GPR[SPVAP]-1661311215183
GPR[EPVAP]-1661311216191
GPR[EPVS]-1661311216191
========
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=sum;
x0=x;
x1=x;
x2=x;
y2=sum;

n=n+1.0;
an=an*(x/(a+n));
x1=x;
x2=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311216193
GPR[SPVAP]-1661311216193
GPR[EPVAP]-1661311217212
GPR[EPVS]-1661311217212
========
if(a>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311218902
GPR[SPVAP]-1661311218902
GPR[EPVAP]-1661311219917
GPR[EPVS]-1661311219917
========
if(a>=1.0&&x>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311219917
GPR[SPVAP]-1661311219917
GPR[EPVAP]-1661311220934
GPR[EPVS]-1661311220934
========
if(a>=1.0&&x>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311220936
GPR[SPVAP]-1661311220936
GPR[EPVAP]-1661311221986
GPR[EPVS]-1661311221986
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311221987
GPR[SPVAP]-1661311221987
GPR[EPVAP]-1661311223027
GPR[EPVS]-1661311223027
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311223028
GPR[SPVAP]-1661311223028
GPR[EPVAP]-1661311224053
GPR[EPVS]-1661311224053
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/real;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311224054
GPR[SPVAP]-1661311224054
GPR[EPVAP]-1661311225073
GPR[EPVS]-1661311225073
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/g;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311225076
GPR[SPVAP]-1661311225076
GPR[EPVAP]-1661311226092
GPR[EPVS]-1661311226092
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
sum=sum+lanczos[0];
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311226093
GPR[SPVAP]-1661311226093
GPR[EPVAP]-1661311227130
GPR[EPVS]-1661311227130
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
ret=((a+0.5)*Math.log(epsilon))-epsilon+HALF_LOG_2_PI+Math.log(sum/a);
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311227131
GPR[SPVAP]-1661311227131
GPR[EPVAP]-1661311228161
GPR[EPVS]-1661311228161
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
sum=sum+lanczos[0];
ret=((a+0.5)*Math.log(epsilon))-epsilon+HALF_LOG_2_PI+Math.log(sum/a);

double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311228161
GPR[SPVAP]-1661311228161
GPR[EPVAP]-1661311229163
GPR[EPVS]-1661311229163
========
if(a>=1.0&&convergence>convergence){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311229165
GPR[SPVAP]-1661311229165
GPR[EPVAP]-1661311230221
GPR[EPVS]-1661311230221
========
if(a>=1.0&&convergence>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311230222
GPR[SPVAP]-1661311230222
GPR[EPVAP]-1661311231234
GPR[EPVS]-1661311231234
========
if(a>=1.0&&x>convergence){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311231236
GPR[SPVAP]-1661311231236
GPR[EPVAP]-1661311232288
GPR[EPVS]-1661311232288
========
if(a>=1.0&&x>a){
ta=GAMMA;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311232289
GPR[SPVAP]-1661311232289
GPR[EPVAP]-1661311233298
GPR[EPVS]-1661311233298
========
if(a>=1.0&&x>eps){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311233300
GPR[SPVAP]-1661311233300
GPR[EPVAP]-1661311234318
GPR[EPVS]-1661311234318
========
if(n!=0){
a=x-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
sum=Double.POSITIVE_INFINITY;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311234320
GPR[SPVAP]-1661311234320
GPR[EPVAP]-1661311235343
GPR[EPVS]-1661311235343
========
ret=Math.max(GAMMA*Math.abs(a),GAMMA);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311235344
GPR[SPVAP]-1661311235344
GPR[EPVAP]-1661311237245
GPR[SPVATF]-1661311237245
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311239089
GPR[EPVS]-1661311239089
========
if(Math.abs(an)<=epsilon){
setResult(a,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311239090
GPR[SPVAP]-1661311239090
GPR[EPVAP]-1661311240096
GPR[EPVS]-1661311240096
========
if(Math.abs(an)<=sum){
setResult(a,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311240099
GPR[SPVAP]-1661311240099
GPR[EPVAP]-1661311241120
GPR[EPVS]-1661311241120
========
ret=1-(GAMMA*GAMMA)/(an*y3);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311241121
GPR[SPVAP]-1661311241121
GPR[EPVAP]-1661311242126
GPR[EPVS]-1661311242126
========
n=(MathUtils.sign(GAMMA)*MathUtils.sign(an))*(a-GAMMA)/Math.sqrt(ret);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311242127
GPR[SPVAP]-1661311242127
GPR[EPVAP]-1661311243149
GPR[EPVS]-1661311243149
========
x=a-n;
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311243150
GPR[SPVAP]-1661311243150
GPR[EPVAP]-1661311244153
GPR[EPVS]-1661311244153
========
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311244154
GPR[SPVAP]-1661311244154
GPR[EPVAP]-1661311245175
GPR[EPVS]-1661311245175
========
if(Math.abs(GAMMA)<=sum){
setResult(x,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311245177
GPR[SPVAP]-1661311245177
GPR[EPVAP]-1661311246206
GPR[EPVS]-1661311246206
========
if(2.0*n>=1.5*x-Math.abs(epsilon*sum)||n>=Math.abs(0.5*ret)){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311246209
GPR[SPVAP]-1661311246209
GPR[EPVAP]-1661311247289
GPR[EPVS]-1661311247289
========
if(2.0*n>=1.5*x-Math.abs(epsilon*sum)&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311247290
GPR[SPVAP]-1661311247290
GPR[EPVAP]-1661311248307
GPR[EPVS]-1661311248307
========
if(a>=1.0&&n>=Math.abs(0.5*ret)){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311248309
GPR[SPVAP]-1661311248309
GPR[EPVAP]-1661311249321
GPR[EPVS]-1661311249321
========
if(a>=1.0&&x>a){
delta=0.5*x;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311249322
GPR[SPVAP]-1661311249322
GPR[EPVAP]-1661311250384
GPR[EPVS]-1661311250384
========
if(a>=1.0E-6&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311250391
GPR[SPVAP]-1661311250391
GPR[EPVAP]-1661311252274
GPR[SPVATF]-1661311252274
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311254093
GPR[EPVS]-1661311254093
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/tMed;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311254094
GPR[SPVAP]-1661311254094
GPR[EPVAP]-1661311255114
GPR[EPVS]-1661311255114
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
index=(int)Math.rint(((x*an)*maxIterations-(sum*dt3)*maxIterations+(dt1*dt2)*maxIterations)/(n-a*a-GAMMA));
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311255115
GPR[SPVAP]-1661311255115
GPR[EPVAP]-1661311256133
GPR[EPVS]-1661311256133
========
if(a>=1.0&&x>a){
hNew=Math.abs(x);
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311256136
GPR[SPVAP]-1661311256136
GPR[EPVAP]-1661311257156
GPR[EPVS]-1661311257156
========
if(fa>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311257165
GPR[SPVAP]-1661311257165
GPR[EPVAP]-1661311258181
GPR[EPVS]-1661311258181
========
if(c1>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311258182
GPR[SPVAP]-1661311258183
GPR[EPVAP]-1661311259202
GPR[EPVS]-1661311259202
========
if(a>=1.0&&u>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311259204
GPR[SPVAP]-1661311259204
GPR[EPVAP]-1661311260227
GPR[EPVS]-1661311260227
========
if(a>=1.0&&x>c2){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311260228
GPR[SPVAP]-1661311260228
GPR[EPVAP]-1661311261249
GPR[EPVS]-1661311261249
========
if(a>=1.0&&x>a){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311261250
GPR[SPVAP]-1661311261250
GPR[EPVAP]-1661311262273
GPR[EPVS]-1661311262273
========
if(a>=1.0&&x>a){
x=Math.ceil(GAMMA);
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311262274
GPR[SPVAP]-1661311262274
GPR[EPVAP]-1661311265279
GPR[SPVATF]-1661311265279
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311267111
GPR[EPVS]-1661311267111
========
if(a>=1.0&&x>a){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
x=Math.ceil(GAMMA);

ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311267112
GPR[SPVAP]-1661311267112
GPR[EPVAP]-1661311268126
GPR[EPVS]-1661311268126
========
if(a>=1.0&&x>a){
setResult(GAMMA,0);
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311268128
GPR[SPVAP]-1661311268128
GPR[EPVAP]-1661311270157
GPR[EPVS]-1661311270157
========
if(a>=1.0&&x>a){
ratio=sum/x;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311270158
GPR[SPVAP]-1661311270158
GPR[EPVAP]-1661311271195
GPR[EPVS]-1661311271195
========
if(p>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311271204
GPR[SPVAP]-1661311271204
GPR[EPVAP]-1661311272231
GPR[EPVS]-1661311272231
========
if(p>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311272232
GPR[SPVAP]-1661311272232
GPR[EPVAP]-1661311273243
GPR[EPVS]-1661311273243
========
if(maxIterations==0){
return Double.NaN;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311273244
GPR[SPVAP]-1661311273244
GPR[EPVAP]-1661311275117
GPR[SPVATF]-1661311275117
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311276920
GPR[EPVS]-1661311276920
========
Arrays.sort(new double[maxIterations]);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311276921
GPR[SPVAP]-1661311276921
GPR[EPVAP]-1661311277941
GPR[EPVS]-1661311277941
========
if(maxIterations==0){
return Double.NaN;
}
if(a>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311277943
GPR[SPVAP]-1661311277943
GPR[EPVAP]-1661311278976
GPR[EPVS]-1661311278976
========
if(x>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311278980
GPR[SPVAP]-1661311278980
GPR[EPVAP]-1661311280868
GPR[SPVATF]-1661311280868
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311282710
GPR[EPVS]-1661311282710
========
if(a>=1.0&&x>threshold){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311282711
GPR[SPVAP]-1661311282711
GPR[EPVAP]-1661311283734
GPR[EPVS]-1661311283734
========
if(maxIterations==0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311283736
GPR[SPVAP]-1661311283736
GPR[EPVAP]-1661311284783
GPR[EPVS]-1661311284783
========
lanczos=new double[Math.abs(maxIterations)];
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311284784
GPR[SPVAP]-1661311284784
GPR[EPVAP]-1661311285798
GPR[EPVS]-1661311285798
========
lanczos[0]=1.0;
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311285799
GPR[SPVAP]-1661311285799
GPR[EPVAP]-1661311287705
GPR[SPVATF]-1661311287705
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311289523
GPR[EPVS]-1661311289523
========
lanczos[0]=0.0;
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311289524
GPR[SPVAP]-1661311289524
GPR[EPVAP]-1661311291402
GPR[SPVATF]-1661311291402
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311293207
GPR[EPVS]-1661311293207
========
lanczos[0]=1.0;
lanczos[0]=0.0;
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311293208
GPR[SPVAP]-1661311293208
GPR[EPVAP]-1661311295082
GPR[SPVATF]-1661311295082
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311296909
GPR[EPVS]-1661311296909
========
if(a>=1.0&&a>1.0){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311296911
GPR[SPVAP]-1661311296911
GPR[EPVAP]-1661311298803
GPR[SPVATF]-1661311298803
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311300655
GPR[EPVS]-1661311300655
========
if(a>=0.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311300657
GPR[SPVAP]-1661311300657
GPR[EPVAP]-1661311302537
GPR[SPVATF]-1661311302537
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311304351
GPR[EPVS]-1661311304351
========
if(p>=1.0&&a>1.0){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311304352
GPR[SPVAP]-1661311304352
GPR[EPVAP]-1661311305383
GPR[EPVS]-1661311305383
========
if(p>=0.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311305384
GPR[SPVAP]-1661311305384
GPR[EPVAP]-1661311306390
GPR[EPVS]-1661311306390
========
if(a>=0.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311306391
GPR[SPVAP]-1661311306391
GPR[EPVAP]-1661311307442
GPR[EPVS]-1661311307442
========
if(a>=0.0&&a>1.0){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311307444
GPR[SPVAP]-1661311307444
GPR[EPVAP]-1661311309304
GPR[SPVATF]-1661311309304
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311311114
GPR[EPVS]-1661311311114
========
if(p>=0.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311311115
GPR[SPVAP]-1661311311115
GPR[EPVAP]-1661311312127
GPR[EPVS]-1661311312127
========
if(p>=0.0&&a>1.0){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311312129
GPR[SPVAP]-1661311312129
GPR[EPVAP]-1661311313159
GPR[EPVS]-1661311313159
========
if(a>=1.0&&x>MAX_VALUE){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311313163
GPR[SPVAP]-1661311313163
GPR[EPVAP]-1661311314193
GPR[EPVS]-1661311314193
========
if(a>=1.0&&w>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311314195
GPR[SPVAP]-1661311314195
GPR[EPVAP]-1661311315202
GPR[EPVS]-1661311315202
========
if(a>=1.0&&x>a){
v=GAMMA;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311315204
GPR[SPVAP]-1661311315204
GPR[EPVAP]-1661311316226
GPR[EPVS]-1661311316226
========
if(a>=1.0&&x>a){
w=GAMMA;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311316228
GPR[SPVAP]-1661311316228
GPR[EPVAP]-1661311317251
GPR[EPVS]-1661311317251
========
if(a>=1.0&&x>a){
fw=sum;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311317252
GPR[SPVAP]-1661311317252
GPR[EPVAP]-1661311318284
GPR[EPVS]-1661311318284
========
if(a>=1.0&&x>a){
v=GAMMA;
w=GAMMA;
fw=sum;

ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311318285
GPR[SPVAP]-1661311318285
GPR[EPVAP]-1661311319320
GPR[EPVS]-1661311319320
========
if(sum==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311319325
GPR[SPVAP]-1661311319325
GPR[EPVAP]-1661311320345
GPR[EPVS]-1661311320345
========
if(n==0){
GAMMA=Double.NaN;
}else if(n==1){
variance=0.0;
}else {
variance=sum/(n-1);
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311320347
GPR[SPVAP]-1661311320347
GPR[EPVAP]-1661311321371
GPR[EPVS]-1661311321371
========
if(a>=1.0&&x>a){
hK[k+1]-=x;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311321373
GPR[SPVAP]-1661311321373
GPR[EPVAP]-1661311322382
GPR[EPVS]-1661311322382
========
if(a>=1.0&&x>a){
gamma*=n/2;
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311322383
GPR[SPVAP]-1661311322383
GPR[EPVAP]-1661311323407
GPR[EPVS]-1661311323407
========
if(a>=1.0&&x>a){
hK[k+1]-=x;
gamma*=n/2;

ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311323408
GPR[SPVAP]-1661311323408
GPR[EPVAP]-1661311324414
GPR[EPVS]-1661311324414
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
hK[k+1]-=x;
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311324416
GPR[SPVAP]-1661311324416
GPR[EPVAP]-1661311325436
GPR[EPVS]-1661311325436
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
gamma*=n/2;
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311325438
GPR[SPVAP]-1661311325438
GPR[EPVAP]-1661311326443
GPR[EPVS]-1661311326443
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
hK[k+1]-=x;
gamma*=n/2;

double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311326444
GPR[SPVAP]-1661311326444
GPR[EPVAP]-1661311327462
GPR[EPVS]-1661311327462
========
if(a>=1.0&&x>getDomain(getPopulationSize(),an,maxIterations)[1]){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311327468
GPR[SPVAP]-1661311327468
GPR[EPVAP]-1661311328486
GPR[EPVS]-1661311328486
========
if(a>=1.0&&x>getNumberOfTrials()){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311328488
GPR[SPVAP]-1661311328488
GPR[EPVAP]-1661311329525
GPR[EPVS]-1661311329525
========
if(maxIterations<21){
return factorial(n);
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311329527
GPR[SPVAP]-1661311329527
GPR[EPVAP]-1661311330550
GPR[EPVS]-1661311330550
========
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/x;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311330552
GPR[SPVAP]-1661311330552
GPR[EPVAP]-1661311332418
GPR[SPVATF]-1661311332418
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311334271
GPR[EPVS]-1661311334271
========
if(n!=0){
a=x-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
sum=Double.POSITIVE_INFINITY;
}
ret=Math.max(GAMMA*Math.abs(a),GAMMA);
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311334273
GPR[SPVAP]-1661311334273
GPR[EPVAP]-1661311335304
GPR[EPVS]-1661311335304
========
if(n!=0){
a=x-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
sum=Double.POSITIVE_INFINITY;
}
if(Math.abs(an)<=epsilon){
setResult(a,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311335305
GPR[SPVAP]-1661311335305
GPR[EPVAP]-1661311336324
GPR[EPVS]-1661311336324
========
ret=Math.max(GAMMA*Math.abs(a),GAMMA);
if(Math.abs(an)<=epsilon){
setResult(a,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311336325
GPR[SPVAP]-1661311336325
GPR[EPVAP]-1661311337346
GPR[EPVS]-1661311337346
========
if(n!=0){
a=x-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
sum=Double.POSITIVE_INFINITY;
}
ret=Math.max(GAMMA*Math.abs(a),GAMMA);
if(Math.abs(an)<=epsilon){
setResult(a,maxIterations);
return GAMMA;
}
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311337347
GPR[SPVAP]-1661311337347
GPR[EPVAP]-1661311338374
GPR[EPVS]-1661311338374
========
if(a>=1.0&&p>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311338376
GPR[SPVAP]-1661311338376
GPR[EPVAP]-1661311339398
GPR[EPVS]-1661311339398
========
if(a>=1.0&&p>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311339399
GPR[SPVAP]-1661311339399
GPR[EPVAP]-1661311340406
GPR[EPVS]-1661311340406
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311340408
GPR[SPVAP]-1661311340408
GPR[EPVAP]-1661311341442
GPR[EPVS]-1661311341442
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311341443
GPR[SPVAP]-1661311341443
GPR[EPVAP]-1661311342508
GPR[EPVS]-1661311342508
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&x>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311342509
GPR[SPVAP]-1661311342509
GPR[EPVAP]-1661311343537
GPR[EPVS]-1661311343537
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311343538
GPR[SPVAP]-1661311343538
GPR[EPVAP]-1661311344550
GPR[EPVS]-1661311344550
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&x>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311344551
GPR[SPVAP]-1661311344551
GPR[EPVAP]-1661311345580
GPR[EPVS]-1661311345580
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311345581
GPR[SPVAP]-1661311345581
GPR[EPVAP]-1661311346615
GPR[EPVS]-1661311346615
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311346616
GPR[SPVAP]-1661311346616
GPR[EPVAP]-1661311347643
GPR[EPVS]-1661311347643
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&p>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311347644
GPR[SPVAP]-1661311347644
GPR[EPVAP]-1661311348687
GPR[EPVS]-1661311348687
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311348689
GPR[SPVAP]-1661311348689
GPR[EPVAP]-1661311349707
GPR[EPVS]-1661311349707
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(a>=1.0&&p>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311349708
GPR[SPVAP]-1661311349708
GPR[EPVAP]-1661311350741
GPR[EPVS]-1661311350741
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311350742
GPR[SPVAP]-1661311350742
GPR[EPVAP]-1661311351783
GPR[EPVS]-1661311351783
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311351785
GPR[SPVAP]-1661311351785
GPR[EPVAP]-1661311352807
GPR[EPVS]-1661311352807
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311352808
GPR[SPVAP]-1661311352808
GPR[EPVAP]-1661311353837
GPR[EPVS]-1661311353837
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&x>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311353838
GPR[SPVAP]-1661311353838
GPR[EPVAP]-1661311354873
GPR[EPVS]-1661311354873
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>q){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311354874
GPR[SPVAP]-1661311354874
GPR[EPVAP]-1661311355910
GPR[EPVS]-1661311355910
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(a>=1.0&&p>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311355911
GPR[SPVAP]-1661311355911
GPR[EPVAP]-1661311356946
GPR[EPVS]-1661311356946
========
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>b){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311358664
GPR[SPVAP]-1661311358664
GPR[EPVAP]-1661311359726
GPR[EPVS]-1661311359726
========
if(u==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311359728
GPR[SPVAP]-1661311359728
GPR[EPVAP]-1661311360776
GPR[EPVS]-1661311360776
========
if(a==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311360778
GPR[SPVAP]-1661311360778
GPR[EPVAP]-1661311362653
GPR[SPVATF]-1661311362653
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311364491
GPR[EPVS]-1661311364491
========
if(t2==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311364492
GPR[SPVAP]-1661311364492
GPR[EPVAP]-1661311365539
GPR[EPVS]-1661311365539
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311365540
GPR[SPVAP]-1661311365540
GPR[EPVAP]-1661311366575
GPR[EPVS]-1661311366575
========
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311366577
GPR[SPVAP]-1661311366577
GPR[EPVAP]-1661311367607
GPR[EPVS]-1661311367607
========
if(x0==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311367608
GPR[SPVAP]-1661311367608
GPR[EPVAP]-1661311368627
GPR[EPVS]-1661311368627
========
if(x==0.0){
largest=Math.abs(x);
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311368630
GPR[SPVAP]-1661311368630
GPR[EPVAP]-1661311369655
GPR[EPVS]-1661311369655
========
if(a>=0.0){
double an=B+Math.sqrt(delta);
double B-Math.sqrt(a)=B-Math.sqrt(delta);
sum=Math.abs(dplus)>Math.abs(dminus)?dplus:dminus;
}else {
denominator=Math.sqrt(B*B-delta);
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311369656
GPR[SPVAP]-1661311369656
GPR[EPVAP]-1661311370576
GPR[EPVS]-1661311370576
========
if(sum!=0){
x=GAMMA-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(epsilon-min);
n=Double.POSITIVE_INFINITY;
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311370577
GPR[SPVAP]-1661311370577
GPR[EPVAP]-1661311371593
GPR[EPVS]-1661311371593
========
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311371594
GPR[SPVAP]-1661311371594
GPR[EPVAP]-1661311372605
GPR[EPVS]-1661311372605
========
if(delta==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311372610
GPR[SPVAP]-1661311372610
GPR[EPVAP]-1661311373639
GPR[EPVS]-1661311373639
========
if(oldDelta==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311373640
GPR[SPVAP]-1661311373640
GPR[EPVAP]-1661311374653
GPR[EPVS]-1661311374653
========
if(x==0.0){
hNew=Math.abs(x);
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311374660
GPR[SPVAP]-1661311374660
GPR[EPVAP]-1661311375683
GPR[EPVS]-1661311375683
========
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>MIN_VALUE){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311375689
GPR[SPVAP]-1661311375689
GPR[EPVAP]-1661311376716
GPR[EPVS]-1661311376716
========
if(x==0.0){
setResult(an,0);
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311376719
GPR[SPVAP]-1661311376719
GPR[EPVAP]-1661311377725
GPR[EPVS]-1661311377725
========
if(fa==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311377729
GPR[SPVAP]-1661311377729
GPR[EPVAP]-1661311378742
GPR[EPVS]-1661311378742
========
if(fb==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311378743
GPR[SPVAP]-1661311378743
GPR[EPVAP]-1661311379748
GPR[EPVS]-1661311379748
========
if(yA==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311379749
GPR[SPVAP]-1661311379749
GPR[EPVAP]-1661311380782
GPR[EPVS]-1661311380782
========
if(yB==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311380784
GPR[SPVAP]-1661311380784
GPR[EPVAP]-1661311381800
GPR[EPVS]-1661311381800
========
if(s==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311381803
GPR[SPVAP]-1661311381803
GPR[EPVAP]-1661311382818
GPR[EPVS]-1661311382818
========
if(fl==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311382825
GPR[SPVAP]-1661311382825
GPR[EPVAP]-1661311383838
GPR[EPVS]-1661311383838
========
if(maxIterations==0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311383840
GPR[SPVAP]-1661311383840
GPR[EPVAP]-1661311384871
GPR[EPVS]-1661311384871
========
lanczos=new double[Math.abs(maxIterations)];
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311384872
GPR[SPVAP]-1661311384872
GPR[EPVAP]-1661311385908
GPR[EPVS]-1661311385908
========
lanczos[0]=1.0;
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311385909
GPR[SPVAP]-1661311385909
GPR[EPVAP]-1661311387818
GPR[SPVATF]-1661311387818
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311389619
GPR[EPVS]-1661311389619
========
lanczos[0]=0.0;
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311389621
GPR[SPVAP]-1661311389621
GPR[EPVAP]-1661311391503
GPR[SPVATF]-1661311391503
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311393312
GPR[EPVS]-1661311393312
========
lanczos[0]=1.0;
lanczos[0]=0.0;
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311393313
GPR[SPVAP]-1661311393313
GPR[EPVAP]-1661311395182
GPR[SPVATF]-1661311395182
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311397007
GPR[EPVS]-1661311397007
========
if(initial==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311397010
GPR[SPVAP]-1661311397010
GPR[EPVAP]-1661311398039
GPR[EPVS]-1661311398039
========
if(lowerBound==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311398040
GPR[SPVAP]-1661311398040
GPR[EPVAP]-1661311399069
GPR[EPVS]-1661311399069
========
if(upperBound==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311399070
GPR[SPVAP]-1661311399070
GPR[EPVAP]-1661311400091
GPR[EPVS]-1661311400091
========
if(p==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311400093
GPR[SPVAP]-1661311400093
GPR[EPVAP]-1661311401161
GPR[EPVS]-1661311401161
========
if(maxIterations==0){
return Double.NaN;
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311401162
GPR[SPVAP]-1661311401162
GPR[EPVAP]-1661311403034
GPR[SPVATF]-1661311403034
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311404835
GPR[EPVS]-1661311404835
========
Arrays.sort(new double[maxIterations]);
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311404836
GPR[SPVAP]-1661311404836
GPR[EPVAP]-1661311405862
GPR[EPVS]-1661311405862
========
if(an<1){
return new double[maxIterations][0];
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311405863
GPR[SPVAP]-1661311405863
GPR[EPVAP]-1661311406881
GPR[EPVS]-1661311406881
========
if(mean==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311406883
GPR[SPVAP]-1661311406883
GPR[EPVAP]-1661311407901
GPR[EPVS]-1661311407901
========
if(sum==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311407905
GPR[SPVAP]-1661311407905
GPR[EPVAP]-1661311408932
GPR[EPVS]-1661311408932
========
if(min==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311408940
GPR[SPVAP]-1661311408940
GPR[EPVAP]-1661311409953
GPR[EPVS]-1661311409953
========
if(n==0){
ret=Double.NaN;
}else if(n==1){
variance=0.0;
}else {
variance=sum/(n-1);
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311409955
GPR[SPVAP]-1661311409955
GPR[EPVAP]-1661311410989
GPR[EPVS]-1661311410989
========
if(x==0.0){
hK[k+1]-=x;
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311410991
GPR[SPVAP]-1661311410991
GPR[EPVAP]-1661311412012
GPR[EPVS]-1661311412012
========
if(x==0.0){
gamma*=GAMMA/2;
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311412013
GPR[SPVAP]-1661311412013
GPR[EPVAP]-1661311413027
GPR[EPVS]-1661311413027
========
if(x==0.0){
hK[k+1]-=x;
gamma*=GAMMA/2;

ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311413028
GPR[SPVAP]-1661311413028
GPR[EPVAP]-1661311414059
GPR[EPVS]-1661311414059
========
if(maxIterations<21){
return factorial(n);
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311414066
GPR[SPVAP]-1661311414066
GPR[EPVAP]-1661311415076
GPR[EPVS]-1661311415076
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
if(u==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311415079
GPR[SPVAP]-1661311415079
GPR[EPVAP]-1661311416131
GPR[EPVS]-1661311416132
========
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(u==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311416133
GPR[SPVAP]-1661311416133
GPR[EPVAP]-1661311417158
GPR[EPVS]-1661311417158
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
if(a==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311417159
GPR[SPVAP]-1661311417159
GPR[EPVAP]-1661311418194
GPR[EPVS]-1661311418195
========
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(a==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311418196
GPR[SPVAP]-1661311418196
GPR[EPVAP]-1661311419235
GPR[EPVS]-1661311419235
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
if(t2==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311419236
GPR[SPVAP]-1661311419236
GPR[EPVAP]-1661311420277
GPR[EPVS]-1661311420277
========
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(t2==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311420278
GPR[SPVAP]-1661311420278
GPR[EPVAP]-1661311421291
GPR[EPVS]-1661311421291
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311421292
GPR[SPVAP]-1661311421292
GPR[EPVAP]-1661311422321
GPR[EPVS]-1661311422321
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(u==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311422322
GPR[SPVAP]-1661311422322
GPR[EPVAP]-1661311423348
GPR[EPVS]-1661311423348
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(a==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311423349
GPR[SPVAP]-1661311423349
GPR[EPVAP]-1661311424380
GPR[EPVS]-1661311424380
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=ret;
}
x=a+((Math.abs(ret)>GAMMA)?d:((d>0)?tol:-tol));
if(t2==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311424381
GPR[SPVAP]-1661311424381
GPR[EPVAP]-1661311425403
GPR[EPVS]-1661311425403
========
if(x==Integer.MAX_VALUE){
return 1;
}
if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311425406
GPR[SPVAP]-1661311425406
GPR[EPVAP]-1661311427303
GPR[SPVATF]-1661311427303
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311429153
GPR[EPVS]-1661311429153
========
if(x==null){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311429156
GPR[SPVAP]-1661311429156
GPR[EPVAP]-1661311430171
GPR[EPVS]-1661311430171
========
if(dMin==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311430174
GPR[SPVAP]-1661311430174
GPR[EPVAP]-1661311431209
GPR[EPVS]-1661311431209
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311432953
GPR[SPVAP]-1661311432953
GPR[EPVAP]-1661311434827
GPR[SPVATF]-1661311434827
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311436670
GPR[EPVS]-1661311436670
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311436671
GPR[SPVAP]-1661311436671
GPR[EPVAP]-1661311438574
GPR[SPVATF]-1661311438574
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311440401
GPR[EPVS]-1661311440401
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311440402
GPR[SPVAP]-1661311440402
GPR[EPVAP]-1661311442272
GPR[SPVATF]-1661311442272
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311444096
GPR[EPVS]-1661311444096
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311444097
GPR[SPVAP]-1661311444097
GPR[EPVAP]-1661311445989
GPR[SPVATF]-1661311445989
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311447801
GPR[EPVS]-1661311447801
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311447802
GPR[SPVAP]-1661311447802
GPR[EPVAP]-1661311449658
GPR[SPVATF]-1661311449658
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311451464
GPR[EPVS]-1661311451464
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311451465
GPR[SPVAP]-1661311451465
GPR[EPVAP]-1661311453333
GPR[SPVATF]-1661311453333
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311455216
GPR[EPVS]-1661311455216
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311455217
GPR[SPVAP]-1661311455217
GPR[EPVAP]-1661311457115
GPR[SPVATF]-1661311457115
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311458940
GPR[EPVS]-1661311458940
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311458942
GPR[SPVAP]-1661311458942
GPR[EPVAP]-1661311460802
GPR[SPVATF]-1661311460802
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311462635
GPR[EPVS]-1661311462635
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311462636
GPR[SPVAP]-1661311462636
GPR[EPVAP]-1661311464526
GPR[SPVATF]-1661311464526
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311466340
GPR[EPVS]-1661311466340
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311466341
GPR[SPVAP]-1661311466341
GPR[EPVAP]-1661311468208
GPR[SPVATF]-1661311468208
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311470015
GPR[EPVS]-1661311470015
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311470016
GPR[SPVAP]-1661311470016
GPR[EPVAP]-1661311471907
GPR[SPVATF]-1661311471907
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311473769
GPR[EPVS]-1661311473769
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311473770
GPR[SPVAP]-1661311473770
GPR[EPVAP]-1661311475636
GPR[SPVATF]-1661311475636
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311477475
GPR[EPVS]-1661311477475
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311477477
GPR[SPVAP]-1661311477477
GPR[EPVAP]-1661311479351
GPR[SPVATF]-1661311479351
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311481160
GPR[EPVS]-1661311481160
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311481161
GPR[SPVAP]-1661311481161
GPR[EPVAP]-1661311483069
GPR[SPVATF]-1661311483069
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311484892
GPR[EPVS]-1661311484892
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311484893
GPR[SPVAP]-1661311484893
GPR[EPVAP]-1661311486801
GPR[SPVATF]-1661311486801
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311488666
GPR[EPVS]-1661311488666
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311488667
GPR[SPVAP]-1661311488667
GPR[EPVAP]-1661311490534
GPR[SPVATF]-1661311490534
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311492354
GPR[EPVS]-1661311492354
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311492355
GPR[SPVAP]-1661311492355
GPR[EPVAP]-1661311494239
GPR[SPVATF]-1661311494239
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311496043
GPR[EPVS]-1661311496043
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311496044
GPR[SPVAP]-1661311496044
GPR[EPVAP]-1661311497924
GPR[SPVATF]-1661311497924
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311499749
GPR[EPVS]-1661311499749
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311499750
GPR[SPVAP]-1661311499750
GPR[EPVAP]-1661311501674
GPR[SPVATF]-1661311501674
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311503478
GPR[EPVS]-1661311503478
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311503479
GPR[SPVAP]-1661311503479
GPR[EPVAP]-1661311505358
GPR[SPVATF]-1661311505358
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311507189
GPR[EPVS]-1661311507189
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311507190
GPR[SPVAP]-1661311507190
GPR[EPVAP]-1661311509050
GPR[SPVATF]-1661311509050
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311510854
GPR[EPVS]-1661311510854
========
if(Double.isNaN(a)||Double.abs(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311510856
GPR[SPVAP]-1661311510856
GPR[EPVAP]-1661311511881
GPR[EPVS]-1661311511881
========
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311511883
GPR[SPVAP]-1661311511883
GPR[EPVAP]-1661311512911
GPR[EPVS]-1661311512911
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311512912
GPR[SPVAP]-1661311512912
GPR[EPVAP]-1661311513948
GPR[EPVS]-1661311513948
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311513949
GPR[SPVAP]-1661311513949
GPR[EPVAP]-1661311514982
GPR[EPVS]-1661311514982
========
if(Double.abs(a)||Double.abs(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311514984
GPR[SPVAP]-1661311514984
GPR[EPVAP]-1661311516013
GPR[EPVS]-1661311516013
========
if(Double.isNaN(a)||Double.isNaN(x)){
delta=0.5*a;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311516014
GPR[SPVAP]-1661311516014
GPR[EPVAP]-1661311517014
GPR[EPVS]-1661311517014
========
n=B*B-4*A;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311517017
GPR[SPVAP]-1661311517017
GPR[EPVAP]-1661311518043
GPR[EPVS]-1661311518043
========
if(n>=0.0){
double B+Math.sqrt(n)=B+Math.sqrt(delta);
double B-Math.sqrt(n)=B-Math.sqrt(delta);
sum=Math.abs(dplus)>Math.abs(dminus)?dplus:dminus;
}else {
denominator=Math.sqrt(B*B-delta);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311518044
GPR[SPVAP]-1661311518044
GPR[EPVAP]-1661311518974
GPR[EPVS]-1661311518974
========
if(sum!=0){
x=GAMMA-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
GAMMA=Double.POSITIVE_INFINITY;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311518975
GPR[SPVAP]-1661311518975
GPR[EPVAP]-1661311519983
GPR[EPVS]-1661311519983
========
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311519984
GPR[SPVAP]-1661311519984
GPR[EPVAP]-1661311521025
GPR[EPVS]-1661311521025
========
if(Math.abs(an)<=epsilon){
setResult(x,maxIterations);
return GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311521026
GPR[SPVAP]-1661311521026
GPR[EPVAP]-1661311522038
GPR[EPVS]-1661311522038
========
if(sum!=0){
x=GAMMA-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
n=Double.POSITIVE_INFINITY;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311522040
GPR[SPVAP]-1661311522040
GPR[EPVAP]-1661311523068
GPR[EPVS]-1661311523068
========
if(Math.abs(x-n)<=GAMMA){
setResult(x,maxIterations);
return GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311523070
GPR[SPVAP]-1661311523070
GPR[EPVAP]-1661311524079
GPR[EPVS]-1661311524079
========
GAMMA=GAMMA;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311524080
GPR[SPVAP]-1661311524080
GPR[EPVAP]-1661311525090
GPR[EPVS]-1661311525090
========
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
if(Math.abs(an)<=epsilon){
setResult(x,maxIterations);
return GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311525091
GPR[SPVAP]-1661311525091
GPR[EPVAP]-1661311526110
GPR[EPVS]-1661311526110
========
if(Double.isInfinite(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311526112
GPR[SPVAP]-1661311526112
GPR[EPVAP]-1661311527998
GPR[SPVATF]-1661311527998
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311529819
GPR[EPVS]-1661311529819
========
if(Double.isInfinite(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311529820
GPR[SPVAP]-1661311529820
GPR[EPVAP]-1661311531695
GPR[SPVATF]-1661311531695
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311533500
GPR[EPVS]-1661311533500
========
if(n==0){
ret=Double.NaN;
}else if(n==1){
variance=0.0;
}else {
variance=sum/(n-1);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311533505
GPR[SPVAP]-1661311533505
GPR[EPVAP]-1661311534519
GPR[EPVS]-1661311534519
========
x=Math.max(lower,a-100*MathUtils.EPSILON);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311534522
GPR[SPVAP]-1661311534522
GPR[EPVAP]-1661311535543
GPR[EPVS]-1661311535543
========
a=x-sum;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311535544
GPR[SPVAP]-1661311535544
GPR[EPVAP]-1661311536588
GPR[EPVS]-1661311536588
========
an=GAMMA+sum;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311536589
GPR[SPVAP]-1661311536589
GPR[EPVAP]-1661311537621
GPR[EPVS]-1661311537621
========
GAMMA=Math.min(upper,an+100*MathUtils.EPSILON);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311537622
GPR[SPVAP]-1661311537622
GPR[EPVAP]-1661311538639
GPR[EPVS]-1661311538639
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=ret;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311538641
GPR[SPVAP]-1661311538641
GPR[EPVAP]-1661311539650
GPR[EPVS]-1661311539650
========
if(Double.isNaN(a)||Double.ulp(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311539659
GPR[SPVAP]-1661311539659
GPR[EPVAP]-1661311540688
GPR[EPVS]-1661311540688
========
if(Double.isNaN(a)||Double.isNaN(x)){
setResult(GAMMA,0);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311540694
GPR[SPVAP]-1661311540694
GPR[EPVAP]-1661311541717
GPR[EPVS]-1661311541717
========
clearResult();
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311541719
GPR[SPVAP]-1661311541719
GPR[EPVAP]-1661311542729
GPR[EPVS]-1661311542729
========
verifyInterval(GAMMA,GAMMA);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311542730
GPR[SPVAP]-1661311542730
GPR[EPVAP]-1661311543747
GPR[EPVS]-1661311543747
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=x;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311543749
GPR[SPVAP]-1661311543749
GPR[EPVAP]-1661311545611
GPR[SPVATF]-1661311545611
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311547448
GPR[EPVS]-1661311547448
========
if(Double.isNaN(a)||Double.isNaN(x)){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311547449
GPR[SPVAP]-1661311547449
GPR[EPVAP]-1661311548457
GPR[EPVS]-1661311548457
========
if(Double.isNaN(a)||Double.isNaN(x)){
x=Math.ceil(GAMMA);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311548458
GPR[SPVAP]-1661311548458
GPR[EPVAP]-1661311550363
GPR[SPVATF]-1661311550363
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311552180
GPR[EPVS]-1661311552180
========
if(Double.isNaN(a)||Double.isNaN(x)){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
x=Math.ceil(GAMMA);

ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311552182
GPR[SPVAP]-1661311552182
GPR[EPVAP]-1661311553195
GPR[EPVS]-1661311553195
========
if(Double.isNaN(a)||Double.isNaN(x)){
x=Math.ceil(GAMMA);
ret=x;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311553197
GPR[SPVAP]-1661311553197
GPR[EPVAP]-1661311555109
GPR[SPVATF]-1661311555109
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311556942
GPR[EPVS]-1661311556942
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(MIN_VALUE==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311556944
GPR[SPVAP]-1661311556944
GPR[EPVAP]-1661311557963
GPR[EPVS]-1661311557963
========
if(Double.isNaN(x)||Double.isInfinite(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311557965
GPR[SPVAP]-1661311557965
GPR[EPVAP]-1661311559847
GPR[SPVATF]-1661311559847
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311561656
GPR[EPVS]-1661311561656
========
if(Double.isNaN(a)||Double.isInfinite(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311561657
GPR[SPVAP]-1661311561657
GPR[EPVAP]-1661311563532
GPR[SPVATF]-1661311563532
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311565359
GPR[EPVS]-1661311565359
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(d==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311565360
GPR[SPVAP]-1661311565360
GPR[EPVAP]-1661311566390
GPR[EPVS]-1661311566390
========
if(maxIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311566400
GPR[SPVAP]-1661311566400
GPR[EPVAP]-1661311567431
GPR[EPVS]-1661311567431
========
if(Double.isNaN(a)||Double.isNaN(x)){
xbar=x;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311567433
GPR[SPVAP]-1661311567433
GPR[EPVAP]-1661311568450
GPR[EPVS]-1661311568450
========
GAMMA+=x;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311568451
GPR[SPVAP]-1661311568451
GPR[EPVAP]-1661311569492
GPR[EPVS]-1661311569492
========
GAMMA+=GAMMA;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311569493
GPR[SPVAP]-1661311569493
GPR[EPVAP]-1661311570569
GPR[EPVS]-1661311570569
========
if(maxIterations==0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311570575
GPR[SPVAP]-1661311570575
GPR[EPVAP]-1661311571585
GPR[EPVS]-1661311571585
========
lanczos=new double[Math.abs(maxIterations)];
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311571586
GPR[SPVAP]-1661311571586
GPR[EPVAP]-1661311572608
GPR[EPVS]-1661311572608
========
lanczos[0]=1.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311572609
GPR[SPVAP]-1661311572609
GPR[EPVAP]-1661311574475
GPR[SPVATF]-1661311574475
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311576320
GPR[EPVS]-1661311576320
========
lanczos[0]=0.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311576321
GPR[SPVAP]-1661311576321
GPR[EPVAP]-1661311578224
GPR[SPVATF]-1661311578224
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311580065
GPR[EPVS]-1661311580065
========
lanczos[0]=1.0;
lanczos[0]=0.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311580066
GPR[SPVAP]-1661311580066
GPR[EPVAP]-1661311581934
GPR[SPVATF]-1661311581934
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311583770
GPR[EPVS]-1661311583770
========
if(maxIterations==0){
return Double.NaN;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311583774
GPR[SPVAP]-1661311583774
GPR[EPVAP]-1661311585663
GPR[SPVATF]-1661311585663
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311587479
GPR[EPVS]-1661311587479
========
Arrays.sort(new double[maxIterations]);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311587480
GPR[SPVAP]-1661311587480
GPR[EPVAP]-1661311588499
GPR[EPVS]-1661311588499
========
if(an<1){
return new double[maxIterations][0];
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311588500
GPR[SPVAP]-1661311588500
GPR[EPVAP]-1661311589519
GPR[EPVS]-1661311589519
========
if(an>=n){
return new double[maxIterations][maxIterations-1];
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311589520
GPR[SPVAP]-1661311589520
GPR[EPVAP]-1661311590573
GPR[EPVS]-1661311590573
========
if(Double.abs(a)||Double.ulp(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311590576
GPR[SPVAP]-1661311590576
GPR[EPVAP]-1661311591617
GPR[EPVS]-1661311591617
========
if(Double.isNaN(a)||Double.isNaN(x)){
hK[k+1]-=a;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311591622
GPR[SPVAP]-1661311591622
GPR[EPVAP]-1661311592635
GPR[EPVS]-1661311592635
========
if(Double.isNaN(a)||Double.isNaN(x)){
Arrays.fill(lanczos,maxIterations+1,maxIterations,0);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311592636
GPR[SPVAP]-1661311592636
GPR[EPVAP]-1661311593640
GPR[EPVS]-1661311593640
========
if(Double.isNaN(a)||Double.isNaN(x)){
gamma*=-1/(a*lanczos[maxIterations+1])/2;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311593641
GPR[SPVAP]-1661311593641
GPR[EPVAP]-1661311594651
GPR[EPVS]-1661311594651
========
if(Double.isNaN(a)||Double.isNaN(x)){
hK[k+1]-=a;
Arrays.fill(lanczos,maxIterations+1,maxIterations,0);
gamma*=-1/(a*lanczos[maxIterations+1])/2;

ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311594652
GPR[SPVAP]-1661311594652
GPR[EPVAP]-1661311595673
GPR[EPVS]-1661311595673
========
if(sum==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311595676
GPR[SPVAP]-1661311595676
GPR[EPVAP]-1661311596683
GPR[EPVS]-1661311596683
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311596688
GPR[SPVAP]-1661311596688
GPR[EPVAP]-1661311597754
GPR[EPVS]-1661311597755
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311597755
GPR[SPVAP]-1661311597755
GPR[EPVAP]-1661311598774
GPR[EPVS]-1661311598774
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311598776
GPR[SPVAP]-1661311598776
GPR[EPVAP]-1661311599815
GPR[EPVS]-1661311599815
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311599816
GPR[SPVAP]-1661311599816
GPR[EPVAP]-1661311600845
GPR[EPVS]-1661311600845
========
if(x==Integer.MAX_VALUE){
return 1;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}

========
MM Copying to MM
GPR[SPVS]-1661311600852
GPR[SPVAP]-1661311600852
GPR[EPVAP]-1661311602742
GPR[SPVATF]-1661311602742
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311604554
GPR[EPVS]-1661311604554
GPR[ESUN]-1661311604555
GPR[SSUN]-1661311604555
org.apache.commons.math.special.Gamma,161
GPR[ESUN]-1661311604881
GPR[SSUN]-1661311604881
org.apache.commons.math.special.Gamma,163
GPR[ESUN]-1661311605070
GPR[SSUN]-1661311605070
org.apache.commons.math.special.Gamma,169
========
for(double a : lanczos){
sum+=Math.abs(a);
}
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311606164
GPR[SPVAP]-1661311606164
GPR[EPVAP]-1661311608536
GPR[EPVS]-1661311608536
========
for(double a : lanczos){
sum+=a*a;
}
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311608537
GPR[SPVAP]-1661311608537
GPR[EPVAP]-1661311609799
GPR[EPVS]-1661311609799
========
double n=0.0;
if(maxIterations==1){
return lanczos[maxIterations];
}
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311609800
GPR[SPVAP]-1661311609800
GPR[EPVAP]-1661311613757
GPR[SPVATF]-1661311613757
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311615568
GPR[EPVS]-1661311615568
========
double n=0.0;
double an=1.0/c;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311615570
GPR[SPVAP]-1661311615570
GPR[EPVAP]-1661311616583
GPR[EPVS]-1661311616583
========
double n=0.0;
double an=1.0/b;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311616584
GPR[SPVAP]-1661311616584
GPR[EPVAP]-1661311617601
GPR[EPVS]-1661311617601
========
double n=0.0;
double an=1.0/step;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311617603
GPR[SPVAP]-1661311617603
GPR[EPVAP]-1661311618637
GPR[EPVS]-1661311618637
========
checkVectorDimensions(v.length);
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311618638
GPR[SPVAP]-1661311618638
GPR[EPVAP]-1661311619659
GPR[EPVS]-1661311619659
========
lanczos[maxIterations]=an;
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311619661
GPR[SPVAP]-1661311619661
GPR[EPVAP]-1661311620687
GPR[EPVS]-1661311620687
========
double n=0.0;
double an=1.0/phi;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311620689
GPR[SPVAP]-1661311620689
GPR[EPVAP]-1661311621704
GPR[EPVS]-1661311621704
========
double n=0.0;
double an=1.0/p0;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311621705
GPR[SPVAP]-1661311621705
GPR[EPVAP]-1661311622737
GPR[EPVS]-1661311622737
========
double n=0.0;
++n;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311622738
GPR[SPVAP]-1661311622738
GPR[EPVAP]-1661311624646
GPR[SPVATF]-1661311624646
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311626472
GPR[EPVS]-1661311626472
========
double n=0.0;
++n;
double an=1.0/b;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311626473
GPR[SPVAP]-1661311626473
GPR[EPVAP]-1661311627491
GPR[EPVS]-1661311627491
========
double n=0.0;
double an=1.0/halfStep;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311627494
GPR[SPVAP]-1661311627494
GPR[EPVAP]-1661311628508
GPR[EPVS]-1661311628508
========
if(test(lanczos,maxIterations,maxIterations)){
sum=0.0;
for(int maxIterations=begin;i<begin+length;i++){
sum+=values[i];
}
}
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311628510
GPR[SPVAP]-1661311628510
GPR[EPVAP]-1661311629551
GPR[EPVS]-1661311629551
========
double n=0.0;
double an=1.0/a;
if(GAMMA<GAMMA||initial>a||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311629553
GPR[SPVAP]-1661311629553
GPR[EPVAP]-1661311630579
GPR[EPVS]-1661311630579
========
double n=0.0;
double an=1.0/a;
n+=an;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311630581
GPR[SPVAP]-1661311630581
GPR[EPVAP]-1661311632527
GPR[SPVATF]-1661311632527
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311634385
GPR[EPVS]-1661311634385
========
GAMMA=a/n;
double n=0.0;
double an=1.0/a;
double sum=an;

========
MM Copying to MM
GPR[SPVS]-1661311634386
GPR[SPVAP]-1661311634386
GPR[EPVAP]-1661311635431
GPR[EPVS]-1661311635431
GPR[ESUN]-1661311635439
GPR[SSUN]-1661311635439
org.apache.commons.math.special.Gamma,170
GPR[ESUN]-1661311635763
GPR[SSUN]-1661311635763
org.apache.commons.math.special.Gamma,171
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
largest=Math.abs(an);
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311637448
GPR[SPVAP]-1661311637448
GPR[EPVAP]-1661311639774
GPR[EPVS]-1661311639774
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=p*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311639776
GPR[SPVAP]-1661311639776
GPR[EPVAP]-1661311641056
GPR[EPVS]-1661311641056
========
double an=1.0/imaginary;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311641057
GPR[SPVAP]-1661311641057
GPR[EPVAP]-1661311642276
GPR[EPVS]-1661311642276
========
double an=1.0/real;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311642277
GPR[SPVAP]-1661311642277
GPR[EPVAP]-1661311643524
GPR[EPVS]-1661311643524
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311643525
GPR[SPVAP]-1661311643525
GPR[EPVAP]-1661311644802
GPR[EPVS]-1661311644802
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311644803
GPR[SPVAP]-1661311644803
GPR[EPVAP]-1661311646108
GPR[EPVS]-1661311646108
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311646110
GPR[SPVAP]-1661311646110
GPR[EPVAP]-1661311647361
GPR[EPVS]-1661311647361
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311647362
GPR[SPVAP]-1661311647362
GPR[EPVAP]-1661311648599
GPR[EPVS]-1661311648599
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311648600
GPR[SPVAP]-1661311648600
GPR[EPVAP]-1661311649861
GPR[EPVS]-1661311649861
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311649862
GPR[SPVAP]-1661311649862
GPR[EPVAP]-1661311651148
GPR[EPVS]-1661311651148
========
double an=1.0/a;
double sum=relativeAccuracy;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311651150
GPR[SPVAP]-1661311651150
GPR[EPVAP]-1661311652390
GPR[EPVS]-1661311652390
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
r0=GAMMA;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311652394
GPR[SPVAP]-1661311652394
GPR[EPVAP]-1661311653683
GPR[EPVS]-1661311653683
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
this.denominator=1;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311653686
GPR[SPVAP]-1661311653686
GPR[EPVAP]-1661311654962
GPR[EPVS]-1661311654962
========
double an=1.0/meanX;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=meanX+meanX;
}

========
MM Copying to MM
GPR[SPVS]-1661311654964
GPR[SPVAP]-1661311654964
GPR[EPVAP]-1661311656221
GPR[EPVS]-1661311656221
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=meanX+meanX;
}

========
MM Copying to MM
GPR[SPVS]-1661311656222
GPR[SPVAP]-1661311656222
GPR[EPVAP]-1661311657471
GPR[EPVS]-1661311657471
========
double an=1.0/beta;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311657473
GPR[SPVAP]-1661311657473
GPR[EPVAP]-1661311658732
GPR[EPVS]-1661311658732
========
double an=1.0/meanX;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311658733
GPR[SPVAP]-1661311658733
GPR[EPVAP]-1661311659987
GPR[EPVS]-1661311659987
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=meanXY+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311659988
GPR[SPVAP]-1661311659988
GPR[EPVAP]-1661311661240
GPR[EPVS]-1661311661240
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=meanX+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311661241
GPR[SPVAP]-1661311661241
GPR[EPVAP]-1661311662495
GPR[EPVS]-1661311662495
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=meanY+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311662496
GPR[SPVAP]-1661311662496
GPR[EPVAP]-1661311663790
GPR[EPVS]-1661311663790
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+meanXSquared;
}

========
MM Copying to MM
GPR[SPVS]-1661311663791
GPR[SPVAP]-1661311663791
GPR[EPVAP]-1661311665095
GPR[EPVS]-1661311665095
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+meanX;
}

========
MM Copying to MM
GPR[SPVS]-1661311665096
GPR[SPVAP]-1661311665096
GPR[EPVAP]-1661311666342
GPR[EPVS]-1661311666342
========
lanczos[maxIterations]=sum*x+n;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311666343
GPR[SPVAP]-1661311666343
GPR[EPVAP]-1661311667643
GPR[EPVS]-1661311667643
========
lanczos[maxIterations]=Math.abs(lanczos[i]-lanczos[i]);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311667644
GPR[SPVAP]-1661311667644
GPR[EPVAP]-1661311668902
GPR[EPVS]-1661311668902
========
double an=1.0/d12;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311668904
GPR[SPVAP]-1661311668904
GPR[EPVAP]-1661311670150
GPR[EPVS]-1661311670150
========
double an=1.0/d23;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311670151
GPR[SPVAP]-1661311670151
GPR[EPVAP]-1661311671414
GPR[EPVS]-1661311671414
========
double an=1.0/a;
double sum=eiM1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311671416
GPR[SPVAP]-1661311671416
GPR[EPVAP]-1661311672718
GPR[EPVS]-1661311672718
========
double an=1.0/a;
double sum=di;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311672719
GPR[SPVAP]-1661311672719
GPR[EPVAP]-1661311673972
GPR[EPVS]-1661311673972
========
double an=1.0/q2;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311673979
GPR[SPVAP]-1661311673979
GPR[EPVAP]-1661311675231
GPR[EPVS]-1661311675231
========
GAMMA=Math.abs(sum/epsilon-1.0);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311675233
GPR[SPVAP]-1661311675233
GPR[EPVAP]-1661311676493
GPR[EPVS]-1661311676493
========
epsilon=n/a;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311676495
GPR[SPVAP]-1661311676495
GPR[EPVAP]-1661311680369
GPR[SPVATF]-1661311680369
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311682187
GPR[EPVS]-1661311682187
========
GAMMA=GAMMA;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311682188
GPR[SPVAP]-1661311682188
GPR[EPVAP]-1661311683205
GPR[EPVS]-1661311683205
========
GAMMA=n;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311683206
GPR[SPVAP]-1661311683206
GPR[EPVAP]-1661311684219
GPR[EPVS]-1661311684219
========
GAMMA=an;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311684221
GPR[SPVAP]-1661311684221
GPR[EPVAP]-1661311685248
GPR[EPVS]-1661311685248
========
an=a;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311685249
GPR[SPVAP]-1661311685249
GPR[EPVAP]-1661311686269
GPR[EPVS]-1661311686269
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
ratio=a/epsilon;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311686271
GPR[SPVAP]-1661311686271
GPR[EPVAP]-1661311687298
GPR[EPVS]-1661311687299
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=x1+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311687300
GPR[SPVAP]-1661311687300
GPR[EPVAP]-1661311688341
GPR[EPVS]-1661311688341
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+tolerance;
}

========
MM Copying to MM
GPR[SPVS]-1661311688342
GPR[SPVAP]-1661311688342
GPR[EPVAP]-1661311689378
GPR[EPVS]-1661311689378
========
double an=1.0/a;
double sum=scalAbsoluteTolerance;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311689379
GPR[SPVAP]-1661311689379
GPR[EPVAP]-1661311690393
GPR[EPVS]-1661311690393
========
double an=1.0/a;
double sum=scalRelativeTolerance;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311690394
GPR[SPVAP]-1661311690394
GPR[EPVAP]-1661311691415
GPR[EPVS]-1661311691415
========
double an=1.0/a;
double sum=yScale;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311691416
GPR[SPVAP]-1661311691416
GPR[EPVAP]-1661311692431
GPR[EPVS]-1661311692431
========
double an=1.0/a;
double sum=h;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311692432
GPR[SPVAP]-1661311692432
GPR[EPVAP]-1661311693446
GPR[EPVS]-1661311693447
========
double an=1.0/a;
double sum=errSum;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311693448
GPR[SPVAP]-1661311693448
GPR[EPVAP]-1661311694464
GPR[EPVS]-1661311694464
========
double an=1.0/a;
double sum=tol;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311694465
GPR[SPVAP]-1661311694465
GPR[EPVAP]-1661311695486
GPR[EPVS]-1661311695486
========
double an=1.0/a;
double sum=relativeSymmetryThreshold;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311695488
GPR[SPVAP]-1661311695488
GPR[EPVAP]-1661311696498
GPR[EPVS]-1661311696498
========
double an=1.0/a;
double sum=e1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311696500
GPR[SPVAP]-1661311696500
GPR[EPVAP]-1661311697511
GPR[EPVS]-1661311697511
========
double an=1.0/a;
double sum=e3;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311697512
GPR[SPVAP]-1661311697512
GPR[EPVAP]-1661311698540
GPR[EPVS]-1661311698540
========
double an=1.0/a;
double sum=e4;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311698540
GPR[SPVAP]-1661311698540
GPR[EPVAP]-1661311699545
GPR[EPVS]-1661311699545
========
double an=1.0/a;
double sum=e5;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311699546
GPR[SPVAP]-1661311699546
GPR[EPVAP]-1661311700558
GPR[EPVS]-1661311700558
========
double an=1.0/a;
double sum=e6;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311700559
GPR[SPVAP]-1661311700559
GPR[EPVAP]-1661311701587
GPR[EPVS]-1661311701587
========
double an=1.0/a;
double sum=e7;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311701588
GPR[SPVAP]-1661311701588
GPR[EPVAP]-1661311702599
GPR[EPVS]-1661311702599
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
hNew=Math.abs(an);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311702601
GPR[SPVAP]-1661311702601
GPR[EPVAP]-1661311703625
GPR[EPVS]-1661311703625
========
double an=1.0/a;
double sum=e1_01;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311703628
GPR[SPVAP]-1661311703628
GPR[EPVAP]-1661311704656
GPR[EPVS]-1661311704656
========
double an=1.0/a;
double sum=e1_06;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311704657
GPR[SPVAP]-1661311704657
GPR[EPVAP]-1661311705694
GPR[EPVS]-1661311705694
========
double an=1.0/a;
double sum=e1_07;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311705695
GPR[SPVAP]-1661311705695
GPR[EPVAP]-1661311706732
GPR[EPVS]-1661311706732
========
double an=1.0/a;
double sum=e1_08;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311706733
GPR[SPVAP]-1661311706733
GPR[EPVAP]-1661311707751
GPR[EPVS]-1661311707751
========
double an=1.0/a;
double sum=e1_09;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311707752
GPR[SPVAP]-1661311707752
GPR[EPVAP]-1661311708791
GPR[EPVS]-1661311708791
========
double an=1.0/a;
double sum=e1_10;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311708792
GPR[SPVAP]-1661311708792
GPR[EPVAP]-1661311709819
GPR[EPVS]-1661311709819
========
double an=1.0/a;
double sum=e1_11;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311709820
GPR[SPVAP]-1661311709820
GPR[EPVAP]-1661311710841
GPR[EPVS]-1661311710841
========
double an=1.0/a;
double sum=e1_12;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311710842
GPR[SPVAP]-1661311710842
GPR[EPVAP]-1661311711865
GPR[EPVS]-1661311711865
========
double an=1.0/a;
double sum=e2_01;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311711866
GPR[SPVAP]-1661311711866
GPR[EPVAP]-1661311712872
GPR[EPVS]-1661311712872
========
double an=1.0/a;
double sum=e2_06;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311712873
GPR[SPVAP]-1661311712873
GPR[EPVAP]-1661311713889
GPR[EPVS]-1661311713889
========
double an=1.0/a;
double sum=e2_07;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311713891
GPR[SPVAP]-1661311713891
GPR[EPVAP]-1661311714907
GPR[EPVS]-1661311714907
========
double an=1.0/a;
double sum=e2_08;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311714908
GPR[SPVAP]-1661311714908
GPR[EPVAP]-1661311715959
GPR[EPVS]-1661311715959
========
double an=1.0/a;
double sum=e2_09;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311715960
GPR[SPVAP]-1661311715960
GPR[EPVAP]-1661311716978
GPR[EPVS]-1661311716978
========
double an=1.0/a;
double sum=e2_10;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311716979
GPR[SPVAP]-1661311716979
GPR[EPVAP]-1661311718005
GPR[EPVS]-1661311718005
========
double an=1.0/a;
double sum=e2_11;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311718006
GPR[SPVAP]-1661311718006
GPR[EPVAP]-1661311719023
GPR[EPVS]-1661311719023
========
double an=1.0/a;
double sum=e2_12;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311719024
GPR[SPVAP]-1661311719024
GPR[EPVAP]-1661311720021
GPR[EPVS]-1661311720022
========
double an=1.0/a;
double sum=errSum1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311720023
GPR[SPVAP]-1661311720023
GPR[EPVAP]-1661311721033
GPR[EPVS]-1661311721033
========
double an=1.0/a;
double sum=errSum2;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311721034
GPR[SPVAP]-1661311721034
GPR[EPVAP]-1661311722053
GPR[EPVS]-1661311722053
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
iterationCount=maxIterations;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311722055
GPR[SPVAP]-1661311722055
GPR[EPVAP]-1661311723063
GPR[EPVS]-1661311723063
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
largest=sum.abs();
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311723065
GPR[SPVAP]-1661311723065
GPR[EPVAP]-1661311724082
GPR[EPVS]-1661311724082
========
double an=1.0/a;
double sum=x2;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311724085
GPR[SPVAP]-1661311724085
GPR[EPVAP]-1661311725103
GPR[EPVS]-1661311725103
========
double an=1.0/a;
double sum=x1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311725104
GPR[SPVAP]-1661311725104
GPR[EPVAP]-1661311726146
GPR[EPVS]-1661311726146
========
double an=1.0/a;
double sum=rkk;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311726151
GPR[SPVAP]-1661311726151
GPR[EPVAP]-1661311727163
GPR[EPVS]-1661311727163
========
double an=1.0/a;
double sum=absDCurrent;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311727165
GPR[SPVAP]-1661311727165
GPR[EPVAP]-1661311728173
GPR[EPVS]-1661311728173
========
double an=1.0/a;
double sum=splitTolerance;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311728174
GPR[SPVAP]-1661311728174
GPR[EPVAP]-1661311729203
GPR[EPVS]-1661311729203
========
double an=1.0/a;
double sum=right;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311729206
GPR[SPVAP]-1661311729206
GPR[EPVAP]-1661311730237
GPR[EPVS]-1661311730237
========
double an=1.0/a;
double sum=left;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311730238
GPR[SPVAP]-1661311730238
GPR[EPVAP]-1661311731256
GPR[EPVS]-1661311731256
========
sum=Math.max(lower,an-100*MathUtils.EPSILON);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311731257
GPR[SPVAP]-1661311731257
GPR[EPVAP]-1661311732267
GPR[EPVS]-1661311732267
========
an=sum-a;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311732268
GPR[SPVAP]-1661311732268
GPR[EPVAP]-1661311733287
GPR[EPVS]-1661311733287
========
double an=1.0/left;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311733289
GPR[SPVAP]-1661311733289
GPR[EPVAP]-1661311734296
GPR[EPVS]-1661311734296
========
double an=1.0/right;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311734298
GPR[SPVAP]-1661311734298
GPR[EPVAP]-1661311735305
GPR[EPVS]-1661311735305
========
GAMMA=Math.min(upper,an+100*MathUtils.EPSILON);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311735307
GPR[SPVAP]-1661311735307
GPR[EPVAP]-1661311736336
GPR[EPVS]-1661311736336
========
double an=1.0/a;
double sum=eCurrent;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311736338
GPR[SPVAP]-1661311736338
GPR[EPVAP]-1661311737370
GPR[EPVS]-1661311737370
========
an=Math.abs(lanczos[maxIterations]);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311737372
GPR[SPVAP]-1661311737372
GPR[EPVAP]-1661311738401
GPR[EPVS]-1661311738401
========
GAMMA=Math.max(eMax,an);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311738402
GPR[SPVAP]-1661311738402
GPR[EPVAP]-1661311739426
GPR[EPVS]-1661311739426
========
double an=1.0/a;
int sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311739430
GPR[SPVAP]-1661311739430
GPR[EPVAP]-1661311740446
GPR[EPVS]-1661311740446
========
if(Math.abs(n)==maxIterations){
return ;
}
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311740447
GPR[SPVAP]-1661311740447
GPR[EPVAP]-1661311741470
GPR[EPVS]-1661311741470
========
GAMMA=1-(GAMMA*GAMMA)/(an*y3);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311741471
GPR[SPVAP]-1661311741471
GPR[EPVAP]-1661311742518
GPR[EPVS]-1661311742518
========
sum=(MathUtils.sign(GAMMA)*MathUtils.sign(an))*(a-x)/Math.sqrt(GAMMA);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311742519
GPR[SPVAP]-1661311742519
GPR[EPVAP]-1661311743525
GPR[EPVS]-1661311743525
========
x=a-sum;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311743526
GPR[SPVAP]-1661311743526
GPR[EPVAP]-1661311744568
GPR[EPVS]-1661311744568
========
n=Math.max(GAMMA*Math.abs(x),GAMMA);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311744569
GPR[SPVAP]-1661311744569
GPR[EPVAP]-1661311746478
GPR[SPVATF]-1661311746478
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311748292
GPR[EPVS]-1661311748292
========
double an=1.0/a;
double sum=NEGATIVE_INFINITY;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311748295
GPR[SPVAP]-1661311748295
GPR[EPVAP]-1661311749314
GPR[EPVS]-1661311749314
========
double an=1.0/a;
long sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311749316
GPR[SPVAP]-1661311749316
GPR[EPVAP]-1661311750335
GPR[EPVS]-1661311750335
========
double an=1.0/a;
assert maxUlps > 0 && maxUlps < NAN_GAP;

double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311750336
GPR[SPVAP]-1661311750336
GPR[EPVAP]-1661311751363
GPR[EPVS]-1661311751363
========
if(Double.doubleToLongBits(GAMMA)<0){
yInt=SGN_MASK-yInt;
}
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311751364
GPR[SPVAP]-1661311751364
GPR[EPVAP]-1661311752414
GPR[EPVS]-1661311752414
========
double an=1.0/a;
double sum=c;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311752416
GPR[SPVAP]-1661311752416
GPR[EPVAP]-1661311753441
GPR[EPVS]-1661311753441
========
double an=1.0/a;
double sum=d;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311753443
GPR[SPVAP]-1661311753443
GPR[EPVAP]-1661311754449
GPR[EPVS]-1661311754449
========
double an=1.0/a;
double sum=q;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311754450
GPR[SPVAP]-1661311754450
GPR[EPVAP]-1661311755483
GPR[EPVS]-1661311755483
========
double an=1.0/a;
double sum=an;
GAMMA=GAMMA*c1-4*n;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311755485
GPR[SPVAP]-1661311755485
GPR[EPVAP]-1661311756503
GPR[EPVS]-1661311756503
========
double an=1.0/a;
double sum=an;
GAMMA=a+(-2.0*n)/(GAMMA+Math.sqrt(GAMMA));
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311756504
GPR[SPVAP]-1661311756504
GPR[EPVAP]-1661311757540
GPR[EPVS]-1661311757540
========
double an=1.0/a;
double sum=an;
GAMMA=a+(-2.0*n)/(GAMMA-Math.sqrt(GAMMA));
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311757541
GPR[SPVAP]-1661311757541
GPR[EPVAP]-1661311758553
GPR[EPVS]-1661311758553
========
double an=1.0/a;
double sum=an;
an=isSequence(GAMMA,GAMMA,GAMMA)?xplus:GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311758554
GPR[SPVAP]-1661311758554
GPR[EPVAP]-1661311759575
GPR[EPVS]-1661311759575
========
double an=1.0/a;
double sum=an;
sum=Math.max(x*Math.abs(an),GAMMA);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311759575
GPR[SPVAP]-1661311759575
GPR[EPVAP]-1661311761466
GPR[SPVATF]-1661311761466
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311763287
GPR[EPVS]-1661311763287
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
setResult(an,maxIterations);
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311763289
GPR[SPVAP]-1661311763289
GPR[EPVAP]-1661311764302
GPR[EPVS]-1661311764302
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
ratio=(yDot1[j]-yDot0[j])/scale[j];
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311764304
GPR[SPVAP]-1661311764304
GPR[EPVAP]-1661311765310
GPR[EPVS]-1661311765310
========
double an=1.0/a;
sum=Math.sqrt(yDDotOnScale)/an;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311765311
GPR[SPVAP]-1661311765311
GPR[EPVAP]-1661311766342
GPR[EPVS]-1661311766342
========
an=Math.min(100.0*Math.abs(h),GAMMA);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311766343
GPR[SPVAP]-1661311766343
GPR[EPVAP]-1661311767409
GPR[EPVS]-1661311767409
========
an=Math.max(h,1.0E-12*Math.abs(GAMMA));
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311767410
GPR[SPVAP]-1661311767410
GPR[EPVAP]-1661311768427
GPR[EPVS]-1661311768427
========
if(an<getMinStep()){
h=getMinStep();
}
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311768428
GPR[SPVAP]-1661311768428
GPR[EPVAP]-1661311769445
GPR[EPVS]-1661311769445
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>x1&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311769447
GPR[SPVAP]-1661311769447
GPR[EPVAP]-1661311770472
GPR[EPVS]-1661311770472
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&x<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311770473
GPR[SPVAP]-1661311770473
GPR[EPVAP]-1661311772357
GPR[SPVATF]-1661311772357
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311774179
GPR[EPVS]-1661311774179
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<x2){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311774180
GPR[SPVAP]-1661311774180
GPR[EPVAP]-1661311775192
GPR[EPVS]-1661311775192
========
GAMMA=Math.max(GAMMA*Math.abs(an),GAMMA);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311775194
GPR[SPVAP]-1661311775194
GPR[EPVAP]-1661311776216
GPR[EPVS]-1661311776216
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
setResult(an,0);
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311776217
GPR[SPVAP]-1661311776217
GPR[EPVAP]-1661311777225
GPR[EPVS]-1661311777225
========
sum=df(GAMMA,GAMMA,n,n);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311777229
GPR[SPVAP]-1661311777229
GPR[EPVAP]-1661311778242
GPR[EPVS]-1661311778242
========
if(Math.abs(mulAndCheck(a/gcd(a,maxIterations),b))==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311778244
GPR[SPVAP]-1661311778244
GPR[EPVAP]-1661311779287
GPR[EPVS]-1661311779287
========
GAMMA=Math.max(4*a,1.0);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311779289
GPR[SPVAP]-1661311779289
GPR[EPVAP]-1661311780331
GPR[EPVS]-1661311780331
========
sum=Math.max(n/GAMMA,Math.min(1/pow,fac));
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311780331
GPR[SPVAP]-1661311780331
GPR[EPVAP]-1661311781360
GPR[EPVS]-1661311781360
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
ret=Math.exp(-an+(a*Math.log(x))-logGamma(a))*sum;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311781363
GPR[SPVAP]-1661311781363
GPR[EPVAP]-1661311783234
GPR[SPVATF]-1661311783234
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311785050
GPR[EPVS]-1661311785050
========
double an=1.0/a;
double sum=p;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311785051
GPR[SPVAP]-1661311785051
GPR[EPVAP]-1661311786066
GPR[EPVS]-1661311786066
========
double an=1.0/a;
double sum=n;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311786067
GPR[SPVAP]-1661311786067
GPR[EPVAP]-1661311787938
GPR[SPVATF]-1661311787938
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311789748
GPR[EPVS]-1661311789748
========
double an=1.0/a;
if(maxIterations==1){
return lanczos[maxIterations];
}
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311789749
GPR[SPVAP]-1661311789749
GPR[EPVAP]-1661311791622
GPR[SPVATF]-1661311791622
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311793469
GPR[EPVS]-1661311793469
========
double an=1.0/a;
if(maxIterations==1){
return lanczos[maxIterations];
}
double sum=n;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311793470
GPR[SPVAP]-1661311793470
GPR[EPVAP]-1661311795335
GPR[SPVATF]-1661311795335
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311797181
GPR[EPVS]-1661311797181
========
double an=1.0/a;
double sum=an;
an=x+0.5*n;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311797183
GPR[SPVAP]-1661311797183
GPR[EPVAP]-1661311799073
GPR[SPVATF]-1661311799073
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311800907
GPR[EPVS]-1661311800907
========
GAMMA=0.5*(s+sum*n);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311800909
GPR[SPVAP]-1661311800909
GPR[EPVAP]-1661311801927
GPR[EPVS]-1661311801927
========
double an=1.0/n;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311801928
GPR[SPVAP]-1661311801928
GPR[EPVAP]-1661311803792
GPR[SPVATF]-1661311803792
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311805595
GPR[EPVS]-1661311805595
========
double an=1.0/c;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311805600
GPR[SPVAP]-1661311805600
GPR[EPVAP]-1661311806637
GPR[EPVS]-1661311806637
========
double an=1.0/b;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311806638
GPR[SPVAP]-1661311806638
GPR[EPVAP]-1661311807666
GPR[EPVS]-1661311807666
========
double an=1.0/a;
double sum=x;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311807667
GPR[SPVAP]-1661311807667
GPR[EPVAP]-1661311809558
GPR[SPVATF]-1661311809558
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311811389
GPR[EPVS]-1661311811389
========
double an=1.0/g;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311811391
GPR[SPVAP]-1661311811391
GPR[EPVAP]-1661311812424
GPR[EPVS]-1661311812424
========
double an=1.0/phi;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311812427
GPR[SPVAP]-1661311812427
GPR[EPVAP]-1661311813446
GPR[EPVS]-1661311813446
========
double an=1.0/a;
double sum=mean;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311813447
GPR[SPVAP]-1661311813447
GPR[EPVAP]-1661311814475
GPR[EPVS]-1661311814475
========
x=sum/n;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311814476
GPR[SPVAP]-1661311814476
GPR[EPVAP]-1661311815486
GPR[EPVS]-1661311815486
========
double an=1.0/a;
double sum=step;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311815488
GPR[SPVAP]-1661311815488
GPR[EPVAP]-1661311816517
GPR[EPVS]-1661311816517
========
double an=1.0/a;
double sum=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311816520
GPR[SPVAP]-1661311816520
GPR[EPVAP]-1661311818391
GPR[SPVATF]-1661311818391
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311820190
GPR[EPVS]-1661311820190
========
double an=1.0/b;
double sum=b;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=b*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311820193
GPR[SPVAP]-1661311820193
GPR[EPVAP]-1661311821215
GPR[EPVS]-1661311821215
========
double an=1.0/a;
double sum=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=a*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311821216
GPR[SPVAP]-1661311821216
GPR[EPVAP]-1661311823094
GPR[SPVATF]-1661311823094
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311824915
GPR[EPVS]-1661311824915
========
double an=1.0/a;
double sum=q1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=q1*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311824916
GPR[SPVAP]-1661311824916
GPR[EPVAP]-1661311825931
GPR[EPVS]-1661311825931
========
double an=1.0/a;
double sum=b;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=b*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311825932
GPR[SPVAP]-1661311825932
GPR[EPVAP]-1661311826959
GPR[EPVS]-1661311826959
========
double an=1.0/p0;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311826960
GPR[SPVAP]-1661311826960
GPR[EPVAP]-1661311827965
GPR[EPVS]-1661311827965
========
double an=1.0/a;
double sum=q1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311827966
GPR[SPVAP]-1661311827966
GPR[EPVAP]-1661311828976
GPR[EPVS]-1661311828976
========
double an=1.0/a;
double sum=b;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311828977
GPR[SPVAP]-1661311828977
GPR[EPVAP]-1661311829996
GPR[EPVS]-1661311829996
========
double an=1.0/a;
double sum=q0;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311829997
GPR[SPVAP]-1661311829997
GPR[EPVAP]-1661311831163
GPR[EPVS]-1661311831163
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=a*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311831172
GPR[SPVAP]-1661311831172
GPR[EPVAP]-1661311833662
GPR[SPVATF]-1661311833662
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311835491
GPR[EPVS]-1661311835491
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=b*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311835492
GPR[SPVAP]-1661311835492
GPR[EPVAP]-1661311836531
GPR[EPVS]-1661311836531
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=q1*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311836532
GPR[SPVAP]-1661311836532
GPR[EPVAP]-1661311837553
GPR[EPVS]-1661311837553
========
double an=1.0/b;
double sum=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311837555
GPR[SPVAP]-1661311837555
GPR[EPVAP]-1661311838572
GPR[EPVS]-1661311838572
========
double an=1.0/b;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=a*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311838573
GPR[SPVAP]-1661311838573
GPR[EPVAP]-1661311839591
GPR[EPVS]-1661311839591
========
double an=1.0/b;
double sum=a;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=a*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311839592
GPR[SPVAP]-1661311839592
GPR[EPVAP]-1661311840646
GPR[EPVS]-1661311840646
========
new CombinedEventsManager().addEventHandler(new EndTimeChecker(GAMMA),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(an),Math.abs(endTime))),100);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311840648
GPR[SPVAP]-1661311840648
GPR[EPVAP]-1661311841665
GPR[EPVS]-1661311841665
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
secondaryTridiagonal[i-1]=n*a;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311841668
GPR[SPVAP]-1661311841668
GPR[EPVAP]-1661311842673
GPR[EPVS]-1661311842673
========
double an=1.0/sxy;
double sum=sxy;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311842675
GPR[SPVAP]-1661311842675
GPR[EPVAP]-1661311843698
GPR[EPVS]-1661311843698
========
double an=1.0/syz;
double sum=syz;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311843699
GPR[SPVAP]-1661311843699
GPR[EPVAP]-1661311844718
GPR[EPVS]-1661311844718
========
double an=1.0/sxy;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311844719
GPR[SPVAP]-1661311844719
GPR[EPVAP]-1661311845741
GPR[EPVS]-1661311845741
========
double an=1.0/syz;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311845742
GPR[SPVAP]-1661311845742
GPR[EPVAP]-1661311846762
GPR[EPVS]-1661311846762
========
double an=1.0/a;
double sum=sxy;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311846763
GPR[SPVAP]-1661311846763
GPR[EPVAP]-1661311847775
GPR[EPVS]-1661311847775
========
double an=1.0/a;
double sum=sxz;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311847776
GPR[SPVAP]-1661311847776
GPR[EPVAP]-1661311848821
GPR[EPVS]-1661311848821
========
double an=1.0/a;
double sum=sx2;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311848822
GPR[SPVAP]-1661311848822
GPR[EPVAP]-1661311849839
GPR[EPVS]-1661311849839
========
double an=1.0/a;
double sum=syz;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311849840
GPR[SPVAP]-1661311849840
GPR[EPVAP]-1661311850878
GPR[EPVS]-1661311850878
========
a=Math.sqrt(sum/an);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311850879
GPR[SPVAP]-1661311850879
GPR[EPVAP]-1661311851905
GPR[EPVS]-1661311851905
========
GAMMA=Math.sqrt(an/n);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311851906
GPR[SPVAP]-1661311851906
GPR[EPVAP]-1661311852937
GPR[EPVS]-1661311852937
========
double an=1.0/a;
double sum=sum;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311852939
GPR[SPVAP]-1661311852939
GPR[EPVAP]-1661311853950
GPR[EPVS]-1661311853950
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
p+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311853952
GPR[SPVAP]-1661311853952
GPR[EPVAP]-1661311854978
GPR[EPVS]-1661311854978
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
l+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311854980
GPR[SPVAP]-1661311854980
GPR[EPVAP]-1661311855995
GPR[EPVS]-1661311855995
========
double an=1.0/a;
double sum=an;
lanczos[maxIterations]=lanczos[k];
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311855997
GPR[SPVAP]-1661311855997
GPR[EPVAP]-1661311857012
GPR[EPVS]-1661311857012
========
lanczos[maxIterations]=an;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311857013
GPR[SPVAP]-1661311857013
GPR[EPVAP]-1661311858034
GPR[EPVS]-1661311858034
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
q+=4;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311858035
GPR[SPVAP]-1661311858035
GPR[EPVAP]-1661311859063
GPR[EPVS]-1661311859063
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=y+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311859065
GPR[SPVAP]-1661311859065
GPR[EPVAP]-1661311860086
GPR[EPVS]-1661311860086
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=x+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311860087
GPR[SPVAP]-1661311860087
GPR[EPVAP]-1661311861981
GPR[SPVATF]-1661311861981
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311863790
GPR[EPVS]-1661311863790
========
double an=1.0/a;
double sum=initial;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311863792
GPR[SPVAP]-1661311863792
GPR[EPVAP]-1661311864802
GPR[EPVS]-1661311864802
========
double an=1.0/a;
if(GAMMA<n||initial>a||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311864803
GPR[SPVAP]-1661311864803
GPR[EPVAP]-1661311865861
GPR[EPVS]-1661311865861
========
double an=1.0/x;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311865862
GPR[SPVAP]-1661311865862
GPR[EPVAP]-1661311867734
GPR[SPVATF]-1661311867734
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311869547
GPR[EPVS]-1661311869547
========
double an=1.0/a;
double sum=y;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311869548
GPR[SPVAP]-1661311869548
GPR[EPVAP]-1661311870570
GPR[EPVS]-1661311870570
========
double an=1.0/x;
double sum=y;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311870571
GPR[SPVAP]-1661311870571
GPR[EPVAP]-1661311871595
GPR[EPVS]-1661311871595
========
double an=1.0/a;
double sum=an;
GAMMA-=a*epsilon/(n-1.0);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311871598
GPR[SPVAP]-1661311871598
GPR[EPVAP]-1661311872632
GPR[EPVS]-1661311872632
========
double an=1.0/a;
double sum=an;
GAMMA-=a/(n-1.0);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311872634
GPR[SPVAP]-1661311872634
GPR[EPVAP]-1661311873654
GPR[EPVS]-1661311873654
========
double an=1.0/a;
double sum=an;
GAMMA-=epsilon/(n-1.0);
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311873655
GPR[SPVAP]-1661311873655
GPR[EPVAP]-1661311874681
GPR[EPVS]-1661311874681
========
double an=1.0/a;
double sum=an;
GAMMA-=x;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311874683
GPR[SPVAP]-1661311874683
GPR[EPVAP]-1661311875699
GPR[EPVS]-1661311875699
========
double an=1.0/a;
double sum=an;
sum-=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311875699
GPR[SPVAP]-1661311875699
GPR[EPVAP]-1661311877569
GPR[SPVATF]-1661311877569
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311879393
GPR[EPVS]-1661311879393
========
double an=1.0/a;
double sum=an;
n--;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311879394
GPR[SPVAP]-1661311879394
GPR[EPVAP]-1661311881268
GPR[SPVATF]-1661311881268
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311883044
GPR[EPVS]-1661311883044
========
double an=1.0/a;
double sum=an;
sum-=GAMMA;
n--;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311883045
GPR[SPVAP]-1661311883045
GPR[EPVAP]-1661311884920
GPR[SPVATF]-1661311884920
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311886757
GPR[EPVS]-1661311886757
========
double an=1.0/a;
double sum=currentY;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311886759
GPR[SPVAP]-1661311886759
GPR[EPVAP]-1661311887801
GPR[EPVS]-1661311887801
========
double an=1.0/a;
double sum=previousY;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311887803
GPR[SPVAP]-1661311887803
GPR[EPVAP]-1661311888807
GPR[EPVS]-1661311888807
========
GAMMA+=an;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311888808
GPR[SPVAP]-1661311888808
GPR[EPVAP]-1661311889832
GPR[EPVS]-1661311889832
========
GAMMA+=n*dy/a;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311889833
GPR[SPVAP]-1661311889833
GPR[EPVAP]-1661311890831
GPR[EPVS]-1661311890831
========
GAMMA+=sum*x;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311890832
GPR[SPVAP]-1661311890832
GPR[EPVAP]-1661311891871
GPR[EPVS]-1661311891871
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=delta*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311891873
GPR[SPVAP]-1661311891873
GPR[EPVAP]-1661311892880
GPR[EPVS]-1661311892880
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
w=-GAMMA/n*(1.0+an/2.0)-GAMMA-sum*GAMMA;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311892881
GPR[SPVAP]-1661311892881
GPR[EPVAP]-1661311893881
GPR[EPVS]-1661311893881
========
double an=1.0/a;
double sum=xbar;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311893883
GPR[SPVAP]-1661311893883
GPR[EPVAP]-1661311894918
GPR[EPVS]-1661311894918
========
double an=1.0/a;
double sum=ybar;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311894919
GPR[SPVAP]-1661311894919
GPR[EPVAP]-1661311895949
GPR[EPVS]-1661311895949
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
gradient[i]=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311895952
GPR[SPVAP]-1661311895952
GPR[EPVAP]-1661311896969
GPR[EPVS]-1661311896969
========
this.sum=Math.cos(GAMMA)*n;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311896970
GPR[SPVAP]-1661311896970
GPR[EPVAP]-1661311897999
GPR[EPVS]-1661311897999
========
this.GAMMA=Math.sin(GAMMA)*n;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311898001
GPR[SPVAP]-1661311898001
GPR[EPVAP]-1661311899024
GPR[EPVS]-1661311899024
========
this.GAMMA=Math.sin(GAMMA);
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311899025
GPR[SPVAP]-1661311899025
GPR[EPVAP]-1661311900049
GPR[EPVS]-1661311900049
========
double an=1.0/a;
double sum=rhs;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311900052
GPR[SPVAP]-1661311900052
GPR[EPVAP]-1661311901077
GPR[EPVS]-1661311901077
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x2=x;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311901080
GPR[SPVAP]-1661311901080
GPR[EPVAP]-1661311902106
GPR[EPVS]-1661311902106
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x1=x;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311902107
GPR[SPVAP]-1661311902107
GPR[EPVAP]-1661311903122
GPR[EPVS]-1661311903122
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x1=x;
x2=x;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311903124
GPR[SPVAP]-1661311903124
GPR[EPVAP]-1661311904149
GPR[EPVS]-1661311904149
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
x1=x;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311904151
GPR[SPVAP]-1661311904151
GPR[EPVAP]-1661311905166
GPR[EPVS]-1661311905166
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x1=x;
x2=x;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311905167
GPR[SPVAP]-1661311905167
GPR[EPVAP]-1661311906196
GPR[EPVS]-1661311906196
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x1=x;
x1=x;
x2=x;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311906197
GPR[SPVAP]-1661311906197
GPR[EPVAP]-1661311907211
GPR[EPVS]-1661311907211
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x2=x;
x1=x;
x2=x;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311907212
GPR[SPVAP]-1661311907212
GPR[EPVAP]-1661311908214
GPR[EPVS]-1661311908214
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x1=x;
x2=x;
x1=x;
x2=x;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311908215
GPR[SPVAP]-1661311908215
GPR[EPVAP]-1661311909239
GPR[EPVS]-1661311909239
========
double an=1.0/a;
double sum=an;
an=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311909241
GPR[SPVAP]-1661311909241
GPR[EPVAP]-1661311911142
GPR[SPVATF]-1661311911143
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311912982
GPR[EPVS]-1661311912982
========
double an=1.0/a;
double sum=an;
x=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311912983
GPR[SPVAP]-1661311912983
GPR[EPVAP]-1661311914885
GPR[SPVATF]-1661311914885
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661311974926
GPR[EPVS]-1661311974926
========
double an=1.0/a;
double sum=an;
an=GAMMA;
x=GAMMA;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661311974927
GPR[SPVAP]-1661311974927
GPR[EPVAP]-1661311976888
GPR[SPVATF]-1661311976888
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312035197
GPR[EPVS]-1661312035197
========
double an=1.0/a;
double sum=an;
maxIterations=values.length;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312035198
GPR[SPVAP]-1661312035198
GPR[EPVAP]-1661312036241
GPR[EPVS]-1661312036241
========
double an=1.0/a;
double sum=an;
this.an=epsilon;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312036242
GPR[SPVAP]-1661312036242
GPR[EPVAP]-1661312037255
GPR[EPVS]-1661312037255
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
v=GAMMA;
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312037257
GPR[SPVAP]-1661312037257
GPR[EPVAP]-1661312038269
GPR[EPVS]-1661312038269
========
double an=1.0/a;
double sum=an;
maxIterations=values.length;
this.an=epsilon;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312038270
GPR[SPVAP]-1661312038270
GPR[EPVAP]-1661312039287
GPR[EPVS]-1661312039287
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
minPos=maxIterations;
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312039290
GPR[SPVAP]-1661312039290
GPR[EPVAP]-1661312040320
GPR[EPVS]-1661312040320
========
double an=1.0/a;
double sum=an;
epsilon=DEFAULT_ZERO_TOLERANCE;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312040322
GPR[SPVAP]-1661312040322
GPR[EPVAP]-1661312041338
GPR[EPVS]-1661312041338
========
double an=1.0/q3;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312041341
GPR[SPVAP]-1661312041341
GPR[EPVAP]-1661312042370
GPR[EPVS]-1661312042370
========
double an=1.0/z;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312042372
GPR[SPVAP]-1661312042372
GPR[EPVAP]-1661312043391
GPR[EPVS]-1661312043391
========
double an=1.0/a;
double sum=p1;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312043393
GPR[SPVAP]-1661312043393
GPR[EPVAP]-1661312044419
GPR[EPVS]-1661312044419
========
double an=1.0/delta;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312044420
GPR[SPVAP]-1661312044420
GPR[EPVAP]-1661312045478
GPR[EPVS]-1661312045478
========
double an=1.0/mu2delta;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312045479
GPR[SPVAP]-1661312045479
GPR[EPVAP]-1661312046493
GPR[EPVS]-1661312046493
========
double an=1.0/a;
double sum=c2;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312046494
GPR[SPVAP]-1661312046494
GPR[EPVAP]-1661312047534
GPR[EPVS]-1661312047534
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312047539
GPR[SPVAP]-1661312047539
GPR[EPVAP]-1661312048572
GPR[EPVS]-1661312048572
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312048573
GPR[SPVAP]-1661312048573
GPR[EPVAP]-1661312049600
GPR[EPVS]-1661312049600
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312049601
GPR[SPVAP]-1661312049601
GPR[EPVAP]-1661312050631
GPR[EPVS]-1661312050631
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312050632
GPR[SPVAP]-1661312050632
GPR[EPVAP]-1661312051657
GPR[EPVS]-1661312051657
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312051658
GPR[SPVAP]-1661312051658
GPR[EPVAP]-1661312052666
GPR[EPVS]-1661312052666
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312052668
GPR[SPVAP]-1661312052668
GPR[EPVAP]-1661312053691
GPR[EPVS]-1661312053691
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312053692
GPR[SPVAP]-1661312053692
GPR[EPVAP]-1661312054717
GPR[EPVS]-1661312054717
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312054719
GPR[SPVAP]-1661312054719
GPR[EPVAP]-1661312055761
GPR[EPVS]-1661312055761
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312055762
GPR[SPVAP]-1661312055762
GPR[EPVAP]-1661312056777
GPR[EPVS]-1661312056777
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312056778
GPR[SPVAP]-1661312056778
GPR[EPVAP]-1661312057786
GPR[EPVS]-1661312057786
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312057787
GPR[SPVAP]-1661312057787
GPR[EPVAP]-1661312058814
GPR[EPVS]-1661312058814
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312058816
GPR[SPVAP]-1661312058816
GPR[EPVAP]-1661312059832
GPR[EPVS]-1661312059832
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312059833
GPR[SPVAP]-1661312059833
GPR[EPVAP]-1661312060835
GPR[EPVS]-1661312060835
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312060836
GPR[SPVAP]-1661312060836
GPR[EPVAP]-1661312061858
GPR[EPVS]-1661312061858
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312061859
GPR[SPVAP]-1661312061859
GPR[EPVAP]-1661312062873
GPR[EPVS]-1661312062873
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312062874
GPR[SPVAP]-1661312062874
GPR[EPVAP]-1661312063882
GPR[EPVS]-1661312063882
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312063883
GPR[SPVAP]-1661312063883
GPR[EPVAP]-1661312064911
GPR[EPVS]-1661312064911
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312064912
GPR[SPVAP]-1661312064912
GPR[EPVAP]-1661312065960
GPR[EPVS]-1661312065960
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312065961
GPR[SPVAP]-1661312065961
GPR[EPVAP]-1661312066980
GPR[EPVS]-1661312066980
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312066981
GPR[SPVAP]-1661312066981
GPR[EPVAP]-1661312068013
GPR[EPVS]-1661312068013
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312068014
GPR[SPVAP]-1661312068014
GPR[EPVAP]-1661312069031
GPR[EPVS]-1661312069031
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312069032
GPR[SPVAP]-1661312069032
GPR[EPVAP]-1661312070047
GPR[EPVS]-1661312070047
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312070048
GPR[SPVAP]-1661312070048
GPR[EPVAP]-1661312071083
GPR[EPVS]-1661312071083
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312071085
GPR[SPVAP]-1661312071085
GPR[EPVAP]-1661312072101
GPR[EPVS]-1661312072101
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312072102
GPR[SPVAP]-1661312072102
GPR[EPVAP]-1661312073118
GPR[EPVS]-1661312073118
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x1=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312073119
GPR[SPVAP]-1661312073119
GPR[EPVAP]-1661312074164
GPR[EPVS]-1661312074164
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312074166
GPR[SPVAP]-1661312074166
GPR[EPVAP]-1661312075192
GPR[EPVS]-1661312075192
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312075193
GPR[SPVAP]-1661312075193
GPR[EPVAP]-1661312076222
GPR[EPVS]-1661312076222
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312076223
GPR[SPVAP]-1661312076223
GPR[EPVAP]-1661312077245
GPR[EPVS]-1661312077245
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312077246
GPR[SPVAP]-1661312077246
GPR[EPVAP]-1661312078260
GPR[EPVS]-1661312078260
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312078261
GPR[SPVAP]-1661312078261
GPR[EPVAP]-1661312079290
GPR[EPVS]-1661312079290
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312079291
GPR[SPVAP]-1661312079291
GPR[EPVAP]-1661312080303
GPR[EPVS]-1661312080303
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312080304
GPR[SPVAP]-1661312080304
GPR[EPVAP]-1661312081318
GPR[EPVS]-1661312081318
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312081320
GPR[SPVAP]-1661312081320
GPR[EPVAP]-1661312082339
GPR[EPVS]-1661312082339
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312082340
GPR[SPVAP]-1661312082340
GPR[EPVAP]-1661312083351
GPR[EPVS]-1661312083351
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
x0=x;
x1=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312083352
GPR[SPVAP]-1661312083352
GPR[EPVAP]-1661312084375
GPR[EPVS]-1661312084375
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312084376
GPR[SPVAP]-1661312084376
GPR[EPVAP]-1661312085392
GPR[EPVS]-1661312085392
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312085393
GPR[SPVAP]-1661312085393
GPR[EPVAP]-1661312086418
GPR[EPVS]-1661312086418
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312086419
GPR[SPVAP]-1661312086419
GPR[EPVAP]-1661312087468
GPR[EPVS]-1661312087468
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312087470
GPR[SPVAP]-1661312087470
GPR[EPVAP]-1661312088675
GPR[EPVS]-1661312088675
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x1=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312088678
GPR[SPVAP]-1661312088678
GPR[EPVAP]-1661312090121
GPR[EPVS]-1661312090121
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x0=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312090122
GPR[SPVAP]-1661312090122
GPR[EPVAP]-1661312091142
GPR[EPVS]-1661312091142
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312091144
GPR[SPVAP]-1661312091144
GPR[EPVAP]-1661312092163
GPR[EPVS]-1661312092163
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312092165
GPR[SPVAP]-1661312092165
GPR[EPVAP]-1661312093180
GPR[EPVS]-1661312093180
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x0=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312093182
GPR[SPVAP]-1661312093182
GPR[EPVAP]-1661312094212
GPR[EPVS]-1661312094212
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
n=n+1.0;
x1=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312094213
GPR[SPVAP]-1661312094213
GPR[EPVAP]-1661312095241
GPR[EPVS]-1661312095241
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312095242
GPR[SPVAP]-1661312095242
GPR[EPVAP]-1661312096273
GPR[EPVS]-1661312096273
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
x2=x;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312096274
GPR[SPVAP]-1661312096274
GPR[EPVAP]-1661312097295
GPR[EPVS]-1661312097295
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x1=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312097296
GPR[SPVAP]-1661312097296
GPR[EPVAP]-1661312098319
GPR[EPVS]-1661312098319
========
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
y2=GAMMA;
x0=x;
x1=x;
x2=x;
y0=an;
y2=GAMMA;

n=n+1.0;
x2=x;
y0=an;
an=an*(x/(a+n));
sum=sum+an;
}

========
MM Copying to MM
GPR[SPVS]-1661312098321
GPR[SPVAP]-1661312098321
GPR[EPVAP]-1661312099349
GPR[EPVS]-1661312099349
GPR[ESUN]-1661312099354
GPR[SSUN]-1661312099354
org.apache.commons.math.special.Gamma,172
GPR[ESUN]-1661312099702
GPR[SSUN]-1661312099702
org.apache.commons.math.special.Gamma,174
GPR[ESUN]-1661312099887
GPR[SSUN]-1661312099887
org.apache.commons.math.special.Gamma,175
GPR[ESUN]-1661312100076
GPR[SSUN]-1661312100076
org.apache.commons.math.special.Gamma,178
GPR[ESUN]-1661312100264
GPR[SSUN]-1661312100264
org.apache.commons.math.special.Gamma,180
GPR[ESUN]-1661312100452
GPR[SSUN]-1661312100452
org.apache.commons.math.special.Gamma,183
GPR[ESUN]-1661312100651
GPR[SSUN]-1661312100651
org.apache.commons.math.special.Gamma,187
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312102605
GPR[SPVAP]-1661312102605
GPR[EPVAP]-1661312107479
GPR[SPVATF]-1661312107479
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312109330
GPR[EPVS]-1661312109330
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312109331
GPR[SPVAP]-1661312109331
GPR[EPVAP]-1661312111255
GPR[SPVATF]-1661312111255
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312113091
GPR[EPVS]-1661312113091
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312113092
GPR[SPVAP]-1661312113092
GPR[EPVAP]-1661312114962
GPR[SPVATF]-1661312114962
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312116791
GPR[EPVS]-1661312116791
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312116792
GPR[SPVAP]-1661312116792
GPR[EPVAP]-1661312118672
GPR[SPVATF]-1661312118672
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312120548
GPR[EPVS]-1661312120548
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312120549
GPR[SPVAP]-1661312120549
GPR[EPVAP]-1661312122404
GPR[SPVATF]-1661312122404
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312124220
GPR[EPVS]-1661312124220
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312124221
GPR[SPVAP]-1661312124221
GPR[EPVAP]-1661312126100
GPR[SPVATF]-1661312126100
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312127932
GPR[EPVS]-1661312127932
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(x>=1.0&&x>a){
ret=1.0-regularizedGammaP(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312127933
GPR[SPVAP]-1661312127933
GPR[EPVAP]-1661312129816
GPR[SPVATF]-1661312129816
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312131639
GPR[EPVS]-1661312131639
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312131641
GPR[SPVAP]-1661312131641
GPR[EPVAP]-1661312133520
GPR[SPVATF]-1661312133520
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312135343
GPR[EPVS]-1661312135343
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312135344
GPR[SPVAP]-1661312135344
GPR[EPVAP]-1661312137241
GPR[SPVATF]-1661312137242
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312139091
GPR[EPVS]-1661312139091
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312139092
GPR[SPVAP]-1661312139092
GPR[EPVAP]-1661312140962
GPR[SPVATF]-1661312140962
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312142786
GPR[EPVS]-1661312142786
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312142787
GPR[SPVAP]-1661312142787
GPR[EPVAP]-1661312144647
GPR[SPVATF]-1661312144647
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312146459
GPR[EPVS]-1661312146459
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312146461
GPR[SPVAP]-1661312146461
GPR[EPVAP]-1661312148327
GPR[SPVATF]-1661312148327
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312150149
GPR[EPVS]-1661312150149
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312150150
GPR[SPVAP]-1661312150150
GPR[EPVAP]-1661312152022
GPR[SPVATF]-1661312152022
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312153874
GPR[EPVS]-1661312153874
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312153875
GPR[SPVAP]-1661312153875
GPR[EPVAP]-1661312155755
GPR[SPVATF]-1661312155755
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312157604
GPR[EPVS]-1661312157604
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312157605
GPR[SPVAP]-1661312157605
GPR[EPVAP]-1661312159504
GPR[SPVATF]-1661312159504
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312161313
GPR[EPVS]-1661312161313
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312161314
GPR[SPVAP]-1661312161314
GPR[EPVAP]-1661312163196
GPR[SPVATF]-1661312163196
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312165007
GPR[EPVS]-1661312165007
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==0.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312165009
GPR[SPVAP]-1661312165009
GPR[EPVAP]-1661312166893
GPR[SPVATF]-1661312166893
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312168709
GPR[EPVS]-1661312168709
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312168710
GPR[SPVAP]-1661312168710
GPR[EPVAP]-1661312170603
GPR[SPVATF]-1661312170603
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312172434
GPR[EPVS]-1661312172434
========
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312172435
GPR[SPVAP]-1661312172435
GPR[EPVAP]-1661312174305
GPR[SPVATF]-1661312174305
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312176144
GPR[EPVS]-1661312176144
========
if(Double.isNaN(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312176145
GPR[SPVAP]-1661312176145
GPR[EPVAP]-1661312178025
GPR[SPVATF]-1661312178025
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312179840
GPR[EPVS]-1661312179840
========
if(Double.isNaN(a)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x==1.0){
ret=1.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312179842
GPR[SPVAP]-1661312179842
GPR[EPVAP]-1661312181720
GPR[SPVATF]-1661312181720
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312183549
GPR[EPVS]-1661312183549
========
if(Double.isNaN(a)||Double.abs(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312183551
GPR[SPVAP]-1661312183551
GPR[EPVAP]-1661312184552
GPR[EPVS]-1661312184552
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return x;

========
MM Copying to MM
GPR[SPVS]-1661312184553
GPR[SPVAP]-1661312184553
GPR[EPVAP]-1661312186431
GPR[SPVATF]-1661312186431
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312188246
GPR[EPVS]-1661312188246
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return y;

========
MM Copying to MM
GPR[SPVS]-1661312188247
GPR[SPVAP]-1661312188247
GPR[EPVAP]-1661312189278
GPR[EPVS]-1661312189278
========
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312189280
GPR[SPVAP]-1661312189280
GPR[EPVAP]-1661312190333
GPR[EPVS]-1661312190333
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312190334
GPR[SPVAP]-1661312190334
GPR[EPVAP]-1661312191359
GPR[EPVS]-1661312191359
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312191360
GPR[SPVAP]-1661312191360
GPR[EPVAP]-1661312192387
GPR[EPVS]-1661312192387
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return sum+epsilon;

========
MM Copying to MM
GPR[SPVS]-1661312192388
GPR[SPVAP]-1661312192388
GPR[EPVAP]-1661312193393
GPR[EPVS]-1661312193393
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return dx;

========
MM Copying to MM
GPR[SPVS]-1661312193394
GPR[SPVAP]-1661312193394
GPR[EPVAP]-1661312194438
GPR[EPVS]-1661312194438
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return dy;

========
MM Copying to MM
GPR[SPVS]-1661312194439
GPR[SPVAP]-1661312194439
GPR[EPVAP]-1661312195458
GPR[EPVS]-1661312195458
========
if(Double.abs(a)||Double.abs(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312195459
GPR[SPVAP]-1661312195459
GPR[EPVAP]-1661312196481
GPR[EPVS]-1661312196481
========
if(Double.isNaN(a)||Double.isNaN(x)){
delta=0.5*a;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312196482
GPR[SPVAP]-1661312196482
GPR[EPVAP]-1661312197507
GPR[EPVS]-1661312197507
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1661312197509
GPR[SPVAP]-1661312197509
GPR[EPVAP]-1661312198520
GPR[EPVS]-1661312198520
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
for(double epsilon : lanczos){
ret+=Math.abs(a);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312198521
GPR[SPVAP]-1661312198521
GPR[EPVAP]-1661312199551
GPR[EPVS]-1661312199551
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return GAMMA;

========
MM Copying to MM
GPR[SPVS]-1661312199553
GPR[SPVAP]-1661312199553
GPR[EPVAP]-1661312201448
GPR[SPVATF]-1661312201448
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312203291
GPR[EPVS]-1661312203291
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1661312203293
GPR[SPVAP]-1661312203293
GPR[EPVAP]-1661312204311
GPR[EPVS]-1661312204311
========
n=B*B-4*A;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312204312
GPR[SPVAP]-1661312204312
GPR[EPVAP]-1661312205348
GPR[EPVS]-1661312205348
========
if(n>=0.0){
double B+Math.sqrt(n)=B+Math.sqrt(delta);
double B-Math.sqrt(n)=B-Math.sqrt(delta);
sum=Math.abs(dplus)>Math.abs(dminus)?dplus:dminus;
}else {
denominator=Math.sqrt(B*B-delta);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312205349
GPR[SPVAP]-1661312205349
GPR[EPVAP]-1661312206270
GPR[EPVS]-1661312206270
========
if(sum!=0){
x=GAMMA-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
GAMMA=Double.POSITIVE_INFINITY;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312206271
GPR[SPVAP]-1661312206271
GPR[EPVAP]-1661312207299
GPR[EPVS]-1661312207299
========
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312207300
GPR[SPVAP]-1661312207300
GPR[EPVAP]-1661312208316
GPR[EPVS]-1661312208316
========
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return GAMMA;

========
MM Copying to MM
GPR[SPVS]-1661312208317
GPR[SPVAP]-1661312208317
GPR[EPVAP]-1661312209339
GPR[EPVS]-1661312209339
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum!=0){
x=GAMMA-2.0*C/denominator;
while(x==GAMMA||x==x2){
x+=GAMMA;
}
}else {
x=GAMMA+Math.random()*(GAMMA-min);
n=Double.POSITIVE_INFINITY;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312209341
GPR[SPVAP]-1661312209341
GPR[EPVAP]-1661312210373
GPR[EPVS]-1661312210373
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
GAMMA=Math.max(GAMMA*Math.abs(x),GAMMA);
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312210374
GPR[SPVAP]-1661312210374
GPR[EPVAP]-1661312211430
GPR[EPVS]-1661312211430
========
if(Math.abs(an)<=epsilon){
setResult(x,maxIterations);
return GAMMA;
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312211431
GPR[SPVAP]-1661312211431
GPR[EPVAP]-1661312212459
GPR[EPVS]-1661312212459
========
GAMMA=GAMMA;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312212460
GPR[SPVAP]-1661312212460
GPR[EPVAP]-1661312213484
GPR[EPVS]-1661312213484
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum<=0.0){
ret=0.0;
}else {
ret=1.0-Math.exp(-Math.pow(x/getScale(),getShape()));
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312213485
GPR[SPVAP]-1661312213485
GPR[EPVAP]-1661312214503
GPR[EPVS]-1661312214503
========
if(Double.isInfinite(x)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312214505
GPR[SPVAP]-1661312214505
GPR[EPVAP]-1661312216373
GPR[SPVATF]-1661312216373
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312218228
GPR[EPVS]-1661312218228
========
if(Double.isInfinite(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312218229
GPR[SPVAP]-1661312218229
GPR[EPVAP]-1661312220099
GPR[SPVATF]-1661312220099
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312221931
GPR[EPVS]-1661312221931
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return an*Math.cos(n*epsilon+sum);

========
MM Copying to MM
GPR[SPVS]-1661312221933
GPR[SPVAP]-1661312221933
GPR[EPVAP]-1661312222949
GPR[EPVS]-1661312222949
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return a;

========
MM Copying to MM
GPR[SPVS]-1661312222950
GPR[SPVAP]-1661312222950
GPR[EPVAP]-1661312224819
GPR[SPVATF]-1661312224819
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312226691
GPR[EPVS]-1661312226691
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
for(double a : lanczos){
sum+=a*a;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312226694
GPR[SPVAP]-1661312226694
GPR[EPVAP]-1661312227701
GPR[EPVS]-1661312227701
========
if(n==0){
ret=Double.NaN;
}else if(n==1){
variance=0.0;
}else {
variance=sum/(n-1);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312227703
GPR[SPVAP]-1661312227703
GPR[EPVAP]-1661312228725
GPR[EPVS]-1661312228725
========
x=Math.max(lower,a-100*MathUtils.EPSILON);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312228727
GPR[SPVAP]-1661312228727
GPR[EPVAP]-1661312229747
GPR[EPVS]-1661312229747
========
a=x-sum;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312229748
GPR[SPVAP]-1661312229748
GPR[EPVAP]-1661312230761
GPR[EPVS]-1661312230761
========
an=GAMMA+sum;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312230762
GPR[SPVAP]-1661312230762
GPR[EPVAP]-1661312231807
GPR[EPVS]-1661312231807
========
GAMMA=Math.min(upper,an+100*MathUtils.EPSILON);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312231808
GPR[SPVAP]-1661312231808
GPR[EPVAP]-1661312232837
GPR[EPVS]-1661312232837
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=ret;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312232839
GPR[SPVAP]-1661312232839
GPR[EPVAP]-1661312233863
GPR[EPVS]-1661312233863
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum<=0.0){
ret=0.0;
}else {
ret=Gamma.regularizedGammaP(getAlpha(),x/getBeta());
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312233864
GPR[SPVAP]-1661312233864
GPR[EPVAP]-1661312234886
GPR[EPVS]-1661312234886
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return 31*(23*MathUtils.hash(epsilon)+19*MathUtils.hash(GAMMA)+MathUtils.hash(GAMMA));

========
MM Copying to MM
GPR[SPVS]-1661312234887
GPR[SPVAP]-1661312234887
GPR[EPVAP]-1661312235907
GPR[EPVS]-1661312235907
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(isNaN()){
return 8;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312235908
GPR[SPVAP]-1661312235908
GPR[EPVAP]-1661312236919
GPR[EPVS]-1661312236919
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
assert maxUlps > 0 && maxUlps < NAN_GAP;

return ret;

========
MM Copying to MM
GPR[SPVS]-1661312236920
GPR[SPVAP]-1661312236920
GPR[EPVAP]-1661312237934
GPR[EPVS]-1661312237934
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(n<0){
xInt=SGN_MASK-xInt;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312237935
GPR[SPVAP]-1661312237935
GPR[EPVAP]-1661312238957
GPR[EPVS]-1661312238957
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum<0){
yInt=SGN_MASK-yInt;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312238958
GPR[SPVAP]-1661312238958
GPR[EPVAP]-1661312239987
GPR[EPVS]-1661312239987
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return difference;

========
MM Copying to MM
GPR[SPVS]-1661312239989
GPR[SPVAP]-1661312239989
GPR[EPVAP]-1661312241005
GPR[EPVS]-1661312241005
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return size;

========
MM Copying to MM
GPR[SPVS]-1661312241006
GPR[SPVAP]-1661312241006
GPR[EPVAP]-1661312242041
GPR[EPVS]-1661312242041
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return relativeThreshold;

========
MM Copying to MM
GPR[SPVS]-1661312242042
GPR[SPVAP]-1661312242042
GPR[EPVAP]-1661312243055
GPR[EPVS]-1661312243055
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return absoluteThreshold;

========
MM Copying to MM
GPR[SPVS]-1661312243056
GPR[SPVAP]-1661312243056
GPR[EPVAP]-1661312244092
GPR[EPVS]-1661312244092
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return dev;

========
MM Copying to MM
GPR[SPVS]-1661312244094
GPR[SPVAP]-1661312244094
GPR[EPVAP]-1661312245108
GPR[EPVS]-1661312245108
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return Math.abs(GAMMA)*sum/Math.sqrt(y0.length*n);

========
MM Copying to MM
GPR[SPVS]-1661312245111
GPR[SPVAP]-1661312245111
GPR[EPVAP]-1661312246130
GPR[EPVS]-1661312246130
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return error1;

========
MM Copying to MM
GPR[SPVS]-1661312246132
GPR[SPVAP]-1661312246132
GPR[EPVAP]-1661312247137
GPR[EPVS]-1661312247137
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(n<=0.0){
den=1.0;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312247138
GPR[SPVAP]-1661312247138
GPR[EPVAP]-1661312248171
GPR[EPVS]-1661312248171
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(n==0.0){
ret=0.5;
}else {
double sum=Beta.regularizedBeta(getDegreesOfFreedom()/(getDegreesOfFreedom()+(x*x)),0.5*getDegreesOfFreedom(),0.5);
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312248175
GPR[SPVAP]-1661312248175
GPR[EPVAP]-1661312249194
GPR[EPVS]-1661312249194
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return tolerance;

========
MM Copying to MM
GPR[SPVS]-1661312249198
GPR[SPVAP]-1661312249198
GPR[EPVAP]-1661312250218
GPR[EPVS]-1661312250218
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return functionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1661312250219
GPR[SPVAP]-1661312250219
GPR[EPVAP]-1661312251261
GPR[EPVS]-1661312251261
========
if(Double.isNaN(a)||Double.ulp(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312251263
GPR[SPVAP]-1661312251263
GPR[EPVAP]-1661312252287
GPR[EPVS]-1661312252287
========
if(Double.isNaN(a)||Double.isNaN(x)){
setResult(GAMMA,0);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312252289
GPR[SPVAP]-1661312252289
GPR[EPVAP]-1661312253311
GPR[EPVS]-1661312253311
========
clearResult();
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312253313
GPR[SPVAP]-1661312253313
GPR[EPVAP]-1661312254339
GPR[EPVS]-1661312254339
========
verifyInterval(GAMMA,GAMMA);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312254340
GPR[SPVAP]-1661312254340
GPR[EPVAP]-1661312255375
GPR[EPVS]-1661312255375
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
checkVectorDimensions(v.length);
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312255378
GPR[SPVAP]-1661312255378
GPR[EPVAP]-1661312256410
GPR[EPVS]-1661312256410
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(MIN_VALUE==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312256414
GPR[SPVAP]-1661312256414
GPR[EPVAP]-1661312257431
GPR[EPVS]-1661312257431
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=x;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312257433
GPR[SPVAP]-1661312257433
GPR[EPVAP]-1661312259343
GPR[SPVATF]-1661312259343
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312261158
GPR[EPVS]-1661312261158
========
if(Double.isNaN(a)||Double.isNaN(x)){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312261159
GPR[SPVAP]-1661312261159
GPR[EPVAP]-1661312262183
GPR[EPVS]-1661312262184
========
if(Double.isNaN(a)||Double.isNaN(x)){
x=Math.ceil(GAMMA);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312262185
GPR[SPVAP]-1661312262185
GPR[EPVAP]-1661312264059
GPR[SPVATF]-1661312264059
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312265861
GPR[EPVS]-1661312265861
========
if(Double.isNaN(a)||Double.isNaN(x)){
y=1.0+Math.abs(an)*Math.sqrt(epsilon);
x=Math.ceil(GAMMA);

ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312265862
GPR[SPVAP]-1661312265862
GPR[EPVAP]-1661312266873
GPR[EPVS]-1661312266873
========
if(Double.isNaN(a)||Double.isNaN(x)){
x=Math.ceil(GAMMA);
ret=x;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312266873
GPR[SPVAP]-1661312266873
GPR[EPVAP]-1661312268790
GPR[SPVATF]-1661312268790
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312270611
GPR[EPVS]-1661312270611
========
if(Double.isNaN(x)||Double.isInfinite(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312270613
GPR[SPVAP]-1661312270613
GPR[EPVAP]-1661312272492
GPR[SPVATF]-1661312272492
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312274322
GPR[EPVS]-1661312274322
========
if(Double.isNaN(a)||Double.isInfinite(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312274323
GPR[SPVAP]-1661312274323
GPR[EPVAP]-1661312276216
GPR[SPVATF]-1661312276216
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312278044
GPR[EPVS]-1661312278044
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(d==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312278045
GPR[SPVAP]-1661312278045
GPR[EPVAP]-1661312279099
GPR[EPVS]-1661312279099
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
computeDerivatives(x+an,lanczos,lanczos);
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312279102
GPR[SPVAP]-1661312279102
GPR[EPVAP]-1661312280136
GPR[EPVS]-1661312280136
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
ret=Math.sqrt(yDDotOnScale)/an;
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312280138
GPR[SPVAP]-1661312280138
GPR[EPVAP]-1661312281153
GPR[EPVS]-1661312281153
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
an=Math.min(100.0*Math.abs(h),(sum<1.0E-15)?Math.max(1.0E-6,0.001*Math.abs(an)):Math.pow(0.01/maxInv2,1.0/maxIterations));
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312281154
GPR[SPVAP]-1661312281154
GPR[EPVAP]-1661312282167
GPR[EPVS]-1661312282167
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
an=Math.max(h,1.0E-12*Math.abs(x));
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312282168
GPR[SPVAP]-1661312282168
GPR[EPVAP]-1661312283183
GPR[EPVS]-1661312283183
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(an<getMinStep()){
h=getMinStep();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312283184
GPR[SPVAP]-1661312283184
GPR[EPVAP]-1661312284196
GPR[EPVS]-1661312284196
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(an>getMaxStep()){
h=getMaxStep();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312284197
GPR[SPVAP]-1661312284197
GPR[EPVAP]-1661312285223
GPR[EPVS]-1661312285223
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return 1/(n*x);

========
MM Copying to MM
GPR[SPVS]-1661312285227
GPR[SPVAP]-1661312285227
GPR[EPVAP]-1661312286246
GPR[EPVS]-1661312286246
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return sum*tmp;

========
MM Copying to MM
GPR[SPVS]-1661312286247
GPR[SPVAP]-1661312286247
GPR[EPVAP]-1661312287261
GPR[EPVS]-1661312287261
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return tmp;

========
MM Copying to MM
GPR[SPVS]-1661312287263
GPR[SPVAP]-1661312287263
GPR[EPVAP]-1661312288276
GPR[EPVS]-1661312288276
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return sum*dx+an*dy+n*dz;

========
MM Copying to MM
GPR[SPVS]-1661312288279
GPR[SPVAP]-1661312288279
GPR[EPVAP]-1661312289323
GPR[EPVS]-1661312289323
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return dz;

========
MM Copying to MM
GPR[SPVS]-1661312289324
GPR[SPVAP]-1661312289324
GPR[EPVAP]-1661312290356
GPR[EPVS]-1661312290356
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return getIntercept(epsilon)+b1*x;

========
MM Copying to MM
GPR[SPVS]-1661312290360
GPR[SPVAP]-1661312290360
GPR[EPVAP]-1661312291377
GPR[EPVS]-1661312291377
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return b1;

========
MM Copying to MM
GPR[SPVS]-1661312291378
GPR[SPVAP]-1661312291378
GPR[EPVAP]-1661312292421
GPR[EPVS]-1661312292421
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(n>2.0){
ret=d/(d-2.0);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312292424
GPR[SPVAP]-1661312292424
GPR[EPVAP]-1661312293442
GPR[EPVS]-1661312293442
========
if(maxIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312293445
GPR[SPVAP]-1661312293445
GPR[EPVAP]-1661312294463
GPR[EPVS]-1661312294463
========
if(Double.isNaN(a)||Double.isNaN(x)){
return ret;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312294465
GPR[SPVAP]-1661312294465
GPR[EPVAP]-1661312295495
GPR[EPVS]-1661312295495
========
if(Double.isNaN(a)||Double.isNaN(x)){
xbar=x;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312295497
GPR[SPVAP]-1661312295497
GPR[EPVAP]-1661312296529
GPR[EPVS]-1661312296529
========
GAMMA+=x;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312296530
GPR[SPVAP]-1661312296530
GPR[EPVAP]-1661312297563
GPR[EPVS]-1661312297563
========
GAMMA+=GAMMA;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312297564
GPR[SPVAP]-1661312297564
GPR[EPVAP]-1661312298579
GPR[EPVS]-1661312298579
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312298581
GPR[SPVAP]-1661312298581
GPR[EPVAP]-1661312299603
GPR[EPVS]-1661312299603
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=getMedian();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312299604
GPR[SPVAP]-1661312299604
GPR[EPVAP]-1661312300619
GPR[EPVS]-1661312300619
========
if(maxIterations==0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312300625
GPR[SPVAP]-1661312300625
GPR[EPVAP]-1661312301667
GPR[EPVS]-1661312301667
========
lanczos=new double[Math.abs(maxIterations)];
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312301668
GPR[SPVAP]-1661312301668
GPR[EPVAP]-1661312302688
GPR[EPVS]-1661312302688
========
lanczos[0]=1.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312302689
GPR[SPVAP]-1661312302689
GPR[EPVAP]-1661312304636
GPR[SPVATF]-1661312304636
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312306442
GPR[EPVS]-1661312306442
========
lanczos[0]=0.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312306444
GPR[SPVAP]-1661312306444
GPR[EPVAP]-1661312308347
GPR[SPVATF]-1661312308347
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312310187
GPR[EPVS]-1661312310187
========
lanczos[0]=1.0;
lanczos[0]=0.0;
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312310188
GPR[SPVAP]-1661312310188
GPR[EPVAP]-1661312312097
GPR[SPVATF]-1661312312097
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312313908
GPR[EPVS]-1661312313908
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getAlpha()*getBeta();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312313910
GPR[SPVAP]-1661312313910
GPR[EPVAP]-1661312314931
GPR[EPVS]-1661312314931
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getDegreesOfFreedom()*0.5;
}else {
ret=getDegreesOfFreedom();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312314933
GPR[SPVAP]-1661312314933
GPR[EPVAP]-1661312315954
GPR[EPVS]-1661312315954
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<0){
ret=0.0;
}else {
ret=Beta.regularizedBeta(getProbabilityOfSuccess(),getNumberOfSuccesses(),x+1);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312315956
GPR[SPVAP]-1661312315956
GPR[EPVAP]-1661312316967
GPR[EPVS]-1661312316967
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getMean();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312316968
GPR[SPVAP]-1661312316968
GPR[EPVAP]-1661312317995
GPR[EPVS]-1661312317995
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getDegreesOfFreedom();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312317996
GPR[SPVAP]-1661312317996
GPR[EPVAP]-1661312319025
GPR[EPVS]-1661312319025
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getMedian();
}else {
ret=Double.MAX_VALUE;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312319026
GPR[SPVAP]-1661312319026
GPR[EPVAP]-1661312320057
GPR[EPVS]-1661312320057
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<getDomain(getPopulationSize(),getNumberOfSuccesses(),an)[0]||x>domain[1]){
ret=0.0;
}else {
ret=probability(getPopulationSize(),getNumberOfSuccesses(),an,x);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312320060
GPR[SPVAP]-1661312320060
GPR[EPVAP]-1661312321089
GPR[EPVS]-1661312321089
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return epsilon;

========
MM Copying to MM
GPR[SPVS]-1661312321091
GPR[SPVAP]-1661312321091
GPR[EPVAP]-1661312322995
GPR[SPVATF]-1661312322995
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312324829
GPR[EPVS]-1661312324829
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return lowerBound;

========
MM Copying to MM
GPR[SPVS]-1661312324831
GPR[SPVAP]-1661312324831
GPR[EPVAP]-1661312325844
GPR[EPVS]-1661312325844
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return upperBound;

========
MM Copying to MM
GPR[SPVS]-1661312325845
GPR[SPVAP]-1661312325845
GPR[EPVAP]-1661312326870
GPR[EPVS]-1661312326870
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(n<0){
ret=0.0;
}else if(x>=getNumberOfTrials()){
ret=1.0;
}else {
ret=1.0-Beta.regularizedBeta(getProbabilityOfSuccess(),x+1.0,getNumberOfTrials()-x);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312326872
GPR[SPVAP]-1661312326872
GPR[EPVAP]-1661312327946
GPR[EPVS]-1661312327946
========
Arrays.sort(new double[maxIterations]);
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312327948
GPR[SPVAP]-1661312327948
GPR[EPVAP]-1661312328965
GPR[EPVS]-1661312328965
========
if(an<1){
return new double[maxIterations][0];
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312328966
GPR[SPVAP]-1661312328966
GPR[EPVAP]-1661312329984
GPR[EPVS]-1661312329984
========
if(an>=n){
return new double[maxIterations][maxIterations-1];
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312329985
GPR[SPVAP]-1661312329985
GPR[EPVAP]-1661312330996
GPR[EPVS]-1661312330996
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<getDomain(getPopulationSize(),getNumberOfSuccesses(),an)[0]){
ret=1.0;
}else if(x>domain[1]){
ret=0.0;
}else {
ret=innerCumulativeProbability(domain[1],x,-1,getPopulationSize(),getNumberOfSuccesses(),an);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312330997
GPR[SPVAP]-1661312330997
GPR[EPVAP]-1661312332027
GPR[EPVS]-1661312332027
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<getDomain(getPopulationSize(),getNumberOfSuccesses(),an)[0]){
ret=0.0;
}else if(x>=domain[1]){
ret=1.0;
}else {
ret=innerCumulativeProbability(domain[0],x,1,getPopulationSize(),getNumberOfSuccesses(),an);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312332030
GPR[SPVAP]-1661312332030
GPR[EPVAP]-1661312333063
GPR[EPVS]-1661312333063
========
if(Double.abs(a)||Double.ulp(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312333065
GPR[SPVAP]-1661312333065
GPR[EPVAP]-1661312334075
GPR[EPVS]-1661312334075
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return -x*Math.log(n);

========
MM Copying to MM
GPR[SPVS]-1661312334077
GPR[SPVAP]-1661312334077
GPR[EPVAP]-1661312335074
GPR[EPVS]-1661312335074
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return mean;

========
MM Copying to MM
GPR[SPVS]-1661312335075
GPR[SPVAP]-1661312335075
GPR[EPVAP]-1661312336087
GPR[EPVS]-1661312336087
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return n*sum;

========
MM Copying to MM
GPR[SPVS]-1661312336089
GPR[SPVAP]-1661312336089
GPR[EPVAP]-1661312337103
GPR[EPVS]-1661312337103
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return halfStep;

========
MM Copying to MM
GPR[SPVS]-1661312337104
GPR[SPVAP]-1661312337104
GPR[EPVAP]-1661312338138
GPR[EPVS]-1661312338138
========
if(Double.isNaN(a)||Double.isNaN(x)){
hK[k+1]-=a;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312338140
GPR[SPVAP]-1661312338140
GPR[EPVAP]-1661312339177
GPR[EPVS]-1661312339177
========
if(Double.isNaN(a)||Double.isNaN(x)){
Arrays.fill(lanczos,maxIterations+1,maxIterations,0);
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312339178
GPR[SPVAP]-1661312339178
GPR[EPVAP]-1661312340205
GPR[EPVS]-1661312340205
========
if(Double.isNaN(a)||Double.isNaN(x)){
gamma*=-1/(a*lanczos[maxIterations+1])/2;
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312340206
GPR[SPVAP]-1661312340206
GPR[EPVAP]-1661312341247
GPR[EPVS]-1661312341247
========
if(Double.isNaN(a)||Double.isNaN(x)){
hK[k+1]-=a;
Arrays.fill(lanczos,maxIterations+1,maxIterations,0);
gamma*=-1/(a*lanczos[maxIterations+1])/2;

ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312341248
GPR[SPVAP]-1661312341248
GPR[EPVAP]-1661312342289
GPR[EPVS]-1661312342289
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return Math.pow(getMean(),x)/MathUtils.factorialDouble(x)*Math.exp(-GAMMA);

========
MM Copying to MM
GPR[SPVS]-1661312342291
GPR[SPVAP]-1661312342291
GPR[EPVAP]-1661312343303
GPR[EPVS]-1661312343303
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum<0.5){
ret=getMean()-getStandardDeviation();
}else if(p>0.5){
ret=getMean()+getStandardDeviation();
}else {
ret=getMean();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312343304
GPR[SPVAP]-1661312343304
GPR[EPVAP]-1661312344330
GPR[EPVS]-1661312344330
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(sum<0.5){
ret=getMedian()-getScale();
}else if(p>0.5){
ret=getMedian()+getScale();
}else {
ret=getMedian();
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312344331
GPR[SPVAP]-1661312344331
GPR[EPVAP]-1661312345355
GPR[EPVS]-1661312345355
========
if(sum==Integer.MIN_VALUE){
throw new ArithmeticException("overflow: lcm is 2^31");
}
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312345357
GPR[SPVAP]-1661312345357
GPR[EPVAP]-1661312346370
GPR[EPVS]-1661312346370
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(epsilon<0.5){
ret=getAlpha()*getBeta();
}else error
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312346371
GPR[SPVAP]-1661312346371
GPR[EPVAP]-1661312347311
GPR[EPVS]-1661312347311
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<0){
ret=0.0;
}else {
ret=MathUtils.binomialCoefficientDouble(x+getNumberOfSuccesses()-1,getNumberOfSuccesses()-1)*Math.pow(getProbabilityOfSuccess(),getNumberOfSuccesses());
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312347312
GPR[SPVAP]-1661312347312
GPR[EPVAP]-1661312348338
GPR[EPVS]-1661312348338
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return Math.pow(x/getBeta(),getAlpha()-1)/getBeta()*Math.exp(-x/getBeta())/Math.exp(Gamma.logGamma(getAlpha()));

========
MM Copying to MM
GPR[SPVS]-1661312348339
GPR[SPVAP]-1661312348339
GPR[EPVAP]-1661312349362
GPR[EPVS]-1661312349362
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",n);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312349366
GPR[SPVAP]-1661312349366
GPR[EPVAP]-1661312350394
GPR[EPVS]-1661312350394
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(maxIterations<21){
return factorial(n);
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312350395
GPR[SPVAP]-1661312350395
GPR[EPVAP]-1661312351422
GPR[EPVS]-1661312351422
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312351424
GPR[SPVAP]-1661312351424
GPR[EPVAP]-1661312352451
GPR[EPVS]-1661312352451
========
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312352452
GPR[SPVAP]-1661312352452
GPR[EPVAP]-1661312353470
GPR[EPVS]-1661312353470
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312353472
GPR[SPVAP]-1661312353472
GPR[EPVAP]-1661312354505
GPR[EPVS]-1661312354505
========
if(Math.abs(GAMMA)>GAMMA){
sum=(a-GAMMA)*(GAMMA-GAMMA);
n=(x-GAMMA)*(fx-GAMMA);
an=(x-v)*q-(x-w)*r;
q=2*(q-r);
if(q>0){
p=-p;
}else {
q=-q;
}
r=e;
e=GAMMA;
}
x=a+((Math.abs(GAMMA)>GAMMA)?d:((d>0)?tol:-tol));
if(Double.abs(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312354507
GPR[SPVAP]-1661312354507
GPR[EPVAP]-1661312355543
GPR[EPVS]-1661312355543
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return Math.exp(-sum*x0/(2*getStandardDeviation()))/(getStandardDeviation()*SQRT2PI);

========
MM Copying to MM
GPR[SPVS]-1661312355548
GPR[SPVAP]-1661312355548
GPR[EPVAP]-1661312356569
GPR[EPVS]-1661312356569
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return SQRT2PI;

========
MM Copying to MM
GPR[SPVS]-1661312356570
GPR[SPVAP]-1661312356570
GPR[EPVAP]-1661312357591
GPR[EPVS]-1661312357591
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
return Math.exp(-x/getMean())/getMean();

========
MM Copying to MM
GPR[SPVS]-1661312357594
GPR[SPVAP]-1661312357594
GPR[EPVAP]-1661312358666
GPR[EPVS]-1661312358666
========
if(Double.isNaN(a)||Double.isNaN(x)){
ret=Double.NaN;
}else if(x==0.0){
ret=0.0;
}else if(a>=1.0&&x>a){
ret=1.0-regularizedGammaQ(a,x,epsilon,maxIterations);
}else {
double n=0.0;
double an=1.0/a;
double sum=an;
while(Math.abs(an)>epsilon&&n<maxIterations){
n=n+1.0;
an=an*(x/(a+n));
sum=sum+an;
}
if(n>=maxIterations){
throw new MaxIterationsExceededException(maxIterations);
}else {
ret=Math.exp(-x+(a*Math.log(x))-logGamma(a))*sum;
}
}
if(x==Integer.MAX_VALUE){
return 1;
}
return ret;

========
MM Copying to MM
GPR[SPVS]-1661312358667
GPR[SPVAP]-1661312358667
GPR[EPVAP]-1661312360631
GPR[SPVATF]-1661312360631
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312362441
GPR[EPVS]-1661312362441
GPR[ESUN]-1661312362442
GPR[SSUN]-1661312362442
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,182
UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot discard {0} elements from a {1} elements array",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312363827
GPR[SPVAP]-1661312363827
GPR[EPVAP]-1661312368693
GPR[SPVATF]-1661312368693
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312370515
GPR[EPVS]-1661312370515
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,y.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312370516
GPR[SPVAP]-1661312370516
GPR[EPVAP]-1661312371550
GPR[EPVS]-1661312371550
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",vector.length,dimensionSize.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312371551
GPR[SPVAP]-1661312371551
GPR[EPVAP]-1661312372571
GPR[EPVS]-1661312372571
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,covariance.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312372572
GPR[SPVAP]-1661312372572
GPR[EPVAP]-1661312373596
GPR[EPVS]-1661312373596
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",expected.length,observed.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312373597
GPR[SPVAP]-1661312373597
GPR[EPVAP]-1661312374622
GPR[EPVS]-1661312374622
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observed1.length,observed2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312374623
GPR[SPVAP]-1661312374623
GPR[EPVAP]-1661312375626
GPR[EPVS]-1661312375626
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312375628
GPR[SPVAP]-1661312375628
GPR[EPVAP]-1661312376643
GPR[EPVS]-1661312376643
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,singularValues.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312376644
GPR[SPVAP]-1661312376644
GPR[EPVAP]-1661312377672
GPR[EPVS]-1661312377672
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312377673
GPR[SPVAP]-1661312377673
GPR[EPVAP]-1661312378689
GPR[EPVS]-1661312378689
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same positive length ({0} and {1})",maximumIterations,sample2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312378691
GPR[SPVAP]-1661312378691
GPR[EPVAP]-1661312379705
GPR[EPVS]-1661312379705
========
if(initial<lowerBound||initial>upperBound||lowerBound>=length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312379706
GPR[SPVAP]-1661312379706
GPR[EPVAP]-1661312380726
GPR[EPVS]-1661312380726
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same length and at least two elements ({0} and {1})",maximumIterations,sample2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312380727
GPR[SPVAP]-1661312380727
GPR[EPVAP]-1661312381751
GPR[EPVS]-1661312381751
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",refI.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312381752
GPR[SPVAP]-1661312381752
GPR[EPVAP]-1661312382755
GPR[EPVS]-1661312382755
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",maximumIterations,startConfiguration.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312382756
GPR[SPVAP]-1661312382756
GPR[EPVAP]-1661312383793
GPR[EPVS]-1661312383793
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312383794
GPR[SPVAP]-1661312383794
GPR[EPVAP]-1661312384806
GPR[EPVS]-1661312384806
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312384807
GPR[SPVAP]-1661312384807
GPR[EPVAP]-1661312385811
GPR[EPVS]-1661312385811
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,subRow.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312385812
GPR[SPVAP]-1661312385812
GPR[EPVAP]-1661312387422
GPR[EPVS]-1661312387422
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",data.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312387427
GPR[SPVAP]-1661312387427
GPR[EPVAP]-1661312388594
GPR[EPVS]-1661312388594
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",maximumIterations,maximumIterations,d.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312388596
GPR[SPVAP]-1661312388596
GPR[EPVAP]-1661312389629
GPR[EPVS]-1661312389629
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312389631
GPR[SPVAP]-1661312389631
GPR[EPVAP]-1661312390669
GPR[EPVS]-1661312390669
========
if(initial<lowerBound||initial>upperBound||length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312390670
GPR[SPVAP]-1661312390670
GPR[EPVAP]-1661312392343
GPR[EPVS]-1661312392343
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("array sizes should have difference 1 ({0} != {1} + 1)",a.length,c.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312392347
GPR[SPVAP]-1661312392347
GPR[EPVAP]-1661312393425
GPR[EPVS]-1661312393425
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lowerBound,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312393426
GPR[SPVAP]-1661312393426
GPR[EPVAP]-1661312395306
GPR[SPVATF]-1661312395306
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312397134
GPR[EPVS]-1661312397134
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",lowerBound,initial);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312397135
GPR[SPVAP]-1661312397135
GPR[EPVAP]-1661312399015
GPR[SPVATF]-1661312399015
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312400850
GPR[EPVS]-1661312400850
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312400851
GPR[SPVAP]-1661312400851
GPR[EPVAP]-1661312402783
GPR[SPVATF]-1661312402783
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312404588
GPR[EPVS]-1661312404588
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312404589
GPR[SPVAP]-1661312404589
GPR[EPVAP]-1661312406469
GPR[SPVATF]-1661312406469
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312408311
GPR[EPVS]-1661312408311
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312408312
GPR[SPVAP]-1661312408312
GPR[EPVAP]-1661312410176
GPR[SPVATF]-1661312410176
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312412015
GPR[EPVS]-1661312412015
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312412016
GPR[SPVAP]-1661312412016
GPR[EPVAP]-1661312413898
GPR[SPVATF]-1661312413898
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312415746
GPR[EPVS]-1661312415746
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312415747
GPR[SPVAP]-1661312415747
GPR[EPVAP]-1661312417650
GPR[SPVATF]-1661312417650
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312419479
GPR[EPVS]-1661312419479
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) exceeds n ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312419480
GPR[SPVAP]-1661312419480
GPR[EPVAP]-1661312421357
GPR[SPVATF]-1661312421357
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312423161
GPR[EPVS]-1661312423161
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312423163
GPR[SPVAP]-1661312423163
GPR[EPVAP]-1661312425019
GPR[SPVATF]-1661312425019
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312426841
GPR[EPVS]-1661312426841
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})",maximumIterations,MULTIPLICATIVE_MODE,"MULTIPLICATIVE_MODE",ADDITIVE_MODE,"ADDITIVE_MODE");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312426842
GPR[SPVAP]-1661312426842
GPR[EPVAP]-1661312427851
GPR[EPVS]-1661312427851
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312427852
GPR[SPVAP]-1661312427852
GPR[EPVAP]-1661312429704
GPR[SPVATF]-1661312429704
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312431508
GPR[EPVS]-1661312431508
========
if(initial<lowerBound||initial>upperBound||lowerBound>=x.length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312431509
GPR[SPVAP]-1661312431509
GPR[EPVAP]-1661312432523
GPR[EPVS]-1661312432523
========
if(initial<lowerBound||initial>upperBound||lowerBound>length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312432524
GPR[SPVAP]-1661312432524
GPR[EPVAP]-1661312433535
GPR[EPVS]-1661312433535
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312433536
GPR[SPVAP]-1661312433536
GPR[EPVAP]-1661312435386
GPR[SPVATF]-1661312435386
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312437206
GPR[EPVS]-1661312437206
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("window size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312437207
GPR[SPVAP]-1661312437207
GPR[EPVAP]-1661312439087
GPR[SPVATF]-1661312439087
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312440913
GPR[EPVS]-1661312440913
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312440914
GPR[SPVAP]-1661312440914
GPR[EPVAP]-1661312441927
GPR[EPVS]-1661312441927
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312441928
GPR[SPVAP]-1661312441928
GPR[EPVAP]-1661312442938
GPR[EPVS]-1661312442938
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312442939
GPR[SPVAP]-1661312442939
GPR[EPVAP]-1661312443945
GPR[EPVS]-1661312443946
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312443947
GPR[SPVAP]-1661312443947
GPR[EPVAP]-1661312444955
GPR[EPVS]-1661312444955
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("initial capacity ({0}) is not positive",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312444956
GPR[SPVAP]-1661312444956
GPR[EPVAP]-1661312446833
GPR[SPVATF]-1661312446833
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312448661
GPR[EPVS]-1661312448661
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",a,a,upperBound,lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312448663
GPR[SPVAP]-1661312448663
GPR[EPVAP]-1661312449688
GPR[EPVS]-1661312449688
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312449689
GPR[SPVAP]-1661312449689
GPR[EPVAP]-1661312451555
GPR[SPVATF]-1661312451555
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312453373
GPR[EPVS]-1661312453373
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312453374
GPR[SPVAP]-1661312453374
GPR[EPVAP]-1661312455255
GPR[SPVATF]-1661312455255
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312457079
GPR[EPVS]-1661312457079
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312457081
GPR[SPVAP]-1661312457081
GPR[EPVAP]-1661312458953
GPR[SPVATF]-1661312458953
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312460764
GPR[EPVS]-1661312460764
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312460765
GPR[SPVAP]-1661312460765
GPR[EPVAP]-1661312462641
GPR[SPVATF]-1661312462641
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312464466
GPR[EPVS]-1661312464466
========
if(initial<lowerBound||initial>upperBound||length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312464468
GPR[SPVAP]-1661312464468
GPR[EPVAP]-1661312465530
GPR[EPVS]-1661312465530
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("insufficient data: only {0} rows and {1} columns.",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312465531
GPR[SPVAP]-1661312465531
GPR[EPVAP]-1661312467414
GPR[SPVATF]-1661312467414
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312469238
GPR[EPVS]-1661312469238
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312469240
GPR[SPVAP]-1661312469240
GPR[EPVAP]-1661312470251
GPR[EPVS]-1661312470251
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312470252
GPR[SPVAP]-1661312470252
GPR[EPVAP]-1661312471258
GPR[EPVS]-1661312471258
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",0,dimensionSize.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312471259
GPR[SPVAP]-1661312471259
GPR[EPVAP]-1661312472279
GPR[EPVS]-1661312472279
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",maximumIterations,0,maximumIterations-1);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312472281
GPR[SPVAP]-1661312472281
GPR[EPVAP]-1661312474139
GPR[SPVATF]-1661312474139
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312475979
GPR[EPVS]-1661312475979
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312475981
GPR[SPVAP]-1661312475981
GPR[EPVAP]-1661312476985
GPR[EPVS]-1661312476985
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312476986
GPR[SPVAP]-1661312476986
GPR[EPVAP]-1661312478863
GPR[SPVATF]-1661312478863
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312480697
GPR[EPVS]-1661312480697
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312480698
GPR[SPVAP]-1661312480698
GPR[EPVAP]-1661312482552
GPR[SPVATF]-1661312482552
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312484398
GPR[EPVS]-1661312484398
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312484399
GPR[SPVAP]-1661312484399
GPR[EPVAP]-1661312485427
GPR[EPVS]-1661312485427
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312485428
GPR[SPVAP]-1661312485428
GPR[EPVAP]-1661312487363
GPR[SPVATF]-1661312487363
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312489184
GPR[EPVS]-1661312489184
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312489185
GPR[SPVAP]-1661312489185
GPR[EPVAP]-1661312491053
GPR[SPVATF]-1661312491053
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312492889
GPR[EPVS]-1661312492889
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312492890
GPR[SPVAP]-1661312492890
GPR[EPVAP]-1661312493899
GPR[EPVS]-1661312493899
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312493900
GPR[SPVAP]-1661312493900
GPR[EPVAP]-1661312494938
GPR[EPVS]-1661312494938
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("polynomial degree must be positive: degree={0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312494939
GPR[SPVAP]-1661312494939
GPR[EPVAP]-1661312496833
GPR[SPVATF]-1661312496833
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312498662
GPR[EPVS]-1661312498662
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312498664
GPR[SPVAP]-1661312498664
GPR[EPVAP]-1661312500561
GPR[SPVATF]-1661312500561
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312502397
GPR[EPVS]-1661312502397
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot compute nth root for null or negative n: {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312502398
GPR[SPVAP]-1661312502398
GPR[EPVAP]-1661312504267
GPR[SPVATF]-1661312504267
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312506086
GPR[EPVS]-1661312506086
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of sample is not positive: {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312506087
GPR[SPVAP]-1661312506087
GPR[EPVAP]-1661312507958
GPR[SPVATF]-1661312507958
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312509773
GPR[EPVS]-1661312509773
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312509774
GPR[SPVAP]-1661312509774
GPR[EPVAP]-1661312511660
GPR[SPVATF]-1661312511660
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312513523
GPR[EPVS]-1661312513523
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312513524
GPR[SPVAP]-1661312513524
GPR[EPVAP]-1661312515381
GPR[SPVATF]-1661312515381
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312517210
GPR[EPVS]-1661312517210
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312517211
GPR[SPVAP]-1661312517211
GPR[EPVAP]-1661312519132
GPR[SPVATF]-1661312519132
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312520992
GPR[EPVS]-1661312520992
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312520993
GPR[SPVAP]-1661312520993
GPR[EPVAP]-1661312522913
GPR[SPVATF]-1661312522913
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312524752
GPR[EPVS]-1661312524752
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312524753
GPR[SPVAP]-1661312524753
GPR[EPVAP]-1661312526636
GPR[SPVATF]-1661312526636
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312528466
GPR[EPVS]-1661312528466
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312528467
GPR[SPVAP]-1661312528467
GPR[EPVAP]-1661312530343
GPR[SPVATF]-1661312530343
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312532194
GPR[EPVS]-1661312532194
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312532196
GPR[SPVAP]-1661312532196
GPR[EPVAP]-1661312534076
GPR[SPVATF]-1661312534076
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312535897
GPR[EPVS]-1661312535897
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes must be non-negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312535898
GPR[SPVAP]-1661312535898
GPR[EPVAP]-1661312537760
GPR[SPVATF]-1661312537760
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312539567
GPR[EPVS]-1661312539567
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312539568
GPR[SPVAP]-1661312539568
GPR[EPVAP]-1661312541449
GPR[SPVATF]-1661312541449
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312543259
GPR[EPVS]-1661312543259
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("population size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312543261
GPR[SPVAP]-1661312543261
GPR[EPVAP]-1661312545115
GPR[SPVATF]-1661312545115
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312546940
GPR[EPVS]-1661312546940
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312546941
GPR[SPVAP]-1661312546942
GPR[EPVAP]-1661312548842
GPR[SPVATF]-1661312548842
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312550675
GPR[EPVS]-1661312550675
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid number of elements {0} (must be positive)",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312550677
GPR[SPVAP]-1661312550677
GPR[EPVAP]-1661312552543
GPR[SPVATF]-1661312552543
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312554355
GPR[EPVS]-1661312554355
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312554356
GPR[SPVAP]-1661312554356
GPR[EPVAP]-1661312556230
GPR[SPVATF]-1661312556230
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312558040
GPR[EPVS]-1661312558040
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of trials must be non-negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312558041
GPR[SPVAP]-1661312558041
GPR[EPVAP]-1661312559912
GPR[SPVATF]-1661312559912
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312561744
GPR[EPVS]-1661312561744
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312561745
GPR[SPVAP]-1661312561745
GPR[EPVAP]-1661312563616
GPR[SPVATF]-1661312563616
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312565423
GPR[EPVS]-1661312565423
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312565425
GPR[SPVAP]-1661312565425
GPR[EPVAP]-1661312567279
GPR[SPVATF]-1661312567279
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312569095
GPR[EPVS]-1661312569095
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312569097
GPR[SPVAP]-1661312569097
GPR[EPVAP]-1661312570968
GPR[SPVATF]-1661312570968
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312572778
GPR[EPVS]-1661312572778
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("start position cannot be negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312572779
GPR[SPVAP]-1661312572779
GPR[EPVAP]-1661312574657
GPR[SPVATF]-1661312574657
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312576480
GPR[EPVS]-1661312576480
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("length cannot be negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312576481
GPR[SPVAP]-1661312576481
GPR[EPVAP]-1661312578355
GPR[SPVATF]-1661312578355
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312580169
GPR[EPVS]-1661312580169
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension {0} (must be positive)",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312580170
GPR[SPVAP]-1661312580170
GPR[EPVAP]-1661312582062
GPR[SPVATF]-1661312582062
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312583886
GPR[EPVS]-1661312583886
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid column dimension {0} (must be positive)",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312583887
GPR[SPVAP]-1661312583887
GPR[EPVAP]-1661312585774
GPR[SPVATF]-1661312585774
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312587622
GPR[EPVS]-1661312587622
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("length must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312587623
GPR[SPVAP]-1661312587623
GPR[EPVAP]-1661312589507
GPR[SPVATF]-1661312589507
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312591313
GPR[EPVS]-1661312591313
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312591315
GPR[SPVAP]-1661312591315
GPR[EPVAP]-1661312593178
GPR[SPVATF]-1661312593178
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312594999
GPR[EPVS]-1661312594999
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312595001
GPR[SPVAP]-1661312595001
GPR[EPVAP]-1661312596871
GPR[SPVATF]-1661312596871
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312598686
GPR[EPVS]-1661312598686
========
if(initial<lowerBound||initial>upperBound||u2u2>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312598687
GPR[SPVAP]-1661312598687
GPR[EPVAP]-1661312599704
GPR[EPVS]-1661312599704
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312599705
GPR[SPVAP]-1661312599705
GPR[EPVAP]-1661312601582
GPR[SPVATF]-1661312601582
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312603471
GPR[EPVS]-1661312603471
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312603473
GPR[SPVAP]-1661312603473
GPR[EPVAP]-1661312605315
GPR[SPVATF]-1661312605315
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312607177
GPR[EPVS]-1661312607177
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312607179
GPR[SPVAP]-1661312607179
GPR[EPVAP]-1661312609051
GPR[SPVATF]-1661312609051
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312610854
GPR[EPVS]-1661312610854
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312610856
GPR[SPVAP]-1661312610856
GPR[EPVAP]-1661312612737
GPR[SPVATF]-1661312612737
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312614568
GPR[EPVS]-1661312614568
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312614570
GPR[SPVAP]-1661312614570
GPR[EPVAP]-1661312616436
GPR[SPVATF]-1661312616436
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312618238
GPR[EPVS]-1661312618238
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312618239
GPR[SPVAP]-1661312618239
GPR[EPVAP]-1661312620119
GPR[SPVATF]-1661312620119
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312621934
GPR[EPVS]-1661312621934
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312621935
GPR[SPVAP]-1661312621935
GPR[EPVAP]-1661312623795
GPR[SPVATF]-1661312623795
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312625600
GPR[EPVS]-1661312625600
========
if(initial<lowerBound||initial>upperBound||lowerBound>1.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312625601
GPR[SPVAP]-1661312625601
GPR[EPVAP]-1661312627522
GPR[SPVATF]-1661312627522
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312629344
GPR[EPVS]-1661312629344
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312629345
GPR[SPVAP]-1661312629345
GPR[EPVAP]-1661312631230
GPR[SPVATF]-1661312631230
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312633059
GPR[EPVS]-1661312633059
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312633060
GPR[SPVAP]-1661312633060
GPR[EPVAP]-1661312634934
GPR[SPVATF]-1661312634934
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312636787
GPR[EPVS]-1661312636787
========
if(initial<lowerBound||initial>upperBound||lowerBound>1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312636788
GPR[SPVAP]-1661312636788
GPR[EPVAP]-1661312638658
GPR[SPVATF]-1661312638658
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312640494
GPR[EPVS]-1661312640494
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312640495
GPR[SPVAP]-1661312640495
GPR[EPVAP]-1661312641504
GPR[EPVS]-1661312641504
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312641505
GPR[SPVAP]-1661312641505
GPR[EPVAP]-1661312642530
GPR[EPVS]-1661312642530
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312642531
GPR[SPVAP]-1661312642531
GPR[EPVAP]-1661312643558
GPR[EPVS]-1661312643558
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312643559
GPR[SPVAP]-1661312643559
GPR[EPVAP]-1661312645449
GPR[SPVATF]-1661312645449
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312647260
GPR[EPVS]-1661312647260
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312647261
GPR[SPVAP]-1661312647261
GPR[EPVAP]-1661312649114
GPR[SPVATF]-1661312649114
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312650922
GPR[EPVS]-1661312650922
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312650923
GPR[SPVAP]-1661312650923
GPR[EPVAP]-1661312651940
GPR[EPVS]-1661312651940
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312651941
GPR[SPVAP]-1661312651941
GPR[EPVAP]-1661312653822
GPR[SPVATF]-1661312653822
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312655650
GPR[EPVS]-1661312655650
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312655651
GPR[SPVAP]-1661312655651
GPR[EPVAP]-1661312656658
GPR[EPVS]-1661312656658
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312656659
GPR[SPVAP]-1661312656659
GPR[EPVAP]-1661312657689
GPR[EPVS]-1661312657689
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312657690
GPR[SPVAP]-1661312657690
GPR[EPVAP]-1661312659552
GPR[SPVATF]-1661312659552
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312661364
GPR[EPVS]-1661312661364
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312661365
GPR[SPVAP]-1661312661365
GPR[EPVAP]-1661312663225
GPR[SPVATF]-1661312663225
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312665034
GPR[EPVS]-1661312665034
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312665035
GPR[SPVAP]-1661312665035
GPR[EPVAP]-1661312666052
GPR[EPVS]-1661312666052
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312666052
GPR[SPVAP]-1661312666052
GPR[EPVAP]-1661312667070
GPR[EPVS]-1661312667070
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",maximumIterations,maximumIterations,initial,lowerBound,upperBound,a,b,upperBound,lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312667071
GPR[SPVAP]-1661312667071
GPR[EPVAP]-1661312668091
GPR[EPVS]-1661312668091
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(function.value(initial)==0.0){
return initial;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312668092
GPR[SPVAP]-1661312668092
GPR[EPVAP]-1661312669104
GPR[EPVS]-1661312669104
========
if(initial<lowerBound||initial>upperBound&&lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312669106
GPR[SPVAP]-1661312669106
GPR[EPVAP]-1661312670990
GPR[SPVATF]-1661312670990
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312672822
GPR[EPVS]-1661312672822
========
if(initial<lowerBound||initial>upperBound||maximumIterations>1){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312672823
GPR[SPVAP]-1661312672823
GPR[EPVAP]-1661312674734
GPR[SPVATF]-1661312674734
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312676553
GPR[EPVS]-1661312676553
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("arrays must have the same length and both must have at "+"least two elements. xArray has size {0}, yArray has {1} elements",maximumIterations,yArray.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312676554
GPR[SPVAP]-1661312676554
GPR[EPVAP]-1661312677573
GPR[EPVS]-1661312677573
========
if(initial<lowerBound||initial>upperBound&&maximumIterations>1){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312677574
GPR[SPVAP]-1661312677574
GPR[EPVAP]-1661312679446
GPR[SPVATF]-1661312679446
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312681288
GPR[EPVS]-1661312681288
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(upperBound*lowerBound<0){
return solve(function,a,yMin,initial,yInitial,min,yMin);
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312681290
GPR[SPVAP]-1661312681290
GPR[EPVAP]-1661312682311
GPR[EPVS]-1661312682311
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(Math.abs(a)<=upperBound){
setResult(initial,0);
return initial;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312682312
GPR[SPVAP]-1661312682312
GPR[EPVAP]-1661312683334
GPR[EPVS]-1661312683334
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
setResult(initial,0);
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312683335
GPR[SPVAP]-1661312683335
GPR[EPVAP]-1661312684346
GPR[EPVS]-1661312684346
========
verifySequence(lowerBound,initial,initial);
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312684348
GPR[SPVAP]-1661312684348
GPR[EPVAP]-1661312685351
GPR[EPVS]-1661312685351
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312685352
GPR[SPVAP]-1661312685352
GPR[EPVAP]-1661312686371
GPR[EPVS]-1661312686371
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(a));
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312686372
GPR[SPVAP]-1661312686372
GPR[EPVAP]-1661312687368
GPR[EPVS]-1661312687368
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(Math.abs(function.value(lowerBound))<1.0E-6){
return lowerBound;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312687369
GPR[SPVAP]-1661312687369
GPR[EPVAP]-1661312688375
GPR[EPVS]-1661312688375
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(Math.abs(function.value(upperBound))<1.0E-6){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312688376
GPR[SPVAP]-1661312688376
GPR[EPVAP]-1661312689382
GPR[EPVS]-1661312689382
========
if(initial<lowerBound||initial>upperBound||xArray.length>1){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312689384
GPR[SPVAP]-1661312689384
GPR[EPVAP]-1661312690402
GPR[EPVS]-1661312690402
========
if(initial<lowerBound||initial>upperBound||xArray.length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312690403
GPR[SPVAP]-1661312690403
GPR[EPVAP]-1661312691419
GPR[EPVS]-1661312691419
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid array dimensions. xArray has size {0}; yArray has {1} elements",xArray.length,yArray.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312691420
GPR[SPVAP]-1661312691420
GPR[EPVAP]-1661312692434
GPR[EPVS]-1661312692434
========
if(initial<lowerBound||initial>upperBound&&lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312692435
GPR[SPVAP]-1661312692435
GPR[EPVAP]-1661312694329
GPR[SPVATF]-1661312694329
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312696150
GPR[EPVS]-1661312696150
========
if(initial<lowerBound||initial>upperBound&&length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312696151
GPR[SPVAP]-1661312696151
GPR[EPVAP]-1661312697164
GPR[EPVS]-1661312697164
========
if(initial<lowerBound||initial>upperBound||length>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312697165
GPR[SPVAP]-1661312697165
GPR[EPVAP]-1661312698179
GPR[EPVS]-1661312698179
========
if(initial<lowerBound||initial>upperBound&&length>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312698180
GPR[SPVAP]-1661312698180
GPR[EPVAP]-1661312699191
GPR[EPVS]-1661312699191
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(upperBound*a<0){
return solve(function,initial,yInitial,a,yMax,initial,yInitial);
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312699192
GPR[SPVAP]-1661312699192
GPR[EPVAP]-1661312700205
GPR[EPVS]-1661312700205
========
if(Math.abs(a)<=a){
setResult(yMax,0);
return a;
}
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312700207
GPR[SPVAP]-1661312700207
GPR[EPVAP]-1661312701241
GPR[EPVS]-1661312701241
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",getDimension(),maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312701243
GPR[SPVAP]-1661312701243
GPR[EPVAP]-1661312702260
GPR[EPVS]-1661312702260
========
if(initial<lowerBound||initial>upperBound||b>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312702262
GPR[SPVAP]-1661312702262
GPR[EPVAP]-1661312703279
GPR[EPVS]-1661312703279
========
if(initial<lowerBound||initial>upperBound||u>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312703280
GPR[SPVAP]-1661312703280
GPR[EPVAP]-1661312704289
GPR[EPVS]-1661312704289
========
if(initial<lowerBound||initial>upperBound||lowerBound>=t2){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312704290
GPR[SPVAP]-1661312704290
GPR[EPVAP]-1661312705294
GPR[EPVS]-1661312705294
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=yA;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312705296
GPR[SPVAP]-1661312705296
GPR[EPVAP]-1661312706324
GPR[EPVS]-1661312706324
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(upperBound*lowerBound<=0){
return b;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312706325
GPR[SPVAP]-1661312706325
GPR[EPVAP]-1661312707355
GPR[EPVS]-1661312707355
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",initial);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312707356
GPR[SPVAP]-1661312707356
GPR[EPVAP]-1661312709235
GPR[SPVATF]-1661312709235
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312711046
GPR[EPVS]-1661312711046
========
if(c1<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312711049
GPR[SPVAP]-1661312711049
GPR[EPVAP]-1661312712072
GPR[EPVS]-1661312712072
========
if(initial<c2||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312712073
GPR[SPVAP]-1661312712073
GPR[EPVAP]-1661312713105
GPR[EPVS]-1661312713105
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw new OptimizationException("unable to first guess the harmonic coefficients");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312713106
GPR[SPVAP]-1661312713106
GPR[EPVAP]-1661312714107
GPR[EPVS]-1661312714107
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=sx2;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312714109
GPR[SPVAP]-1661312714109
GPR[EPVAP]-1661312715153
GPR[EPVS]-1661312715153
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=sy2;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312715155
GPR[SPVAP]-1661312715155
GPR[EPVAP]-1661312716170
GPR[EPVS]-1661312716170
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=sxy;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312716171
GPR[SPVAP]-1661312716171
GPR[EPVAP]-1661312717173
GPR[EPVS]-1661312717173
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=omega;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312717175
GPR[SPVAP]-1661312717175
GPR[EPVAP]-1661312718177
GPR[EPVS]-1661312718177
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=x;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312718178
GPR[SPVAP]-1661312718178
GPR[EPVAP]-1661312719176
GPR[EPVS]-1661312719176
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=phi;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312719177
GPR[SPVAP]-1661312719177
GPR[EPVAP]-1661312720178
GPR[EPVS]-1661312720178
========
if(initial<lowerBound||initial>upperBound||a>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312720181
GPR[SPVAP]-1661312720181
GPR[EPVAP]-1661312721184
GPR[EPVS]-1661312721184
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312721187
GPR[SPVAP]-1661312721187
GPR[EPVAP]-1661312723061
GPR[SPVATF]-1661312723061
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312724920
GPR[EPVS]-1661312724920
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",lowerBound,initial);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312724922
GPR[SPVAP]-1661312724922
GPR[EPVAP]-1661312726816
GPR[SPVATF]-1661312726816
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312728621
GPR[EPVS]-1661312728622
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw new MaxIterationsExceededException(maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312728624
GPR[SPVAP]-1661312728624
GPR[EPVAP]-1661312729647
GPR[EPVS]-1661312729647
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=b;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312729651
GPR[SPVAP]-1661312729651
GPR[EPVAP]-1661312730678
GPR[EPVS]-1661312730678
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=c;

========
MM Copying to MM
GPR[SPVS]-1661312730679
GPR[SPVAP]-1661312730679
GPR[EPVAP]-1661312731687
GPR[EPVS]-1661312731687
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=b2;

========
MM Copying to MM
GPR[SPVS]-1661312731688
GPR[SPVAP]-1661312731688
GPR[EPVAP]-1661312732791
GPR[EPVS]-1661312732791
========
if(a>=0){
throw new InvalidMatrixException("cannot solve degree {0} equation",3);
}
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1661312732792
GPR[SPVAP]-1661312732792
GPR[EPVAP]-1661312733828
GPR[EPVS]-1661312733828
GPR[ESUN]-1661312733831
GPR[SSUN]-1661312733831
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,183
========
double a=a;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312734936
GPR[SPVAP]-1661312734936
GPR[EPVAP]-1661312736857
GPR[EPVS]-1661312736857
========
double a=c;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312736858
GPR[SPVAP]-1661312736858
GPR[EPVAP]-1661312738599
GPR[EPVS]-1661312738599
========
double a=b;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312738600
GPR[SPVAP]-1661312738600
GPR[EPVAP]-1661312740386
GPR[EPVS]-1661312740386
========
double a=initial;
double b=x;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312740388
GPR[SPVAP]-1661312740388
GPR[EPVAP]-1661312742103
GPR[EPVS]-1661312742103
========
double a=p1;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312742105
GPR[SPVAP]-1661312742105
GPR[EPVAP]-1661312743806
GPR[EPVS]-1661312743806
========
double a=p0;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312743807
GPR[SPVAP]-1661312743807
GPR[EPVAP]-1661312745517
GPR[EPVS]-1661312745517
========
++maximumIterations;
double a=initial;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312745518
GPR[SPVAP]-1661312745518
GPR[EPVAP]-1661312750222
GPR[SPVATF]-1661312750222
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312752023
GPR[EPVS]-1661312752023
========
++maximumIterations;
double a=a;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312752024
GPR[SPVAP]-1661312752024
GPR[EPVAP]-1661312753039
GPR[EPVS]-1661312753039
========
++maximumIterations;
double a=b;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312753040
GPR[SPVAP]-1661312753040
GPR[EPVAP]-1661312754049
GPR[EPVS]-1661312754049
========
double a=yA;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312754050
GPR[SPVAP]-1661312754050
GPR[EPVAP]-1661312755075
GPR[EPVS]-1661312755075
========
double a=initial;
double b=a;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312755076
GPR[SPVAP]-1661312755076
GPR[EPVAP]-1661312757007
GPR[SPVATF]-1661312757007
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312758843
GPR[EPVS]-1661312758843
========
double a=initial;
double b=step;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312758844
GPR[SPVAP]-1661312758844
GPR[EPVAP]-1661312759873
GPR[EPVS]-1661312759873
========
double a=omega;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312759876
GPR[SPVAP]-1661312759876
GPR[EPVAP]-1661312760875
GPR[EPVS]-1661312760875
========
double a=x;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312760876
GPR[SPVAP]-1661312760876
GPR[EPVAP]-1661312761907
GPR[EPVS]-1661312761907
========
double a=phi;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312761908
GPR[SPVAP]-1661312761908
GPR[EPVAP]-1661312762941
GPR[EPVS]-1661312762941
========
double a=initial;
double b=an;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312762942
GPR[SPVAP]-1661312762942
GPR[EPVAP]-1661312763957
GPR[EPVS]-1661312763957
========
double a=q1;
double b=q1;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312763964
GPR[SPVAP]-1661312763964
GPR[EPVAP]-1661312764981
GPR[EPVS]-1661312764981
========
double a=q1;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312764982
GPR[SPVAP]-1661312764982
GPR[EPVAP]-1661312765986
GPR[EPVS]-1661312765986
========
double a=q2;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312765987
GPR[SPVAP]-1661312765987
GPR[EPVAP]-1661312767010
GPR[EPVS]-1661312767010
========
double a=initial;
double b=q0;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312767011
GPR[SPVAP]-1661312767011
GPR[EPVAP]-1661312768016
GPR[EPVS]-1661312768016
========
double a=initial;
double b=q1;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312768017
GPR[SPVAP]-1661312768017
GPR[EPVAP]-1661312769033
GPR[EPVS]-1661312769033
========
double a=initial;
double b=sqrtMq;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312769035
GPR[SPVAP]-1661312769035
GPR[EPVAP]-1661312770063
GPR[EPVS]-1661312770063
========
double a=initial;
double b=c;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312770064
GPR[SPVAP]-1661312770064
GPR[EPVAP]-1661312771066
GPR[EPVS]-1661312771067
========
double a=initial;
double b=b2;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312771068
GPR[SPVAP]-1661312771068
GPR[EPVAP]-1661312772089
GPR[EPVS]-1661312772089
========
if(a>=0){
throw new InvalidMatrixException("cannot solve degree {0} equation",3);
}
double a=initial;
double b=initial;
double fa;

========
MM Copying to MM
GPR[SPVS]-1661312772089
GPR[SPVAP]-1661312772089
GPR[EPVAP]-1661312773102
GPR[EPVS]-1661312773102
GPR[ESUN]-1661312773102
GPR[SSUN]-1661312773102
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,186
========
if(fa*fb>=0.0){
throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, "+"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, ",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312775501
GPR[SPVAP]-1661312775501
GPR[EPVAP]-1661312777362
GPR[EPVS]-1661312777362
========
double fb;
int numIterations=0;
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312777364
GPR[SPVAP]-1661312777364
GPR[EPVAP]-1661312782179
GPR[SPVATF]-1661312782179
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312783988
GPR[EPVS]-1661312783988
========
double fb;
int numIterations=0;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312783989
GPR[SPVAP]-1661312783989
GPR[EPVAP]-1661312785897
GPR[SPVATF]-1661312785897
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312787707
GPR[EPVS]-1661312787707
========
double fb;
int numIterations=0;
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312787708
GPR[SPVAP]-1661312787708
GPR[EPVAP]-1661312789575
GPR[SPVATF]-1661312789575
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312842712
GPR[EPVS]-1661312842712
========
double fb;
int numIterations=0;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312842713
GPR[SPVAP]-1661312842713
GPR[EPVAP]-1661312844649
GPR[SPVATF]-1661312844649
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312846487
GPR[EPVS]-1661312846487
========
double fb;
int numIterations=0;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312846488
GPR[SPVAP]-1661312846488
GPR[EPVAP]-1661312848365
GPR[SPVATF]-1661312848365
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312850195
GPR[EPVS]-1661312850195
========
double fb;
int numIterations=0;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312850196
GPR[SPVAP]-1661312850196
GPR[EPVAP]-1661312852079
GPR[SPVATF]-1661312852079
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312853890
GPR[EPVS]-1661312853890
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312853891
GPR[SPVAP]-1661312853891
GPR[EPVAP]-1661312854899
GPR[EPVS]-1661312854899
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312854900
GPR[SPVAP]-1661312854900
GPR[EPVAP]-1661312856806
GPR[SPVATF]-1661312856806
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312858626
GPR[EPVS]-1661312858626
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312858627
GPR[SPVAP]-1661312858627
GPR[EPVAP]-1661312860540
GPR[SPVATF]-1661312860540
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312913923
GPR[EPVS]-1661312913923
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312913925
GPR[SPVAP]-1661312913925
GPR[EPVAP]-1661312915846
GPR[SPVATF]-1661312915846
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312917710
GPR[EPVS]-1661312917710
========
double fb;
int numIterations=0;
b=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312917711
GPR[SPVAP]-1661312917711
GPR[EPVAP]-1661312919573
GPR[SPVATF]-1661312919573
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312921399
GPR[EPVS]-1661312921399
========
double fb;
int numIterations=0;
b=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312921400
GPR[SPVAP]-1661312921400
GPR[EPVAP]-1661312923276
GPR[SPVATF]-1661312923276
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312925091
GPR[EPVS]-1661312925091
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312925092
GPR[SPVAP]-1661312925092
GPR[EPVAP]-1661312926975
GPR[SPVATF]-1661312926975
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312958085
GPR[EPVS]-1661312958085
========
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312958086
GPR[SPVAP]-1661312958086
GPR[EPVAP]-1661312959959
GPR[SPVATF]-1661312959959
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312961784
GPR[EPVS]-1661312961784
========
double fb;
int numIterations=0;
initial=function.value(b);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312961785
GPR[SPVAP]-1661312961785
GPR[EPVAP]-1661312963666
GPR[SPVATF]-1661312963666
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312965504
GPR[EPVS]-1661312965504
========
double fb;
int numIterations=0;
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312965505
GPR[SPVAP]-1661312965505
GPR[EPVAP]-1661312967365
GPR[SPVATF]-1661312967365
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661312969211
GPR[EPVS]-1661312969211
========
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661312969212
GPR[SPVAP]-1661312969212
GPR[EPVAP]-1661312971078
GPR[SPVATF]-1661312971078
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313024445
GPR[EPVS]-1661313024445
========
double fb;
int numIterations=0;
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313024447
GPR[SPVAP]-1661313024447
GPR[EPVAP]-1661313026338
GPR[SPVATF]-1661313026338
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313079267
GPR[EPVS]-1661313079267
========
double fb;
int numIterations=0;
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313079268
GPR[SPVAP]-1661313079268
GPR[EPVAP]-1661313081118
GPR[SPVATF]-1661313081118
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313134075
GPR[EPVS]-1661313134075
========
double fb;
int numIterations=0;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313134077
GPR[SPVAP]-1661313134077
GPR[EPVAP]-1661313136018
GPR[SPVATF]-1661313136018
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313137823
GPR[EPVS]-1661313137823
========
double fb;
int numIterations=0;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313137824
GPR[SPVAP]-1661313137824
GPR[EPVAP]-1661313139682
GPR[SPVATF]-1661313139682
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313141490
GPR[EPVS]-1661313141490
========
double fb;
int numIterations=0;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313141492
GPR[SPVAP]-1661313141492
GPR[EPVAP]-1661313143364
GPR[SPVATF]-1661313143364
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313145192
GPR[EPVS]-1661313145192
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313145193
GPR[SPVAP]-1661313145193
GPR[EPVAP]-1661313147103
GPR[SPVATF]-1661313147103
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313177926
GPR[EPVS]-1661313177926
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313177927
GPR[SPVAP]-1661313177927
GPR[EPVAP]-1661313179825
GPR[SPVATF]-1661313179825
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313181703
GPR[EPVS]-1661313181703
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313181704
GPR[SPVAP]-1661313181704
GPR[EPVAP]-1661313183615
GPR[SPVATF]-1661313183615
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313185455
GPR[EPVS]-1661313185456
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313185457
GPR[SPVAP]-1661313185457
GPR[EPVAP]-1661313187332
GPR[SPVATF]-1661313187332
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313189159
GPR[EPVS]-1661313189159
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313189160
GPR[SPVAP]-1661313189160
GPR[EPVAP]-1661313191031
GPR[SPVATF]-1661313191031
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313244344
GPR[EPVS]-1661313244344
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313244345
GPR[SPVAP]-1661313244345
GPR[EPVAP]-1661313246255
GPR[SPVATF]-1661313246255
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313299404
GPR[EPVS]-1661313299404
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313299405
GPR[SPVAP]-1661313299405
GPR[EPVAP]-1661313301293
GPR[SPVATF]-1661313301293
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313354428
GPR[EPVS]-1661313354428
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313354429
GPR[SPVAP]-1661313354429
GPR[EPVAP]-1661313356348
GPR[SPVATF]-1661313356348
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313358194
GPR[EPVS]-1661313358194
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313358196
GPR[SPVAP]-1661313358196
GPR[EPVAP]-1661313360058
GPR[SPVATF]-1661313360058
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313361873
GPR[EPVS]-1661313361873
========
double fb;
int numIterations=0;
b=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313361874
GPR[SPVAP]-1661313361874
GPR[EPVAP]-1661313363769
GPR[SPVATF]-1661313363769
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313365603
GPR[EPVS]-1661313365603
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313365604
GPR[SPVAP]-1661313365604
GPR[EPVAP]-1661313367479
GPR[SPVATF]-1661313367479
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313402248
GPR[EPVS]-1661313402248
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313402249
GPR[SPVAP]-1661313402249
GPR[EPVAP]-1661313404106
GPR[SPVATF]-1661313404106
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313435271
GPR[EPVS]-1661313435271
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313435272
GPR[SPVAP]-1661313435272
GPR[EPVAP]-1661313437183
GPR[SPVATF]-1661313437183
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313468402
GPR[EPVS]-1661313468402
========
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313468403
GPR[SPVAP]-1661313468403
GPR[EPVAP]-1661313470255
GPR[SPVATF]-1661313470255
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313472078
GPR[EPVS]-1661313472078
========
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313472079
GPR[SPVAP]-1661313472079
GPR[EPVAP]-1661313473945
GPR[SPVATF]-1661313473945
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313475757
GPR[EPVS]-1661313475757
========
double fb;
int numIterations=0;
initial=function.value(b);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313475759
GPR[SPVAP]-1661313475759
GPR[EPVAP]-1661313477608
GPR[SPVATF]-1661313477608
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313479464
GPR[EPVS]-1661313479464
========
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313479465
GPR[SPVAP]-1661313479465
GPR[EPVAP]-1661313481329
GPR[SPVATF]-1661313481329
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313534623
GPR[EPVS]-1661313534623
========
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313534625
GPR[SPVAP]-1661313534625
GPR[EPVAP]-1661313536536
GPR[SPVATF]-1661313536536
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313590715
GPR[EPVS]-1661313590715
========
double fb;
int numIterations=0;
upperBound=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313590717
GPR[SPVAP]-1661313590717
GPR[EPVAP]-1661313592605
GPR[SPVATF]-1661313592605
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313646043
GPR[EPVS]-1661313646043
========
double fb;
int numIterations=0;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313646045
GPR[SPVAP]-1661313646045
GPR[EPVAP]-1661313647971
GPR[SPVATF]-1661313647971
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313649798
GPR[EPVS]-1661313649798
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313649799
GPR[SPVAP]-1661313649799
GPR[EPVAP]-1661313651698
GPR[SPVATF]-1661313651698
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313682779
GPR[EPVS]-1661313682779
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313682780
GPR[SPVAP]-1661313682780
GPR[EPVAP]-1661313684685
GPR[SPVATF]-1661313684685
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313715840
GPR[EPVS]-1661313715840
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313715841
GPR[SPVAP]-1661313715841
GPR[EPVAP]-1661313717746
GPR[SPVATF]-1661313717746
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313749038
GPR[EPVS]-1661313749038
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313749040
GPR[SPVAP]-1661313749040
GPR[EPVAP]-1661313750922
GPR[SPVATF]-1661313750922
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313752740
GPR[EPVS]-1661313752740
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313752741
GPR[SPVAP]-1661313752741
GPR[EPVAP]-1661313754634
GPR[SPVATF]-1661313754634
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313756474
GPR[EPVS]-1661313756474
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313756475
GPR[SPVAP]-1661313756475
GPR[EPVAP]-1661313758367
GPR[SPVATF]-1661313758367
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313760184
GPR[EPVS]-1661313760184
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313760185
GPR[SPVAP]-1661313760185
GPR[EPVAP]-1661313762066
GPR[SPVATF]-1661313762066
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313815299
GPR[EPVS]-1661313815299
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313815300
GPR[SPVAP]-1661313815300
GPR[EPVAP]-1661313817228
GPR[SPVATF]-1661313817228
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313870377
GPR[EPVS]-1661313870377
========
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313870379
GPR[SPVAP]-1661313870379
GPR[EPVAP]-1661313872252
GPR[SPVATF]-1661313872252
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313925652
GPR[EPVS]-1661313925652
========
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313925653
GPR[SPVAP]-1661313925653
GPR[EPVAP]-1661313927627
GPR[SPVATF]-1661313927627
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313929475
GPR[EPVS]-1661313929475
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313929476
GPR[SPVAP]-1661313929476
GPR[EPVAP]-1661313931385
GPR[SPVATF]-1661313931385
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313962649
GPR[EPVS]-1661313962649
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313962651
GPR[SPVAP]-1661313962651
GPR[EPVAP]-1661313964514
GPR[SPVATF]-1661313964514
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661313995727
GPR[EPVS]-1661313995727
========
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661313995728
GPR[SPVAP]-1661313995728
GPR[EPVAP]-1661313997638
GPR[SPVATF]-1661313997638
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314028870
GPR[EPVS]-1661314028870
========
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314028871
GPR[SPVAP]-1661314028871
GPR[EPVAP]-1661314030733
GPR[SPVATF]-1661314030733
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314032543
GPR[EPVS]-1661314032543
========
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314032545
GPR[SPVAP]-1661314032545
GPR[EPVAP]-1661314034394
GPR[SPVATF]-1661314034394
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314087754
GPR[EPVS]-1661314087754
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314087756
GPR[SPVAP]-1661314087756
GPR[EPVAP]-1661314088791
GPR[EPVS]-1661314088791
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314088792
GPR[SPVAP]-1661314088792
GPR[EPVAP]-1661314089811
GPR[EPVS]-1661314089811
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314089812
GPR[SPVAP]-1661314089812
GPR[EPVAP]-1661314090831
GPR[EPVS]-1661314090831
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314090832
GPR[SPVAP]-1661314090832
GPR[EPVAP]-1661314091827
GPR[EPVS]-1661314091827
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314091828
GPR[SPVAP]-1661314091828
GPR[EPVAP]-1661314092885
GPR[EPVS]-1661314092885
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314092887
GPR[SPVAP]-1661314092887
GPR[EPVAP]-1661314093896
GPR[EPVS]-1661314093896
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314093898
GPR[SPVAP]-1661314093898
GPR[EPVAP]-1661314094912
GPR[EPVS]-1661314094912
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314094913
GPR[SPVAP]-1661314094913
GPR[EPVAP]-1661314095935
GPR[EPVS]-1661314095935
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314095936
GPR[SPVAP]-1661314095936
GPR[EPVAP]-1661314096948
GPR[EPVS]-1661314096948
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314096949
GPR[SPVAP]-1661314096949
GPR[EPVAP]-1661314097967
GPR[EPVS]-1661314097967
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314097968
GPR[SPVAP]-1661314097968
GPR[EPVAP]-1661314098974
GPR[EPVS]-1661314098974
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314098975
GPR[SPVAP]-1661314098975
GPR[EPVAP]-1661314099998
GPR[EPVS]-1661314099998
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314099999
GPR[SPVAP]-1661314099999
GPR[EPVAP]-1661314101027
GPR[EPVS]-1661314101027
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314101028
GPR[SPVAP]-1661314101028
GPR[EPVAP]-1661314102032
GPR[EPVS]-1661314102032
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314102033
GPR[SPVAP]-1661314102033
GPR[EPVAP]-1661314103037
GPR[EPVS]-1661314103037
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314103039
GPR[SPVAP]-1661314103039
GPR[EPVAP]-1661314104047
GPR[EPVS]-1661314104047
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314104048
GPR[SPVAP]-1661314104048
GPR[EPVAP]-1661314105061
GPR[EPVS]-1661314105061
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314105062
GPR[SPVAP]-1661314105062
GPR[EPVAP]-1661314106082
GPR[EPVS]-1661314106082
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314106083
GPR[SPVAP]-1661314106083
GPR[EPVAP]-1661314107101
GPR[EPVS]-1661314107101
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314107102
GPR[SPVAP]-1661314107102
GPR[EPVAP]-1661314108115
GPR[EPVS]-1661314108115
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314108116
GPR[SPVAP]-1661314108116
GPR[EPVAP]-1661314109120
GPR[EPVS]-1661314109120
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
upperBound=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314109121
GPR[SPVAP]-1661314109121
GPR[EPVAP]-1661314110127
GPR[EPVS]-1661314110127
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314110129
GPR[SPVAP]-1661314110129
GPR[EPVAP]-1661314111135
GPR[EPVS]-1661314111135
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314111136
GPR[SPVAP]-1661314111136
GPR[EPVAP]-1661314112142
GPR[EPVS]-1661314112142
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314112143
GPR[SPVAP]-1661314112143
GPR[EPVAP]-1661314113192
GPR[EPVS]-1661314113192
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314113194
GPR[SPVAP]-1661314113194
GPR[EPVAP]-1661314114211
GPR[EPVS]-1661314114211
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314114212
GPR[SPVAP]-1661314114212
GPR[EPVAP]-1661314115220
GPR[EPVS]-1661314115220
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314115221
GPR[SPVAP]-1661314115221
GPR[EPVAP]-1661314116232
GPR[EPVS]-1661314116232
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314116233
GPR[SPVAP]-1661314116233
GPR[EPVAP]-1661314117244
GPR[EPVS]-1661314117244
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314117245
GPR[SPVAP]-1661314117245
GPR[EPVAP]-1661314118247
GPR[EPVS]-1661314118247
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
b=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314118248
GPR[SPVAP]-1661314118248
GPR[EPVAP]-1661314119277
GPR[EPVS]-1661314119277
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
initial=function.value(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314119279
GPR[SPVAP]-1661314119279
GPR[EPVAP]-1661314120287
GPR[EPVS]-1661314120287
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314120288
GPR[SPVAP]-1661314120288
GPR[EPVAP]-1661314121291
GPR[EPVS]-1661314121291
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
upperBound=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314121292
GPR[SPVAP]-1661314121292
GPR[EPVAP]-1661314122303
GPR[EPVS]-1661314122303
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314122304
GPR[SPVAP]-1661314122304
GPR[EPVAP]-1661314123323
GPR[EPVS]-1661314123323
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314123324
GPR[SPVAP]-1661314123324
GPR[EPVAP]-1661314124334
GPR[EPVS]-1661314124334
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(b);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314124335
GPR[SPVAP]-1661314124335
GPR[EPVAP]-1661314125335
GPR[EPVS]-1661314125335
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314125335
GPR[SPVAP]-1661314125335
GPR[EPVAP]-1661314126333
GPR[EPVS]-1661314126333
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
initial=function.value(upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314126334
GPR[SPVAP]-1661314126334
GPR[EPVAP]-1661314127347
GPR[EPVS]-1661314127347
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
upperBound=initial;
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314127348
GPR[SPVAP]-1661314127348
GPR[EPVAP]-1661314128343
GPR[EPVS]-1661314128343
========
if(initial==0.0){
return initial;
}
double fb;
int numIterations=0;
initial=function.value(upperBound);
a=0.5*(b+upperBound);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314128344
GPR[SPVAP]-1661314128344
GPR[EPVAP]-1661314129358
GPR[EPVS]-1661314129358
========
double fb;
int numIterations=0;
a=lowerBound;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314129361
GPR[SPVAP]-1661314129361
GPR[EPVAP]-1661314131256
GPR[SPVATF]-1661314131256
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314133066
GPR[EPVS]-1661314133066
========
double fb;
int numIterations=0;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314133067
GPR[SPVAP]-1661314133068
GPR[EPVAP]-1661314134942
GPR[SPVATF]-1661314134942
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314136748
GPR[EPVS]-1661314136748
========
double fb;
int numIterations=0;
b=upperBound;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314136749
GPR[SPVAP]-1661314136749
GPR[EPVAP]-1661314138622
GPR[SPVATF]-1661314138622
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314140450
GPR[EPVS]-1661314140451
========
double fb;
if(initial==0.0){
return upperBound;
}
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314140452
GPR[SPVAP]-1661314140452
GPR[EPVAP]-1661314141453
GPR[EPVS]-1661314141453
========
double fb;
verifyBracketing(lowerBound,upperBound,function);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314141454
GPR[SPVAP]-1661314141454
GPR[EPVAP]-1661314142478
GPR[EPVS]-1661314142478
========
double fb;
int numIterations=0;
a=lowerBound;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314142479
GPR[SPVAP]-1661314142479
GPR[EPVAP]-1661314144352
GPR[SPVATF]-1661314144352
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314146166
GPR[EPVS]-1661314146166
========
double fb;
int numIterations=0;
a=lowerBound;
b=upperBound;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314146167
GPR[SPVAP]-1661314146167
GPR[EPVAP]-1661314148040
GPR[SPVATF]-1661314148040
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314149908
GPR[EPVS]-1661314149908
========
double fb;
int numIterations=0;
a=lowerBound;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314149910
GPR[SPVAP]-1661314149910
GPR[EPVAP]-1661314151787
GPR[SPVATF]-1661314151787
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314153639
GPR[EPVS]-1661314153639
========
double fb;
int numIterations=0;
fb=function.value(a);
b=upperBound;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314153640
GPR[SPVAP]-1661314153640
GPR[EPVAP]-1661314155494
GPR[SPVATF]-1661314155494
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314157312
GPR[EPVS]-1661314157312
========
double fb;
int numIterations=0;
fb=function.value(a);
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314157313
GPR[SPVAP]-1661314157313
GPR[EPVAP]-1661314159164
GPR[SPVATF]-1661314159164
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314161007
GPR[EPVS]-1661314161007
========
double fb;
int numIterations=0;
b=upperBound;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314161009
GPR[SPVAP]-1661314161009
GPR[EPVAP]-1661314162878
GPR[SPVATF]-1661314162879
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314165840
GPR[EPVS]-1661314165840
========
double fb;
int numIterations=0;
a=lowerBound;
fb=function.value(a);
b=upperBound;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314165841
GPR[SPVAP]-1661314165841
GPR[EPVAP]-1661314167760
GPR[SPVATF]-1661314167760
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314169592
GPR[EPVS]-1661314169592
========
double fb;
int numIterations=0;
a=lowerBound;
fb=function.value(a);
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314169593
GPR[SPVAP]-1661314169593
GPR[EPVAP]-1661314171457
GPR[SPVATF]-1661314171457
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314173264
GPR[EPVS]-1661314173264
========
double fb;
int numIterations=0;
a=lowerBound;
b=upperBound;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314173265
GPR[SPVAP]-1661314173265
GPR[EPVAP]-1661314175130
GPR[SPVATF]-1661314175130
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314176994
GPR[EPVS]-1661314176994
========
double fb;
int numIterations=0;
fb=function.value(a);
b=upperBound;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314176995
GPR[SPVAP]-1661314176995
GPR[EPVAP]-1661314178929
GPR[SPVATF]-1661314178929
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314180779
GPR[EPVS]-1661314180779
========
double fb;
int numIterations=0;
a=lowerBound;
fb=function.value(a);
b=upperBound;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314180780
GPR[SPVAP]-1661314180780
GPR[EPVAP]-1661314182670
GPR[SPVATF]-1661314182670
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314184503
GPR[EPVS]-1661314184503
========
double fb;
int numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314184505
GPR[SPVAP]-1661314184505
GPR[EPVAP]-1661314186397
GPR[SPVATF]-1661314186397
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314188236
GPR[EPVS]-1661314188236
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.max(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314188237
GPR[SPVAP]-1661314188237
GPR[EPVAP]-1661314190115
GPR[SPVATF]-1661314190115
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314192011
GPR[EPVS]-1661314192011
========
double fb;
int numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.max(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314192012
GPR[SPVAP]-1661314192012
GPR[EPVAP]-1661314193885
GPR[SPVATF]-1661314193885
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314195770
GPR[EPVS]-1661314195770
========
double fb;
int numIterations=0;
do {
y2=function.value(b);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314195772
GPR[SPVAP]-1661314195772
GPR[EPVAP]-1661314196780
GPR[EPVS]-1661314196780
========
double fb;
int numIterations=0;
do {
y0=function.value(b);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314196782
GPR[SPVAP]-1661314196782
GPR[EPVAP]-1661314197781
GPR[EPVS]-1661314197781
========
a=0.5*(fa+fb);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314197782
GPR[SPVAP]-1661314197782
GPR[EPVAP]-1661314198797
GPR[EPVS]-1661314198798
========
initial=function.value(a);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314198799
GPR[SPVAP]-1661314198799
GPR[EPVAP]-1661314200670
GPR[SPVATF]-1661314200670
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314202490
GPR[EPVS]-1661314202490
========
double fb;
int numIterations=0;
verifyInterval(upperBound,lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314202492
GPR[SPVAP]-1661314202492
GPR[EPVAP]-1661314203502
GPR[EPVS]-1661314203502
========
if(function.value(b)==0.0){
return max;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314203504
GPR[SPVAP]-1661314203504
GPR[EPVAP]-1661314204516
GPR[EPVS]-1661314204516
========
if(function.value(initial)==0.0){
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314204517
GPR[SPVAP]-1661314204517
GPR[EPVAP]-1661314205515
GPR[EPVS]-1661314205515
========
verifyBracketing(a,b,function);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314205516
GPR[SPVAP]-1661314205516
GPR[EPVAP]-1661314206570
GPR[EPVS]-1661314206570
========
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314206571
GPR[SPVAP]-1661314206571
GPR[EPVAP]-1661314207593
GPR[EPVS]-1661314207593
========
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314207594
GPR[SPVAP]-1661314207594
GPR[EPVAP]-1661314208612
GPR[EPVS]-1661314208612
========
double fb;
int numIterations=0;
initial=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314208614
GPR[SPVAP]-1661314208614
GPR[EPVAP]-1661314210509
GPR[SPVATF]-1661314210509
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314212341
GPR[EPVS]-1661314212341
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314212343
GPR[SPVAP]-1661314212343
GPR[EPVAP]-1661314213357
GPR[EPVS]-1661314213357
========
lowerBound=Math.max(upperBound,lmPar+b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314213358
GPR[SPVAP]-1661314213358
GPR[EPVAP]-1661314214364
GPR[EPVS]-1661314214364
========
double fb;
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314214366
GPR[SPVAP]-1661314214366
GPR[EPVAP]-1661314216254
GPR[SPVATF]-1661314216254
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314218074
GPR[EPVS]-1661314218074
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
work[i+2]=-initial;
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314218076
GPR[SPVAP]-1661314218076
GPR[EPVAP]-1661314219106
GPR[EPVS]-1661314219106
========
double fb;
int numIterations=0;
do {
previousEMin=work[i+7];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314219107
GPR[SPVAP]-1661314219107
GPR[EPVAP]-1661314220105
GPR[EPVS]-1661314220105
========
double fb;
int numIterations=0;
do {
work[i+2]=-initial;
previousEMin=work[i+7];

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314220106
GPR[SPVAP]-1661314220106
GPR[EPVAP]-1661314221122
GPR[EPVS]-1661314221122
========
double fb;
int numIterations=BLOCK_SIZE;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314221127
GPR[SPVAP]-1661314221127
GPR[EPVAP]-1661314222145
GPR[EPVS]-1661314222145
========
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314222151
GPR[SPVAP]-1661314222151
GPR[EPVAP]-1661314224019
GPR[SPVATF]-1661314224019
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314225844
GPR[EPVS]-1661314225844
========
double fb;
int numIterations=0;
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314225845
GPR[SPVAP]-1661314225845
GPR[EPVAP]-1661314227718
GPR[SPVATF]-1661314227718
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314229541
GPR[EPVS]-1661314229541
========
b=1-(fb*initial)/(initial*y3);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314229543
GPR[SPVAP]-1661314229543
GPR[EPVAP]-1661314230563
GPR[EPVS]-1661314230563
========
initial=(MathUtils.sign(initial)*MathUtils.sign(initial))*(initial-initial)/Math.sqrt(b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314230564
GPR[SPVAP]-1661314230564
GPR[EPVAP]-1661314231595
GPR[EPVS]-1661314231595
========
a=initial-initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314231596
GPR[SPVAP]-1661314231596
GPR[EPVAP]-1661314233473
GPR[SPVATF]-1661314233473
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314235263
GPR[EPVS]-1661314235263
========
initial=Math.max(fa*Math.abs(a),lowerBound);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314235264
GPR[SPVAP]-1661314235264
GPR[EPVAP]-1661314236270
GPR[EPVS]-1661314236270
========
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314236271
GPR[SPVAP]-1661314236271
GPR[EPVAP]-1661314238126
GPR[SPVATF]-1661314238126
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314239940
GPR[EPVS]-1661314239940
========
a=initial-initial;
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314239941
GPR[SPVAP]-1661314239941
GPR[EPVAP]-1661314241814
GPR[SPVATF]-1661314241814
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314243631
GPR[EPVS]-1661314243631
========
initial=function.value(a);
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314243632
GPR[SPVAP]-1661314243632
GPR[EPVAP]-1661314245502
GPR[SPVATF]-1661314245502
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314247326
GPR[EPVS]-1661314247326
========
a=initial-initial;
double fb;
int numIterations=0;
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314247327
GPR[SPVAP]-1661314247327
GPR[EPVAP]-1661314249182
GPR[SPVATF]-1661314249182
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314251003
GPR[EPVS]-1661314251003
========
initial=function.value(a);
double fb;
int numIterations=0;
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314251004
GPR[SPVAP]-1661314251004
GPR[EPVAP]-1661314252894
GPR[SPVATF]-1661314252894
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314254713
GPR[EPVS]-1661314254713
========
a=initial-initial;
initial=function.value(a);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314254714
GPR[SPVAP]-1661314254714
GPR[EPVAP]-1661314256594
GPR[SPVATF]-1661314256594
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314258441
GPR[EPVS]-1661314258441
========
a=initial-initial;
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314258443
GPR[SPVAP]-1661314258443
GPR[EPVAP]-1661314260327
GPR[SPVATF]-1661314260327
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314262136
GPR[EPVS]-1661314262136
========
initial=function.value(a);
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314262137
GPR[SPVAP]-1661314262137
GPR[EPVAP]-1661314264039
GPR[SPVATF]-1661314264039
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314265837
GPR[EPVS]-1661314265837
========
a=initial-initial;
initial=function.value(a);
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314265838
GPR[SPVAP]-1661314265838
GPR[EPVAP]-1661314267721
GPR[SPVATF]-1661314267721
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314269570
GPR[EPVS]-1661314269570
========
a=initial-initial;
initial=function.value(a);
double fb;
int numIterations=0;
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314269571
GPR[SPVAP]-1661314269571
GPR[EPVAP]-1661314271475
GPR[SPVATF]-1661314271475
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314273299
GPR[EPVS]-1661314273299
========
a=initial-initial;
initial=function.value(a);
double fb;
int numIterations=0;
initial=0.5*(initial+initial);
initial=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314273300
GPR[SPVAP]-1661314273300
GPR[EPVAP]-1661314275164
GPR[SPVATF]-1661314275164
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314276988
GPR[EPVS]-1661314276988
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314276990
GPR[SPVAP]-1661314276990
GPR[EPVAP]-1661314278007
GPR[EPVS]-1661314278007
========
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314278008
GPR[SPVAP]-1661314278008
GPR[EPVAP]-1661314279027
GPR[EPVS]-1661314279027
========
double fb;
double numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314279028
GPR[SPVAP]-1661314279028
GPR[EPVAP]-1661314280896
GPR[SPVATF]-1661314280896
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314282720
GPR[EPVS]-1661314282720
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
double fb;
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314282722
GPR[SPVAP]-1661314282722
GPR[EPVAP]-1661314283725
GPR[EPVS]-1661314283725
========
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314283726
GPR[SPVAP]-1661314283726
GPR[EPVAP]-1661314284747
GPR[EPVS]-1661314284747
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
double fb;
int numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314284748
GPR[SPVAP]-1661314284748
GPR[EPVAP]-1661314285764
GPR[EPVS]-1661314285764
========
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
int numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314285765
GPR[SPVAP]-1661314285765
GPR[EPVAP]-1661314286774
GPR[EPVS]-1661314286774
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314286776
GPR[SPVAP]-1661314286776
GPR[EPVAP]-1661314287777
GPR[EPVS]-1661314287777
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
double fb;
double numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314287779
GPR[SPVAP]-1661314287779
GPR[EPVAP]-1661314288793
GPR[EPVS]-1661314288793
========
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
double numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314288794
GPR[SPVAP]-1661314288794
GPR[EPVAP]-1661314289812
GPR[EPVS]-1661314289812
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314289813
GPR[SPVAP]-1661314289813
GPR[EPVAP]-1661314290832
GPR[EPVS]-1661314290832
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
int numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314290833
GPR[SPVAP]-1661314290833
GPR[EPVAP]-1661314291861
GPR[EPVS]-1661314291861
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
double fb;
double numIterations=0;
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314291862
GPR[SPVAP]-1661314291862
GPR[EPVAP]-1661314292874
GPR[EPVS]-1661314292874
========
double fb;
int numIterations=0;
do {
eMax=Math.max(initial,initial);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314292876
GPR[SPVAP]-1661314292876
GPR[EPVAP]-1661314293882
GPR[EPVS]-1661314293882
========
double fb;
int numIterations=0;
do {
work[lowerStart+i]=upperBound;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314293883
GPR[SPVAP]-1661314293883
GPR[EPVAP]-1661314294907
GPR[EPVS]-1661314294907
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
work[upperStart+i]=lowerBound;
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314294908
GPR[SPVAP]-1661314294908
GPR[EPVAP]-1661314295939
GPR[EPVS]-1661314295939
========
double fb;
int numIterations=0;
do {
eMax=Math.max(initial,initial);
work[lowerStart+i]=upperBound;
work[upperStart+i]=lowerBound;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314295940
GPR[SPVAP]-1661314295940
GPR[EPVAP]-1661314296958
GPR[EPVS]-1661314296958
========
b=function.value(a);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314296963
GPR[SPVAP]-1661314296963
GPR[EPVAP]-1661314298825
GPR[SPVATF]-1661314298825
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314300644
GPR[EPVS]-1661314300644
========
if((b>0)==(fa>0)){
initial=initial;
y2=initial;
fb=a-x0;
initial=delta;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314300645
GPR[SPVAP]-1661314300645
GPR[EPVAP]-1661314301648
GPR[EPVS]-1661314301648
========
double fb;
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314301656
GPR[SPVAP]-1661314301656
GPR[EPVAP]-1661314303515
GPR[SPVATF]-1661314303515
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314305326
GPR[EPVS]-1661314305326
========
double fb;
double numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314305327
GPR[SPVAP]-1661314305327
GPR[EPVAP]-1661314307200
GPR[SPVATF]-1661314307200
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314309091
GPR[EPVS]-1661314309091
========
double fb;
double numIterations=BLOCK_SIZE;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314309092
GPR[SPVAP]-1661314309092
GPR[EPVAP]-1661314310101
GPR[EPVS]-1661314310101
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
tau=Math.max(upperBound,a*(1-a*b));
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314310103
GPR[SPVAP]-1661314310103
GPR[EPVAP]-1661314311112
GPR[EPVS]-1661314311112
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,a);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314311114
GPR[SPVAP]-1661314311114
GPR[EPVAP]-1661314313059
GPR[SPVATF]-1661314313059
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314317326
GPR[EPVS]-1661314317326
========
double fb;
int numIterations=0;
do {
work[j4-2]=a+work[j4-1];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314317327
GPR[SPVAP]-1661314317327
GPR[EPVAP]-1661314318343
GPR[EPVS]-1661314318343
========
double fb;
int numIterations=0;
do {
work[j4]=work[j4-1]*initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314318344
GPR[SPVAP]-1661314318344
GPR[EPVAP]-1661314319350
GPR[EPVS]-1661314319350
========
double fb;
int numIterations=0;
do {
work[j4-2]=a+work[j4-1];
work[j4]=work[j4-1]*initial;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314319352
GPR[SPVAP]-1661314319352
GPR[EPVAP]-1661314320355
GPR[EPVS]-1661314320355
========
double fb;
int numIterations=0;
do {
work[j4-3]=a+work[j4];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314320357
GPR[SPVAP]-1661314320357
GPR[EPVAP]-1661314321359
GPR[EPVS]-1661314321359
========
double fb;
int numIterations=0;
do {
work[j4-1]=work[j4]*initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314321360
GPR[SPVAP]-1661314321360
GPR[EPVAP]-1661314322375
GPR[EPVS]-1661314322375
========
double fb;
int numIterations=0;
do {
work[j4-3]=a+work[j4];
work[j4-1]=work[j4]*initial;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314322376
GPR[SPVAP]-1661314322376
GPR[EPVAP]-1661314323388
GPR[EPVS]-1661314323388
========
initial=function.value(initial);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314323390
GPR[SPVAP]-1661314323390
GPR[EPVAP]-1661314325262
GPR[SPVATF]-1661314325262
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314327071
GPR[EPVS]-1661314327071
========
b=Math.max(fa*Math.abs(initial),lowerBound);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314327072
GPR[SPVAP]-1661314327072
GPR[EPVAP]-1661314328091
GPR[EPVS]-1661314328091
========
if(Math.abs(initial-a)<=b){
setResult(x,numIterations);
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314328091
GPR[SPVAP]-1661314328092
GPR[EPVAP]-1661314329113
GPR[EPVS]-1661314329113
========
a=Math.min(dMin,upperBound);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314329114
GPR[SPVAP]-1661314329114
GPR[EPVAP]-1661314330126
GPR[EPVS]-1661314330126
========
fb=a;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314330128
GPR[SPVAP]-1661314330128
GPR[EPVAP]-1661314331155
GPR[EPVS]-1661314331155
========
initial=initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314331156
GPR[SPVAP]-1661314331156
GPR[EPVAP]-1661314333045
GPR[SPVATF]-1661314333045
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314334858
GPR[EPVS]-1661314334858
========
a=x1+initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314334859
GPR[SPVAP]-1661314334859
GPR[EPVAP]-1661314335874
GPR[EPVS]-1661314335874
========
if((initial>0)==(fa>0)){
b=fb;
y2=initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314335876
GPR[SPVAP]-1661314335876
GPR[EPVAP]-1661314336900
GPR[EPVS]-1661314336900
========
initial=b-a;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314336901
GPR[SPVAP]-1661314336901
GPR[EPVAP]-1661314338762
GPR[SPVATF]-1661314338762
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314340613
GPR[EPVS]-1661314340613
========
numIterations++;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314340614
GPR[SPVAP]-1661314340614
GPR[EPVAP]-1661314341621
GPR[EPVS]-1661314341621
========
initial=initial;
initial=function.value(a);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314341622
GPR[SPVAP]-1661314341622
GPR[EPVAP]-1661314343492
GPR[SPVATF]-1661314343492
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314345309
GPR[EPVS]-1661314345309
========
initial=initial;
initial=b-a;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314345310
GPR[SPVAP]-1661314345310
GPR[EPVAP]-1661314347197
GPR[SPVATF]-1661314347197
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314349060
GPR[EPVS]-1661314349060
========
initial=function.value(a);
initial=b-a;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314349061
GPR[SPVAP]-1661314349061
GPR[EPVAP]-1661314350947
GPR[SPVATF]-1661314350947
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314352768
GPR[EPVS]-1661314352768
========
initial=initial;
initial=function.value(a);
initial=b-a;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314352770
GPR[SPVAP]-1661314352770
GPR[EPVAP]-1661314354644
GPR[SPVATF]-1661314354644
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314356539
GPR[EPVS]-1661314356539
========
if(numIterations<0){
i=-i-2;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314356551
GPR[SPVAP]-1661314356551
GPR[EPVAP]-1661314357571
GPR[EPVS]-1661314357571
========
if(numIterations>=polynomials.length){
i--;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314357572
GPR[SPVAP]-1661314357572
GPR[EPVAP]-1661314358577
GPR[EPVS]-1661314358577
========
initial=Math.sqrt(yDDotOnScale)/initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314358579
GPR[SPVAP]-1661314358579
GPR[EPVAP]-1661314359596
GPR[EPVS]-1661314359596
========
initial=Math.min(100.0*Math.abs(h),a);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314359597
GPR[SPVAP]-1661314359597
GPR[EPVAP]-1661314360611
GPR[EPVS]-1661314360611
========
initial=Math.max(h,1.0E-12*Math.abs(lowerBound));
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314360612
GPR[SPVAP]-1661314360612
GPR[EPVAP]-1661314361611
GPR[EPVS]-1661314361611
========
if(initial<getMinStep()){
h=getMinStep();
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314361612
GPR[SPVAP]-1661314361612
GPR[EPVAP]-1661314362623
GPR[EPVS]-1661314362623
========
initial=0;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314362625
GPR[SPVAP]-1661314362625
GPR[EPVAP]-1661314364501
GPR[SPVATF]-1661314364501
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314366323
GPR[EPVS]-1661314366323
========
initial=Math.sqrt(cost);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314366324
GPR[SPVAP]-1661314366324
GPR[EPVAP]-1661314367341
GPR[EPVS]-1661314367341
========
if(coefficients.length<p.coefficients.length){
for(int numIterations=Math.min(coefficients.length,p.coefficients.length);i<Math.max(coefficients.length,p.coefficients.length);++i){
new double[Math.max(coefficients.length,p.coefficients.length)][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314367353
GPR[SPVAP]-1661314367353
GPR[EPVAP]-1661314368377
GPR[EPVS]-1661314368377
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,Math.min(coefficients.length,p.coefficients.length),new double[Math.max(coefficients.length,p.coefficients.length)],lowLength,Math.max(coefficients.length,p.coefficients.length)-lowLength);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314368379
GPR[SPVAP]-1661314368379
GPR[EPVAP]-1661314369394
GPR[EPVS]-1661314369394
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.abs(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314369398
GPR[SPVAP]-1661314369398
GPR[EPVAP]-1661314370399
GPR[EPVS]-1661314370399
========
double fb;
int numIterations=0;
initial=initial+(-2.0*initial)/(initial-Math.sqrt(upperBound));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314370401
GPR[SPVAP]-1661314370401
GPR[EPVAP]-1661314372284
GPR[SPVATF]-1661314372284
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314374132
GPR[EPVS]-1661314374132
========
double fb;
int numIterations=0;
a=isSequence(initial,initial,initial)?xplus:initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314374133
GPR[SPVAP]-1661314374133
GPR[EPVAP]-1661314375133
GPR[EPVS]-1661314375133
========
double fb;
int numIterations=0;
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314375134
GPR[SPVAP]-1661314375134
GPR[EPVAP]-1661314376990
GPR[SPVATF]-1661314376990
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314378803
GPR[EPVS]-1661314378803
========
double fb;
int numIterations=0;
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314378804
GPR[SPVAP]-1661314378804
GPR[EPVAP]-1661314379809
GPR[EPVS]-1661314379809
========
double fb;
int numIterations=0;
initial=initial+(-2.0*initial)/(initial-Math.sqrt(upperBound));
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314379810
GPR[SPVAP]-1661314379810
GPR[EPVAP]-1661314381702
GPR[SPVATF]-1661314381702
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314383524
GPR[EPVS]-1661314383524
========
a=Math.max(lower,initial-100*MathUtils.EPSILON);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314383526
GPR[SPVAP]-1661314383526
GPR[EPVAP]-1661314384544
GPR[EPVS]-1661314384544
========
initial=a-initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314384546
GPR[SPVAP]-1661314384546
GPR[EPVAP]-1661314386403
GPR[SPVATF]-1661314386403
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314388234
GPR[EPVS]-1661314388234
========
a=Math.min(upper,initial+100*MathUtils.EPSILON);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314388236
GPR[SPVAP]-1661314388236
GPR[EPVAP]-1661314389257
GPR[EPVS]-1661314389257
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.logGamma(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314389259
GPR[SPVAP]-1661314389259
GPR[EPVAP]-1661314390275
GPR[EPVS]-1661314390275
========
double fb;
verifyInterval(initial,lowerBound);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314390281
GPR[SPVAP]-1661314390281
GPR[EPVAP]-1661314391302
GPR[EPVS]-1661314391302
========
double fb;
verifyIterationCount();
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314391303
GPR[SPVAP]-1661314391303
GPR[EPVAP]-1661314392327
GPR[EPVS]-1661314392327
========
double fb;
numIterations=Math.min(numIterations,numIterations);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314392330
GPR[SPVAP]-1661314392330
GPR[EPVAP]-1661314393340
GPR[EPVS]-1661314393340
========
b=Math.min(dMin,upperBound);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314393343
GPR[SPVAP]-1661314393343
GPR[EPVAP]-1661314394357
GPR[EPVS]-1661314394357
========
fb=b;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314394358
GPR[SPVAP]-1661314394358
GPR[EPVAP]-1661314395371
GPR[EPVS]-1661314395371
========
double fb;
numIterations=Math.min(numIterations,numIterations);
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314395378
GPR[SPVAP]-1661314395378
GPR[EPVAP]-1661314396390
GPR[EPVS]-1661314396390
========
double fb;
checkVectorDimensions(v.length);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314396394
GPR[SPVAP]-1661314396394
GPR[EPVAP]-1661314397406
GPR[EPVS]-1661314397406
========
double fb;
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.max(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314397408
GPR[SPVAP]-1661314397408
GPR[EPVAP]-1661314399268
GPR[SPVATF]-1661314399268
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314401114
GPR[EPVS]-1661314401114
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.getEntry(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314401115
GPR[SPVAP]-1661314401115
GPR[EPVAP]-1661314402144
GPR[EPVS]-1661314402144
========
double fb;
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314402146
GPR[SPVAP]-1661314402146
GPR[EPVAP]-1661314403166
GPR[EPVS]-1661314403166
========
double fb;
int numIterations=m.entries.iterator().key()/maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314403168
GPR[SPVAP]-1661314403168
GPR[EPVAP]-1661314404197
GPR[EPVS]-1661314404197
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
after[i]+=previous[i]+scaled[i];
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314404199
GPR[SPVAP]-1661314404199
GPR[EPVAP]-1661314405222
GPR[EPVS]-1661314405222
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.exp(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314405227
GPR[SPVAP]-1661314405227
GPR[EPVAP]-1661314406240
GPR[EPVS]-1661314406241
========
double fb;
int numIterations=0;
do {
secondaryTridiagonal[i-1]=a*b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314406242
GPR[SPVAP]-1661314406242
GPR[EPVAP]-1661314407270
GPR[EPVS]-1661314407270
========
double fb;
int numIterations=0;
++numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314407278
GPR[SPVAP]-1661314407278
GPR[EPVAP]-1661314409149
GPR[SPVATF]-1661314409149
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314410982
GPR[EPVS]-1661314410982
========
if(Math.abs(initial)<=initial){
setResult(initial,numIterations);
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314410985
GPR[SPVAP]-1661314410985
GPR[EPVAP]-1661314412011
GPR[EPVS]-1661314412011
========
if(Math.abs(a)<=b){
setResult(initial,numIterations);
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314412012
GPR[SPVAP]-1661314412012
GPR[EPVAP]-1661314413035
GPR[EPVS]-1661314413035
========
double fb;
int numIterations=0;
do {
ret=Math.exp(-initial+(a*Math.log(x))-logGamma(a))*b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314413037
GPR[SPVAP]-1661314413037
GPR[EPVAP]-1661314414090
GPR[EPVS]-1661314414090
========
if(b<fb){
 final double b=z0;
z0=z1;
z1=t;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314414097
GPR[SPVAP]-1661314414097
GPR[EPVAP]-1661314415126
GPR[EPVS]-1661314415126
========
double fb;
int numIterations=0;
a=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314415128
GPR[SPVAP]-1661314415128
GPR[EPVAP]-1661314416992
GPR[SPVATF]-1661314416992
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314418818
GPR[EPVS]-1661314418818
========
new CombinedEventsManager().addEventHandler(new EndTimeChecker(lowerBound),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(upperBound),Math.abs(endTime))),100);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314418820
GPR[SPVAP]-1661314418820
GPR[EPVAP]-1661314419832
GPR[EPVS]-1661314419832
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
double fb;
int numIterations=0;
initial=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314419835
GPR[SPVAP]-1661314419835
GPR[EPVAP]-1661314420855
GPR[EPVS]-1661314420855
========
lowerBound=Math.max(upperBound,lmPar+b);
double fb;
int numIterations=0;
initial=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314420856
GPR[SPVAP]-1661314420856
GPR[EPVAP]-1661314421867
GPR[EPVS]-1661314421867
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
lowerBound=Math.max(upperBound,lmPar+b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314421868
GPR[SPVAP]-1661314421868
GPR[EPVAP]-1661314422878
GPR[EPVS]-1661314422878
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
lowerBound=Math.max(upperBound,lmPar+b);
double fb;
int numIterations=0;
initial=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314422879
GPR[SPVAP]-1661314422879
GPR[EPVAP]-1661314423891
GPR[EPVS]-1661314423891
========
this.a=fa-initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314423892
GPR[SPVAP]-1661314423892
GPR[EPVAP]-1661314424916
GPR[EPVS]-1661314424916
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
setResult(a,0);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314424918
GPR[SPVAP]-1661314424918
GPR[EPVAP]-1661314425948
GPR[EPVS]-1661314425948
========
double fb;
checkVectorDimensions(v.length);
double numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314425949
GPR[SPVAP]-1661314425949
GPR[EPVAP]-1661314426959
GPR[EPVS]-1661314426959
========
double fb;
long numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314426961
GPR[SPVAP]-1661314426961
GPR[EPVAP]-1661314428834
GPR[SPVATF]-1661314428834
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314430658
GPR[EPVS]-1661314430658
========
double fb;
int numIterations=0;
verifyIterationCount();
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314430660
GPR[SPVAP]-1661314430660
GPR[EPVAP]-1661314431669
GPR[EPVS]-1661314431669
========
double fb;
int numIterations=0;
a=stage(function,lowerBound,upperBound,0);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314431670
GPR[SPVAP]-1661314431670
GPR[EPVAP]-1661314432671
GPR[EPVS]-1661314432671
========
double fb;
int numIterations=0;
fb=Double.POSITIVE_INFINITY;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314432673
GPR[SPVAP]-1661314432673
GPR[EPVAP]-1661314434586
GPR[SPVATF]-1661314434586
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314436408
GPR[EPVS]-1661314436408
========
double fb;
int numIterations=0;
new double[numIterations][0]=initial+fa;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314436409
GPR[SPVAP]-1661314436409
GPR[EPVAP]-1661314437412
GPR[EPVS]-1661314437412
========
new double[numIterations][numIterations-1]=initial;
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314437413
GPR[SPVAP]-1661314437413
GPR[EPVAP]-1661314438430
GPR[EPVS]-1661314438430
========
double fb;
int numIterations=0;
do {
r0=initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314438434
GPR[SPVAP]-1661314438434
GPR[EPVAP]-1661314439459
GPR[EPVS]-1661314439459
========
double fb;
FastFourierTransformer.sample(function,upperBound,lowerBound,maximumIterations)[0]=0.0;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314439460
GPR[SPVAP]-1661314439460
GPR[EPVAP]-1661314440505
GPR[EPVS]-1661314440506
========
double fb;
int numIterations=0;
do {
value+=d[nearest];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314440509
GPR[SPVAP]-1661314440509
GPR[EPVAP]-1661314441531
GPR[EPVS]-1661314441531
========
if(isRootOK(a,b,solve(new Complex[coefficients.length],initial))){
setResult(z.getReal(),maximumIterations);
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314441535
GPR[SPVAP]-1661314441535
GPR[EPVAP]-1661314442544
GPR[EPVS]-1661314442544
========
if(shouldContract()){
contract();
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314442546
GPR[SPVAP]-1661314442546
GPR[EPVAP]-1661314443573
GPR[EPVS]-1661314443573
========
if(numIterations+1>numIterations){
numElements=index+1;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314443574
GPR[SPVAP]-1661314443574
GPR[EPVAP]-1661314444598
GPR[EPVS]-1661314444598
========
if((numIterations+numIterations)>=internalArray.length){
expandTo(startIndex+(index+1));
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314444599
GPR[SPVAP]-1661314444599
GPR[EPVAP]-1661314445647
GPR[EPVS]-1661314445647
========
double fb;
int numIterations=0;
do {
setResult(a,1);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314445649
GPR[SPVAP]-1661314445649
GPR[EPVAP]-1661314446693
GPR[EPVS]-1661314446693
========
double fb;
int numIterations=0;
clearResult();
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314446694
GPR[SPVAP]-1661314446694
GPR[EPVAP]-1661314447703
GPR[EPVS]-1661314447703
========
double fb;
int numIterations=0;
verifyInterval(upperBound,lowerBound);
verifyIterationCount();
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314447704
GPR[SPVAP]-1661314447704
GPR[EPVAP]-1661314448710
GPR[EPVS]-1661314448710
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
index=changeIndexSign(numIterations);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314448712
GPR[SPVAP]-1661314448712
GPR[EPVAP]-1661314449719
GPR[EPVS]-1661314449719
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
previous=values[index];
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314449719
GPR[SPVAP]-1661314449719
GPR[EPVAP]-1661314450732
GPR[EPVS]-1661314450732
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
index=changeIndexSign(numIterations);
previous=values[index];

fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314450733
GPR[SPVAP]-1661314450733
GPR[EPVAP]-1661314451756
GPR[EPVS]-1661314451756
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
index=changeIndexSign(numIterations);
previous=values[index];
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314451758
GPR[SPVAP]-1661314451758
GPR[EPVAP]-1661314452770
GPR[EPVS]-1661314452770
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
index=changeIndexSign(numIterations);
index=changeIndexSign(numIterations);
previous=values[index];

fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314452772
GPR[SPVAP]-1661314452772
GPR[EPVAP]-1661314453779
GPR[EPVS]-1661314453779
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
previous=values[index];
index=changeIndexSign(numIterations);
previous=values[index];

fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314453780
GPR[SPVAP]-1661314453780
GPR[EPVAP]-1661314454793
GPR[EPVS]-1661314454793
========
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
index=changeIndexSign(numIterations);
previous=values[index];
index=changeIndexSign(numIterations);
previous=values[index];

fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314454794
GPR[SPVAP]-1661314454794
GPR[EPVAP]-1661314455818
GPR[EPVS]-1661314455818
========
double fb;
int numIterations=(maximumIterations<0)?0:0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314455823
GPR[SPVAP]-1661314455823
GPR[EPVAP]-1661314457684
GPR[SPVATF]-1661314457684
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314459497
GPR[EPVS]-1661314459497
========
double fb;
int numIterations=0;
MatrixUtils.checkRowIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314459500
GPR[SPVAP]-1661314459500
GPR[EPVAP]-1661314460540
GPR[EPVS]-1661314460540
========
double fb;
int numIterations=0;
MatrixUtils.checkColumnIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314460541
GPR[SPVAP]-1661314460541
GPR[EPVAP]-1661314461562
GPR[EPVS]-1661314461562
========
double fb;
int numIterations=0;
MatrixUtils.checkRowIndex(this,numIterations);
MatrixUtils.checkColumnIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314461564
GPR[SPVAP]-1661314461564
GPR[EPVAP]-1661314462583
GPR[EPVS]-1661314462583
========
double fb;
int numIterations=0;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314462585
GPR[SPVAP]-1661314462585
GPR[EPVAP]-1661314464488
GPR[SPVATF]-1661314464488
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314466330
GPR[EPVS]-1661314466330
========
if(shouldContract()){
contract();
}
double fb;
int numIterations=0;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314466332
GPR[SPVAP]-1661314466332
GPR[EPVAP]-1661314467363
GPR[EPVS]-1661314467363
========
if(Double.isInfinite(upperBound)){
throw MathRuntimeException.createIllegalArgumentException("cannot convert infinite value");
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314467365
GPR[SPVAP]-1661314467365
GPR[EPVAP]-1661314469229
GPR[SPVATF]-1661314469229
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314471057
GPR[EPVS]-1661314471057
========
double fb;
new StringBuffer().append('(');
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314471060
GPR[SPVAP]-1661314471060
GPR[EPVAP]-1661314472930
GPR[SPVATF]-1661314472930
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314474767
GPR[EPVS]-1661314474767
========
double fb;
new StringBuffer().append(upperBound);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314474768
GPR[SPVAP]-1661314474768
GPR[EPVAP]-1661314476652
GPR[SPVATF]-1661314476652
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314478464
GPR[EPVS]-1661314478464
========
double fb;
new StringBuffer().append(')');
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314478465
GPR[SPVAP]-1661314478465
GPR[EPVAP]-1661314480363
GPR[SPVATF]-1661314480363
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314482189
GPR[EPVS]-1661314482189
========
double fb;
new StringBuffer().append('(');
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314482190
GPR[SPVAP]-1661314482190
GPR[EPVAP]-1661314484079
GPR[SPVATF]-1661314484079
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314485882
GPR[EPVS]-1661314485882
========
double fb;
new StringBuffer().append(upperBound);
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314485883
GPR[SPVAP]-1661314485883
GPR[EPVAP]-1661314487778
GPR[SPVATF]-1661314487778
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314489606
GPR[EPVS]-1661314489606
========
double fb;
new StringBuffer().append(')');
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314489607
GPR[SPVAP]-1661314489607
GPR[EPVAP]-1661314491528
GPR[SPVATF]-1661314491528
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314493369
GPR[EPVS]-1661314493369
========
double fb;
new StringBuffer().append('(');
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314493370
GPR[SPVAP]-1661314493370
GPR[EPVAP]-1661314494374
GPR[EPVS]-1661314494374
========
double fb;
new StringBuffer().append(upperBound);
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314494375
GPR[SPVAP]-1661314494375
GPR[EPVAP]-1661314495389
GPR[EPVS]-1661314495389
========
double fb;
new StringBuffer().append(')');
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314495390
GPR[SPVAP]-1661314495390
GPR[EPVAP]-1661314496398
GPR[EPVS]-1661314496398
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314496399
GPR[SPVAP]-1661314496399
GPR[EPVAP]-1661314498283
GPR[SPVATF]-1661314498283
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314500096
GPR[EPVS]-1661314500097
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(')');
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314500098
GPR[SPVAP]-1661314500098
GPR[EPVAP]-1661314501976
GPR[SPVATF]-1661314501976
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314503816
GPR[EPVS]-1661314503816
========
double fb;
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314503817
GPR[SPVAP]-1661314503817
GPR[EPVAP]-1661314505686
GPR[SPVATF]-1661314505686
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314507544
GPR[EPVS]-1661314507544
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314507545
GPR[SPVAP]-1661314507545
GPR[EPVAP]-1661314509487
GPR[SPVATF]-1661314509487
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314511326
GPR[EPVS]-1661314511326
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(')');
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314511327
GPR[SPVAP]-1661314511327
GPR[EPVAP]-1661314513221
GPR[SPVATF]-1661314513221
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314515036
GPR[EPVS]-1661314515036
========
double fb;
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314515037
GPR[SPVAP]-1661314515037
GPR[EPVAP]-1661314516919
GPR[SPVATF]-1661314516919
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314518751
GPR[EPVS]-1661314518751
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314518752
GPR[SPVAP]-1661314518752
GPR[EPVAP]-1661314519775
GPR[EPVS]-1661314519775
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(')');
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314519775
GPR[SPVAP]-1661314519775
GPR[EPVAP]-1661314520787
GPR[EPVS]-1661314520787
========
double fb;
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314520788
GPR[SPVAP]-1661314520788
GPR[EPVAP]-1661314521803
GPR[EPVS]-1661314521803
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314521804
GPR[SPVAP]-1661314521804
GPR[EPVAP]-1661314523638
GPR[SPVATF]-1661314523638
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314525459
GPR[EPVS]-1661314525459
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=maximumIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314525460
GPR[SPVAP]-1661314525460
GPR[EPVAP]-1661314527316
GPR[SPVATF]-1661314527316
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314529187
GPR[EPVS]-1661314529187
========
double fb;
new StringBuffer().append('(');
new StringBuffer().append(upperBound);
new StringBuffer().append(')');
int numIterations=numIterations;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314529188
GPR[SPVAP]-1661314529188
GPR[EPVAP]-1661314530214
GPR[EPVS]-1661314530214
========
double fb;
int numIterations=0;
checkDimension(value.length);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314530215
GPR[SPVAP]-1661314530215
GPR[EPVAP]-1661314531218
GPR[EPVS]-1661314531218
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314531220
GPR[SPVAP]-1661314531220
GPR[EPVAP]-1661314532230
GPR[EPVS]-1661314532230
========
if(function.value(b)==0.0){
return max;
}
verifyBracketing(a,b,function);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314532231
GPR[SPVAP]-1661314532231
GPR[EPVAP]-1661314533293
GPR[EPVS]-1661314533293
========
if(function.value(b)==0.0){
return max;
}
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314533294
GPR[SPVAP]-1661314533294
GPR[EPVAP]-1661314534316
GPR[EPVS]-1661314534316
========
if(function.value(b)==0.0){
return max;
}
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314534317
GPR[SPVAP]-1661314534317
GPR[EPVAP]-1661314535329
GPR[EPVS]-1661314535329
========
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314535330
GPR[SPVAP]-1661314535330
GPR[EPVAP]-1661314536356
GPR[EPVS]-1661314536356
========
if(function.value(initial)==0.0){
return initial;
}
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314536357
GPR[SPVAP]-1661314536357
GPR[EPVAP]-1661314537379
GPR[EPVS]-1661314537379
========
if(function.value(initial)==0.0){
return initial;
}
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314537380
GPR[SPVAP]-1661314537380
GPR[EPVAP]-1661314538397
GPR[EPVS]-1661314538397
========
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314538398
GPR[SPVAP]-1661314538398
GPR[EPVAP]-1661314539394
GPR[EPVS]-1661314539394
========
verifyBracketing(a,b,function);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314539395
GPR[SPVAP]-1661314539395
GPR[EPVAP]-1661314540412
GPR[EPVS]-1661314540412
========
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314540413
GPR[SPVAP]-1661314540413
GPR[EPVAP]-1661314541449
GPR[EPVS]-1661314541449
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314541450
GPR[SPVAP]-1661314541450
GPR[EPVAP]-1661314542476
GPR[EPVS]-1661314542476
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314542478
GPR[SPVAP]-1661314542478
GPR[EPVAP]-1661314543484
GPR[EPVS]-1661314543484
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314543485
GPR[SPVAP]-1661314543485
GPR[EPVAP]-1661314544505
GPR[EPVS]-1661314544505
========
if(function.value(b)==0.0){
return max;
}
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314544506
GPR[SPVAP]-1661314544506
GPR[EPVAP]-1661314545515
GPR[EPVS]-1661314545515
========
if(function.value(b)==0.0){
return max;
}
verifyBracketing(a,b,function);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314545516
GPR[SPVAP]-1661314545516
GPR[EPVAP]-1661314546522
GPR[EPVS]-1661314546522
========
if(function.value(b)==0.0){
return max;
}
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314546523
GPR[SPVAP]-1661314546523
GPR[EPVAP]-1661314547535
GPR[EPVS]-1661314547535
========
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314547537
GPR[SPVAP]-1661314547537
GPR[EPVAP]-1661314548533
GPR[EPVS]-1661314548533
========
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314548534
GPR[SPVAP]-1661314548534
GPR[EPVAP]-1661314549546
GPR[EPVS]-1661314549546
========
if(function.value(initial)==0.0){
return initial;
}
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314549547
GPR[SPVAP]-1661314549547
GPR[EPVAP]-1661314550567
GPR[EPVS]-1661314550567
========
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314550568
GPR[SPVAP]-1661314550568
GPR[EPVAP]-1661314551573
GPR[EPVS]-1661314551573
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314551575
GPR[SPVAP]-1661314551575
GPR[EPVAP]-1661314552586
GPR[EPVS]-1661314552586
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314552587
GPR[SPVAP]-1661314552587
GPR[EPVAP]-1661314553601
GPR[EPVS]-1661314553601
========
if(function.value(b)==0.0){
return max;
}
if(function.value(initial)==0.0){
return initial;
}
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314553602
GPR[SPVAP]-1661314553602
GPR[EPVAP]-1661314554586
GPR[EPVS]-1661314554586
========
if(function.value(b)==0.0){
return max;
}
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314554587
GPR[SPVAP]-1661314554587
GPR[EPVAP]-1661314555615
GPR[EPVS]-1661314555615
========
if(function.value(initial)==0.0){
return initial;
}
verifyBracketing(a,b,function);
verifySequence(a,initial,b);
if(isBracketing(a,initial,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,b);
}
double fb;
int numIterations=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314555616
GPR[SPVAP]-1661314555616
GPR[EPVAP]-1661314556630
GPR[EPVS]-1661314556630
========
double fb;
int numIterations=numIterations/BLOCK_SIZE;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314556635
GPR[SPVAP]-1661314556635
GPR[EPVAP]-1661314557644
GPR[EPVS]-1661314557644
========
double fb;
int numIterations=0;
super.addValue(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314557647
GPR[SPVAP]-1661314557647
GPR[EPVAP]-1661314558656
GPR[EPVS]-1661314558656
========
double fb;
int numIterations=0;
checkRowIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314558660
GPR[SPVAP]-1661314558660
GPR[EPVAP]-1661314559667
GPR[EPVS]-1661314559667
========
double fb;
int numIterations=0;
checkColumnIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314559668
GPR[SPVAP]-1661314559668
GPR[EPVAP]-1661314560666
GPR[EPVS]-1661314560666
========
double fb;
int numIterations=0;
checkRowIndex(numIterations);
checkColumnIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314560668
GPR[SPVAP]-1661314560668
GPR[EPVAP]-1661314561688
GPR[EPVS]-1661314561688
GPR[ESUN]-1661314561689
GPR[SSUN]-1661314561689
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,189
========
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314563868
GPR[SPVAP]-1661314563868
GPR[EPVAP]-1661314568706
GPR[SPVATF]-1661314568706
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314570523
GPR[EPVS]-1661314570523
========
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314570524
GPR[SPVAP]-1661314570524
GPR[EPVAP]-1661314572425
GPR[SPVATF]-1661314572425
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314574235
GPR[EPVS]-1661314574235
========
initial=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314574236
GPR[SPVAP]-1661314574236
GPR[EPVAP]-1661314576131
GPR[SPVATF]-1661314576131
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314577973
GPR[EPVS]-1661314577973
========
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314577974
GPR[SPVAP]-1661314577974
GPR[EPVAP]-1661314579880
GPR[SPVATF]-1661314579880
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314581667
GPR[EPVS]-1661314581667
========
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314581668
GPR[SPVAP]-1661314581668
GPR[EPVAP]-1661314583522
GPR[SPVATF]-1661314583522
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314585323
GPR[EPVS]-1661314585323
========
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314585324
GPR[SPVAP]-1661314585324
GPR[EPVAP]-1661314587189
GPR[SPVATF]-1661314587189
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314588995
GPR[EPVS]-1661314588995
========
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314588996
GPR[SPVAP]-1661314588996
GPR[EPVAP]-1661314590872
GPR[SPVATF]-1661314590872
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314592700
GPR[EPVS]-1661314592700
========
b=initial;
initial=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314592701
GPR[SPVAP]-1661314592701
GPR[EPVAP]-1661314594602
GPR[SPVATF]-1661314594602
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314596450
GPR[EPVS]-1661314596450
========
b=initial;
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314596451
GPR[SPVAP]-1661314596451
GPR[EPVAP]-1661314598323
GPR[SPVATF]-1661314598323
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314600138
GPR[EPVS]-1661314600138
========
b=initial;
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314600139
GPR[SPVAP]-1661314600139
GPR[EPVAP]-1661314602006
GPR[SPVATF]-1661314602006
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314603830
GPR[EPVS]-1661314603830
========
b=initial;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314603831
GPR[SPVAP]-1661314603831
GPR[EPVAP]-1661314605680
GPR[SPVATF]-1661314605680
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314607496
GPR[EPVS]-1661314607496
========
initial=function.value(b);
initial=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314607497
GPR[SPVAP]-1661314607497
GPR[EPVAP]-1661314609371
GPR[SPVATF]-1661314609371
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314611231
GPR[EPVS]-1661314611231
========
initial=function.value(b);
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314611232
GPR[SPVAP]-1661314611232
GPR[EPVAP]-1661314613099
GPR[SPVATF]-1661314613099
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314614961
GPR[EPVS]-1661314614961
========
initial=function.value(b);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314614962
GPR[SPVAP]-1661314614962
GPR[EPVAP]-1661314616839
GPR[SPVATF]-1661314616839
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314618705
GPR[EPVS]-1661314618705
========
initial=function.value(b);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314618706
GPR[SPVAP]-1661314618706
GPR[EPVAP]-1661314621715
GPR[SPVATF]-1661314621715
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314623544
GPR[EPVS]-1661314623544
========
initial=initial;
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314623545
GPR[SPVAP]-1661314623545
GPR[EPVAP]-1661314626535
GPR[SPVATF]-1661314626535
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314628378
GPR[EPVS]-1661314628378
========
initial=initial;
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314628379
GPR[SPVAP]-1661314628379
GPR[EPVAP]-1661314630274
GPR[SPVATF]-1661314630274
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314632120
GPR[EPVS]-1661314632120
========
initial=initial;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314632121
GPR[SPVAP]-1661314632121
GPR[EPVAP]-1661314633986
GPR[SPVATF]-1661314633986
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314635805
GPR[EPVS]-1661314635805
========
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314635806
GPR[SPVAP]-1661314635806
GPR[EPVAP]-1661314637675
GPR[SPVATF]-1661314637675
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314639533
GPR[EPVS]-1661314639533
========
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314639534
GPR[SPVAP]-1661314639534
GPR[EPVAP]-1661314641463
GPR[SPVATF]-1661314641463
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314643308
GPR[EPVS]-1661314643308
========
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314643309
GPR[SPVAP]-1661314643309
GPR[EPVAP]-1661314645190
GPR[SPVATF]-1661314645190
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314647027
GPR[EPVS]-1661314647027
========
b=initial;
initial=function.value(b);
initial=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314647028
GPR[SPVAP]-1661314647028
GPR[EPVAP]-1661314648906
GPR[SPVATF]-1661314648906
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314650761
GPR[EPVS]-1661314650761
========
b=initial;
initial=function.value(b);
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314650762
GPR[SPVAP]-1661314650762
GPR[EPVAP]-1661314652630
GPR[SPVATF]-1661314652630
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314654450
GPR[EPVS]-1661314654450
========
b=initial;
initial=function.value(b);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314654451
GPR[SPVAP]-1661314654451
GPR[EPVAP]-1661314656332
GPR[SPVATF]-1661314656332
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314658152
GPR[EPVS]-1661314658152
========
b=initial;
initial=function.value(b);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314658154
GPR[SPVAP]-1661314658154
GPR[EPVAP]-1661314660054
GPR[SPVATF]-1661314660054
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314661887
GPR[EPVS]-1661314661887
========
b=initial;
initial=initial;
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314661888
GPR[SPVAP]-1661314661888
GPR[EPVAP]-1661314663802
GPR[SPVATF]-1661314663802
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314665661
GPR[EPVS]-1661314665661
========
b=initial;
initial=initial;
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314665662
GPR[SPVAP]-1661314665662
GPR[EPVAP]-1661314667525
GPR[SPVATF]-1661314667525
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314669331
GPR[EPVS]-1661314669331
========
b=initial;
initial=initial;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314669332
GPR[SPVAP]-1661314669332
GPR[EPVAP]-1661314671203
GPR[SPVATF]-1661314671203
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314673008
GPR[EPVS]-1661314673008
========
b=initial;
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314673009
GPR[SPVAP]-1661314673009
GPR[EPVAP]-1661314674943
GPR[SPVATF]-1661314674943
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314676763
GPR[EPVS]-1661314676763
========
b=initial;
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314676764
GPR[SPVAP]-1661314676764
GPR[EPVAP]-1661314678629
GPR[SPVATF]-1661314678629
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314680462
GPR[EPVS]-1661314680462
========
b=initial;
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314680463
GPR[SPVAP]-1661314680463
GPR[EPVAP]-1661314682329
GPR[SPVATF]-1661314682329
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314684151
GPR[EPVS]-1661314684151
========
initial=function.value(b);
initial=initial;
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314684152
GPR[SPVAP]-1661314684152
GPR[EPVAP]-1661314686010
GPR[SPVATF]-1661314686010
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314687818
GPR[EPVS]-1661314687818
========
initial=function.value(b);
initial=initial;
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314687820
GPR[SPVAP]-1661314687820
GPR[EPVAP]-1661314689713
GPR[SPVATF]-1661314689713
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314691518
GPR[EPVS]-1661314691518
========
initial=function.value(b);
initial=initial;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314691519
GPR[SPVAP]-1661314691519
GPR[EPVAP]-1661314693455
GPR[SPVATF]-1661314693455
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314695294
GPR[EPVS]-1661314695294
========
initial=function.value(b);
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314695295
GPR[SPVAP]-1661314695295
GPR[EPVAP]-1661314697209
GPR[SPVATF]-1661314697209
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314699027
GPR[EPVS]-1661314699027
========
initial=function.value(b);
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314699028
GPR[SPVAP]-1661314699028
GPR[EPVAP]-1661314700919
GPR[SPVATF]-1661314700919
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314702735
GPR[EPVS]-1661314702735
========
initial=function.value(b);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314702736
GPR[SPVAP]-1661314702736
GPR[EPVAP]-1661314704591
GPR[SPVATF]-1661314704591
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314706401
GPR[EPVS]-1661314706401
========
initial=initial;
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314706403
GPR[SPVAP]-1661314706403
GPR[EPVAP]-1661314708302
GPR[SPVATF]-1661314708302
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314710120
GPR[EPVS]-1661314710120
========
initial=initial;
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314710121
GPR[SPVAP]-1661314710121
GPR[EPVAP]-1661314711980
GPR[SPVATF]-1661314711980
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314713846
GPR[EPVS]-1661314713846
========
initial=initial;
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314713847
GPR[SPVAP]-1661314713847
GPR[EPVAP]-1661314715723
GPR[SPVATF]-1661314715723
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314717546
GPR[EPVS]-1661314717546
========
fa=function.value(initial);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314717548
GPR[SPVAP]-1661314717548
GPR[EPVAP]-1661314719413
GPR[SPVATF]-1661314719413
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314721275
GPR[EPVS]-1661314721275
========
b=initial;
initial=function.value(b);
initial=initial;
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314721276
GPR[SPVAP]-1661314721276
GPR[EPVAP]-1661314723158
GPR[SPVATF]-1661314723158
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314725019
GPR[EPVS]-1661314725019
========
b=initial;
initial=function.value(b);
initial=initial;
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314725020
GPR[SPVAP]-1661314725020
GPR[EPVAP]-1661314726880
GPR[SPVATF]-1661314726880
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314728723
GPR[EPVS]-1661314728723
========
b=initial;
initial=function.value(b);
initial=initial;
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314728724
GPR[SPVAP]-1661314728724
GPR[EPVAP]-1661314730584
GPR[SPVATF]-1661314730585
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314732410
GPR[EPVS]-1661314732410
========
b=initial;
initial=function.value(b);
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314732411
GPR[SPVAP]-1661314732411
GPR[EPVAP]-1661314734275
GPR[SPVATF]-1661314734275
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314736119
GPR[EPVS]-1661314736119
========
b=initial;
initial=function.value(b);
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314736120
GPR[SPVAP]-1661314736120
GPR[EPVAP]-1661314737997
GPR[SPVATF]-1661314737997
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314739802
GPR[EPVS]-1661314739802
========
b=initial;
initial=function.value(b);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314739803
GPR[SPVAP]-1661314739803
GPR[EPVAP]-1661314741681
GPR[SPVATF]-1661314741681
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314743491
GPR[EPVS]-1661314743491
========
b=initial;
initial=initial;
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314743492
GPR[SPVAP]-1661314743492
GPR[EPVAP]-1661314745353
GPR[SPVATF]-1661314745353
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314747166
GPR[EPVS]-1661314747166
========
b=initial;
initial=initial;
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314747167
GPR[SPVAP]-1661314747167
GPR[EPVAP]-1661314749047
GPR[SPVATF]-1661314749047
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314750875
GPR[EPVS]-1661314750875
========
b=initial;
initial=initial;
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314750876
GPR[SPVAP]-1661314750876
GPR[EPVAP]-1661314752751
GPR[SPVATF]-1661314752751
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314754613
GPR[EPVS]-1661314754613
========
b=initial;
fa=function.value(initial);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314754614
GPR[SPVAP]-1661314754614
GPR[EPVAP]-1661314756477
GPR[SPVATF]-1661314756477
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314758307
GPR[EPVS]-1661314758307
========
initial=function.value(b);
initial=initial;
fa=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314758308
GPR[SPVAP]-1661314758308
GPR[EPVAP]-1661314760168
GPR[SPVATF]-1661314760168
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314761983
GPR[EPVS]-1661314761983
========
initial=function.value(b);
initial=initial;
fa=function.value(initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314761985
GPR[SPVAP]-1661314761985
GPR[EPVAP]-1661314763856
GPR[SPVATF]-1661314763856
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314765670
GPR[EPVS]-1661314765670
========
initial=function.value(b);
initial=initial;
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314765671
GPR[SPVAP]-1661314765671
GPR[EPVAP]-1661314767532
GPR[SPVATF]-1661314767533
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314769347
GPR[EPVS]-1661314769347
========
initial=function.value(b);
fa=function.value(initial);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314769349
GPR[SPVAP]-1661314769349
GPR[EPVAP]-1661314771208
GPR[SPVATF]-1661314771208
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314773040
GPR[EPVS]-1661314773040
========
initial=initial;
fa=function.value(initial);
a=0.5*(b+initial);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314773041
GPR[SPVAP]-1661314773041
GPR[EPVAP]-1661314774921
GPR[SPVATF]-1661314774921
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314776755
GPR[EPVS]-1661314776755
========
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314776757
GPR[SPVAP]-1661314776757
GPR[EPVAP]-1661314778618
GPR[SPVATF]-1661314778618
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314780431
GPR[EPVS]-1661314780431
========
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314780432
GPR[SPVAP]-1661314780432
GPR[EPVAP]-1661314782331
GPR[SPVATF]-1661314782331
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314784146
GPR[EPVS]-1661314784146
========
b=initial;
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314784147
GPR[SPVAP]-1661314784147
GPR[EPVAP]-1661314786027
GPR[SPVATF]-1661314786027
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314787865
GPR[EPVS]-1661314787865
========
b=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314787867
GPR[SPVAP]-1661314787867
GPR[EPVAP]-1661314789750
GPR[SPVATF]-1661314789750
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314791581
GPR[EPVS]-1661314791581
========
initial=function.value(b);
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314791582
GPR[SPVAP]-1661314791582
GPR[EPVAP]-1661314793442
GPR[SPVATF]-1661314793442
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314795274
GPR[EPVS]-1661314795274
========
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314795275
GPR[SPVAP]-1661314795275
GPR[EPVAP]-1661314797132
GPR[SPVATF]-1661314797132
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314798958
GPR[EPVS]-1661314798958
========
initial=initial;
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314798959
GPR[SPVAP]-1661314798959
GPR[EPVAP]-1661314800825
GPR[SPVATF]-1661314800825
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314802682
GPR[EPVS]-1661314802682
========
initial=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314802683
GPR[SPVAP]-1661314802683
GPR[EPVAP]-1661314804542
GPR[SPVATF]-1661314804542
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314806357
GPR[EPVS]-1661314806357
========
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314806359
GPR[SPVAP]-1661314806359
GPR[EPVAP]-1661314808245
GPR[SPVATF]-1661314808245
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314810077
GPR[EPVS]-1661314810077
========
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314810078
GPR[SPVAP]-1661314810078
GPR[EPVAP]-1661314811949
GPR[SPVATF]-1661314811949
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314813804
GPR[EPVS]-1661314813804
========
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314813805
GPR[SPVAP]-1661314813805
GPR[EPVAP]-1661314815691
GPR[SPVATF]-1661314815691
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314817544
GPR[EPVS]-1661314817544
========
b=initial;
initial=function.value(b);
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314817545
GPR[SPVAP]-1661314817545
GPR[EPVAP]-1661314819433
GPR[SPVATF]-1661314819433
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314821295
GPR[EPVS]-1661314821295
========
b=initial;
initial=function.value(b);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314821296
GPR[SPVAP]-1661314821296
GPR[EPVAP]-1661314823155
GPR[SPVATF]-1661314823155
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314824960
GPR[EPVS]-1661314824960
========
b=initial;
initial=initial;
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314824961
GPR[SPVAP]-1661314824961
GPR[EPVAP]-1661314826838
GPR[SPVATF]-1661314826838
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314828676
GPR[EPVS]-1661314828676
========
b=initial;
initial=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314828677
GPR[SPVAP]-1661314828677
GPR[EPVAP]-1661314830549
GPR[SPVATF]-1661314830549
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314832385
GPR[EPVS]-1661314832385
========
b=initial;
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314832386
GPR[SPVAP]-1661314832386
GPR[EPVAP]-1661314834255
GPR[SPVATF]-1661314834255
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314836073
GPR[EPVS]-1661314836073
========
b=initial;
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314836074
GPR[SPVAP]-1661314836074
GPR[EPVAP]-1661314837948
GPR[SPVATF]-1661314837948
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314839767
GPR[EPVS]-1661314839767
========
b=initial;
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314839768
GPR[SPVAP]-1661314839768
GPR[EPVAP]-1661314841635
GPR[SPVATF]-1661314841635
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314843448
GPR[EPVS]-1661314843448
========
initial=function.value(b);
initial=initial;
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314843449
GPR[SPVAP]-1661314843449
GPR[EPVAP]-1661314845358
GPR[SPVATF]-1661314845358
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314847227
GPR[EPVS]-1661314847227
========
initial=function.value(b);
initial=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314847228
GPR[SPVAP]-1661314847228
GPR[EPVAP]-1661314849126
GPR[SPVATF]-1661314849126
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314850937
GPR[EPVS]-1661314850937
========
initial=function.value(b);
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314850938
GPR[SPVAP]-1661314850938
GPR[EPVAP]-1661314852811
GPR[SPVATF]-1661314852811
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314854629
GPR[EPVS]-1661314854629
========
initial=function.value(b);
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314854631
GPR[SPVAP]-1661314854631
GPR[EPVAP]-1661314856483
GPR[SPVATF]-1661314856483
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314858303
GPR[EPVS]-1661314858303
========
initial=function.value(b);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314858304
GPR[SPVAP]-1661314858304
GPR[EPVAP]-1661314860168
GPR[SPVATF]-1661314860168
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314861975
GPR[EPVS]-1661314861975
========
initial=initial;
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314861976
GPR[SPVAP]-1661314861976
GPR[EPVAP]-1661314863851
GPR[SPVATF]-1661314863851
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314865659
GPR[EPVS]-1661314865659
========
initial=initial;
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314865660
GPR[SPVAP]-1661314865660
GPR[EPVAP]-1661314867538
GPR[SPVATF]-1661314867538
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314869366
GPR[EPVS]-1661314869366
========
initial=initial;
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314869367
GPR[SPVAP]-1661314869367
GPR[EPVAP]-1661314871261
GPR[SPVATF]-1661314871261
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314873095
GPR[EPVS]-1661314873095
========
fb=function.value(initial);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314873096
GPR[SPVAP]-1661314873096
GPR[EPVAP]-1661314874963
GPR[SPVATF]-1661314874963
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314876777
GPR[EPVS]-1661314876777
========
b=initial;
initial=function.value(b);
initial=initial;
fb=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314876778
GPR[SPVAP]-1661314876778
GPR[EPVAP]-1661314878635
GPR[SPVATF]-1661314878635
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314880488
GPR[EPVS]-1661314880488
========
b=initial;
initial=function.value(b);
initial=initial;
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314880489
GPR[SPVAP]-1661314880489
GPR[EPVAP]-1661314882354
GPR[SPVATF]-1661314882354
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314884148
GPR[EPVS]-1661314884148
========
b=initial;
initial=function.value(b);
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314884149
GPR[SPVAP]-1661314884149
GPR[EPVAP]-1661314886002
GPR[SPVATF]-1661314886002
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314887818
GPR[EPVS]-1661314887818
========
b=initial;
initial=function.value(b);
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314887819
GPR[SPVAP]-1661314887819
GPR[EPVAP]-1661314889719
GPR[SPVATF]-1661314889719
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314891528
GPR[EPVS]-1661314891528
========
b=initial;
initial=function.value(b);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314891529
GPR[SPVAP]-1661314891529
GPR[EPVAP]-1661314893390
GPR[SPVATF]-1661314893390
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314895215
GPR[EPVS]-1661314895215
========
b=initial;
initial=initial;
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314895216
GPR[SPVAP]-1661314895216
GPR[EPVAP]-1661314897085
GPR[SPVATF]-1661314897085
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314898915
GPR[EPVS]-1661314898915
========
b=initial;
initial=initial;
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314898917
GPR[SPVAP]-1661314898917
GPR[EPVAP]-1661314900787
GPR[SPVATF]-1661314900787
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314902642
GPR[EPVS]-1661314902642
========
b=initial;
initial=initial;
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314902644
GPR[SPVAP]-1661314902644
GPR[EPVAP]-1661314904600
GPR[SPVATF]-1661314904600
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314906431
GPR[EPVS]-1661314906431
========
b=initial;
fb=function.value(initial);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314906432
GPR[SPVAP]-1661314906432
GPR[EPVAP]-1661314908324
GPR[SPVATF]-1661314908324
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314910167
GPR[EPVS]-1661314910167
========
initial=function.value(b);
initial=initial;
fb=function.value(initial);
a=0.5*(b+initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314910168
GPR[SPVAP]-1661314910168
GPR[EPVAP]-1661314912103
GPR[SPVATF]-1661314912103
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314913914
GPR[EPVS]-1661314913914
========
initial=function.value(b);
initial=initial;
fb=function.value(initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314913916
GPR[SPVAP]-1661314913916
GPR[EPVAP]-1661314915784
GPR[SPVATF]-1661314915784
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314917596
GPR[EPVS]-1661314917596
========
initial=function.value(b);
initial=initial;
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314917597
GPR[SPVAP]-1661314917597
GPR[EPVAP]-1661314919468
GPR[SPVATF]-1661314919468
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314921272
GPR[EPVS]-1661314921272
========
initial=function.value(b);
fb=function.value(initial);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314921273
GPR[SPVAP]-1661314921273
GPR[EPVAP]-1661314923131
GPR[SPVATF]-1661314923131
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314924939
GPR[EPVS]-1661314924939
========
initial=initial;
fb=function.value(initial);
a=0.5*(b+initial);
fa=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314924940
GPR[SPVAP]-1661314924940
GPR[EPVAP]-1661314926799
GPR[SPVATF]-1661314926799
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314928650
GPR[EPVS]-1661314928650
========
a=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314928652
GPR[SPVAP]-1661314928652
GPR[EPVAP]-1661314930553
GPR[SPVATF]-1661314930554
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314932379
GPR[EPVS]-1661314932379
========
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314932381
GPR[SPVAP]-1661314932381
GPR[EPVAP]-1661314934240
GPR[SPVATF]-1661314934240
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314936075
GPR[EPVS]-1661314936075
========
if(initial==0.0){
return initial;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314936076
GPR[SPVAP]-1661314936076
GPR[EPVAP]-1661314937076
GPR[EPVS]-1661314937076
========
a=initial;
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314937077
GPR[SPVAP]-1661314937077
GPR[EPVAP]-1661314938969
GPR[SPVATF]-1661314938969
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314940798
GPR[EPVS]-1661314940798
========
a=initial;
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314940799
GPR[SPVAP]-1661314940799
GPR[EPVAP]-1661314942695
GPR[SPVATF]-1661314942695
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314944506
GPR[EPVS]-1661314944506
========
a=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314944507
GPR[SPVAP]-1661314944507
GPR[EPVAP]-1661314946387
GPR[SPVATF]-1661314946387
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314948209
GPR[EPVS]-1661314948209
========
initial=function.value(a);
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314948210
GPR[SPVAP]-1661314948210
GPR[EPVAP]-1661314950067
GPR[SPVATF]-1661314950067
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314951888
GPR[EPVS]-1661314951888
========
initial=function.value(a);
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314951889
GPR[SPVAP]-1661314951889
GPR[EPVAP]-1661314953753
GPR[SPVATF]-1661314953753
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314955566
GPR[EPVS]-1661314955566
========
a=initial;
initial=function.value(a);
b=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314955568
GPR[SPVAP]-1661314955568
GPR[EPVAP]-1661314957436
GPR[SPVATF]-1661314957436
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314959267
GPR[EPVS]-1661314959267
========
a=initial;
initial=function.value(a);
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314959268
GPR[SPVAP]-1661314959268
GPR[EPVAP]-1661314961152
GPR[SPVATF]-1661314961152
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314963007
GPR[EPVS]-1661314963007
========
a=initial;
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314963008
GPR[SPVAP]-1661314963008
GPR[EPVAP]-1661314964887
GPR[SPVATF]-1661314964887
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314966720
GPR[EPVS]-1661314966720
========
initial=function.value(a);
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314966721
GPR[SPVAP]-1661314966721
GPR[EPVAP]-1661314968619
GPR[SPVATF]-1661314968619
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314970436
GPR[EPVS]-1661314970436
========
a=initial;
initial=function.value(a);
b=initial;
initial=function.value(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314970437
GPR[SPVAP]-1661314970437
GPR[EPVAP]-1661314972299
GPR[SPVATF]-1661314972299
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314974120
GPR[EPVS]-1661314974120
========
do {
a=Math.min(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314974122
GPR[SPVAP]-1661314974122
GPR[EPVAP]-1661314976005
GPR[SPVATF]-1661314976005
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314977810
GPR[EPVS]-1661314977810
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.max(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314977811
GPR[SPVAP]-1661314977811
GPR[EPVAP]-1661314979671
GPR[SPVATF]-1661314979671
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314981515
GPR[EPVS]-1661314981515
========
do {
a=Math.min(a-1.0,lowerBound);
b=Math.max(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314981516
GPR[SPVAP]-1661314981516
GPR[EPVAP]-1661314983399
GPR[SPVATF]-1661314983399
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314985252
GPR[EPVS]-1661314985252
========
do {
eMax=Math.max(initial,initial);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314985255
GPR[SPVAP]-1661314985255
GPR[EPVAP]-1661314986266
GPR[EPVS]-1661314986266
========
do {
work[lowerStart+i]=upperBound;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314986267
GPR[SPVAP]-1661314986267
GPR[EPVAP]-1661314987279
GPR[EPVS]-1661314987279
========
do {
a=Math.max(a-1.0,lowerBound);
work[upperStart+i]=lowerBound;
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314987280
GPR[SPVAP]-1661314987280
GPR[EPVAP]-1661314988304
GPR[EPVS]-1661314988304
========
do {
eMax=Math.max(initial,initial);
work[lowerStart+i]=upperBound;
work[upperStart+i]=lowerBound;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314988305
GPR[SPVAP]-1661314988305
GPR[EPVAP]-1661314989347
GPR[EPVS]-1661314989347
========
fa=MathUtils.SAFE_MIN*Math.max(1.0,initial*eMax);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314989348
GPR[SPVAP]-1661314989348
GPR[EPVAP]-1661314990358
GPR[EPVS]-1661314990358
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314990360
GPR[SPVAP]-1661314990360
GPR[EPVAP]-1661314991386
GPR[EPVS]-1661314991386
========
lowerBound=Math.max(upperBound,lmPar+fb);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314991387
GPR[SPVAP]-1661314991387
GPR[EPVAP]-1661314992408
GPR[EPVS]-1661314992408
========
if(initial<b||initial>a||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314992411
GPR[SPVAP]-1661314992411
GPR[EPVAP]-1661314994269
GPR[SPVATF]-1661314994269
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661314996064
GPR[EPVS]-1661314996064
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
work[i+2]=-fb;
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314996066
GPR[SPVAP]-1661314996066
GPR[EPVAP]-1661314997079
GPR[EPVS]-1661314997079
========
do {
previousEMin=work[i+7];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314997080
GPR[SPVAP]-1661314997080
GPR[EPVAP]-1661314998092
GPR[EPVS]-1661314998092
========
do {
work[i+2]=-fb;
previousEMin=work[i+7];

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314998093
GPR[SPVAP]-1661314998093
GPR[EPVAP]-1661314999103
GPR[EPVS]-1661314999103
========
initial=a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661314999105
GPR[SPVAP]-1661314999105
GPR[EPVAP]-1661315000986
GPR[SPVATF]-1661315000986
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315002801
GPR[EPVS]-1661315002801
========
a=x1+initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315002802
GPR[SPVAP]-1661315002802
GPR[EPVAP]-1661315003813
GPR[EPVS]-1661315003813
========
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315003814
GPR[SPVAP]-1661315003814
GPR[EPVAP]-1661315005678
GPR[SPVATF]-1661315005678
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315007534
GPR[EPVS]-1661315007534
========
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315007535
GPR[SPVAP]-1661315007535
GPR[EPVAP]-1661315009442
GPR[SPVATF]-1661315009442
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315011268
GPR[EPVS]-1661315011268
========
initial=a;
initial=initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315011269
GPR[SPVAP]-1661315011269
GPR[EPVAP]-1661315013149
GPR[SPVATF]-1661315013149
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315014980
GPR[EPVS]-1661315014980
========
initial=a;
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315014981
GPR[SPVAP]-1661315014981
GPR[EPVAP]-1661315016868
GPR[SPVATF]-1661315016868
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315018729
GPR[EPVS]-1661315018729
========
initial=a;
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315018730
GPR[SPVAP]-1661315018730
GPR[EPVAP]-1661315020624
GPR[SPVATF]-1661315020624
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315022475
GPR[EPVS]-1661315022475
========
initial=a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315022476
GPR[SPVAP]-1661315022476
GPR[EPVAP]-1661315024352
GPR[SPVATF]-1661315024352
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315026203
GPR[EPVS]-1661315026203
========
initial=initial;
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315026204
GPR[SPVAP]-1661315026204
GPR[EPVAP]-1661315028090
GPR[SPVATF]-1661315028090
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315029918
GPR[EPVS]-1661315029918
========
initial=initial;
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315029919
GPR[SPVAP]-1661315029919
GPR[EPVAP]-1661315031819
GPR[SPVATF]-1661315031819
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315033654
GPR[EPVS]-1661315033654
========
initial=initial;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315033656
GPR[SPVAP]-1661315033656
GPR[EPVAP]-1661315035526
GPR[SPVATF]-1661315035526
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315037348
GPR[EPVS]-1661315037348
========
initial=function.value(a);
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315037349
GPR[SPVAP]-1661315037349
GPR[EPVAP]-1661315039238
GPR[SPVATF]-1661315039238
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315041040
GPR[EPVS]-1661315041040
========
initial=function.value(a);
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315041041
GPR[SPVAP]-1661315041041
GPR[EPVAP]-1661315042898
GPR[SPVATF]-1661315042898
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315044710
GPR[EPVS]-1661315044710
========
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315044711
GPR[SPVAP]-1661315044711
GPR[EPVAP]-1661315046586
GPR[SPVATF]-1661315046586
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315048387
GPR[EPVS]-1661315048387
========
initial=a;
initial=initial;
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315048388
GPR[SPVAP]-1661315048388
GPR[EPVAP]-1661315050235
GPR[SPVATF]-1661315050235
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315052062
GPR[EPVS]-1661315052062
========
initial=a;
initial=initial;
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315052064
GPR[SPVAP]-1661315052064
GPR[EPVAP]-1661315053923
GPR[SPVATF]-1661315053923
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315055759
GPR[EPVS]-1661315055759
========
initial=a;
initial=initial;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315055761
GPR[SPVAP]-1661315055761
GPR[EPVAP]-1661315057623
GPR[SPVATF]-1661315057623
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315059430
GPR[EPVS]-1661315059430
========
initial=a;
initial=function.value(a);
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315059431
GPR[SPVAP]-1661315059431
GPR[EPVAP]-1661315061295
GPR[SPVATF]-1661315061295
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315063105
GPR[EPVS]-1661315063105
========
initial=a;
initial=function.value(a);
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315063106
GPR[SPVAP]-1661315063106
GPR[EPVAP]-1661315065001
GPR[SPVATF]-1661315065001
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315066837
GPR[EPVS]-1661315066837
========
initial=a;
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315066839
GPR[SPVAP]-1661315066839
GPR[EPVAP]-1661315068739
GPR[SPVATF]-1661315068739
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315070581
GPR[EPVS]-1661315070581
========
initial=initial;
initial=function.value(a);
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315070582
GPR[SPVAP]-1661315070582
GPR[EPVAP]-1661315072437
GPR[SPVATF]-1661315072437
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315074254
GPR[EPVS]-1661315074254
========
initial=initial;
initial=function.value(a);
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315074255
GPR[SPVAP]-1661315074255
GPR[EPVAP]-1661315076139
GPR[SPVATF]-1661315076139
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315077942
GPR[EPVS]-1661315077942
========
initial=initial;
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315077943
GPR[SPVAP]-1661315077943
GPR[EPVAP]-1661315079799
GPR[SPVATF]-1661315079799
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315081619
GPR[EPVS]-1661315081619
========
initial=function.value(a);
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315081621
GPR[SPVAP]-1661315081621
GPR[EPVAP]-1661315083468
GPR[SPVATF]-1661315083468
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315085283
GPR[EPVS]-1661315085283
========
initial=a;
initial=initial;
initial=function.value(a);
fb=b-a;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315085284
GPR[SPVAP]-1661315085284
GPR[EPVAP]-1661315087176
GPR[SPVATF]-1661315087176
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315089028
GPR[EPVS]-1661315089028
========
initial=a;
initial=initial;
initial=function.value(a);
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315089029
GPR[SPVAP]-1661315089029
GPR[EPVAP]-1661315090919
GPR[SPVATF]-1661315090919
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315092747
GPR[EPVS]-1661315092747
========
initial=a;
initial=initial;
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315092748
GPR[SPVAP]-1661315092748
GPR[EPVAP]-1661315094605
GPR[SPVATF]-1661315094605
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315096416
GPR[EPVS]-1661315096416
========
initial=a;
initial=function.value(a);
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315096417
GPR[SPVAP]-1661315096417
GPR[EPVAP]-1661315098272
GPR[SPVATF]-1661315098272
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315100089
GPR[EPVS]-1661315100089
========
initial=initial;
initial=function.value(a);
fb=b-a;
numIterations++;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315100090
GPR[SPVAP]-1661315100090
GPR[EPVAP]-1661315101951
GPR[SPVATF]-1661315101951
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315103773
GPR[EPVS]-1661315103773
========
initial=UnivariateRealSolverUtils.midpoint(a,b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315103775
GPR[SPVAP]-1661315103775
GPR[EPVAP]-1661315105655
GPR[SPVATF]-1661315105655
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315107444
GPR[EPVS]-1661315107444
========
if(Math.abs(b-a)<=initial){
initial=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,numIterations);
return m;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315107444
GPR[SPVAP]-1661315107444
GPR[EPVAP]-1661315108443
GPR[EPVS]-1661315108443
========
initial=UnivariateRealSolverUtils.midpoint(a,b);
fb=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315108444
GPR[SPVAP]-1661315108444
GPR[EPVAP]-1661315110298
GPR[SPVATF]-1661315110298
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315112147
GPR[EPVS]-1661315112147
========
initial=UnivariateRealSolverUtils.midpoint(a,b);
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315112148
GPR[SPVAP]-1661315112148
GPR[EPVAP]-1661315114015
GPR[SPVATF]-1661315114015
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315115853
GPR[EPVS]-1661315115853
========
fb=function.value(a);
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315115854
GPR[SPVAP]-1661315115854
GPR[EPVAP]-1661315117702
GPR[SPVATF]-1661315117702
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315119559
GPR[EPVS]-1661315119559
========
initial=UnivariateRealSolverUtils.midpoint(a,b);
fb=function.value(a);
fa=function.value(initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315119560
GPR[SPVAP]-1661315119560
GPR[EPVAP]-1661315121451
GPR[SPVATF]-1661315121451
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315123251
GPR[EPVS]-1661315123251
========
a=fb+0.5*initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315123254
GPR[SPVAP]-1661315123254
GPR[EPVAP]-1661315124261
GPR[EPVS]-1661315124261
========
initial=0.5*(s+b*initial);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315124263
GPR[SPVAP]-1661315124263
GPR[EPVAP]-1661315125318
GPR[EPVS]-1661315125318
========
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315125331
GPR[SPVAP]-1661315125331
GPR[EPVAP]-1661315126334
GPR[EPVS]-1661315126334
========
if(a==0){
paru=0.0/Math.min(b,0.1);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315126336
GPR[SPVAP]-1661315126336
GPR[EPVAP]-1661315127350
GPR[EPVS]-1661315127350
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315127351
GPR[SPVAP]-1661315127351
GPR[EPVAP]-1661315128349
GPR[EPVS]-1661315128349
========
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315128350
GPR[SPVAP]-1661315128350
GPR[EPVAP]-1661315129374
GPR[EPVS]-1661315129374
========
if(a==0){
paru=0.0/Math.min(b,0.1);
}
fa=Math.min(a,Math.max(lmPar,lowerBound));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315129376
GPR[SPVAP]-1661315129376
GPR[EPVAP]-1661315130407
GPR[EPVS]-1661315130407
========
if(a==0){
paru=0.0/Math.min(b,0.1);
}
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315130408
GPR[SPVAP]-1661315130408
GPR[EPVAP]-1661315131427
GPR[EPVS]-1661315131427
========
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315131428
GPR[SPVAP]-1661315131428
GPR[EPVAP]-1661315132439
GPR[EPVS]-1661315132439
========
if(a==0){
paru=0.0/Math.min(b,0.1);
}
fa=Math.min(a,Math.max(lmPar,lowerBound));
if(fa==0){
lmPar=Math.sqrt(upperBound)/fb;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315132440
GPR[SPVAP]-1661315132440
GPR[EPVAP]-1661315133450
GPR[EPVS]-1661315133451
========
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315133455
GPR[SPVAP]-1661315133455
GPR[EPVAP]-1661315135312
GPR[SPVATF]-1661315135312
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315137122
GPR[EPVS]-1661315137122
========
if((b>0)==(fa>0)){
initial=initial;
y2=initial;
initial=a-x0;
fb=delta;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315137123
GPR[SPVAP]-1661315137123
GPR[EPVAP]-1661315138141
GPR[EPVS]-1661315138141
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
sum+=block[k]*v[q]+block[k+1]*v[q+1]+block[k+2]*v[q+2]+block[k+3]*v[q+3];
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315138144
GPR[SPVAP]-1661315138144
GPR[EPVAP]-1661315139193
GPR[EPVS]-1661315139193
========
do {
q+=4;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315139194
GPR[SPVAP]-1661315139194
GPR[EPVAP]-1661315140212
GPR[EPVS]-1661315140212
========
do {
sum+=block[k]*v[q]+block[k+1]*v[q+1]+block[k+2]*v[q+2]+block[k+3]*v[q+3];
q+=4;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315140213
GPR[SPVAP]-1661315140213
GPR[EPVAP]-1661315141247
GPR[EPVS]-1661315141247
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
tau=Math.max(upperBound,a*(1-fb*b));
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315141249
GPR[SPVAP]-1661315141249
GPR[EPVAP]-1661315142263
GPR[EPVS]-1661315142263
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,a);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315142265
GPR[SPVAP]-1661315142265
GPR[EPVAP]-1661315144123
GPR[SPVATF]-1661315144123
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315148445
GPR[EPVS]-1661315148445
========
do {
work[j4-2]=a+work[j4-1];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315148446
GPR[SPVAP]-1661315148446
GPR[EPVAP]-1661315149488
GPR[EPVS]-1661315149488
========
do {
work[j4]=work[j4-1]*initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315149490
GPR[SPVAP]-1661315149490
GPR[EPVAP]-1661315150507
GPR[EPVS]-1661315150507
========
do {
work[j4-2]=a+work[j4-1];
work[j4]=work[j4-1]*initial;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315150508
GPR[SPVAP]-1661315150508
GPR[EPVAP]-1661315151519
GPR[EPVS]-1661315151519
========
do {
work[j4-3]=a+work[j4];
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315151520
GPR[SPVAP]-1661315151520
GPR[EPVAP]-1661315152529
GPR[EPVS]-1661315152529
========
do {
work[j4-1]=work[j4]*initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315152530
GPR[SPVAP]-1661315152530
GPR[EPVAP]-1661315153550
GPR[EPVS]-1661315153550
========
do {
work[j4-3]=a+work[j4];
work[j4-1]=work[j4]*initial;

a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315153551
GPR[SPVAP]-1661315153551
GPR[EPVAP]-1661315154559
GPR[EPVS]-1661315154559
========
a=Math.min(dMin,upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315154560
GPR[SPVAP]-1661315154560
GPR[EPVAP]-1661315155552
GPR[EPVS]-1661315155552
========
do {
y2=b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315155554
GPR[SPVAP]-1661315155554
GPR[EPVAP]-1661315156561
GPR[EPVS]-1661315156561
========
do {
y0=b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315156562
GPR[SPVAP]-1661315156562
GPR[EPVAP]-1661315157578
GPR[EPVS]-1661315157578
========
if(numIterations<0){
i=-i-2;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315157587
GPR[SPVAP]-1661315157587
GPR[EPVAP]-1661315158609
GPR[EPVS]-1661315158609
========
if(numIterations>=polynomials.length){
i--;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315158611
GPR[SPVAP]-1661315158611
GPR[EPVAP]-1661315159623
GPR[EPVS]-1661315159623
========
initial=Math.sqrt(yDDotOnScale)/initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315159625
GPR[SPVAP]-1661315159625
GPR[EPVAP]-1661315160633
GPR[EPVS]-1661315160633
========
initial=Math.min(100.0*Math.abs(h),a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315160634
GPR[SPVAP]-1661315160634
GPR[EPVAP]-1661315161638
GPR[EPVS]-1661315161638
========
initial=Math.max(h,1.0E-12*Math.abs(lowerBound));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315161639
GPR[SPVAP]-1661315161640
GPR[EPVAP]-1661315162683
GPR[EPVS]-1661315162683
========
if(initial<getMinStep()){
h=getMinStep();
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315162684
GPR[SPVAP]-1661315162684
GPR[EPVAP]-1661315163703
GPR[EPVS]-1661315163703
========
initial=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315163704
GPR[SPVAP]-1661315163704
GPR[EPVAP]-1661315165591
GPR[SPVATF]-1661315165591
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315167450
GPR[EPVS]-1661315167450
========
initial=Math.sqrt(cost);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315167451
GPR[SPVAP]-1661315167451
GPR[EPVAP]-1661315168470
GPR[EPVS]-1661315168470
========
if(coefficients.length<p.coefficients.length){
for(int numIterations=Math.min(coefficients.length,p.coefficients.length);i<Math.max(coefficients.length,p.coefficients.length);++i){
new double[Math.max(coefficients.length,p.coefficients.length)][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315168475
GPR[SPVAP]-1661315168475
GPR[EPVAP]-1661315169499
GPR[EPVS]-1661315169499
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,Math.min(coefficients.length,p.coefficients.length),new double[Math.max(coefficients.length,p.coefficients.length)],lowLength,Math.max(coefficients.length,p.coefficients.length)-lowLength);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315169502
GPR[SPVAP]-1661315169502
GPR[EPVAP]-1661315170511
GPR[EPVS]-1661315170511
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.logGamma(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315170512
GPR[SPVAP]-1661315170512
GPR[EPVAP]-1661315171530
GPR[EPVS]-1661315171530
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.abs(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315171531
GPR[SPVAP]-1661315171531
GPR[EPVAP]-1661315172534
GPR[EPVS]-1661315172534
========
a=Math.max(lower,initial-100*MathUtils.EPSILON);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315172538
GPR[SPVAP]-1661315172538
GPR[EPVAP]-1661315173550
GPR[EPVS]-1661315173550
========
initial=a-initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315173551
GPR[SPVAP]-1661315173551
GPR[EPVAP]-1661315175460
GPR[SPVATF]-1661315175460
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315177263
GPR[EPVS]-1661315177263
========
a=Math.min(upper,initial+100*MathUtils.EPSILON);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315177264
GPR[SPVAP]-1661315177264
GPR[EPVAP]-1661315178276
GPR[EPVS]-1661315178276
========
b=1-(initial*initial)/(initial*y3);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315178280
GPR[SPVAP]-1661315178280
GPR[EPVAP]-1661315179305
GPR[EPVS]-1661315179305
========
initial=(MathUtils.sign(initial)*MathUtils.sign(initial))*(initial-initial)/Math.sqrt(b);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315179308
GPR[SPVAP]-1661315179308
GPR[EPVAP]-1661315180417
GPR[EPVS]-1661315180417
========
a=initial-initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315180421
GPR[SPVAP]-1661315180421
GPR[EPVAP]-1661315183029
GPR[SPVATF]-1661315183029
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315184847
GPR[EPVS]-1661315184847
========
if(Math.abs(initial)<=initial){
setResult(a,numIterations);
return initial;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315184848
GPR[SPVAP]-1661315184848
GPR[EPVAP]-1661315185862
GPR[EPVS]-1661315185862
========
a=initial-initial;
initial=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315185864
GPR[SPVAP]-1661315185864
GPR[EPVAP]-1661315187737
GPR[SPVATF]-1661315187737
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315189565
GPR[EPVS]-1661315189565
========
a=initial-initial;
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315189567
GPR[SPVAP]-1661315189567
GPR[EPVAP]-1661315190586
GPR[EPVS]-1661315190586
========
initial=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315190587
GPR[SPVAP]-1661315190587
GPR[EPVAP]-1661315191598
GPR[EPVS]-1661315191598
========
a=initial-initial;
initial=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315191599
GPR[SPVAP]-1661315191599
GPR[EPVAP]-1661315192612
GPR[EPVS]-1661315192612
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315192613
GPR[SPVAP]-1661315192613
GPR[EPVAP]-1661315194506
GPR[SPVATF]-1661315194506
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315196349
GPR[EPVS]-1661315196349
========
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315196350
GPR[SPVAP]-1661315196350
GPR[EPVAP]-1661315198247
GPR[SPVATF]-1661315198247
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315200074
GPR[EPVS]-1661315200074
========
a=isSequence(upperBound,initial,initial)?xplus:initial;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315200075
GPR[SPVAP]-1661315200075
GPR[EPVAP]-1661315201103
GPR[EPVS]-1661315201103
========
if(Math.abs(b)<=initial){
setResult(a,numIterations);
return initial;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315201105
GPR[SPVAP]-1661315201105
GPR[EPVAP]-1661315202129
GPR[EPVS]-1661315202129
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315202130
GPR[SPVAP]-1661315202130
GPR[EPVAP]-1661315204040
GPR[SPVATF]-1661315204040
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315205858
GPR[EPVS]-1661315205858
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315205859
GPR[SPVAP]-1661315205859
GPR[EPVAP]-1661315207733
GPR[SPVATF]-1661315207734
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315209557
GPR[EPVS]-1661315209557
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315209558
GPR[SPVAP]-1661315209558
GPR[EPVAP]-1661315210562
GPR[EPVS]-1661315210562
========
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315210563
GPR[SPVAP]-1661315210563
GPR[EPVAP]-1661315212438
GPR[SPVATF]-1661315212438
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315214249
GPR[EPVS]-1661315214249
========
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315214250
GPR[SPVAP]-1661315214250
GPR[EPVAP]-1661315215267
GPR[EPVS]-1661315215267
========
b=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315215268
GPR[SPVAP]-1661315215268
GPR[EPVAP]-1661315216265
GPR[EPVS]-1661315216265
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
b=function.value(a);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315216266
GPR[SPVAP]-1661315216266
GPR[EPVAP]-1661315218169
GPR[SPVATF]-1661315218169
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315219996
GPR[EPVS]-1661315219996
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315219997
GPR[SPVAP]-1661315219997
GPR[EPVAP]-1661315221006
GPR[EPVS]-1661315221006
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
b=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315221007
GPR[SPVAP]-1661315221007
GPR[EPVAP]-1661315222011
GPR[EPVS]-1661315222011
========
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
b=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315222012
GPR[SPVAP]-1661315222012
GPR[EPVAP]-1661315223027
GPR[EPVS]-1661315223027
========
initial=initial+(-2.0*initial)/(initial+Math.sqrt(initial));
initial=initial+(-2.0*initial)/(initial-Math.sqrt(initial));
b=function.value(a);
initial=Math.max(fb*Math.abs(a),lowerBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315223028
GPR[SPVAP]-1661315223028
GPR[EPVAP]-1661315224036
GPR[EPVS]-1661315224036
========
do {
p2=(a/b*fb)+initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315224040
GPR[SPVAP]-1661315224040
GPR[EPVAP]-1661315225035
GPR[EPVS]-1661315225035
========
a=Math.min(hNew,upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315225039
GPR[SPVAP]-1661315225039
GPR[EPVAP]-1661315226056
GPR[EPVS]-1661315226056
========
verifyBracketing(b,upperBound,function);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315226058
GPR[SPVAP]-1661315226058
GPR[EPVAP]-1661315227088
GPR[EPVS]-1661315227088
========
verifySequence(b,a,upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315227089
GPR[SPVAP]-1661315227089
GPR[EPVAP]-1661315228104
GPR[EPVS]-1661315228104
========
if(isBracketing(b,a,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,upperBound);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315228105
GPR[SPVAP]-1661315228105
GPR[EPVAP]-1661315229120
GPR[EPVS]-1661315229120
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.getEntry(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315229131
GPR[SPVAP]-1661315229131
GPR[EPVAP]-1661315230148
GPR[EPVS]-1661315230148
========
checkVectorDimensions(v.length);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315230149
GPR[SPVAP]-1661315230149
GPR[EPVAP]-1661315231158
GPR[EPVS]-1661315231158
========
do {
secondaryTridiagonal[i-1]=a*b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315231164
GPR[SPVAP]-1661315231164
GPR[EPVAP]-1661315232178
GPR[EPVS]-1661315232178
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
after[i]+=previous[i]+scaled[i];
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315232180
GPR[SPVAP]-1661315232180
GPR[EPVAP]-1661315233231
GPR[EPVS]-1661315233231
========
if(Math.abs(a)<=b){
setResult(initial,numIterations);
return initial;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315233242
GPR[SPVAP]-1661315233242
GPR[EPVAP]-1661315234248
GPR[EPVS]-1661315234248
========
do {
ret=Math.exp(-initial+(a*Math.log(x))-logGamma(a))*b;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315234251
GPR[SPVAP]-1661315234251
GPR[EPVAP]-1661315235261
GPR[EPVS]-1661315235261
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.exp(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315235264
GPR[SPVAP]-1661315235264
GPR[EPVAP]-1661315236280
GPR[EPVS]-1661315236280
========
do {
an=1.0/a*(initial/(a+fb));
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315236281
GPR[SPVAP]-1661315236281
GPR[EPVAP]-1661315237294
GPR[EPVS]-1661315237294
========
new CombinedEventsManager().addEventHandler(new EndTimeChecker(lowerBound),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(upperBound),Math.abs(endTime))),100);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315237301
GPR[SPVAP]-1661315237301
GPR[EPVAP]-1661315238317
GPR[EPVS]-1661315238317
========
if(initial>0){
upperBound=Math.max(parl,lowerBound);
}else if(fp<0){
a=Math.min(paru,lmPar);
}
lowerBound=Math.max(upperBound,lmPar+fb);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315238319
GPR[SPVAP]-1661315238319
GPR[EPVAP]-1661315239318
GPR[EPVS]-1661315239318
========
this.fb=fa-b;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315239320
GPR[SPVAP]-1661315239320
GPR[EPVAP]-1661315240334
GPR[EPVS]-1661315240334
========
a=(4*initial-initial)/3.0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315240336
GPR[SPVAP]-1661315240336
GPR[EPVAP]-1661315242251
GPR[SPVATF]-1661315242251
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315244063
GPR[EPVS]-1661315244063
========
verifyIterationCount();
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315244065
GPR[SPVAP]-1661315244065
GPR[EPVAP]-1661315245069
GPR[EPVS]-1661315245069
========
a=stage(function,lowerBound,upperBound,0);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315245071
GPR[SPVAP]-1661315245071
GPR[EPVAP]-1661315246090
GPR[EPVS]-1661315246090
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
setResult(a,0);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315246092
GPR[SPVAP]-1661315246092
GPR[EPVAP]-1661315247104
GPR[EPVS]-1661315247104
========
if(Math.abs((long)Math.floor(upperBound)-lowerBound)<initial){
this.numIterations=(int)a0;
this.numIterations=1;
return ;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315247106
GPR[SPVAP]-1661315247106
GPR[EPVAP]-1661315248103
GPR[EPVS]-1661315248103
========
do {
r0=initial;
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315248107
GPR[SPVAP]-1661315248107
GPR[EPVAP]-1661315249116
GPR[EPVS]-1661315249116
========
if(numIterations>=maximumIterations){
 final double Math.abs(a-initial)=Math.abs(a-initial);
 final double b=fa*(Math.abs(olds)+Math.abs(s));
if((delta<=rLimit)||(delta<=fb)){
setResult(s,i);
return initial;
}
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315249124
GPR[SPVAP]-1661315249124
GPR[EPVAP]-1661315250056
GPR[EPVS]-1661315250056
========
if(isRootOK(a,b,solve(new Complex[coefficients.length],initial))){
setResult(z.getReal(),maximumIterations);
return initial;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315250058
GPR[SPVAP]-1661315250058
GPR[EPVAP]-1661315251080
GPR[EPVS]-1661315251080
========
if(shouldContract()){
contract();
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315251082
GPR[SPVAP]-1661315251082
GPR[EPVAP]-1661315252104
GPR[EPVS]-1661315252104
========
if(numIterations+1>numIterations){
numElements=index+1;
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315252106
GPR[SPVAP]-1661315252106
GPR[EPVAP]-1661315253116
GPR[EPVS]-1661315253116
========
if((numIterations+numIterations)>=internalArray.length){
expandTo(startIndex+(index+1));
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315253117
GPR[SPVAP]-1661315253117
GPR[EPVAP]-1661315254137
GPR[EPVS]-1661315254137
========
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
nearest=numIterations;
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315254139
GPR[SPVAP]-1661315254139
GPR[EPVAP]-1661315255147
GPR[EPVS]-1661315255147
========
do {
setResult(a,1);
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315255149
GPR[SPVAP]-1661315255149
GPR[EPVAP]-1661315256172
GPR[EPVS]-1661315256172
========
fa=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315256174
GPR[SPVAP]-1661315256174
GPR[EPVAP]-1661315258045
GPR[SPVATF]-1661315258045
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315259864
GPR[EPVS]-1661315259864
========
fb=new TrapezoidIntegrator().stage(function,upperBound,lowerBound,0);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315259865
GPR[SPVAP]-1661315259865
GPR[EPVAP]-1661315260888
GPR[EPVS]-1661315260888
========
verifyIterationCount();
fa=0;
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315260889
GPR[SPVAP]-1661315260889
GPR[EPVAP]-1661315261895
GPR[EPVS]-1661315261895
========
MatrixUtils.checkRowIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315261903
GPR[SPVAP]-1661315261903
GPR[EPVAP]-1661315262931
GPR[EPVS]-1661315262931
========
MatrixUtils.checkColumnIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315262932
GPR[SPVAP]-1661315262932
GPR[EPVAP]-1661315263955
GPR[EPVS]-1661315263955
========
MatrixUtils.checkRowIndex(this,numIterations);
MatrixUtils.checkColumnIndex(this,numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315263957
GPR[SPVAP]-1661315263957
GPR[EPVAP]-1661315264969
GPR[EPVS]-1661315264970
========
verifyBracketing(b,upperBound,function);
verifySequence(b,a,upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315264977
GPR[SPVAP]-1661315264977
GPR[EPVAP]-1661315266036
GPR[EPVS]-1661315266036
========
verifyBracketing(b,upperBound,function);
if(isBracketing(b,a,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,upperBound);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315266037
GPR[SPVAP]-1661315266037
GPR[EPVAP]-1661315267060
GPR[EPVS]-1661315267060
========
verifySequence(b,a,upperBound);
if(isBracketing(b,a,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,upperBound);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315267061
GPR[SPVAP]-1661315267061
GPR[EPVAP]-1661315268075
GPR[EPVS]-1661315268075
========
verifyBracketing(b,upperBound,function);
verifySequence(b,a,upperBound);
if(isBracketing(b,a,function)){
return solve(f,min,initial);
}else {
return solve(f,initial,upperBound);
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315268076
GPR[SPVAP]-1661315268076
GPR[EPVAP]-1661315269097
GPR[EPVS]-1661315269097
========
if(Double.isInfinite(upperBound)){
throw MathRuntimeException.createIllegalArgumentException("cannot convert infinite value");
}
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315269101
GPR[SPVAP]-1661315269101
GPR[EPVAP]-1661315271033
GPR[SPVATF]-1661315271033
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315272857
GPR[EPVS]-1661315272857
========
super.addValue(upperBound);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315272861
GPR[SPVAP]-1661315272861
GPR[EPVAP]-1661315273879
GPR[EPVS]-1661315273879
========
checkRowIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315273883
GPR[SPVAP]-1661315273883
GPR[EPVAP]-1661315274891
GPR[EPVS]-1661315274891
========
checkColumnIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315274893
GPR[SPVAP]-1661315274893
GPR[EPVAP]-1661315275908
GPR[EPVS]-1661315275908
========
checkRowIndex(numIterations);
checkColumnIndex(numIterations);
do {
a=Math.max(a-1.0,lowerBound);
b=Math.min(b+1.0,upperBound);
fa=function.value(a);
fb=function.value(b);
numIterations++;
} while((fa*fb>0.0)&&(numIterations<maximumIterations));

========
MM Copying to MM
GPR[SPVS]-1661315275909
GPR[SPVAP]-1661315275909
GPR[EPVAP]-1661315276917
GPR[EPVS]-1661315276917
GPR[ESUN]-1661315276919
GPR[SSUN]-1661315276919
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,190
GPR[ESUN]-1661315277251
GPR[SSUN]-1661315277251
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,191
GPR[ESUN]-1661315277432
GPR[SSUN]-1661315277432
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,193
GPR[ESUN]-1661315277618
GPR[SSUN]-1661315277618
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,194
GPR[ESUN]-1661315277810
GPR[SSUN]-1661315277810
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,195
GPR[ESUN]-1661315277986
GPR[SSUN]-1661315277986
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,198
GPR[ESUN]-1661315278171
GPR[SSUN]-1661315278171
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,127
GPR[ESUN]-1661315279139
GPR[SSUN]-1661315279139
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,170
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException("cannot access setQuantile method in percentile implementation {0}",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function is null");
}

========
MM Copying to MM
GPR[SPVS]-1661315280248
GPR[SPVAP]-1661315280248
GPR[EPVAP]-1661315282120
GPR[EPVS]-1661315282120
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}

========
MM Copying to MM
GPR[SPVS]-1661315282121
GPR[SPVAP]-1661315282121
GPR[EPVAP]-1661315286961
GPR[SPVATF]-1661315286961
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315288796
GPR[EPVS]-1661315288796
========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}

========
MM Copying to MM
GPR[SPVS]-1661315288797
GPR[SPVAP]-1661315288797
GPR[EPVAP]-1661315289820
GPR[EPVS]-1661315289820
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}

========
MM Copying to MM
GPR[SPVS]-1661315289821
GPR[SPVAP]-1661315289821
GPR[EPVAP]-1661315291702
GPR[SPVATF]-1661315291702
TESTING : org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM:   - org.apache.commons.math.distribution.NormalDistributionTest::testMath280
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315293526
GPR[EPVS]-1661315293526
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe51a263b0b, pid=1265485, tid=140622304540416
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5534 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fe51a263b0b [0x00007fe51a2618c0+0x224b]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_85_buggy/hs_err_pid1265485.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/85 results at /experiment_home///results/SimFix/Math/85/seed_284/
\n\nNode: host-60\n
\n\nDate: Tue 23 Aug 2022 09:28:13 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_85_buggy
Killing all java process
GPR[SSLE]-1661315294315
GPR[ESLE]-1661315354318
