Sleep 1m start
GPR[SSLI]-1659878095637
GPR[ESLI]-1659878155643
Running Nopol Closure 130b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/130/seed_261/
The file script/workingdir/Nopol/Closure_130 does not exist!
script/workingdir/Nopol/Closure_130
script/workingdir/Nopol/Closure_130
classpath:  script/workingdir/Nopol/Closure_130/build/classes:script/workingdir/Nopol/Closure_130/lib/args4j.jar:script/workingdir/Nopol/Closure_130/lib/guava.jar:script/workingdir/Nopol/Closure_130/lib/json.jar:script/workingdir/Nopol/Closure_130/lib/jsr305.jar:script/workingdir/Nopol/Closure_130/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_130/build/lib/rhino.jar:script/workingdir/Nopol/Closure_130/lib/ant.jar:script/workingdir/Nopol/Closure_130/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_130/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_130/lib/jarjar.jar:script/workingdir/Nopol/Closure_130/lib/junit.jar:script/workingdir/Nopol/Closure_130/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659878174027
GPR[ESLB]-1659878234033
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_130//build/classes:script/workingdir/Nopol/Closure_130//build/test:script/workingdir/Nopol/Closure_130/build/classes:script/workingdir/Nopol/Closure_130/lib/args4j.jar:script/workingdir/Nopol/Closure_130/lib/guava.jar:script/workingdir/Nopol/Closure_130/lib/json.jar:script/workingdir/Nopol/Closure_130/lib/jsr305.jar:script/workingdir/Nopol/Closure_130/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_130/build/lib/rhino.jar:script/workingdir/Nopol/Closure_130/lib/ant.jar:script/workingdir/Nopol/Closure_130/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_130/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_130/lib/jarjar.jar:script/workingdir/Nopol/Closure_130/lib/junit.jar:script/workingdir/Nopol/Closure_130/build/test
Node: host-48
Date init: Sun 07 Aug 2022 06:17:14 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_130/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_130/build/classes/, file:script/workingdir/Nopol/Closure_130/build/test/, file:script/workingdir/Nopol/Closure_130/build/classes/, file:script/workingdir/Nopol/Closure_130/lib/args4j.jar, file:script/workingdir/Nopol/Closure_130/lib/guava.jar, file:script/workingdir/Nopol/Closure_130/lib/json.jar, file:script/workingdir/Nopol/Closure_130/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_130/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_130/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_130/lib/ant.jar, file:script/workingdir/Nopol/Closure_130/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_130/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_130/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_130/lib/junit.jar, file:script/workingdir/Nopol/Closure_130/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_130/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/130/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659878239456
GPR[ESUP]-1659878239456
GPR[SFL]-1659878239456
GPR[EFL]-1659878282906
GPR[SFP]-1659878282906
GPR[SSUN]-1659878285238
-283827935
GPR[SPVATF]-1659878285732
GPR[EPVATF]-1659878285788
[50931] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878285788
GPR[SSUN]-1659878285788
-283827935
GPR[ESUN]-1659878285988
GPR[SSUN]-1659878285988
-283827935
GPR[ESUN]-1659878286186
GPR[SSUN]-1659878286186
-283827935
GPR[ESUN]-1659878286375
GPR[SSUN]-1659878286375
-283827935
GPR[SPVATF]-1659878286564
GPR[EPVATF]-1659878286592
[51735] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878286592
GPR[SSUN]-1659878286592
-283827935
GPR[ESUN]-1659878286785
GPR[SSUN]-1659878286785
-283827935
GPR[SPVATF]-1659878286977
GPR[EPVATF]-1659878287002
[52145] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878287003
GPR[SSUN]-1659878287003
-283827935
GPR[SPVATF]-1659878287197
GPR[EPVATF]-1659878287221
[52364] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878287221
GPR[SSUN]-1659878287221
-283827935
GPR[SPVATF]-1659878287412
GPR[EPVATF]-1659878287436
[52579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878287436
GPR[SSUN]-1659878287436
-283827935
GPR[SPVATF]-1659878287630
GPR[EPVATF]-1659878290100
[55243] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878290100
GPR[SSUN]-1659878290100
-283827935
GPR[SPVATF]-1659878290295
GPR[EPVATF]-1659878290319
[55462] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878290319
GPR[SSUN]-1659878290319
-283827935
GPR[ESUN]-1659878290511
GPR[SSUN]-1659878290511
-283827935
GPR[ESUN]-1659878290697
GPR[SSUN]-1659878290697
-1966087783
GPR[ESUN]-1659878290896
GPR[SSUN]-1659878290896
-1966087783
GPR[SPVATF]-1659878291088
GPR[EPVATF]-1659878291116
[56259] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878291116
GPR[SSUN]-1659878291116
-1659631726
GPR[ESUN]-1659878291301
GPR[SSUN]-1659878291301
130004992
GPR[ESUN]-1659878291480
GPR[SSUN]-1659878291480
130004992
GPR[SPVATF]-1659878291659
GPR[EPVATF]-1659878291685
[56828] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878291685
GPR[SSUN]-1659878291685
130004992
GPR[ESUN]-1659878291870
GPR[SSUN]-1659878291870
-1966087783
GPR[SPVATF]-1659878292063
GPR[EPVATF]-1659878292084
[57227] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878292084
GPR[SSUN]-1659878292084
-1966087783
GPR[SPVATF]-1659878292278
GPR[EPVATF]-1659878292300
[57443] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878292300
GPR[SSUN]-1659878292301
890942016
GPR[ESUN]-1659878292503
GPR[SSUN]-1659878292503
890942016
GPR[SPVATF]-1659878292703
GPR[EPVATF]-1659878292723
[57866] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878292723
GPR[SSUN]-1659878292723
890942016
GPR[SPVATF]-1659878292928
GPR[EPVATF]-1659878292948
[58091] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878292948
GPR[EPVATF]-1659878292966
[58109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878292966
GPR[SSUN]-1659878292966
890942016
GPR[ESUN]-1659878293162
GPR[SSUN]-1659878293162
890942016
GPR[ESUN]-1659878293357
GPR[SSUN]-1659878293357
-1966087783
GPR[ESUN]-1659878293549
GPR[SSUN]-1659878293549
-1966087783
GPR[SPVATF]-1659878293745
GPR[EPVATF]-1659878293764
[58907] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878293764
GPR[EPVATF]-1659878293783
[58926] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878293783
GPR[SSUN]-1659878293783
-1966087783
GPR[ESUN]-1659878293981
GPR[SSUN]-1659878293981
-1966087783
GPR[SPVATF]-1659878294175
GPR[EPVATF]-1659878294196
[59339] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878294197
GPR[EPVATF]-1659878294218
[59362] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878294219
GPR[SSUN]-1659878294219
-1966087783
GPR[ESUN]-1659878294419
GPR[SSUN]-1659878294419
-1966087783
GPR[ESUN]-1659878294612
GPR[SSUN]-1659878294612
-1966087783
GPR[ESUN]-1659878294803
GPR[SSUN]-1659878294803
1613130706
GPR[ESUN]-1659878295012
GPR[SSUN]-1659878295012
1613130706
GPR[ESUN]-1659878295216
GPR[SSUN]-1659878295216
1613130706
GPR[SPVATF]-1659878295422
GPR[EPVATF]-1659878295614
[60757] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878295614
GPR[SSUN]-1659878295614
80988634
GPR[ESUN]-1659878295801
GPR[SSUN]-1659878295801
234947553
GPR[ESUN]-1659878295995
GPR[SSUN]-1659878295995
234947553
GPR[SPVATF]-1659878296189
GPR[EPVATF]-1659878296205
[61348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878296205
GPR[EPVATF]-1659878296220
[61363] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878296220
GPR[SSUN]-1659878296220
234947553
GPR[ESUN]-1659878296411
GPR[SSUN]-1659878296411
234947553
GPR[SPVATF]-1659878296600
GPR[EPVATF]-1659878296615
[61759] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878296616
GPR[EPVATF]-1659878296630
[61773] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878296630
GPR[SSUN]-1659878296630
234947553
GPR[SPVATF]-1659878296826
GPR[EPVATF]-1659878296841
[61984] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878296841
GPR[SSUN]-1659878296841
234947553
GPR[ESUN]-1659878297037
GPR[SSUN]-1659878297037
234947553
GPR[ESUN]-1659878297229
GPR[SSUN]-1659878297229
234947553
GPR[SPVATF]-1659878297418
GPR[EPVATF]-1659878297434
[62577] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878297434
GPR[SSUN]-1659878297434
234947553
GPR[SPVATF]-1659878297626
GPR[EPVATF]-1659878297641
[62784] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878297641
GPR[SSUN]-1659878297642
234947553
GPR[SPVATF]-1659878297839
GPR[EPVATF]-1659878297854
[62997] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878297854
GPR[SSUN]-1659878297854
234947553
GPR[ESUN]-1659878298042
GPR[SSUN]-1659878298042
234947553
GPR[ESUN]-1659878298232
GPR[SSUN]-1659878298232
234947553
GPR[SPVATF]-1659878298429
GPR[EPVATF]-1659878298445
[63588] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878298445
GPR[SSUN]-1659878298445
234947553
GPR[SPVATF]-1659878298638
GPR[EPVATF]-1659878298653
[63797] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878298654
GPR[SSUN]-1659878298654
234947553
GPR[ESUN]-1659878298846
GPR[SSUN]-1659878298846
234947553
GPR[SPVATF]-1659878299035
GPR[EPVATF]-1659878299049
[64193] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878299050
GPR[SSUN]-1659878299050
234947553
GPR[SPVATF]-1659878299239
GPR[EPVATF]-1659878299256
[64399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878299256
GPR[SSUN]-1659878299256
234947553
GPR[ESUN]-1659878299444
GPR[SSUN]-1659878299444
890942016
GPR[SPVATF]-1659878299636
GPR[EPVATF]-1659878299656
[64799] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878299656
GPR[EPVATF]-1659878299675
[64818] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878299675
GPR[SSUN]-1659878299675
890942016
GPR[SPVATF]-1659878299869
GPR[EPVATF]-1659878299889
[65032] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878299889
GPR[SSUN]-1659878299889
890942016
GPR[ESUN]-1659878300078
GPR[SSUN]-1659878300078
890942016
GPR[SPVATF]-1659878300272
GPR[EPVATF]-1659878300292
[65435] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878300292
GPR[SSUN]-1659878300292
890942016
GPR[SPVATF]-1659878300488
GPR[EPVATF]-1659878300506
[65649] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878300507
GPR[EPVATF]-1659878300525
[65668] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878300525
GPR[SSUN]-1659878300525
890942016
GPR[SPVATF]-1659878300717
GPR[EPVATF]-1659878300735
[65878] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878300735
GPR[SSUN]-1659878300735
890942016
GPR[SPVATF]-1659878300935
GPR[EPVATF]-1659878300954
[66097] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878300954
GPR[EPVATF]-1659878300972
[66116] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878300973
GPR[SSUN]-1659878300973
890942016
GPR[ESUN]-1659878301166
GPR[SSUN]-1659878301166
890942016
GPR[SPVATF]-1659878301357
GPR[EPVATF]-1659878301375
[66518] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878301375
GPR[SSUN]-1659878301375
890942016
GPR[SPVATF]-1659878301565
GPR[EPVATF]-1659878301583
[66726] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878301583
GPR[SSUN]-1659878301583
890942016
GPR[SPVATF]-1659878301775
GPR[EPVATF]-1659878301794
[66937] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878301794
GPR[SSUN]-1659878301794
890942016
GPR[ESUN]-1659878301987
GPR[SSUN]-1659878301987
1613130706
GPR[SPVATF]-1659878302952
GPR[EPVATF]-1659878303142
[68285] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878303142
GPR[EPVATF]-1659878303316
[68459] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878303316
GPR[SSUN]-1659878303316
2433571
GPR[ESUN]-1659878303569
GPR[SSUN]-1659878303569
1613130706
GPR[SPVATF]-1659878303781
GPR[EPVATF]-1659878303960
[69103] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878303961
GPR[EPVATF]-1659878304135
[69278] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878304135
GPR[SSUN]-1659878304135
1613130706
GPR[SPVATF]-1659878304350
GPR[EPVATF]-1659878304531
[69674] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878304531
GPR[SSUN]-1659878304531
2433571
GPR[SPVATF]-1659878304773
GPR[EPVATF]-1659878305248
GPR[SPS]-1659878305249
[71628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659878306485
GPR[ESUN]-1659878306485
GPR[SSUN]-1659878306485
2433571
GPR[SPVATF]-1659878306736
GPR[EPVATF]-1659878307216
GPR[SPS]-1659878307216
GPR[EPS]-1659878308461
GPR[SPVATR]-1659878308461
[73604] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1417: PRECONDITION node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME
[74089] INFO TestPatch - Running test suite to check the patch "node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME" is working
GPR[EPVATR]-1659878309147
[74290] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878309147
[74317] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1416,7 +1416,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_69718_1ts_1659878309174.diff
GPR[ESUN]-1659878309175
GPR[SSUN]-1659878309175
80988634
GPR[ESUN]-1659878309387
GPR[SSUN]-1659878309387
1613130706
GPR[SPVATF]-1659878309685
GPR[EPVATF]-1659878309867
[75011] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878309868
GPR[EPVATF]-1659878310711
[75855] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878310712
GPR[SSUN]-1659878310712
1613130706
GPR[SPVATF]-1659878310926
GPR[EPVATF]-1659878311105
[76248] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878311105
GPR[EPVATF]-1659878311287
[76430] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878311287
GPR[SSUN]-1659878311287
1613130706
GPR[ESUN]-1659878311495
GPR[SSUN]-1659878311495
1613130706
GPR[ESUN]-1659878311706
GPR[SSUN]-1659878311706
1613130706
GPR[ESUN]-1659878311912
GPR[SSUN]-1659878311912
1613130706
GPR[ESUN]-1659878312118
GPR[SSUN]-1659878312118
1613130706
GPR[SPVATF]-1659878312328
GPR[EPVATF]-1659878312510
[77653] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878312510
GPR[EPVATF]-1659878312689
[77832] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878312689
GPR[SSUN]-1659878312689
-554478367
GPR[SPVATF]-1659878312944
GPR[EPVATF]-1659878313419
GPR[SPS]-1659878313419
[79181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:228.
GPR[EPS]-1659878314038
GPR[ESUN]-1659878314039
GPR[SSUN]-1659878314039
-554478367
GPR[SPVATF]-1659878314294
GPR[EPVATF]-1659878314774
GPR[SPS]-1659878314774
[80480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:227.
GPR[EPS]-1659878315337
GPR[ESUN]-1659878315338
GPR[SSUN]-1659878315338
-554478367
GPR[ESUN]-1659878315589
GPR[SSUN]-1659878315589
-554478367
GPR[ESUN]-1659878315834
GPR[SSUN]-1659878315834
1613130706
GPR[SPVATF]-1659878316043
GPR[EPVATF]-1659878316223
[81366] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878316223
GPR[SSUN]-1659878316223
1613130706
GPR[ESUN]-1659878316449
GPR[SSUN]-1659878316449
1613130706
GPR[SPVATF]-1659878316655
GPR[EPVATF]-1659878316840
[81983] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878316840
GPR[EPVATF]-1659878317025
[82169] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878317026
GPR[SSUN]-1659878317026
1613130706
GPR[ESUN]-1659878317243
GPR[SSUN]-1659878317243
1613130706
GPR[SPVATF]-1659878317453
GPR[EPVATF]-1659878317630
[82773] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878317630
GPR[EPVATF]-1659878317813
[82956] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878317813
GPR[SSUN]-1659878317813
-1966087783
GPR[ESUN]-1659878318003
GPR[SSUN]-1659878318003
-1966087783
GPR[SPVATF]-1659878318188
GPR[EPVATF]-1659878318210
[83353] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878318210
GPR[EPVATF]-1659878318229
[83372] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878318229
GPR[SSUN]-1659878318229
-1966087783
GPR[SPVATF]-1659878318415
GPR[EPVATF]-1659878318435
[83578] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878318435
GPR[SSUN]-1659878318435
-839544615
GPR[ESUN]-1659878318688
GPR[SSUN]-1659878318688
-839544615
GPR[SPVATF]-1659878318934
GPR[EPVATF]-1659878319400
GPR[SPS]-1659878319400
[85822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace:182.
GPR[EPS]-1659878320679
GPR[ESUN]-1659878320679
GPR[SSUN]-1659878320679
-839544615
GPR[ESUN]-1659878321623
GPR[SSUN]-1659878321623
-839544615
GPR[SPVATF]-1659878321881
GPR[EPVATF]-1659878322362
GPR[SPS]-1659878322362
[88745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:992.
GPR[EPS]-1659878323602
GPR[ESUN]-1659878323603
GPR[SSUN]-1659878323603
-839544615
GPR[SPVATF]-1659878323865
GPR[EPVATF]-1659878324333
GPR[SPS]-1659878324333
[90716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:991.
GPR[EPS]-1659878325573
GPR[ESUN]-1659878325574
GPR[SSUN]-1659878325574
-839544615
GPR[SPVATF]-1659878325825
GPR[EPVATF]-1659878326339
GPR[SPS]-1659878326339
[92689] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:990.
GPR[EPS]-1659878327546
GPR[ESUN]-1659878327546
GPR[SSUN]-1659878327546
1795686761
GPR[SPVATF]-1659878327783
GPR[EPVATF]-1659878328294
GPR[SPS]-1659878328294
GPR[EPS]-1659878337579
GPR[ESUN]-1659878337579
GPR[SSUN]-1659878337579
1795686761
GPR[SPVATF]-1659878337834
GPR[EPVATF]-1659878338314
GPR[SPS]-1659878338314
GPR[EPS]-1659878350171
GPR[SPVATF]-1659878350171
GPR[EPVATF]-1659878350659
GPR[SPS]-1659878350659
GPR[EPS]-1659878363041
GPR[ESUN]-1659878363041
GPR[SSUN]-1659878363041
1795686761
GPR[ESUN]-1659878363407
GPR[SSUN]-1659878363407
-839544615
GPR[SPVATF]-1659878363650
GPR[EPVATF]-1659878364251
GPR[SPS]-1659878364251
[130620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:312.
GPR[EPS]-1659878365477
GPR[ESUN]-1659878365477
GPR[SSUN]-1659878365478
-554478367
GPR[SPVATF]-1659878365735
GPR[EPVATF]-1659878366216
GPR[SPS]-1659878366216
[131930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:238.
GPR[EPS]-1659878366787
GPR[ESUN]-1659878366788
GPR[SSUN]-1659878366788
-554478367
GPR[SPVATF]-1659878367036
GPR[EPVATF]-1659878367537
GPR[SPS]-1659878367537
[133242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:237.
GPR[EPS]-1659878368099
GPR[ESUN]-1659878368099
GPR[SSUN]-1659878368099
-554478367
GPR[SPVATF]-1659878368351
GPR[EPVATF]-1659878368843
GPR[SPS]-1659878368843
[134531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:233.
GPR[EPS]-1659878369388
GPR[ESUN]-1659878369388
GPR[SSUN]-1659878369388
-554478367
GPR[SPVATF]-1659878369684
GPR[EPVATF]-1659878370181
GPR[SPS]-1659878370181
[135908] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:232.
GPR[EPS]-1659878370765
GPR[ESUN]-1659878370765
GPR[SSUN]-1659878370766
-554478367
GPR[SPVATF]-1659878371013
GPR[EPVATF]-1659878371506
GPR[SPS]-1659878371506
[137197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:222.
GPR[EPS]-1659878372054
GPR[ESUN]-1659878372054
GPR[SSUN]-1659878372054
-554478367
GPR[ESUN]-1659878372349
GPR[SSUN]-1659878372349
-554478367
GPR[ESUN]-1659878372642
GPR[SSUN]-1659878372642
-554478367
GPR[SPVATF]-1659878372952
GPR[EPVATF]-1659878373468
GPR[SPS]-1659878373468
[139145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:181.
GPR[EPS]-1659878374002
GPR[ESUN]-1659878374002
GPR[SSUN]-1659878374002
2433571
GPR[SPVATF]-1659878374249
GPR[EPVATF]-1659878374754
GPR[SPS]-1659878374755
GPR[EPS]-1659878376705
GPR[SPVATR]-1659878376705
[141848] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1433: PRECONDITION com.google.javascript.rhino.Node.this.sourcePosition <= com.google.javascript.rhino.Node.STATIC_SOURCE_FILE
[142242] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.sourcePosition <= com.google.javascript.rhino.Node.STATIC_SOURCE_FILE" is working
GPR[EPVATR]-1659878377357
[142500] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878377357
[142515] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1432,3 +1432,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (com.google.javascript.rhino.Node.this.sourcePosition <= com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_137916_2ts_1659878377372.diff
GPR[ESUN]-1659878377373
GPR[SSUN]-1659878377373
-1966087783
GPR[SPVATF]-1659878377570
GPR[EPVATF]-1659878377592
[142735] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878377592
GPR[EPVATF]-1659878377613
[142756] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878377613
GPR[SSUN]-1659878377613
-1966087783
GPR[SPVATF]-1659878377803
GPR[EPVATF]-1659878377827
[142970] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878377827
GPR[EPVATF]-1659878377847
[142990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878377847
GPR[SSUN]-1659878377847
-1966087783
GPR[SPVATF]-1659878378040
GPR[EPVATF]-1659878378062
[143205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878378062
GPR[EPVATF]-1659878378082
[143225] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878378082
GPR[SSUN]-1659878378082
-1966087783
GPR[ESUN]-1659878378276
GPR[SSUN]-1659878378276
-1966087783
GPR[ESUN]-1659878378466
GPR[SSUN]-1659878378466
-1966087783
GPR[SPVATF]-1659878378657
GPR[EPVATF]-1659878378679
[143823] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878378680
GPR[EPVATF]-1659878378701
[143844] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878378701
GPR[SSUN]-1659878378701
-1966087783
GPR[SPVATF]-1659878378889
GPR[EPVATF]-1659878378926
[144069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878378926
GPR[EPVATF]-1659878378949
[144092] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878378949
GPR[SSUN]-1659878378949
-1966087783
GPR[ESUN]-1659878379140
GPR[SSUN]-1659878379140
-1966087783
GPR[SPVATF]-1659878379329
GPR[EPVATF]-1659878379353
[144496] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878379353
GPR[SSUN]-1659878379353
-1966087783
GPR[SPVATF]-1659878379548
GPR[EPVATF]-1659878379571
[144714] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878379571
GPR[SSUN]-1659878379571
-1966087783
GPR[ESUN]-1659878379763
GPR[SSUN]-1659878379763
-1966087783
GPR[SPVATF]-1659878379962
GPR[EPVATF]-1659878379985
[145128] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878379985
GPR[SSUN]-1659878379985
-1966087783
GPR[ESUN]-1659878380185
GPR[SSUN]-1659878380185
-1966087783
GPR[ESUN]-1659878380373
GPR[SSUN]-1659878380373
-1966087783
GPR[SPVATF]-1659878380558
GPR[EPVATF]-1659878380582
[145725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878380582
GPR[SSUN]-1659878380582
-1966087783
GPR[SPVATF]-1659878380770
GPR[EPVATF]-1659878380791
[145934] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878380791
GPR[SSUN]-1659878380791
-554478367
GPR[SPVATF]-1659878381043
GPR[EPVATF]-1659878381518
GPR[SPS]-1659878381518
GPR[EPS]-1659878382608
GPR[SPVATR]-1659878382608
[147751] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:216: PRECONDITION !(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)
[148102] INFO TestPatch - Running test suite to check the patch "!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)" is working
GPR[EPVATR]-1659878383211
[148354] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878383211
[148358] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -215,25 +215,27 @@
       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
-      if (aliasRefs.isWellDefined()
-          && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnceInLifetime()) {
-        // The alias is well-formed, so do the inlining now.
-        int size = aliasRefs.references.size();
-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
-        for (int i = 1; i < size; i++) {
-          ReferenceCollectingCallback.Reference aliasRef =
-              aliasRefs.references.get(i);
-
-          Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
-          newNodes.add(newNode);
+      if (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) {
+        if (aliasRefs.isWellDefined()
+        && aliasRefs.firstReferenceIsAssigningDeclaration()
+        && aliasRefs.isAssignedOnceInLifetime()) {
+          // The alias is well-formed, so do the inlining now.
+          int size = aliasRefs.references.size();
+          Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
+          for (int i = 1; i < size; i++) {
+            ReferenceCollectingCallback.Reference aliasRef =
+            aliasRefs.references.get(i);
+            
+            Node newNode = alias.node.cloneTree();
+            aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
+            newNodes.add(newNode);
+          }
+          
+          // just set the original alias to null.
+          aliasParent.replaceChild(alias.node, IR.nullNode());
+          compiler.reportCodeChange();
+          
+          // Inlining the variable may have introduced new references
+          // to descendants of {@code name}. So those need to be collected now.
+          namespace.scanNewNodes(alias.scope, newNodes);
+          return true;
         }
-
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
-        return true;
       }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_143759_3ts_1659878383215.diff
GPR[SPVATF]-1659878383216
GPR[EPVATF]-1659878383711
GPR[SPS]-1659878383711
GPR[EPS]-1659878392881
GPR[ESUN]-1659878392881
GPR[SSUN]-1659878392881
-554478367
GPR[ESUN]-1659878393138
GPR[SSUN]-1659878393138
-554478367
GPR[SPVATF]-1659878393384
GPR[EPVATF]-1659878393921
GPR[SPS]-1659878393921
[159596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:213.
GPR[EPS]-1659878394453
GPR[ESUN]-1659878394453
GPR[SSUN]-1659878394453
-554478367
GPR[ESUN]-1659878394698
GPR[SSUN]-1659878394698
-554478367
GPR[ESUN]-1659878394945
GPR[SSUN]-1659878394945
-554478367
GPR[ESUN]-1659878395187
GPR[SSUN]-1659878395187
-554478367
GPR[SPVATF]-1659878395432
GPR[EPVATF]-1659878395937
GPR[SPS]-1659878395937
GPR[EPS]-1659878397042
GPR[SPVATR]-1659878397042
[162185] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:205: PRECONDITION !(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)
[162543] INFO TestPatch - Running test suite to check the patch "!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)" is working
GPR[EPVATR]-1659878397667
[162810] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878397667
[162814] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -204,36 +204,38 @@
     Node aliasParent = alias.node.getParent();
-    if (aliasParent.isName()) {
-      // Ensure that the local variable is well defined and never reassigned.
-      Scope scope = alias.scope;
-      Var aliasVar = scope.getVar(aliasParent.getString());
-      ReferenceCollectingCallback collector =
-          new ReferenceCollectingCallback(compiler,
-              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
-              Predicates.<Var>equalTo(aliasVar));
-      (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
-
-      ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
-      if (aliasRefs.isWellDefined()
-          && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnceInLifetime()) {
-        // The alias is well-formed, so do the inlining now.
-        int size = aliasRefs.references.size();
-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
-        for (int i = 1; i < size; i++) {
-          ReferenceCollectingCallback.Reference aliasRef =
-              aliasRefs.references.get(i);
-
-          Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
-          newNodes.add(newNode);
+    if (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) {
+      if (aliasParent.isName()) {
+        // Ensure that the local variable is well defined and never reassigned.
+        Scope scope = alias.scope;
+        Var aliasVar = scope.getVar(aliasParent.getString());
+        ReferenceCollectingCallback collector =
+        new ReferenceCollectingCallback(compiler,
+        ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
+        Predicates.<Var>equalTo(aliasVar));
+        (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
+        
+        ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
+        if (aliasRefs.isWellDefined()
+        && aliasRefs.firstReferenceIsAssigningDeclaration()
+        && aliasRefs.isAssignedOnceInLifetime()) {
+          // The alias is well-formed, so do the inlining now.
+          int size = aliasRefs.references.size();
+          Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
+          for (int i = 1; i < size; i++) {
+            ReferenceCollectingCallback.Reference aliasRef =
+            aliasRefs.references.get(i);
+            
+            Node newNode = alias.node.cloneTree();
+            aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
+            newNodes.add(newNode);
+          }
+          
+          // just set the original alias to null.
+          aliasParent.replaceChild(alias.node, IR.nullNode());
+          compiler.reportCodeChange();
+          
+          // Inlining the variable may have introduced new references
+          // to descendants of {@code name}. So those need to be collected now.
+          namespace.scanNewNodes(alias.scope, newNodes);
+          return true;
         }
-
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
-        return true;
       }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_158215_4ts_1659878397671.diff
GPR[SPVATF]-1659878397671
GPR[EPVATF]-1659878398192
GPR[SPS]-1659878398192
GPR[EPS]-1659878413439
GPR[ESUN]-1659878413439
GPR[SSUN]-1659878413439
-554478367
GPR[ESUN]-1659878413691
GPR[SSUN]-1659878413691
-554478367
GPR[SPVATF]-1659878413933
GPR[EPVATF]-1659878414478
GPR[SPS]-1659878414478
GPR[EPS]-1659878415617
GPR[SPVATR]-1659878415617
[180760] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:180: PRECONDITION ((-1) != (-1)) || (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))
[181109] INFO TestPatch - Running test suite to check the patch "((-1) != (-1)) || (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))" is working
GPR[EPVATR]-1659878416246
[181389] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878416247
[181393] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -179,4 +179,6 @@
             // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+            if (((-1) != (-1)) || (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))) {
+              if (inlineAliasIfPossible(ref, namespace)) {
+                name.removeRef(ref);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_176794_5ts_1659878416250.diff
GPR[SPVATF]-1659878416250
GPR[EPVATF]-1659878416803
GPR[SPS]-1659878416803
[182483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:180.
GPR[EPS]-1659878417340
GPR[ESUN]-1659878417340
GPR[SSUN]-1659878417340
-1966087783
GPR[SPVATF]-1659878417533
GPR[EPVATF]-1659878417551
[182694] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878417551
GPR[SSUN]-1659878417551
2433571
GPR[SPVATF]-1659878417787
GPR[EPVATF]-1659878418352
GPR[SPS]-1659878418352
[184135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659878418992
GPR[ESUN]-1659878418992
GPR[SSUN]-1659878418992
80988634
GPR[ESUN]-1659878419172
GPR[SSUN]-1659878419172
-1966087783
GPR[SPVATF]-1659878419361
GPR[EPVATF]-1659878419379
[184522] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878419379
GPR[SSUN]-1659878419379
-1966087783
GPR[SPVATF]-1659878419568
GPR[EPVATF]-1659878419588
[184731] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878419588
GPR[SSUN]-1659878419588
-1966087783
GPR[SPVATF]-1659878419780
GPR[EPVATF]-1659878419798
[184941] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878419798
GPR[SSUN]-1659878419798
-1966087783
GPR[SPVATF]-1659878419989
GPR[EPVATF]-1659878420008
[185151] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878420008
GPR[SSUN]-1659878420008
-1966087783
GPR[SPVATF]-1659878420199
GPR[EPVATF]-1659878420218
[185361] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878420218
GPR[SSUN]-1659878420218
-1966087783
GPR[SPVATF]-1659878420406
GPR[EPVATF]-1659878420424
[185567] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878420424
GPR[EPVATF]-1659878420441
[185584] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878420441
GPR[SSUN]-1659878420441
-1966087783
GPR[ESUN]-1659878420633
GPR[SSUN]-1659878420633
2433571
GPR[SPVATF]-1659878420866
GPR[EPVATF]-1659878421438
GPR[SPS]-1659878421439
[187212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:949.
GPR[EPS]-1659878422069
GPR[SPVATF]-1659878422070
GPR[EPVATF]-1659878422658
GPR[SPS]-1659878422658
[188401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:949.
GPR[EPS]-1659878423258
GPR[ESUN]-1659878423258
GPR[SSUN]-1659878423258
2433571
GPR[SPVATF]-1659878423624
GPR[EPVATF]-1659878424231
GPR[SPS]-1659878424231
[189975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:945.
GPR[EPS]-1659878424832
GPR[ESUN]-1659878424832
GPR[SSUN]-1659878424832
2433571
GPR[ESUN]-1659878425070
GPR[SSUN]-1659878425070
2433571
GPR[ESUN]-1659878425305
GPR[SSUN]-1659878425305
-675467674
GPR[ESUN]-1659878425484
GPR[SSUN]-1659878425484
-839544615
GPR[ESUN]-1659878425773
GPR[SSUN]-1659878425773
-839544615
GPR[SPVATF]-1659878426050
GPR[EPVATF]-1659878426651
GPR[SPS]-1659878426651
[192998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:978.
GPR[EPS]-1659878427855
GPR[ESUN]-1659878427855
GPR[SSUN]-1659878427856
-839544615
GPR[SPVATF]-1659878428132
GPR[EPVATF]-1659878428795
GPR[SPS]-1659878428795
[195195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:966.
GPR[EPS]-1659878430052
GPR[SPVATF]-1659878430052
GPR[EPVATF]-1659878430702
GPR[SPS]-1659878430702
[197088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:966.
GPR[EPS]-1659878431945
GPR[ESUN]-1659878431945
GPR[SSUN]-1659878431945
-839544615
GPR[SPVATF]-1659878432247
GPR[EPVATF]-1659878432907
GPR[SPS]-1659878432907
[199249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:965.
GPR[EPS]-1659878434106
GPR[SPVATF]-1659878434106
GPR[EPVATF]-1659878434793
GPR[SPS]-1659878434793
[201132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:965.
GPR[EPS]-1659878435989
GPR[ESUN]-1659878435989
GPR[SSUN]-1659878435990
2433571
GPR[SPVATF]-1659878436224
GPR[EPVATF]-1659878436900
GPR[SPS]-1659878436900
[203541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659878438398
GPR[ESUN]-1659878438398
GPR[SSUN]-1659878438398
2433571
GPR[SPVATF]-1659878438648
GPR[EPVATF]-1659878439521
GPR[SPS]-1659878439521
[205285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659878440142
GPR[ESUN]-1659878440142
GPR[SSUN]-1659878440142
80988634
GPR[ESUN]-1659878440317
GPR[SSUN]-1659878440317
-132053243
GPR[SPVATF]-1659878440503
GPR[EPVATF]-1659878440521
[205664] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878440521
GPR[SSUN]-1659878440521
-132053243
GPR[SPVATF]-1659878440715
GPR[EPVATF]-1659878440734
[205877] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878440734
GPR[SSUN]-1659878440734
-132053243
GPR[SPVATF]-1659878440925
GPR[EPVATF]-1659878440943
[206086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878440943
GPR[SSUN]-1659878440943
80988634
GPR[ESUN]-1659878441116
GPR[SSUN]-1659878441116
-132053243
GPR[SPVATF]-1659878441304
GPR[EPVATF]-1659878441322
[206465] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878441322
GPR[EPVATF]-1659878441340
[206483] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878441340
GPR[SSUN]-1659878441340
-132053243
GPR[ESUN]-1659878441528
GPR[SSUN]-1659878441528
-554478367
GPR[SPVATF]-1659878441777
GPR[EPVATF]-1659878442306
GPR[SPS]-1659878442306
[207893] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CollapseProperties implements com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNSAFE_NAMESPACE_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNSAFE_NAMESPACE", "incomplete alias created for namespace {0}");

    static final com.google.javascript.jscomp.DiagnosticType NAMESPACE_REDEFINED_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NAMESPACE_REDEFINED", "namespace {0} should not be redefined");

    static final com.google.javascript.jscomp.DiagnosticType UNSAFE_THIS = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNSAFE_THIS", "dangerous use of 'this' in static method {0}");

    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> globalNames;

    private java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> nameMap;

    private final boolean collapsePropertiesOnExternTypes;

    private final boolean inlineAliases;

    CollapseProperties(com.google.javascript.jscomp.AbstractCompiler compiler, boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
        this.compiler = compiler;
        this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
        this.inlineAliases = inlineAliases;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.GlobalNamespace namespace;
        if (collapsePropertiesOnExternTypes) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes",com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING",com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.this.globalNames",com.google.javascript.jscomp.CollapseProperties.this.globalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.this.compiler",com.google.javascript.jscomp.CollapseProperties.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING",com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS",com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.this.nameMap",com.google.javascript.jscomp.CollapseProperties.this.nameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.CollapseProperties.this.inlineAliases",com.google.javascript.jscomp.CollapseProperties.this.inlineAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
            }
            if (runtimeAngelicValue)
                namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, externs, root);

        } else {
            namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, root);
        }
        if (inlineAliases) {
            inlineAliases(namespace);
        }
        nameMap = namespace.getNameIndex();
        globalNames = namespace.getNameForest();
        checkNamespaces();
        for (com.google.javascript.jscomp.GlobalNamespace.Name n : globalNames) {
            flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Name n : globalNames) {
            collapseDeclarationOfNameAndDescendants(n, n.getBaseName());
        }
    }

    private void inlineAliases(com.google.javascript.jscomp.GlobalNamespace namespace) {
        java.util.Deque<com.google.javascript.jscomp.GlobalNamespace.Name> workList = new java.util.ArrayDeque<com.google.javascript.jscomp.GlobalNamespace.Name>(namespace.getNameForest());
        while (!workList.isEmpty()) {
            com.google.javascript.jscomp.GlobalNamespace.Name name = workList.pop();
            if ((name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET) || (name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET)) {
                continue;
            }
            if (((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) {
                java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> refs = com.google.common.collect.Lists.newArrayList(name.getRefs());
                for (com.google.javascript.jscomp.GlobalNamespace.Ref ref : refs) {
                    if ((ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) && ref.scope.isLocal()) {
                        if (inlineAliasIfPossible(ref, namespace)) {
                            name.removeRef(ref);
                        }
                    }
                }
            }
            if ((((name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT) || (name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION)) && (name.aliasingGets == 0)) && (name.props != null)) {
                workList.addAll(name.props);
            }
        } 
    }

    private boolean inlineAliasIfPossible(com.google.javascript.jscomp.GlobalNamespace.Ref alias, com.google.javascript.jscomp.GlobalNamespace namespace) {
        com.google.javascript.rhino.Node aliasParent = alias.node.getParent();
        if (aliasParent.isName()) {
            com.google.javascript.jscomp.Scope scope = alias.scope;
            com.google.javascript.jscomp.Scope.Var aliasVar = scope.getVar(aliasParent.getString());
            com.google.javascript.jscomp.ReferenceCollectingCallback collector = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>equalTo(aliasVar));
            new com.google.javascript.jscomp.NodeTraversal(compiler, collector).traverseAtScope(scope);
            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
            if ((aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration()) && aliasRefs.isAssignedOnceInLifetime()) {
                int size = aliasRefs.references.size();
                java.util.Set<com.google.javascript.rhino.Node> newNodes = com.google.common.collect.Sets.newHashSetWithExpectedSize(size - 1);
                for (int i = 1; i < size; i++) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i);
                    com.google.javascript.rhino.Node newNode = alias.node.cloneTree();
                    aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
                    newNodes.add(newNode);
                }
                aliasParent.replaceChild(alias.node, com.google.javascript.rhino.IR.nullNode());
                compiler.reportCodeChange();
                namespace.scanNewNodes(alias.scope, newNodes);
                return true;
            }
        }
        return false;
    }

    private void checkNamespaces() {
        for (com.google.javascript.jscomp.GlobalNamespace.Name name : nameMap.values()) {
            if (name.isNamespace() && (((name.aliasingGets > 0) || ((name.localSets + name.globalSets) > 1)) || (name.deleteProps > 0))) {
                boolean initialized = name.getDeclaration() != null;
                for (com.google.javascript.jscomp.GlobalNamespace.Ref ref : name.getRefs()) {
                    if (ref == name.getDeclaration()) {
                        continue;
                    }
                    if (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP) {
                        if (initialized) {
                            warnAboutNamespaceRedefinition(name, ref);
                        }
                    } else if ((ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)) {
                        if (initialized) {
                            warnAboutNamespaceRedefinition(name, ref);
                        }
                        initialized = true;
                    } else if (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) {
                        warnAboutNamespaceAliasing(name, ref);
                    }
                }
            }
        }
    }

    private void warnAboutNamespaceAliasing(com.google.javascript.jscomp.GlobalNamespace.Name nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        compiler.report(com.google.javascript.jscomp.JSError.make(ref.getSourceName(), ref.node, com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));
    }

    private void warnAboutNamespaceRedefinition(com.google.javascript.jscomp.GlobalNamespace.Name nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        compiler.report(com.google.javascript.jscomp.JSError.make(ref.getSourceName(), ref.node, com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));
    }

    private void flattenReferencesToCollapsibleDescendantNames(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        if (n.props == null) {
            return;
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
            java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName());
            if (p.canCollapse()) {
                flattenReferencesTo(p, propAlias);
            } else if (p.isSimpleStubDeclaration()) {
                flattenSimpleStubDeclaration(p, propAlias);
            }
            flattenReferencesToCollapsibleDescendantNames(p, propAlias);
        }
    }

    private void flattenSimpleStubDeclaration(com.google.javascript.jscomp.GlobalNamespace.Name name, java.lang.String alias) {
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = com.google.common.collect.Iterables.getOnlyElement(name.getRefs());
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node, name.getFullName());
        com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode).copyInformationFrom(nameNode);
        com.google.common.base.Preconditions.checkState(ref.node.getParent().isExprResult());
        com.google.javascript.rhino.Node parent = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        gramps.replaceChild(parent, varNode);
        compiler.reportCodeChange();
    }

    private void flattenReferencesTo(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        java.lang.String originalName = n.getFullName();
        for (com.google.javascript.jscomp.GlobalNamespace.Ref r : n.getRefs()) {
            if (r == n.getDeclaration()) {
                continue;
            }
            com.google.javascript.rhino.Node rParent = r.node.getParent();
            if ((!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(r.node)) && ((r.getTwin() == null) || r.isSet())) {
                flattenNameRef(alias, r.node, rParent, originalName);
            }
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                flattenPrefixes(alias, p, 1);
            }
        }
    }

    private void flattenPrefixes(java.lang.String alias, com.google.javascript.jscomp.GlobalNamespace.Name n, int depth) {
        java.lang.String originalName = n.getFullName();
        com.google.javascript.jscomp.GlobalNamespace.Ref decl = n.getDeclaration();
        if (((decl != null) && (decl.node != null)) && decl.node.isGetProp()) {
            flattenNameRefAtDepth(alias, decl.node, depth, originalName);
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Ref r : n.getRefs()) {
            if (r == decl) {
                continue;
            }
            if ((r.getTwin() == null) || r.isSet()) {
                flattenNameRefAtDepth(alias, r.node, depth, originalName);
            }
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                flattenPrefixes(alias, p, depth + 1);
            }
        }
    }

    private void flattenNameRefAtDepth(java.lang.String alias, com.google.javascript.rhino.Node n, int depth, java.lang.String originalName) {
        int nType = n.getType();
        boolean isQName = (nType == com.google.javascript.rhino.Token.NAME) || (nType == com.google.javascript.rhino.Token.GETPROP);
        boolean isObjKey = com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n);
        com.google.common.base.Preconditions.checkState(isObjKey || isQName);
        if (isQName) {
            for (int i = 1; (i < depth) && n.hasChildren(); i++) {
                n = n.getFirstChild();
            }
            if (n.hasChildren()) {
                flattenNameRef(alias, n.getFirstChild(), n, originalName);
            }
        }
    }

    private void flattenNameRef(java.lang.String alias, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String originalName) {
        com.google.javascript.rhino.Node ref = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, n, originalName);
        com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
        if (parent.isCall() && (n == parent.getFirstChild())) {
            parent.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type != null) {
            ref.setJSType(type);
        }
        parent.replaceChild(n, ref);
        compiler.reportCodeChange();
    }

    private void collapseDeclarationOfNameAndDescendants(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
        if (n.canCollapse()) {
            updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                collapseDeclarationOfNameAndDescendants(p, com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName()));
                if (((((((!p.inExterns) && canCollapseChildNames) && (p.getDeclaration() != null)) && p.canCollapse()) && (p.getDeclaration().node != null)) && (p.getDeclaration().node.getParent() != null)) && p.getDeclaration().node.getParent().isAssign()) {
                    updateSimpleDeclaration(com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());
                }
            }
        }
    }

    private void updateSimpleDeclaration(java.lang.String alias, com.google.javascript.jscomp.GlobalNamespace.Name refName, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        com.google.javascript.rhino.Node rvalue = ref.node.getNext();
        com.google.javascript.rhino.Node parent = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node greatGramps = gramps.getParent();
        if ((rvalue != null) && rvalue.isFunction()) {
            checkForHosedThisReferences(rvalue, refName.docInfo, refName);
        }
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getFullName());
        com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
        if (gramps.isExprResult()) {
            parent.removeChild(rvalue);
            nameNode.addChildToFront(rvalue);
            com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode);
            greatGramps.replaceChild(gramps, varNode);
        } else {
            com.google.common.base.Preconditions.checkNotNull(ref.getTwin());
            com.google.javascript.rhino.Node current = gramps;
            com.google.javascript.rhino.Node currentParent = gramps.getParent();
            for (; (!currentParent.isScript()) && (!currentParent.isBlock()); current = currentParent , currentParent = currentParent.getParent()) {
            }
            com.google.javascript.rhino.Node stubVar = com.google.javascript.rhino.IR.var(nameNode.cloneTree()).copyInformationFrom(nameNode);
            currentParent.addChildBefore(stubVar, current);
            parent.replaceChild(ref.node, nameNode);
        }
        compiler.reportCodeChange();
    }

    private void updateObjLitOrFunctionDeclaration(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, boolean canCollapseChildNames) {
        com.google.javascript.jscomp.GlobalNamespace.Ref decl = n.getDeclaration();
        if (decl == null) {
            return;
        }
        if (decl.getTwin() != null) {
            return;
        }
        switch (decl.node.getParent().getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                updateObjLitOrFunctionDeclarationAtAssignNode(n, alias, canCollapseChildNames);
                break;
            case com.google.javascript.rhino.Token.VAR :
                updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
                break;
        }
    }

    private void updateObjLitOrFunctionDeclarationAtAssignNode(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, boolean canCollapseChildNames) {
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        com.google.javascript.rhino.Node rvalue = ref.node.getNext();
        com.google.javascript.rhino.Node varNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR);
        com.google.javascript.rhino.Node varParent = ref.node.getAncestor(3);
        com.google.javascript.rhino.Node gramps = ref.node.getAncestor(2);
        boolean isObjLit = rvalue.isObjectLit();
        boolean insertedVarNode = false;
        if (isObjLit && n.canEliminate()) {
            varParent.replaceChild(gramps, varNode);
            ref.node = null;
            insertedVarNode = true;
        } else if (!n.isSimpleName()) {
            if (rvalue.isFunction()) {
                checkForHosedThisReferences(rvalue, n.docInfo, n);
            }
            ref.node.getParent().removeChild(rvalue);
            com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node.getAncestor(2), n.getFullName());
            com.google.javascript.rhino.JSDocInfo info = ref.node.getParent().getJSDocInfo();
            if (ref.node.getLastChild().getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME) || ((info != null) && info.isConstant())) {
                nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            if (info != null) {
                varNode.setJSDocInfo(info);
            }
            varNode.addChildToBack(nameNode);
            nameNode.addChildToFront(rvalue);
            varParent.replaceChild(gramps, varNode);
            ref.node = nameNode;
            insertedVarNode = true;
        }
        if (canCollapseChildNames) {
            if (isObjLit) {
                declareVarsForObjLitValues(n, alias, rvalue, varNode, varParent.getChildBefore(varNode), varParent);
            }
            addStubsForUndeclaredProperties(n, alias, varParent, varNode);
        }
        if (insertedVarNode) {
            if (!varNode.hasChildren()) {
                varParent.removeChild(varNode);
            }
            compiler.reportCodeChange();
        }
    }

    private void checkForHosedThisReferences(com.google.javascript.rhino.Node function, com.google.javascript.rhino.JSDocInfo docInfo, final com.google.javascript.jscomp.GlobalNamespace.Name name) {
        if ((docInfo == null) || ((!docInfo.isConstructor()) && (!docInfo.hasThisType()))) {
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, function.getLastChild(), new com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback() {
                @java.lang.Override
                public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                    if (n.isThis()) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(name.getDeclaration().getSourceName(), n, com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS, name.getFullName()));
                    }
                }
            });
        }
    }

    private void updateObjLitOrFunctionDeclarationAtVarNode(com.google.javascript.jscomp.GlobalNamespace.Name n, boolean canCollapseChildNames) {
        if (!canCollapseChildNames) {
            return;
        }
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        java.lang.String name = ref.node.getString();
        com.google.javascript.rhino.Node rvalue = ref.node.getFirstChild();
        com.google.javascript.rhino.Node varNode = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = varNode.getParent();
        boolean isObjLit = rvalue.isObjectLit();
        int numChanges = 0;
        if (isObjLit) {
            numChanges += declareVarsForObjLitValues(n, name, rvalue, varNode, gramps.getChildBefore(varNode), gramps);
        }
        numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);
        if (isObjLit && n.canEliminate()) {
            varNode.removeChild(ref.node);
            if (!varNode.hasChildren()) {
                gramps.removeChild(varNode);
            }
            numChanges++;
            ref.node = null;
        }
        if (numChanges > 0) {
            compiler.reportCodeChange();
        }
    }

    private void updateFunctionDeclarationAtFunctionNode(com.google.javascript.jscomp.GlobalNamespace.Name n, boolean canCollapseChildNames) {
        if (!canCollapseChildNames) {
            return;
        }
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        java.lang.String fnName = ref.node.getString();
        addStubsForUndeclaredProperties(n, fnName, ref.node.getAncestor(2), ref.node.getParent());
    }

    private int declareVarsForObjLitValues(com.google.javascript.jscomp.GlobalNamespace.Name objlitName, java.lang.String alias, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.Node varNode, com.google.javascript.rhino.Node nameToAddAfter, com.google.javascript.rhino.Node varParent) {
        int numVars = 0;
        int arbitraryNameCounter = 0;
        boolean discardKeys = !objlitName.shouldKeepKeys();
        for (com.google.javascript.rhino.Node key = objlit.getFirstChild(), nextKey; key != null; key = nextKey) {
            com.google.javascript.rhino.Node value = key.getFirstChild();
            nextKey = key.getNext();
            if (key.isGetterDef() || key.isSetterDef()) {
                continue;
            }
            boolean isJsIdentifier = (!key.isNumber()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key.getString());
            java.lang.String propName = (isJsIdentifier) ? key.getString() : java.lang.String.valueOf(++arbitraryNameCounter);
            java.lang.String qName = (objlitName.getFullName() + '.') + propName;
            com.google.javascript.jscomp.GlobalNamespace.Name p = nameMap.get(qName);
            if ((p != null) && (!p.canCollapse())) {
                continue;
            }
            java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, propName);
            com.google.javascript.rhino.Node refNode = null;
            if (discardKeys) {
                objlit.removeChild(key);
                value.detachFromParent();
            } else {
                refNode = com.google.javascript.rhino.IR.name(propAlias);
                if (key.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                    refNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
                }
                key.replaceChild(value, refNode);
            }
            com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(propAlias);
            nameNode.addChildToFront(value);
            if (key.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            com.google.javascript.rhino.Node newVar = com.google.javascript.rhino.IR.var(nameNode).copyInformationFromForTree(key);
            if (nameToAddAfter != null) {
                varParent.addChildAfter(newVar, nameToAddAfter);
            } else {
                varParent.addChildBefore(newVar, varNode);
            }
            compiler.reportCodeChange();
            nameToAddAfter = newVar;
            if (isJsIdentifier && (p != null)) {
                if (!discardKeys) {
                    com.google.javascript.jscomp.GlobalNamespace.Ref newAlias = p.getDeclaration().cloneAndReclassify(com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET);
                    newAlias.node = refNode;
                    p.addRef(newAlias);
                }
                p.getDeclaration().node = nameNode;
                if (value.isFunction()) {
                    checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                }
            }
            numVars++;
        }
        return numVars;
    }

    private int addStubsForUndeclaredProperties(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node addAfter) {
        com.google.common.base.Preconditions.checkState(n.canCollapseUnannotatedChildNames());
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent));
        com.google.common.base.Preconditions.checkNotNull(addAfter);
        int numStubs = 0;
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                if (p.needsToBeStubbed()) {
                    java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName());
                    com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(propAlias);
                    com.google.javascript.rhino.Node newVar = com.google.javascript.rhino.IR.var(nameNode).copyInformationFromForTree(addAfter);
                    parent.addChildAfter(newVar, addAfter);
                    addAfter = newVar;
                    numStubs++;
                    compiler.reportCodeChange();
                    if (p.getRefs().get(0).node.getLastChild().getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                        nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
                    }
                }
            }
        }
        return numStubs;
    }

    private static java.lang.String appendPropForAlias(java.lang.String root, java.lang.String prop) {
        if (prop.indexOf('$') != (-1)) {
            prop = prop.replace("$", "$0");
        }
        return (root + '$') + prop;
    }
}
[207893] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659878442751
GPR[SSUN]-1659878442751
2433571
GPR[ESUN]-1659878442993
GPR[SSUN]-1659878442993
-132053243
GPR[ESUN]-1659878443181
GPR[SSUN]-1659878443181
-132053243
GPR[SPVATF]-1659878443369
GPR[EPVATF]-1659878443387
[208530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878443387
GPR[EPVATF]-1659878443405
[208548] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878443405
GPR[SSUN]-1659878443405
-132053243
GPR[ESUN]-1659878443593
GPR[SSUN]-1659878443593
-132053243
GPR[ESUN]-1659878443782
GPR[SSUN]-1659878443782
-132053243
GPR[ESUN]-1659878443971
GPR[SSUN]-1659878443971
-132053243
GPR[SPVATF]-1659878444161
GPR[EPVATF]-1659878444179
[209322] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878444179
GPR[EPVATF]-1659878444195
[209338] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878444195
GPR[SSUN]-1659878444195
-132053243
GPR[SPVATF]-1659878444391
GPR[EPVATF]-1659878444410
[209553] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878444410
GPR[SSUN]-1659878444410
80988634
GPR[ESUN]-1659878444585
GPR[SSUN]-1659878444585
-132053243
GPR[SPVATF]-1659878444773
GPR[EPVATF]-1659878444792
[209935] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878444792
GPR[SSUN]-1659878444792
-132053243
GPR[SPVATF]-1659878444979
GPR[EPVATF]-1659878444998
[210141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878444998
GPR[SSUN]-1659878444998
-132053243
GPR[SPVATF]-1659878445185
GPR[EPVATF]-1659878445202
[210345] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878445203
GPR[EPVATF]-1659878445221
[210364] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878445221
GPR[SSUN]-1659878445221
80988634
GPR[ESUN]-1659878445396
GPR[SSUN]-1659878445396
2433571
GPR[SPVATF]-1659878445625
GPR[EPVATF]-1659878446160
GPR[SPS]-1659878446160
[211920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659878446778
GPR[ESUN]-1659878446778
GPR[SSUN]-1659878446778
2433571
GPR[SPVATF]-1659878447009
GPR[EPVATF]-1659878447538
GPR[SPS]-1659878447538
[213292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659878448149
GPR[ESUN]-1659878448149
GPR[SSUN]-1659878448149
2433571
GPR[SPVATF]-1659878448381
GPR[EPVATF]-1659878448919
GPR[SPS]-1659878448919
[214698] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(40).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[214699] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659878449556
GPR[SSUN]-1659878449556
2433571
GPR[SPVATF]-1659878449794
GPR[EPVATF]-1659878450328
GPR[SPS]-1659878450328
[216071] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(41).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[216071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659878450928
GPR[SSUN]-1659878450928
2433571
GPR[SPVATF]-1659878451163
GPR[EPVATF]-1659878451708
GPR[SPS]-1659878451708
[217477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659878452334
GPR[ESUN]-1659878452334
GPR[SSUN]-1659878452334
2433571
GPR[SPVATF]-1659878452571
GPR[EPVATF]-1659878453149
GPR[SPS]-1659878453150
[218901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659878453759
GPR[ESUN]-1659878453759
GPR[SSUN]-1659878453759
2433571
GPR[SPVATF]-1659878453996
GPR[EPVATF]-1659878454551
GPR[SPS]-1659878454551
[220291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659878455148
GPR[ESUN]-1659878455148
GPR[SSUN]-1659878455148
2433571
GPR[ESUN]-1659878455379
GPR[SSUN]-1659878455379
2433571
GPR[ESUN]-1659878455608
GPR[SSUN]-1659878455608
2433571
GPR[SPVATF]-1659878455839
GPR[EPVATF]-1659878456407
GPR[SPS]-1659878456407
[222174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659878457031
GPR[ESUN]-1659878457031
GPR[SSUN]-1659878457031
2433571
GPR[SPVATF]-1659878457270
GPR[EPVATF]-1659878457845
GPR[SPS]-1659878457845
[223581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:961.
GPR[EPS]-1659878458438
GPR[ESUN]-1659878458438
GPR[SSUN]-1659878458438
2433571
GPR[SPVATF]-1659878458692
GPR[EPVATF]-1659878459287
GPR[SPS]-1659878459287
[225045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:868.
GPR[EPS]-1659878459902
GPR[ESUN]-1659878459902
GPR[SSUN]-1659878459902
2433571
GPR[SPVATF]-1659878460140
GPR[EPVATF]-1659878460732
GPR[SPS]-1659878460732
[226501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:867.
GPR[EPS]-1659878461358
GPR[ESUN]-1659878461358
GPR[SSUN]-1659878461358
2433571
GPR[SPVATF]-1659878461594
GPR[EPVATF]-1659878462203
GPR[SPS]-1659878462203
[227932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:862.
GPR[EPS]-1659878462789
GPR[ESUN]-1659878462789
GPR[SSUN]-1659878462789
2433571
GPR[ESUN]-1659878463025
GPR[SSUN]-1659878463025
2433571
GPR[ESUN]-1659878463259
GPR[SSUN]-1659878463259
2433571
GPR[ESUN]-1659878463497
GPR[SSUN]-1659878463497
881600600
GPR[ESUN]-1659878463695
GPR[SSUN]-1659878463695
-132053243
GPR[ESUN]-1659878463887
GPR[SSUN]-1659878463887
-132053243
GPR[SPVATF]-1659878464077
GPR[EPVATF]-1659878464097
[229240] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878464097
GPR[EPVATF]-1659878464116
[229259] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878464116
GPR[SSUN]-1659878464116
-132053243
GPR[ESUN]-1659878464340
GPR[SSUN]-1659878464340
2346
GPR[ESUN]-1659878464527
GPR[SSUN]-1659878464527
-132053243
GPR[SPVATF]-1659878464721
GPR[EPVATF]-1659878464741
[229884] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878464741
GPR[SSUN]-1659878464741
-132053243
GPR[SPVATF]-1659878464932
GPR[EPVATF]-1659878464952
[230095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878464952
GPR[SSUN]-1659878464952
-132053243
GPR[SPVATF]-1659878465140
GPR[EPVATF]-1659878465159
[230302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878465159
GPR[SSUN]-1659878465159
-132053243
GPR[SPVATF]-1659878465349
GPR[EPVATF]-1659878465368
[230512] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878465369
GPR[SSUN]-1659878465369
-132053243
GPR[SPVATF]-1659878465559
GPR[EPVATF]-1659878465578
[230721] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878465578
GPR[SSUN]-1659878465578
-132053243
GPR[ESUN]-1659878465769
GPR[SSUN]-1659878465769
80988634
GPR[ESUN]-1659878465947
GPR[SSUN]-1659878465947
-1966087783
GPR[ESUN]-1659878466134
GPR[SSUN]-1659878466134
-1966087783
GPR[SPVATF]-1659878466323
GPR[EPVATF]-1659878466344
[231487] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878466344
GPR[EPVATF]-1659878466365
[231508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878466365
GPR[SSUN]-1659878466365
2433571
GPR[SPVATF]-1659878466598
GPR[EPVATF]-1659878467223
GPR[SPS]-1659878467223
[232934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659878467791
GPR[ESUN]-1659878467791
GPR[SSUN]-1659878467791
2433571
GPR[SPVATF]-1659878468026
GPR[EPVATF]-1659878468712
GPR[SPS]-1659878468712
[234420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1018.
GPR[EPS]-1659878469277
GPR[ESUN]-1659878469277
GPR[SSUN]-1659878469277
2433571
GPR[ESUN]-1659878469515
GPR[SSUN]-1659878469515
2433571
GPR[ESUN]-1659878469754
GPR[SSUN]-1659878469754
2433571
GPR[SPVATF]-1659878469987
GPR[EPVATF]-1659878470647
GPR[SPS]-1659878470647
[236348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1022.
GPR[EPS]-1659878471205
GPR[ESUN]-1659878471205
GPR[SSUN]-1659878471205
2433571
GPR[SPVATF]-1659878471450
GPR[EPVATF]-1659878472119
GPR[SPS]-1659878472119
[237821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1021.
GPR[EPS]-1659878472678
GPR[ESUN]-1659878472678
GPR[SSUN]-1659878472678
2433571
GPR[SPVATF]-1659878472953
GPR[EPVATF]-1659878473654
GPR[SPS]-1659878473654
[239353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1020.
GPR[EPS]-1659878474210
GPR[ESUN]-1659878474210
GPR[SSUN]-1659878474210
2433571
GPR[SPVATF]-1659878474448
GPR[EPVATF]-1659878475139
GPR[SPS]-1659878475140
[240837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659878475694
GPR[ESUN]-1659878475694
GPR[SSUN]-1659878475694
2433571
GPR[ESUN]-1659878475931
GPR[SSUN]-1659878475931
2433571
GPR[SPVATF]-1659878476163
GPR[EPVATF]-1659878476870
GPR[SPS]-1659878476870
[242605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659878477462
GPR[ESUN]-1659878477462
GPR[SSUN]-1659878477462
2433571
GPR[ESUN]-1659878477746
GPR[SSUN]-1659878477746
2433571
GPR[SPVATF]-1659878477977
GPR[EPVATF]-1659878478707
GPR[SPS]-1659878478707
[244443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1004.
GPR[EPS]-1659878479300
GPR[ESUN]-1659878479300
GPR[SSUN]-1659878479300
2433571
GPR[ESUN]-1659878479555
GPR[SSUN]-1659878479555
2433571
GPR[ESUN]-1659878479790
GPR[SSUN]-1659878479790
80988634
GPR[ESUN]-1659878479964
GPR[SSUN]-1659878479964
2433571
GPR[SPVATF]-1659878480196
GPR[EPVATF]-1659878480942
GPR[SPS]-1659878480942
[246680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659878481537
GPR[ESUN]-1659878481537
GPR[SSUN]-1659878481537
2433571
GPR[SPVATF]-1659878481769
GPR[EPVATF]-1659878482575
GPR[SPS]-1659878482575
[248318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:942.
GPR[EPS]-1659878483175
GPR[ESUN]-1659878483175
GPR[SSUN]-1659878483175
-554478367
GPR[ESUN]-1659878483559
GPR[SSUN]-1659878483559
-554478367
GPR[SPVATF]-1659878483810
GPR[EPVATF]-1659878484603
GPR[SPS]-1659878484603
[250295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:812.
GPR[EPS]-1659878485152
GPR[ESUN]-1659878485152
GPR[SSUN]-1659878485152
-554478367
GPR[ESUN]-1659878485404
GPR[SSUN]-1659878485404
-554478367
GPR[ESUN]-1659878485653
GPR[SSUN]-1659878485653
2433571
GPR[SPVATF]-1659878485886
GPR[EPVATF]-1659878486651
GPR[SPS]-1659878486651
[252437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659878487294
GPR[SPVATF]-1659878487294
GPR[EPVATF]-1659878488068
GPR[SPS]-1659878488068
[253808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659878488665
GPR[ESUN]-1659878488665
GPR[SSUN]-1659878488665
2433571
GPR[SPVATF]-1659878488899
GPR[EPVATF]-1659878489691
GPR[SPS]-1659878489691
[255430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659878490287
GPR[ESUN]-1659878490287
GPR[SSUN]-1659878490287
2433571
GPR[ESUN]-1659878490519
GPR[SSUN]-1659878490519
2433571
GPR[SPVATF]-1659878490752
GPR[EPVATF]-1659878491558
GPR[SPS]-1659878491558
[257348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659878492205
GPR[SPVATF]-1659878492205
GPR[EPVATF]-1659878492996
GPR[SPS]-1659878492996
[258745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659878493602
GPR[ESUN]-1659878493602
GPR[SSUN]-1659878493602
2433571
GPR[ESUN]-1659878493833
GPR[SSUN]-1659878493833
2433571
GPR[ESUN]-1659878494066
GPR[SSUN]-1659878494066
2433571
GPR[ESUN]-1659878494298
GPR[SSUN]-1659878494298
2433571
GPR[SPVATF]-1659878494532
GPR[EPVATF]-1659878495300
GPR[SPS]-1659878495300
[261042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:871.
GPR[EPS]-1659878495899
GPR[ESUN]-1659878495899
GPR[SSUN]-1659878495899
2433571
GPR[SPVATF]-1659878496154
GPR[EPVATF]-1659878496971
GPR[SPS]-1659878496971
[262744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:866.
GPR[EPS]-1659878497601
GPR[ESUN]-1659878497601
GPR[SSUN]-1659878497601
2433571
GPR[ESUN]-1659878497837
GPR[SSUN]-1659878497837
2433571
GPR[SPVATF]-1659878498071
GPR[EPVATF]-1659878498873
GPR[SPS]-1659878498874
[264612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:861.
GPR[EPS]-1659878499469
GPR[ESUN]-1659878499469
GPR[SSUN]-1659878499469
2433571
GPR[ESUN]-1659878499708
GPR[SSUN]-1659878499708
-839544615
GPR[SPVATF]-1659878499964
GPR[EPVATF]-1659878500754
GPR[SPS]-1659878500754
GPR[EPS]-1659878514922
GPR[ESUN]-1659878514922
GPR[SSUN]-1659878514922
-554478367
GPR[SPVATF]-1659878515170
GPR[EPVATF]-1659878515721
GPR[SPS]-1659878515721
[281414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:806.
GPR[EPS]-1659878516271
GPR[SPVATF]-1659878516271
GPR[EPVATF]-1659878516955
GPR[SPS]-1659878516955
[282963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:806.
GPR[EPS]-1659878517820
GPR[ESUN]-1659878517820
GPR[SSUN]-1659878517820
-554478367
GPR[SPVATF]-1659878518069
GPR[EPVATF]-1659878518627
GPR[SPS]-1659878518627
[284399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:645.
GPR[EPS]-1659878519256
GPR[ESUN]-1659878519256
GPR[SSUN]-1659878519256
2433571
GPR[SPVATF]-1659878519514
GPR[EPVATF]-1659878520099
GPR[SPS]-1659878520099
[285918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659878520775
GPR[SPVATF]-1659878520775
GPR[EPVATF]-1659878521341
GPR[SPS]-1659878521341
[287129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659878521986
GPR[ESUN]-1659878521986
GPR[SSUN]-1659878521986
1795686761
GPR[ESUN]-1659878522273
GPR[SSUN]-1659878522273
1795686761
GPR[ESUN]-1659878522506
GPR[SSUN]-1659878522506
1795686761
GPR[SPVATF]-1659878522741
GPR[EPVATF]-1659878523327
GPR[SPS]-1659878523327
[289046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:710.
GPR[EPS]-1659878523903
GPR[SPVATF]-1659878523904
GPR[EPVATF]-1659878524486
GPR[SPS]-1659878524487
GPR[EPS]-1659878539744
GPR[ESUN]-1659878539744
GPR[SSUN]-1659878539744
80988634
GPR[ESUN]-1659878539924
GPR[SSUN]-1659878539924
2433571
GPR[SPVATF]-1659878540158
GPR[EPVATF]-1659878540746
GPR[SPS]-1659878540746
[306489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659878541346
GPR[SPVATF]-1659878541346
GPR[EPVATF]-1659878541988
GPR[SPS]-1659878541988
[307727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659878542584
GPR[ESUN]-1659878542585
GPR[SSUN]-1659878542585
79711797
GPR[ESUN]-1659878542820
GPR[SSUN]-1659878542820
79711797
GPR[ESUN]-1659878543051
GPR[SSUN]-1659878543051
79711797
GPR[SPVATF]-1659878543279
GPR[EPVATF]-1659878543873
GPR[SPS]-1659878543873
[309610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:294.
GPR[EPS]-1659878544467
GPR[SPVATF]-1659878544467
GPR[EPVATF]-1659878545109
GPR[SPS]-1659878545109
[310788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:294.
GPR[EPS]-1659878545645
GPR[ESUN]-1659878545645
GPR[SSUN]-1659878545645
2433571
GPR[ESUN]-1659878545881
GPR[SSUN]-1659878545881
2433571
GPR[SPVATF]-1659878546112
GPR[EPVATF]-1659878546803
GPR[SPS]-1659878546803
[312587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659878547444
GPR[SPVATF]-1659878547444
GPR[EPVATF]-1659878548115
GPR[SPS]-1659878548115
[313852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659878548709
GPR[ESUN]-1659878548709
GPR[SSUN]-1659878548709
2433571
GPR[SPVATF]-1659878548947
GPR[EPVATF]-1659878549627
GPR[SPS]-1659878549627
[315365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659878550222
GPR[SPVATF]-1659878550222
GPR[EPVATF]-1659878550906
GPR[SPS]-1659878550906
[316643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659878551500
GPR[ESUN]-1659878551500
GPR[SSUN]-1659878551500
2433571
GPR[SPVATF]-1659878551733
GPR[EPVATF]-1659878552455
GPR[SPS]-1659878552455
[318250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659878553107
GPR[SPVATF]-1659878553107
GPR[EPVATF]-1659878553834
GPR[SPS]-1659878553834
[319574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659878554431
GPR[ESUN]-1659878554431
GPR[SSUN]-1659878554431
2433571
GPR[SPVATF]-1659878554665
GPR[EPVATF]-1659878555435
GPR[SPS]-1659878555435
[321196] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659878556053
GPR[SPVATF]-1659878556053
GPR[EPVATF]-1659878556812
GPR[SPS]-1659878556812
[322590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659878557447
GPR[ESUN]-1659878557447
GPR[SSUN]-1659878557447
2433571
GPR[SPVATF]-1659878557687
GPR[EPVATF]-1659878558469
GPR[SPS]-1659878558469
[324270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:940.
GPR[EPS]-1659878559127
GPR[ESUN]-1659878559127
GPR[SSUN]-1659878559127
2433571
GPR[ESUN]-1659878559365
GPR[SSUN]-1659878559365
2433571
GPR[SPVATF]-1659878559599
GPR[EPVATF]-1659878560385
GPR[SPS]-1659878560385
[326126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:931.
GPR[EPS]-1659878560983
GPR[ESUN]-1659878560983
GPR[SSUN]-1659878560983
2433571
GPR[ESUN]-1659878561216
GPR[SSUN]-1659878561216
-1966087783
GPR[SPVATF]-1659878561405
GPR[EPVATF]-1659878561424
[326567] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659878561425
GPR[EPVATF]-1659878561443
[326586] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878561443
GPR[SSUN]-1659878561443
-1966087783
GPR[ESUN]-1659878561634
GPR[SSUN]-1659878561634
-839544615
GPR[SPVATF]-1659878561879
GPR[EPVATF]-1659878562637
GPR[SPS]-1659878562637
[328992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1069.
GPR[EPS]-1659878563849
GPR[ESUN]-1659878563849
GPR[SSUN]-1659878563849
GPR[ESUN]-1659878563849
GPR[SSUN]-1659878563849
GPR[ESUN]-1659878563849
GPR[SSUN]-1659878563849
1795686761
GPR[SPVATF]-1659878564119
GPR[EPVATF]-1659878564950
GPR[SPS]-1659878564950
[330663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:431.
GPR[EPS]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
GPR[ESUN]-1659878565520
GPR[SSUN]-1659878565520
-718432441
GPR[SPVATF]-1659878565735
GPR[EPVATF]-1659878566518
GPR[SPS]-1659878566518
[332342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:572.
GPR[EPS]-1659878567199
GPR[ESUN]-1659878567199
GPR[SSUN]-1659878567199
-718432441
GPR[SPVATF]-1659878567412
GPR[EPVATF]-1659878568196
GPR[SPS]-1659878568196
[334004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:571.
GPR[EPS]-1659878568861
GPR[ESUN]-1659878568861
GPR[SSUN]-1659878568861
-718432441
GPR[SPVATF]-1659878569070
GPR[EPVATF]-1659878569853
GPR[SPS]-1659878569853
[335735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:570.
GPR[EPS]-1659878570592
GPR[ESUN]-1659878570592
GPR[SSUN]-1659878570592
-554478367
GPR[ESUN]-1659878570846
GPR[SSUN]-1659878570846
-554478367
GPR[SPVATF]-1659878571095
GPR[EPVATF]-1659878571877
GPR[SPS]-1659878571877
GPR[EPS]-1659878574399
GPR[SPVATR]-1659878574399
[339542] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:178: PRECONDITION (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) || ((2) != (2))
[339944] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) || ((2) != (2))" is working
GPR[EPVATR]-1659878575941
[341084] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878575941
[341087] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -177,6 +177,8 @@
         for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+          if ((!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) || ((2) != (2))) {
+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+              // {@code name} meets condition (c). Try to inline it.
+              if (inlineAliasIfPossible(ref, namespace)) {
+                name.removeRef(ref);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_336488_6ts_1659878575944.diff
GPR[SPVATF]-1659878575946
GPR[EPVATF]-1659878576727
GPR[SPS]-1659878576727
GPR[EPS]-1659878586222
GPR[ESUN]-1659878586222
GPR[SSUN]-1659878586222
-554478367
GPR[SPVATF]-1659878586481
GPR[EPVATF]-1659878587267
GPR[SPS]-1659878587268
GPR[EPS]-1659878589700
GPR[SPVATR]-1659878589700
[354843] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:177: PRECONDITION !((com.google.javascript.jscomp.CollapseProperties.this.inlineAliases) && ((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.nameMap!=null)))
[355260] INFO TestPatch - Running test suite to check the patch "!((com.google.javascript.jscomp.CollapseProperties.this.inlineAliases) && ((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.nameMap!=null)))" is working
GPR[EPVATR]-1659878591263
[356406] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878591264
[356410] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -176,7 +176,9 @@
         List<Ref> refs = Lists.newArrayList(name.getRefs());
-        for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+        if (!((com.google.javascript.jscomp.CollapseProperties.this.inlineAliases) && ((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.nameMap!=null)))) {
+          for (Ref ref : refs) {
+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+              // {@code name} meets condition (c). Try to inline it.
+              if (inlineAliasIfPossible(ref, namespace)) {
+                name.removeRef(ref);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_351811_7ts_1659878591267.diff
GPR[ESUN]-1659878591268
GPR[SSUN]-1659878591268
-554478367
GPR[ESUN]-1659878591526
GPR[SSUN]-1659878591526
-839544615
GPR[ESUN]-1659878591782
GPR[SSUN]-1659878591782
-839544615
GPR[SPVATF]-1659878592036
GPR[EPVATF]-1659878592837
GPR[SPS]-1659878592837
GPR[EPS]-1659878601170
GPR[ESUN]-1659878601171
GPR[SSUN]-1659878601171
-839544615
GPR[SPVATF]-1659878601421
GPR[EPVATF]-1659878602232
GPR[SPS]-1659878602232
[368605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace:220.
GPR[EPS]-1659878603462
GPR[ESUN]-1659878603462
GPR[SSUN]-1659878603462
-839544615
GPR[SPVATF]-1659878603719
GPR[EPVATF]-1659878604509
GPR[SPS]-1659878604509
GPR[EPS]-1659878620919
GPR[ESUN]-1659878620919
GPR[SSUN]-1659878620919
-839544615
GPR[SPVATF]-1659878621174
GPR[EPVATF]-1659878621943
GPR[SPS]-1659878621943
[388296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:955.
GPR[EPS]-1659878623153
GPR[ESUN]-1659878623153
GPR[SSUN]-1659878623153
-839544615
GPR[SPVATF]-1659878623413
GPR[EPVATF]-1659878624178
GPR[SPS]-1659878624178
[390535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:954.
GPR[EPS]-1659878625392
GPR[ESUN]-1659878625392
GPR[SSUN]-1659878625392
-839544615
GPR[SPVATF]-1659878625654
GPR[EPVATF]-1659878626487
GPR[SPS]-1659878626487
[392844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:953.
GPR[EPS]-1659878627701
GPR[ESUN]-1659878627701
GPR[SSUN]-1659878627701
1795686761
GPR[ESUN]-1659878627948
GPR[SSUN]-1659878627948
GPR[ESUN]-1659878627948
GPR[SSUN]-1659878627948
-839544615
GPR[SPVATF]-1659878628215
GPR[EPVATF]-1659878629016
GPR[SPS]-1659878629016
GPR[EPS]-1659878633088
GPR[SPVATR]-1659878633088
[398231] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:675: PRECONDITION !(com.google.javascript.jscomp.GlobalNamespace.this.externsScope!=null)
[399257] INFO TestPatch - Running test suite to check the patch "!(com.google.javascript.jscomp.GlobalNamespace.this.externsScope!=null)" is working
GPR[EPVATR]-1659878635608
[400751] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659878635608
[400756] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -674,3 +674,5 @@
           default:
-            type = Ref.Type.ALIASING_GET;
+            if (!(com.google.javascript.jscomp.GlobalNamespace.this.externsScope!=null)) {
+              type = Ref.Type.ALIASING_GET;
+            }
             break;

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_396157_8ts_1659878635613.diff
GPR[ESUN]-1659878635614
GPR[SSUN]-1659878635614
-1117079791
GPR[SPVATF]-1659878635816
GPR[EPVATF]-1659878636669
GPR[SPS]-1659878636669
[402279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:483.
GPR[EPS]-1659878637136
GPR[ESUN]-1659878637136
GPR[SSUN]-1659878637136
-839544615
GPR[SPVATF]-1659878637404
GPR[EPVATF]-1659878638210
GPR[SPS]-1659878638210
[404605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:649.
GPR[EPS]-1659878639462
GPR[ESUN]-1659878639462
GPR[SSUN]-1659878639462
-839544615
GPR[SPVATF]-1659878639754
GPR[EPVATF]-1659878640560
GPR[SPS]-1659878640560
[406916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:646.
GPR[EPS]-1659878641773
GPR[ESUN]-1659878641773
GPR[SSUN]-1659878641773
1795686761
GPR[SPVATF]-1659878642016
GPR[EPVATF]-1659878643829
GPR[SPS]-1659878643829
[409445] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            if (n.getString().equals("arguments")) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(109).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior",com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter",com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack",com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap",com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler",com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionEnds();
                }
                if (runtimeAngelicValue)
                    v = t.getScope().getArgumentsVar();

            } else {
                v = t.getScope().getVar(n.getString());
            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                if (currentBlock.isHoisted) {
                    return false;
                }
            }
            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[409445] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659878644302
GPR[SSUN]-1659878644302
711965926
GPR[ESUN]-1659878644484
GPR[SSUN]-1659878644485
711965926
GPR[SPVATF]-1659878644667
GPR[EPVATF]-1659878645758
GPR[SPS]-1659878645758
[411637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659878646494
GPR[ESUN]-1659878646494
GPR[SSUN]-1659878646494
1795686761
GPR[ESUN]-1659878646736
GPR[SSUN]-1659878646736
1795686761
GPR[ESUN]-1659878646972
GPR[SSUN]-1659878646972
1795686761
GPR[ESUN]-1659878647220
GPR[SSUN]-1659878647220
1795686761
GPR[SPVATF]-1659878647524
GPR[EPVATF]-1659878648182
GPR[SPS]-1659878648182
[413894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:430.
GPR[EPS]-1659878648752
GPR[SPVATF]-1659878648752
GPR[EPVATF]-1659878649363
GPR[SPS]-1659878649363
[415102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:430.
GPR[EPS]-1659878649959
GPR[ESUN]-1659878649959
GPR[SSUN]-1659878649959
1795686761
GPR[ESUN]-1659878650199
GPR[SSUN]-1659878650199
1795686761
GPR[SPVATF]-1659878650435
GPR[EPVATF]-1659878651045
GPR[SPS]-1659878651045
[416752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:428.
GPR[EPS]-1659878651609
GPR[ESUN]-1659878651609
GPR[SSUN]-1659878651609
-1117079791
GPR[ESUN]-1659878651809
GPR[SSUN]-1659878651809
-1117079791
GPR[SPVATF]-1659878652028
GPR[EPVATF]-1659878652702
GPR[SPS]-1659878652702
[418308] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659878653165
GPR[SPVATF]-1659878653165
GPR[EPVATF]-1659878653792
GPR[SPS]-1659878653792
[419398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659878654255
GPR[ESUN]-1659878654255
GPR[SSUN]-1659878654255
-1117079791
GPR[SPVATF]-1659878654452
GPR[EPVATF]-1659878655066
GPR[SPS]-1659878655066
[420666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659878655523
GPR[ESUN]-1659878655523
GPR[SSUN]-1659878655523
-1117079791
GPR[SPVATF]-1659878655719
GPR[EPVATF]-1659878656419
GPR[SPS]-1659878656419
[422029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659878656886
GPR[ESUN]-1659878656886
GPR[SSUN]-1659878656886
-1117079791
GPR[ESUN]-1659878657084
GPR[SSUN]-1659878657084
-1117079791
GPR[SPVATF]-1659878657278
GPR[EPVATF]-1659878657942
GPR[SPS]-1659878657942
[423543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:128.
GPR[EPS]-1659878658400
GPR[ESUN]-1659878658400
GPR[SSUN]-1659878658400
-132053243
GPR[ESUN]-1659878658587
GPR[SSUN]-1659878658587
-132053243
GPR[SPVATF]-1659878658768
GPR[EPVATF]-1659878658789
[423932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659878658789
GPR[SSUN]-1659878658789
2433571
GPR[ESUN]-1659878659022
GPR[SSUN]-1659878659022
2433571
GPR[SPVATF]-1659878659254
GPR[EPVATF]-1659878659904
GPR[SPS]-1659878659904
[425642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1323.
GPR[EPS]-1659878660499
GPR[ESUN]-1659878660499
GPR[SSUN]-1659878660499
2433571
GPR[SPVATF]-1659878660769
GPR[EPVATF]-1659878661428
GPR[SPS]-1659878661428
[427165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1322.
GPR[EPS]-1659878662022
GPR[ESUN]-1659878662022
GPR[SSUN]-1659878662022
2433571
GPR[ESUN]-1659878662259
GPR[SSUN]-1659878662259
2433571
GPR[SPVATF]-1659878662494
GPR[EPVATF]-1659878663158
GPR[SPS]-1659878663158
[428897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1320.
GPR[EPS]-1659878663754
GPR[ESUN]-1659878663754
GPR[SSUN]-1659878663754
1795686761
GPR[SPVATF]-1659878663994
GPR[EPVATF]-1659878664699
GPR[SPS]-1659878664699
GPR[EPS]-1659878678310
GPR[ESUN]-1659878678310
GPR[SSUN]-1659878678310
1795686761
GPR[SPVATF]-1659878678550
GPR[EPVATF]-1659878679256
GPR[SPS]-1659878679256
GPR[EPS]-1659878704819
GPR[ESUN]-1659878704819
GPR[SSUN]-1659878704819
1795686761
GPR[SPVATF]-1659878705103
GPR[EPVATF]-1659878705826
GPR[SPS]-1659878705826
GPR[EPS]-1659878716857
GPR[SPVATF]-1659878716857
GPR[EPVATF]-1659878717623
GPR[SPS]-1659878717623
GPR[EPS]-1659878734494
GPR[ESUN]-1659878734494
GPR[SSUN]-1659878734494
1795686761
GPR[SPVATF]-1659878734838
GPR[EPVATF]-1659878735630
GPR[SPS]-1659878735630
GPR[EPS]-1659878747747
GPR[SPVATF]-1659878747747
GPR[EPVATF]-1659878748561
GPR[SPS]-1659878748561
GPR[EPS]-1659878759446
GPR[ESUN]-1659878759446
GPR[SSUN]-1659878759446
1795686761
GPR[ESUN]-1659878759690
GPR[SSUN]-1659878759690
1795686761
GPR[SPVATF]-1659878759933
GPR[EPVATF]-1659878760747
GPR[SPS]-1659878760747
GPR[EPS]-1659878773545
GPR[ESUN]-1659878773545
GPR[SSUN]-1659878773545
1795686761
GPR[ESUN]-1659878773803
GPR[SSUN]-1659878773803
1795686761
GPR[ESUN]-1659878774035
GPR[SSUN]-1659878774035
1795686761
GPR[SPVATF]-1659878774267
GPR[EPVATF]-1659878775059
GPR[SPS]-1659878775059
[540766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:423.
GPR[EPS]-1659878775623
GPR[SPVATF]-1659878775624
GPR[EPVATF]-1659878776416
GPR[SPS]-1659878776416
GPR[EPS]-1659878790525
GPR[ESUN]-1659878790525
GPR[SSUN]-1659878790525
1795686761
GPR[ESUN]-1659878790766
GPR[SSUN]-1659878790766
1795686761
GPR[SPVATF]-1659878791051
GPR[EPVATF]-1659878791836
GPR[SPS]-1659878791836
[557563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:326.
GPR[EPS]-1659878792420
GPR[SPVATF]-1659878792420
GPR[EPVATF]-1659878793212
GPR[SPS]-1659878793212
GPR[EPS]-1659878800820
GPR[ESUN]-1659878800820
GPR[SSUN]-1659878800820
1795686761
GPR[ESUN]-1659878801056
GPR[SSUN]-1659878801056
1795686761
GPR[SPVATF]-1659878801289
GPR[EPVATF]-1659878802075
GPR[SPS]-1659878802075
GPR[EPS]-1659878821437
GPR[SPVATF]-1659878821437
GPR[EPVATF]-1659878822239
GPR[SPS]-1659878822239
GPR[EPS]-1659878847813
GPR[ESUN]-1659878847814
GPR[SSUN]-1659878847814
1795686761
GPR[SPVATF]-1659878848089
GPR[EPVATF]-1659878848907
GPR[SPS]-1659878848907
GPR[EPS]-1659878858561
GPR[ESUN]-1659878858561
GPR[SSUN]-1659878858561
1795686761
GPR[SPVATF]-1659878858891
GPR[EPVATF]-1659878859693
GPR[SPS]-1659878859693
[625414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:325.
GPR[EPS]-1659878860271
GPR[ESUN]-1659878860271
GPR[SSUN]-1659878860271
1795686761
GPR[ESUN]-1659878860508
GPR[SSUN]-1659878860508
1795686761
GPR[SPVATF]-1659878860750
GPR[EPVATF]-1659878861558
GPR[SPS]-1659878861558
[627310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:323.
GPR[EPS]-1659878862167
GPR[ESUN]-1659878862167
GPR[SSUN]-1659878862167
1795686761
GPR[ESUN]-1659878862407
GPR[SSUN]-1659878862407
1795686761
GPR[SPVATF]-1659878862652
GPR[EPVATF]-1659878863448
GPR[SPS]-1659878863448
[629049] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                v = t.getScope().getVar(n.getString());
            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(138).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("thatBlock.parent",thatBlock.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("thatBlock",thatBlock);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("thatBlock.isLoop",thatBlock.isLoop);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("thatBlock.isHoisted",thatBlock.isHoisted);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("thatBlock.isFunction",thatBlock.isFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectionEnds();
            }
            if (runtimeAngelicValue)
                for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                    if (currentBlock.isHoisted) {
                        return false;
                    }
                }

            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[629049] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659878863906
GPR[SSUN]-1659878863906
1795686761
GPR[ESUN]-1659878864151
GPR[SSUN]-1659878864151
1795686761
GPR[SPVATF]-1659878864401
GPR[EPVATF]-1659878865206
GPR[SPS]-1659878865206
[630923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:608.
GPR[EPS]-1659878865780
GPR[SPVATF]-1659878865780
GPR[EPVATF]-1659878866583
GPR[SPS]-1659878866583
[632295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:608.
GPR[EPS]-1659878867152
GPR[ESUN]-1659878867152
GPR[SSUN]-1659878867152
1795686761
GPR[ESUN]-1659878867394
GPR[SSUN]-1659878867394
1795686761
GPR[SPVATF]-1659878867632
GPR[EPVATF]-1659878868429
GPR[SPS]-1659878868429
[634154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:363.
GPR[EPS]-1659878869012
GPR[ESUN]-1659878869012
GPR[SSUN]-1659878869012
1795686761
GPR[SPVATF]-1659878869254
GPR[EPVATF]-1659878870046
GPR[SPS]-1659878870046
GPR[EPS]-1659878879673
GPR[SPVATF]-1659878879673
GPR[EPVATF]-1659878880472
GPR[SPS]-1659878880472
[646191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:396.
GPR[EPS]-1659878881048
GPR[ESUN]-1659878881048
GPR[SSUN]-1659878881048
1795686761
GPR[SPVATF]-1659878881315
GPR[EPVATF]-1659878882126
GPR[SPS]-1659878882126
[647982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:319.
GPR[EPS]-1659878882839
GPR[SPVATF]-1659878882839
CodeCache: size=245760Kb used=243229Kb max_used=243238Kb free=2530Kb
 bounds [0x00007f8db1000000, 0x00007f8dc0000000, 0x00007f8dc0000000]
 total_blobs=74898 nmethods=74395 adapters=404
 compilation: disabled (not enough contiguous free space left)
GPR[EPVATF]-1659878883755
GPR[SPS]-1659878883755
GPR[EPS]-1659878896343
GPR[ESUN]-1659878896343
GPR[SSUN]-1659878896343
1795686761
GPR[ESUN]-1659878896731
GPR[SSUN]-1659878896731
1795686761
GPR[SPVATF]-1659878897063
GPR[EPVATF]-1659878897606
GPR[SPS]-1659878897606
[663670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:312.
GPR[EPS]-1659878898527
GPR[SPVATF]-1659878898528
GPR[EPVATF]-1659878899051
GPR[SPS]-1659878899051
GPR[EPS]-1659878917301
GPR[ESUN]-1659878917301
GPR[SSUN]-1659878917301
1795686761
GPR[ESUN]-1659878917592
GPR[SSUN]-1659878917592
1795686761
GPR[ESUN]-1659878917879
GPR[SSUN]-1659878917879
1795686761
GPR[ESUN]-1659878918158
GPR[SSUN]-1659878918158
1795686761
GPR[ESUN]-1659878918435
GPR[SSUN]-1659878918435
-839544615
GPR[ESUN]-1659878918742
GPR[SSUN]-1659878918742
-839544615
GPR[SPVATF]-1659878919155
GPR[EPVATF]-1659878919675
GPR[SPS]-1659878919675
[686207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1097.
GPR[EPS]-1659878921064
GPR[ESUN]-1659878921064
GPR[SSUN]-1659878921064
-839544615
GPR[SPVATF]-1659878921346
GPR[EPVATF]-1659878921873
GPR[SPS]-1659878921873
[688322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1096.
GPR[EPS]-1659878923179
GPR[ESUN]-1659878923179
GPR[SSUN]-1659878923179
-839544615
GPR[SPVATF]-1659878923454
GPR[EPVATF]-1659878923972
GPR[SPS]-1659878923972
[690440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:571.
GPR[EPS]-1659878925297
GPR[ESUN]-1659878925297
GPR[SSUN]-1659878925297
1795686761
GPR[ESUN]-1659878925555
GPR[SSUN]-1659878925555
1795686761
GPR[SPVATF]-1659878925800
GPR[EPVATF]-1659878926320
GPR[SPS]-1659878926320
[692071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:359.
GPR[EPS]-1659878926928
GPR[SPVATF]-1659878926928
GPR[EPVATF]-1659878927443
GPR[SPS]-1659878927443
[693195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:359.
GPR[EPS]-1659878928052
GPR[ESUN]-1659878928052
GPR[SSUN]-1659878928052
1795686761
GPR[ESUN]-1659878928306
GPR[SSUN]-1659878928306
-839544615
GPR[SPVATF]-1659878928572
GPR[EPVATF]-1659878929142
GPR[SPS]-1659878929142
[695535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1057.
GPR[EPS]-1659878930392
GPR[ESUN]-1659878930392
GPR[SSUN]-1659878930392
-839544615
GPR[ESUN]-1659878930660
GPR[SSUN]-1659878930660
-554478367
GPR[ESUN]-1659878930922
GPR[SSUN]-1659878930922
-554478367
GPR[SPVATF]-1659878931193
GPR[EPVATF]-1659878931719
GPR[SPS]-1659878931719
[697527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:936.
GPR[EPS]-1659878932384
GPR[SPVATF]-1659878932385
GPR[EPVATF]-1659878932920
GPR[SPS]-1659878932920
[698665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:936.
GPR[EPS]-1659878933522
GPR[ESUN]-1659878933522
GPR[SSUN]-1659878933522
-554478367
GPR[ESUN]-1659878933785
GPR[SSUN]-1659878933785
-554478367
GPR[SPVATF]-1659878934044
GPR[EPVATF]-1659878934575
GPR[SPS]-1659878934575
[700305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:934.
GPR[EPS]-1659878935162
GPR[ESUN]-1659878935162
GPR[SSUN]-1659878935162
-554478367
GPR[SPVATF]-1659878935423
GPR[EPVATF]-1659878935984
GPR[SPS]-1659878935984
[701720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:933.
GPR[EPS]-1659878936577
GPR[ESUN]-1659878936577
GPR[SSUN]-1659878936577
-554478367
GPR[SPVATF]-1659878936854
GPR[EPVATF]-1659878937413
GPR[SPS]-1659878937413
[703139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:932.
GPR[EPS]-1659878937996
GPR[ESUN]-1659878937996
GPR[SSUN]-1659878937996
79711797
GPR[ESUN]-1659878938250
GPR[SSUN]-1659878938250
79711797
GPR[SPVATF]-1659878938497
GPR[EPVATF]-1659878939046
GPR[SPS]-1659878939046
[704780] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:544.
GPR[EPS]-1659878939637
GPR[ESUN]-1659878939637
GPR[SSUN]-1659878939637
79711797
GPR[SPVATF]-1659878939952
GPR[EPVATF]-1659878940507
GPR[SPS]-1659878940507
[706249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:543.
GPR[EPS]-1659878941106
GPR[SPVATF]-1659878941107
GPR[EPVATF]-1659878941711
GPR[SPS]-1659878941711
[707433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:543.
GPR[EPS]-1659878942290
GPR[ESUN]-1659878942290
GPR[SSUN]-1659878942290
-839544615
GPR[SPVATF]-1659878942559
GPR[EPVATF]-1659878943126
GPR[SPS]-1659878943126
[709506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1079.
GPR[EPS]-1659878944363
GPR[SPVATF]-1659878944363
GPR[EPVATF]-1659878944930
GPR[SPS]-1659878944930
[711326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1079.
GPR[EPS]-1659878946183
GPR[ESUN]-1659878946183
GPR[SSUN]-1659878946183
-839544615
GPR[SPVATF]-1659878946513
GPR[EPVATF]-1659878947099
GPR[SPS]-1659878947099
[713495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1074.
GPR[EPS]-1659878948352
GPR[SPVATF]-1659878948352
GPR[EPVATF]-1659878948945
GPR[SPS]-1659878948945
[715322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1074.
GPR[EPS]-1659878950179
GPR[ESUN]-1659878950179
GPR[SSUN]-1659878950179
-839544615
GPR[SPVATF]-1659878950440
GPR[EPVATF]-1659878951030
GPR[SPS]-1659878951030
[717484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:951.
GPR[EPS]-1659878952341
GPR[ESUN]-1659878952341
GPR[SSUN]-1659878952341
-839544615
GPR[SPVATF]-1659878952607
GPR[EPVATF]-1659878953220
GPR[SPS]-1659878953220
[719617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:950.
GPR[EPS]-1659878954474
GPR[ESUN]-1659878954474
GPR[SSUN]-1659878954474
-839544615
GPR[SPVATF]-1659878954741
GPR[EPVATF]-1659878955367
GPR[SPS]-1659878955367
GPR[EPS]-1659878971350
GPR[ESUN]-1659878971350
GPR[SSUN]-1659878971350
-554478367
GPR[ESUN]-1659878971618
GPR[SSUN]-1659878971618
-554478367
GPR[SPVATF]-1659878971883
GPR[EPVATF]-1659878972567
GPR[SPS]-1659878972567
[738282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:636.
GPR[EPS]-1659878973139
GPR[ESUN]-1659878973139
GPR[SSUN]-1659878973139
-554478367
GPR[SPVATF]-1659878973401
GPR[EPVATF]-1659878974066
GPR[SPS]-1659878974066
[739813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:630.
GPR[EPS]-1659878974670
GPR[SPVATF]-1659878974750
GPR[EPVATF]-1659878976645
GPR[SPS]-1659878976645
[742366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:630.
GPR[EPS]-1659878977223
GPR[ESUN]-1659878977223
GPR[SSUN]-1659878977223
-554478367
GPR[SPVATF]-1659878977495
GPR[EPVATF]-1659878978188
GPR[SPS]-1659878978188
[743876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:624.
GPR[EPS]-1659878978733
GPR[SPVATF]-1659878978733
GPR[EPVATF]-1659878979422
GPR[SPS]-1659878979422
[745218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:624.
GPR[EPS]-1659878980075
GPR[ESUN]-1659878980075
GPR[SSUN]-1659878980075
-554478367
GPR[ESUN]-1659878980334
GPR[SSUN]-1659878980334
-554478367
GPR[SPVATF]-1659878980589
GPR[EPVATF]-1659878981298
GPR[SPS]-1659878981298
[747005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:502.
GPR[EPS]-1659878981862
GPR[ESUN]-1659878981862
GPR[SSUN]-1659878981862
-839544615
GPR[SPVATF]-1659878982124
GPR[EPVATF]-1659878982856
GPR[SPS]-1659878982856
[749256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1068.
GPR[EPS]-1659878984113
GPR[SPVATF]-1659878984114
GPR[EPVATF]-1659878984858
GPR[SPS]-1659878984858
[751199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1068.
GPR[EPS]-1659878986056
GPR[ESUN]-1659878986056
GPR[SSUN]-1659878986056
-839544615
GPR[SPVATF]-1659878986314
GPR[EPVATF]-1659878987067
GPR[SPS]-1659878987067
[753421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1064.
GPR[EPS]-1659878988278
GPR[SPVATF]-1659878988278
GPR[EPVATF]-1659878989053
GPR[SPS]-1659878989053
[755433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1064.
GPR[EPS]-1659878990290
GPR[ESUN]-1659878990290
GPR[SSUN]-1659878990290
-839544615
GPR[SPVATF]-1659878990550
GPR[EPVATF]-1659878991343
GPR[SPS]-1659878991343
[757692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1063.
GPR[EPS]-1659878992549
GPR[ESUN]-1659878992549
GPR[SSUN]-1659878992549
-839544615
GPR[ESUN]-1659878992821
GPR[SSUN]-1659878992821
-839544615
GPR[SPVATF]-1659878993102
GPR[EPVATF]-1659878993881
GPR[SPS]-1659878993881
[760241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1055.
GPR[EPS]-1659878995098
GPR[SPVATF]-1659878995098
GPR[EPVATF]-1659878995859
GPR[SPS]-1659878995859
[762198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1055.
GPR[EPS]-1659878997055
GPR[ESUN]-1659878997055
GPR[SSUN]-1659878997055
-839544615
GPR[ESUN]-1659878997334
GPR[SSUN]-1659878997334
-839544615
GPR[ESUN]-1659878997599
GPR[SSUN]-1659878997599
-554478367
GPR[ESUN]-1659878997858
GPR[SSUN]-1659878997858
-554478367
GPR[SPVATF]-1659878998119
GPR[EPVATF]-1659878998888
GPR[SPS]-1659878998888
[764588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:505.
GPR[EPS]-1659878999445
GPR[SPVATF]-1659878999445
GPR[EPVATF]-1659879000240
GPR[SPS]-1659879000240
[765952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:505.
GPR[EPS]-1659879000809
GPR[ESUN]-1659879000809
GPR[SSUN]-1659879000809
-554478367
GPR[SPVATF]-1659879001071
GPR[EPVATF]-1659879001843
GPR[SPS]-1659879001843
[767547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:501.
GPR[EPS]-1659879002404
GPR[SPVATF]-1659879002404
GPR[EPVATF]-1659879003174
GPR[SPS]-1659879003174
[768867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:501.
GPR[EPS]-1659879003724
GPR[ESUN]-1659879003724
GPR[SSUN]-1659879003724
-554478367
GPR[ESUN]-1659879003981
GPR[SSUN]-1659879003981
-554478367
GPR[SPVATF]-1659879004270
GPR[EPVATF]-1659879005054
GPR[SPS]-1659879005054
[770760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:313.
GPR[EPS]-1659879005618
GPR[ESUN]-1659879005618
GPR[SSUN]-1659879005618
-554478367
GPR[ESUN]-1659879005880
GPR[SSUN]-1659879005880
-554478367
GPR[SPVATF]-1659879006141
GPR[EPVATF]-1659879006918
GPR[SPS]-1659879006918
[772622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:251.
GPR[EPS]-1659879007479
GPR[SPVATF]-1659879007479
GPR[EPVATF]-1659879008268
GPR[SPS]-1659879008268
[774068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:251.
GPR[EPS]-1659879008925
GPR[ESUN]-1659879008925
GPR[SSUN]-1659879008925
-554478367
GPR[ESUN]-1659879009502
GPR[SSUN]-1659879009502
-554478367
GPR[SPVATF]-1659879010191
GPR[EPVATF]-1659879011003
GPR[SPS]-1659879011003
[776759] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:189.
GPR[EPS]-1659879011616
GPR[SPVATF]-1659879011616
GPR[EPVATF]-1659879012403
GPR[SPS]-1659879012403
[778151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:189.
GPR[EPS]-1659879013008
GPR[ESUN]-1659879013008
GPR[SSUN]-1659879013008
-554478367
GPR[SPVATF]-1659879013284
GPR[EPVATF]-1659879014095
GPR[SPS]-1659879014095
GPR[EPS]-1659879018081
GPR[SPVATR]-1659879018081
[783224] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:172: PRECONDITION !(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)
[783582] INFO TestPatch - Running test suite to check the patch "!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)" is working
GPR[EPVATR]-1659879020476
[785619] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879020476
[785630] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -171,12 +171,14 @@
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
-        List<Ref> refs = Lists.newArrayList(name.getRefs());
-        for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+      if (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) {
+        if (name.globalSets == 1 && name.localSets == 0 &&
+        name.aliasingGets > 0) {
+          // {@code name} meets condition (b). Find all of its local aliases
+          // and try to inline them.
+          List<Ref> refs = Lists.newArrayList(name.getRefs());
+          for (Ref ref : refs) {
+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+              // {@code name} meets condition (c). Try to inline it.
+              if (inlineAliasIfPossible(ref, namespace)) {
+                name.removeRef(ref);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_781031_9ts_1659879020487.diff
GPR[SPVATF]-1659879020489
GPR[EPVATF]-1659879021294
GPR[SPS]-1659879021294
GPR[EPS]-1659879025258
GPR[SPVATR]-1659879025258
[790401] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:172: CONDITIONAL (((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) && (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))
[790758] INFO TestPatch - Running test suite to check the patch "(((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) && (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))" is working
GPR[EPVATR]-1659879027639
[792782] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879027639
[792786] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -171,4 +171,3 @@
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
+      if ((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) && (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes))) {
         // {@code name} meets condition (b). Find all of its local aliases

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_788187_10ts_1659879027643.diff
GPR[ESUN]-1659879027643
GPR[SSUN]-1659879027643
-554478367
GPR[SPVATF]-1659879027910
GPR[EPVATF]-1659879028704
GPR[SPS]-1659879028704
[794405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:168.
GPR[EPS]-1659879029262
GPR[SPVATF]-1659879029262
GPR[EPVATF]-1659879030058
GPR[SPS]-1659879030059
GPR[EPS]-1659879033911
GPR[SPVATR]-1659879033911
[799054] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:168: CONDITIONAL com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes
[799414] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes" is working
GPR[EPVATR]-1659879036285
[801428] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879036285
[801431] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -167,3 +167,3 @@
       // Don't attempt to inline a getter or setter property as a variable.
-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
+      if (com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) {
         continue;

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_796832_11ts_1659879036288.diff
GPR[ESUN]-1659879036289
GPR[SSUN]-1659879036289
-554478367
GPR[ESUN]-1659879036552
GPR[SSUN]-1659879036552
-554478367
GPR[ESUN]-1659879036807
GPR[SSUN]-1659879036807
-554478367
GPR[SPVATF]-1659879037066
GPR[EPVATF]-1659879037879
GPR[SPS]-1659879037880
[803601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:142.
GPR[EPS]-1659879038458
GPR[ESUN]-1659879038458
GPR[SSUN]-1659879038458
-554478367
GPR[ESUN]-1659879038719
GPR[SSUN]-1659879038719
-554478367
GPR[SPVATF]-1659879038975
GPR[EPVATF]-1659879039799
GPR[SPS]-1659879039799
[805652] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:135.
GPR[EPS]-1659879040509
GPR[ESUN]-1659879040509
GPR[SSUN]-1659879040509
-839544615
GPR[SPVATF]-1659879040778
GPR[EPVATF]-1659879041581
GPR[SPS]-1659879041581
[807974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:374.
GPR[EPS]-1659879042831
GPR[ESUN]-1659879042831
GPR[SSUN]-1659879042832
-839544615
GPR[SPVATF]-1659879043102
GPR[EPVATF]-1659879043911
GPR[SPS]-1659879043911
[810278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:373.
GPR[EPS]-1659879045135
GPR[ESUN]-1659879045135
GPR[SSUN]-1659879045135
-839544615
GPR[SPVATF]-1659879045396
GPR[EPVATF]-1659879046217
GPR[SPS]-1659879046217
[812583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:372.
GPR[EPS]-1659879047440
GPR[ESUN]-1659879047440
GPR[SSUN]-1659879047440
-554478367
GPR[ESUN]-1659879047709
GPR[SSUN]-1659879047709
-554478367
GPR[SPVATF]-1659879047971
GPR[EPVATF]-1659879048782
GPR[SPS]-1659879048782
[814488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:250.
GPR[EPS]-1659879049345
GPR[ESUN]-1659879049345
GPR[SSUN]-1659879049345
-554478367
GPR[ESUN]-1659879049610
GPR[SSUN]-1659879049610
-554478367
GPR[SPVATF]-1659879049879
GPR[EPVATF]-1659879050737
GPR[SPS]-1659879050737
GPR[EPS]-1659879054772
GPR[SPVATR]-1659879054772
[819915] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:164: PRECONDITION workList.size() <= 3
[820273] INFO TestPatch - Running test suite to check the patch "workList.size() <= 3" is working
GPR[EPVATR]-1659879057265
[822408] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879057265
[822411] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -163,20 +163,22 @@
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
-    while (!workList.isEmpty()) {
-      Name name = workList.pop();
-
-      // Don't attempt to inline a getter or setter property as a variable.
-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
-        continue;
-      }
-
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
-        List<Ref> refs = Lists.newArrayList(name.getRefs());
-        for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+    if (workList.size() <= 3) {
+      while (!workList.isEmpty()) {
+        Name name = workList.pop();
+        
+        // Don't attempt to inline a getter or setter property as a variable.
+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
+          continue;
+        }
+        
+        if (name.globalSets == 1 && name.localSets == 0 &&
+        name.aliasingGets > 0) {
+          // {@code name} meets condition (b). Find all of its local aliases
+          // and try to inline them.
+          List<Ref> refs = Lists.newArrayList(name.getRefs());
+          for (Ref ref : refs) {
+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+              // {@code name} meets condition (c). Try to inline it.
+              if (inlineAliasIfPossible(ref, namespace)) {
+                name.removeRef(ref);
+              }
             }
@@ -184,13 +186,13 @@
         }
+        
+        // Check if {@code name} has any aliases left after the
+        // local-alias-inlining above.
+        if ((name.type == Name.Type.OBJECTLIT ||
+        name.type == Name.Type.FUNCTION) &&
+        name.aliasingGets == 0 && name.props != null) {
+          // All of {@code name}'s children meet condition (a), so they can be
+          // added to the worklist.
+          workList.addAll(name.props);
+        }
       }
-
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
-      if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
-        workList.addAll(name.props);
-      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_817812_12ts_1659879057268.diff
GPR[ESUN]-1659879057268
GPR[SSUN]-1659879057268
-554478367
GPR[ESUN]-1659879057554
GPR[SSUN]-1659879057554
-554478367
GPR[ESUN]-1659879057811
GPR[SSUN]-1659879057811
-554478367
GPR[SPVATF]-1659879058089
GPR[EPVATF]-1659879058914
GPR[SPS]-1659879058914
[824629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:141.
GPR[EPS]-1659879059486
GPR[ESUN]-1659879059486
GPR[SSUN]-1659879059486
-554478367
GPR[SPVATF]-1659879059749
GPR[EPVATF]-1659879060566
GPR[SPS]-1659879060566
[826272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:134.
GPR[EPS]-1659879061130
GPR[ESUN]-1659879061130
GPR[SSUN]-1659879061130
-554478367
GPR[SPVATF]-1659879061407
GPR[EPVATF]-1659879062218
GPR[SPS]-1659879062218
[827923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:132.
GPR[EPS]-1659879062780
GPR[ESUN]-1659879062780
GPR[SSUN]-1659879062780
-554478367
GPR[SPVATF]-1659879063038
GPR[EPVATF]-1659879063845
GPR[SPS]-1659879063845
[829744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:131.
GPR[EPS]-1659879064601
GPR[ESUN]-1659879064601
GPR[SSUN]-1659879064602
-554478367
GPR[SPVATF]-1659879065764
GPR[EPVATF]-1659879067099
GPR[SPS]-1659879067099
[834568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseProperties:130.
GPR[EPS]-1659879069425
GPR[ESUN]-1659879069425
GPR[SSUN]-1659879069425
-554478367
GPR[SPVATF]-1659879070233
GPR[EPVATF]-1659879070894
GPR[SPS]-1659879070894
GPR[EPS]-1659879074865
GPR[SPVATR]-1659879074865
[840008] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:128: PRECONDITION !((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))
[840491] INFO TestPatch - Running test suite to check the patch "!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))" is working
GPR[EPVATR]-1659879077088
[842231] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879077088
[842241] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -127,3 +127,5 @@
     if (inlineAliases) {
-      inlineAliases(namespace);
+      if (!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))) {
+        inlineAliases(namespace);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_837642_13ts_1659879077098.diff
GPR[ESUN]-1659879077099
GPR[SSUN]-1659879077099
-554478367
GPR[SPVATF]-1659879077401
GPR[EPVATF]-1659879077960
GPR[SPS]-1659879077960
GPR[EPS]-1659879081455
GPR[SPVATR]-1659879081455
[846598] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:127: PRECONDITION !((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))
[847029] INFO TestPatch - Running test suite to check the patch "!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))" is working
GPR[EPVATR]-1659879083593
[848736] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879083594
[848740] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -126,4 +126,6 @@
 
-    if (inlineAliases) {
-      inlineAliases(namespace);
+    if (!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))) {
+      if (inlineAliases) {
+        inlineAliases(namespace);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_844141_14ts_1659879083597.diff
GPR[SPVATF]-1659879083598
GPR[EPVATF]-1659879084139
GPR[SPS]-1659879084139
GPR[EPS]-1659879087587
GPR[SPVATR]-1659879087587
[852730] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CollapseProperties:127: CONDITIONAL !((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))
[853133] INFO TestPatch - Running test suite to check the patch "!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))" is working
GPR[EPVATR]-1659879089726
[854870] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879089727
[854872] INFO NoPol - --- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -126,3 +126,3 @@
 
-    if (inlineAliases) {
+    if (!((com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes) || (com.google.javascript.jscomp.CollapseProperties.this.globalNames!=null))) {
       inlineAliases(namespace);

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_850273_15ts_1659879089729.diff
GPR[ESUN]-1659879089730
GPR[SSUN]-1659879089730
-554478367
GPR[SPVATF]-1659879090007
GPR[EPVATF]-1659879090552
GPR[SPS]-1659879090552
[856165] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CollapseProperties implements com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNSAFE_NAMESPACE_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNSAFE_NAMESPACE", "incomplete alias created for namespace {0}");

    static final com.google.javascript.jscomp.DiagnosticType NAMESPACE_REDEFINED_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NAMESPACE_REDEFINED", "namespace {0} should not be redefined");

    static final com.google.javascript.jscomp.DiagnosticType UNSAFE_THIS = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNSAFE_THIS", "dangerous use of 'this' in static method {0}");

    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> globalNames;

    private java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> nameMap;

    private final boolean collapsePropertiesOnExternTypes;

    private final boolean inlineAliases;

    CollapseProperties(com.google.javascript.jscomp.AbstractCompiler compiler, boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
        this.compiler = compiler;
        this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
        this.inlineAliases = inlineAliases;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.GlobalNamespace namespace;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(210).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes",com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING",com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.this.globalNames",com.google.javascript.jscomp.CollapseProperties.this.globalNames);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.this.compiler",com.google.javascript.jscomp.CollapseProperties.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING",com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS",com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.this.nameMap",com.google.javascript.jscomp.CollapseProperties.this.nameMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.CollapseProperties.this.inlineAliases",com.google.javascript.jscomp.CollapseProperties.this.inlineAliases);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionEnds();
        }
        if (runtimeAngelicValue) if (collapsePropertiesOnExternTypes) {
            namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, externs, root);
        } else {
            namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, root);
        }
        if (inlineAliases) {
            inlineAliases(namespace);
        }
        nameMap = namespace.getNameIndex();
        globalNames = namespace.getNameForest();
        checkNamespaces();
        for (com.google.javascript.jscomp.GlobalNamespace.Name n : globalNames) {
            flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Name n : globalNames) {
            collapseDeclarationOfNameAndDescendants(n, n.getBaseName());
        }
    }

    private void inlineAliases(com.google.javascript.jscomp.GlobalNamespace namespace) {
        java.util.Deque<com.google.javascript.jscomp.GlobalNamespace.Name> workList = new java.util.ArrayDeque<com.google.javascript.jscomp.GlobalNamespace.Name>(namespace.getNameForest());
        while (!workList.isEmpty()) {
            com.google.javascript.jscomp.GlobalNamespace.Name name = workList.pop();
            if ((name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET) || (name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET)) {
                continue;
            }
            if (((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) {
                java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> refs = com.google.common.collect.Lists.newArrayList(name.getRefs());
                for (com.google.javascript.jscomp.GlobalNamespace.Ref ref : refs) {
                    if ((ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) && ref.scope.isLocal()) {
                        if (inlineAliasIfPossible(ref, namespace)) {
                            name.removeRef(ref);
                        }
                    }
                }
            }
            if ((((name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT) || (name.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION)) && (name.aliasingGets == 0)) && (name.props != null)) {
                workList.addAll(name.props);
            }
        } 
    }

    private boolean inlineAliasIfPossible(com.google.javascript.jscomp.GlobalNamespace.Ref alias, com.google.javascript.jscomp.GlobalNamespace namespace) {
        com.google.javascript.rhino.Node aliasParent = alias.node.getParent();
        if (aliasParent.isName()) {
            com.google.javascript.jscomp.Scope scope = alias.scope;
            com.google.javascript.jscomp.Scope.Var aliasVar = scope.getVar(aliasParent.getString());
            com.google.javascript.jscomp.ReferenceCollectingCallback collector = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>equalTo(aliasVar));
            new com.google.javascript.jscomp.NodeTraversal(compiler, collector).traverseAtScope(scope);
            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
            if ((aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration()) && aliasRefs.isAssignedOnceInLifetime()) {
                int size = aliasRefs.references.size();
                java.util.Set<com.google.javascript.rhino.Node> newNodes = com.google.common.collect.Sets.newHashSetWithExpectedSize(size - 1);
                for (int i = 1; i < size; i++) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i);
                    com.google.javascript.rhino.Node newNode = alias.node.cloneTree();
                    aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
                    newNodes.add(newNode);
                }
                aliasParent.replaceChild(alias.node, com.google.javascript.rhino.IR.nullNode());
                compiler.reportCodeChange();
                namespace.scanNewNodes(alias.scope, newNodes);
                return true;
            }
        }
        return false;
    }

    private void checkNamespaces() {
        for (com.google.javascript.jscomp.GlobalNamespace.Name name : nameMap.values()) {
            if (name.isNamespace() && (((name.aliasingGets > 0) || ((name.localSets + name.globalSets) > 1)) || (name.deleteProps > 0))) {
                boolean initialized = name.getDeclaration() != null;
                for (com.google.javascript.jscomp.GlobalNamespace.Ref ref : name.getRefs()) {
                    if (ref == name.getDeclaration()) {
                        continue;
                    }
                    if (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP) {
                        if (initialized) {
                            warnAboutNamespaceRedefinition(name, ref);
                        }
                    } else if ((ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)) {
                        if (initialized) {
                            warnAboutNamespaceRedefinition(name, ref);
                        }
                        initialized = true;
                    } else if (ref.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) {
                        warnAboutNamespaceAliasing(name, ref);
                    }
                }
            }
        }
    }

    private void warnAboutNamespaceAliasing(com.google.javascript.jscomp.GlobalNamespace.Name nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        compiler.report(com.google.javascript.jscomp.JSError.make(ref.getSourceName(), ref.node, com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));
    }

    private void warnAboutNamespaceRedefinition(com.google.javascript.jscomp.GlobalNamespace.Name nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        compiler.report(com.google.javascript.jscomp.JSError.make(ref.getSourceName(), ref.node, com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));
    }

    private void flattenReferencesToCollapsibleDescendantNames(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        if (n.props == null) {
            return;
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
            java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName());
            if (p.canCollapse()) {
                flattenReferencesTo(p, propAlias);
            } else if (p.isSimpleStubDeclaration()) {
                flattenSimpleStubDeclaration(p, propAlias);
            }
            flattenReferencesToCollapsibleDescendantNames(p, propAlias);
        }
    }

    private void flattenSimpleStubDeclaration(com.google.javascript.jscomp.GlobalNamespace.Name name, java.lang.String alias) {
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = com.google.common.collect.Iterables.getOnlyElement(name.getRefs());
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node, name.getFullName());
        com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode).copyInformationFrom(nameNode);
        com.google.common.base.Preconditions.checkState(ref.node.getParent().isExprResult());
        com.google.javascript.rhino.Node parent = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        gramps.replaceChild(parent, varNode);
        compiler.reportCodeChange();
    }

    private void flattenReferencesTo(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        java.lang.String originalName = n.getFullName();
        for (com.google.javascript.jscomp.GlobalNamespace.Ref r : n.getRefs()) {
            if (r == n.getDeclaration()) {
                continue;
            }
            com.google.javascript.rhino.Node rParent = r.node.getParent();
            if ((!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(r.node)) && ((r.getTwin() == null) || r.isSet())) {
                flattenNameRef(alias, r.node, rParent, originalName);
            }
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                flattenPrefixes(alias, p, 1);
            }
        }
    }

    private void flattenPrefixes(java.lang.String alias, com.google.javascript.jscomp.GlobalNamespace.Name n, int depth) {
        java.lang.String originalName = n.getFullName();
        com.google.javascript.jscomp.GlobalNamespace.Ref decl = n.getDeclaration();
        if (((decl != null) && (decl.node != null)) && decl.node.isGetProp()) {
            flattenNameRefAtDepth(alias, decl.node, depth, originalName);
        }
        for (com.google.javascript.jscomp.GlobalNamespace.Ref r : n.getRefs()) {
            if (r == decl) {
                continue;
            }
            if ((r.getTwin() == null) || r.isSet()) {
                flattenNameRefAtDepth(alias, r.node, depth, originalName);
            }
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                flattenPrefixes(alias, p, depth + 1);
            }
        }
    }

    private void flattenNameRefAtDepth(java.lang.String alias, com.google.javascript.rhino.Node n, int depth, java.lang.String originalName) {
        int nType = n.getType();
        boolean isQName = (nType == com.google.javascript.rhino.Token.NAME) || (nType == com.google.javascript.rhino.Token.GETPROP);
        boolean isObjKey = com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n);
        com.google.common.base.Preconditions.checkState(isObjKey || isQName);
        if (isQName) {
            for (int i = 1; (i < depth) && n.hasChildren(); i++) {
                n = n.getFirstChild();
            }
            if (n.hasChildren()) {
                flattenNameRef(alias, n.getFirstChild(), n, originalName);
            }
        }
    }

    private void flattenNameRef(java.lang.String alias, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String originalName) {
        com.google.javascript.rhino.Node ref = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, n, originalName);
        com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
        if (parent.isCall() && (n == parent.getFirstChild())) {
            parent.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type != null) {
            ref.setJSType(type);
        }
        parent.replaceChild(n, ref);
        compiler.reportCodeChange();
    }

    private void collapseDeclarationOfNameAndDescendants(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias) {
        boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
        if (n.canCollapse()) {
            updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
        }
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                collapseDeclarationOfNameAndDescendants(p, com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName()));
                if (((((((!p.inExterns) && canCollapseChildNames) && (p.getDeclaration() != null)) && p.canCollapse()) && (p.getDeclaration().node != null)) && (p.getDeclaration().node.getParent() != null)) && p.getDeclaration().node.getParent().isAssign()) {
                    updateSimpleDeclaration(com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());
                }
            }
        }
    }

    private void updateSimpleDeclaration(java.lang.String alias, com.google.javascript.jscomp.GlobalNamespace.Name refName, com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
        com.google.javascript.rhino.Node rvalue = ref.node.getNext();
        com.google.javascript.rhino.Node parent = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node greatGramps = gramps.getParent();
        if ((rvalue != null) && rvalue.isFunction()) {
            checkForHosedThisReferences(rvalue, refName.docInfo, refName);
        }
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getFullName());
        com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
        if (gramps.isExprResult()) {
            parent.removeChild(rvalue);
            nameNode.addChildToFront(rvalue);
            com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode);
            greatGramps.replaceChild(gramps, varNode);
        } else {
            com.google.common.base.Preconditions.checkNotNull(ref.getTwin());
            com.google.javascript.rhino.Node current = gramps;
            com.google.javascript.rhino.Node currentParent = gramps.getParent();
            for (; (!currentParent.isScript()) && (!currentParent.isBlock()); current = currentParent , currentParent = currentParent.getParent()) {
            }
            com.google.javascript.rhino.Node stubVar = com.google.javascript.rhino.IR.var(nameNode.cloneTree()).copyInformationFrom(nameNode);
            currentParent.addChildBefore(stubVar, current);
            parent.replaceChild(ref.node, nameNode);
        }
        compiler.reportCodeChange();
    }

    private void updateObjLitOrFunctionDeclaration(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, boolean canCollapseChildNames) {
        com.google.javascript.jscomp.GlobalNamespace.Ref decl = n.getDeclaration();
        if (decl == null) {
            return;
        }
        if (decl.getTwin() != null) {
            return;
        }
        switch (decl.node.getParent().getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                updateObjLitOrFunctionDeclarationAtAssignNode(n, alias, canCollapseChildNames);
                break;
            case com.google.javascript.rhino.Token.VAR :
                updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
                break;
        }
    }

    private void updateObjLitOrFunctionDeclarationAtAssignNode(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, boolean canCollapseChildNames) {
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        com.google.javascript.rhino.Node rvalue = ref.node.getNext();
        com.google.javascript.rhino.Node varNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR);
        com.google.javascript.rhino.Node varParent = ref.node.getAncestor(3);
        com.google.javascript.rhino.Node gramps = ref.node.getAncestor(2);
        boolean isObjLit = rvalue.isObjectLit();
        boolean insertedVarNode = false;
        if (isObjLit && n.canEliminate()) {
            varParent.replaceChild(gramps, varNode);
            ref.node = null;
            insertedVarNode = true;
        } else if (!n.isSimpleName()) {
            if (rvalue.isFunction()) {
                checkForHosedThisReferences(rvalue, n.docInfo, n);
            }
            ref.node.getParent().removeChild(rvalue);
            com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node.getAncestor(2), n.getFullName());
            com.google.javascript.rhino.JSDocInfo info = ref.node.getParent().getJSDocInfo();
            if (ref.node.getLastChild().getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME) || ((info != null) && info.isConstant())) {
                nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            if (info != null) {
                varNode.setJSDocInfo(info);
            }
            varNode.addChildToBack(nameNode);
            nameNode.addChildToFront(rvalue);
            varParent.replaceChild(gramps, varNode);
            ref.node = nameNode;
            insertedVarNode = true;
        }
        if (canCollapseChildNames) {
            if (isObjLit) {
                declareVarsForObjLitValues(n, alias, rvalue, varNode, varParent.getChildBefore(varNode), varParent);
            }
            addStubsForUndeclaredProperties(n, alias, varParent, varNode);
        }
        if (insertedVarNode) {
            if (!varNode.hasChildren()) {
                varParent.removeChild(varNode);
            }
            compiler.reportCodeChange();
        }
    }

    private void checkForHosedThisReferences(com.google.javascript.rhino.Node function, com.google.javascript.rhino.JSDocInfo docInfo, final com.google.javascript.jscomp.GlobalNamespace.Name name) {
        if ((docInfo == null) || ((!docInfo.isConstructor()) && (!docInfo.hasThisType()))) {
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, function.getLastChild(), new com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback() {
                @java.lang.Override
                public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                    if (n.isThis()) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(name.getDeclaration().getSourceName(), n, com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS, name.getFullName()));
                    }
                }
            });
        }
    }

    private void updateObjLitOrFunctionDeclarationAtVarNode(com.google.javascript.jscomp.GlobalNamespace.Name n, boolean canCollapseChildNames) {
        if (!canCollapseChildNames) {
            return;
        }
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        java.lang.String name = ref.node.getString();
        com.google.javascript.rhino.Node rvalue = ref.node.getFirstChild();
        com.google.javascript.rhino.Node varNode = ref.node.getParent();
        com.google.javascript.rhino.Node gramps = varNode.getParent();
        boolean isObjLit = rvalue.isObjectLit();
        int numChanges = 0;
        if (isObjLit) {
            numChanges += declareVarsForObjLitValues(n, name, rvalue, varNode, gramps.getChildBefore(varNode), gramps);
        }
        numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);
        if (isObjLit && n.canEliminate()) {
            varNode.removeChild(ref.node);
            if (!varNode.hasChildren()) {
                gramps.removeChild(varNode);
            }
            numChanges++;
            ref.node = null;
        }
        if (numChanges > 0) {
            compiler.reportCodeChange();
        }
    }

    private void updateFunctionDeclarationAtFunctionNode(com.google.javascript.jscomp.GlobalNamespace.Name n, boolean canCollapseChildNames) {
        if (!canCollapseChildNames) {
            return;
        }
        com.google.javascript.jscomp.GlobalNamespace.Ref ref = n.getDeclaration();
        java.lang.String fnName = ref.node.getString();
        addStubsForUndeclaredProperties(n, fnName, ref.node.getAncestor(2), ref.node.getParent());
    }

    private int declareVarsForObjLitValues(com.google.javascript.jscomp.GlobalNamespace.Name objlitName, java.lang.String alias, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.Node varNode, com.google.javascript.rhino.Node nameToAddAfter, com.google.javascript.rhino.Node varParent) {
        int numVars = 0;
        int arbitraryNameCounter = 0;
        boolean discardKeys = !objlitName.shouldKeepKeys();
        for (com.google.javascript.rhino.Node key = objlit.getFirstChild(), nextKey; key != null; key = nextKey) {
            com.google.javascript.rhino.Node value = key.getFirstChild();
            nextKey = key.getNext();
            if (key.isGetterDef() || key.isSetterDef()) {
                continue;
            }
            boolean isJsIdentifier = (!key.isNumber()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key.getString());
            java.lang.String propName = (isJsIdentifier) ? key.getString() : java.lang.String.valueOf(++arbitraryNameCounter);
            java.lang.String qName = (objlitName.getFullName() + '.') + propName;
            com.google.javascript.jscomp.GlobalNamespace.Name p = nameMap.get(qName);
            if ((p != null) && (!p.canCollapse())) {
                continue;
            }
            java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, propName);
            com.google.javascript.rhino.Node refNode = null;
            if (discardKeys) {
                objlit.removeChild(key);
                value.detachFromParent();
            } else {
                refNode = com.google.javascript.rhino.IR.name(propAlias);
                if (key.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                    refNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
                }
                key.replaceChild(value, refNode);
            }
            com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(propAlias);
            nameNode.addChildToFront(value);
            if (key.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            com.google.javascript.rhino.Node newVar = com.google.javascript.rhino.IR.var(nameNode).copyInformationFromForTree(key);
            if (nameToAddAfter != null) {
                varParent.addChildAfter(newVar, nameToAddAfter);
            } else {
                varParent.addChildBefore(newVar, varNode);
            }
            compiler.reportCodeChange();
            nameToAddAfter = newVar;
            if (isJsIdentifier && (p != null)) {
                if (!discardKeys) {
                    com.google.javascript.jscomp.GlobalNamespace.Ref newAlias = p.getDeclaration().cloneAndReclassify(com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET);
                    newAlias.node = refNode;
                    p.addRef(newAlias);
                }
                p.getDeclaration().node = nameNode;
                if (value.isFunction()) {
                    checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                }
            }
            numVars++;
        }
        return numVars;
    }

    private int addStubsForUndeclaredProperties(com.google.javascript.jscomp.GlobalNamespace.Name n, java.lang.String alias, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node addAfter) {
        com.google.common.base.Preconditions.checkState(n.canCollapseUnannotatedChildNames());
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent));
        com.google.common.base.Preconditions.checkNotNull(addAfter);
        int numStubs = 0;
        if (n.props != null) {
            for (com.google.javascript.jscomp.GlobalNamespace.Name p : n.props) {
                if (p.needsToBeStubbed()) {
                    java.lang.String propAlias = com.google.javascript.jscomp.CollapseProperties.appendPropForAlias(alias, p.getBaseName());
                    com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(propAlias);
                    com.google.javascript.rhino.Node newVar = com.google.javascript.rhino.IR.var(nameNode).copyInformationFromForTree(addAfter);
                    parent.addChildAfter(newVar, addAfter);
                    addAfter = newVar;
                    numStubs++;
                    compiler.reportCodeChange();
                    if (p.getRefs().get(0).node.getLastChild().getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
                        nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
                    }
                }
            }
        }
        return numStubs;
    }

    private static java.lang.String appendPropForAlias(java.lang.String root, java.lang.String prop) {
        if (prop.indexOf('$') != (-1)) {
            prop = prop.replace("$", "$0");
        }
        return (root + '$') + prop;
    }
}
[856165] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659879091023
GPR[EPVATF]-1659879091664
GPR[SPS]-1659879091664
GPR[EPS]-1659879107983
GPR[ESUN]-1659879107983
GPR[SSUN]-1659879107983
1795686761
GPR[ESUN]-1659879108363
GPR[SSUN]-1659879108364
-839544615
GPR[ESUN]-1659879108671
GPR[SSUN]-1659879108671
1795686761
GPR[ESUN]-1659879108935
GPR[SSUN]-1659879108935
1795686761
GPR[ESUN]-1659879109202
GPR[SSUN]-1659879109202
1795686761
GPR[ESUN]-1659879109463
GPR[SSUN]-1659879109463
1795686761
GPR[SPVATF]-1659879109726
GPR[EPVATF]-1659879110304
GPR[SPS]-1659879110304
[876116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:187.
GPR[EPS]-1659879110973
GPR[ESUN]-1659879110973
GPR[SSUN]-1659879110973
1331276989
GPR[SPVATF]-1659879111207
GPR[EPVATF]-1659879111776
GPR[SPS]-1659879111776
[877482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:357.
GPR[EPS]-1659879112339
GPR[ESUN]-1659879112339
GPR[SSUN]-1659879112339
1795686761
GPR[ESUN]-1659879112598
GPR[SSUN]-1659879112598
1331276989
GPR[ESUN]-1659879112818
GPR[SSUN]-1659879112818
1331276989
GPR[ESUN]-1659879113039
GPR[SSUN]-1659879113039
1331276989
GPR[SPVATF]-1659879113259
GPR[EPVATF]-1659879113845
GPR[SPS]-1659879113845
[879574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:368.
GPR[EPS]-1659879114431
GPR[ESUN]-1659879114431
GPR[SSUN]-1659879114431
1331276989
GPR[SPVATF]-1659879114685
GPR[EPVATF]-1659879115280
GPR[SPS]-1659879115280
[880997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:366.
GPR[EPS]-1659879115854
GPR[ESUN]-1659879115854
GPR[SSUN]-1659879115854
1331276989
GPR[SPVATF]-1659879116073
GPR[EPVATF]-1659879116686
GPR[SPS]-1659879116686
[882375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:365.
GPR[EPS]-1659879117232
GPR[ESUN]-1659879117233
GPR[SSUN]-1659879117233
1331276989
GPR[ESUN]-1659879117449
GPR[SSUN]-1659879117449
1331276989
GPR[ESUN]-1659879117666
GPR[SSUN]-1659879117666
1331276989
GPR[SPVATF]-1659879117883
GPR[EPVATF]-1659879118494
GPR[SPS]-1659879118494
[884197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:361.
GPR[EPS]-1659879119054
GPR[ESUN]-1659879119054
GPR[SSUN]-1659879119054
1331276989
GPR[SPVATF]-1659879119276
GPR[EPVATF]-1659879119899
GPR[SPS]-1659879119899
[885587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:360.
GPR[EPS]-1659879120444
GPR[ESUN]-1659879120444
GPR[SSUN]-1659879120444
1331276989
GPR[SPVATF]-1659879120662
GPR[EPVATF]-1659879121292
GPR[SPS]-1659879121292
[886986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:359.
GPR[EPS]-1659879121843
GPR[ESUN]-1659879121843
GPR[SSUN]-1659879121843
1331276989
GPR[SPVATF]-1659879122060
GPR[EPVATF]-1659879122706
GPR[SPS]-1659879122706
[888409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659879123266
GPR[SPVATF]-1659879123266
GPR[EPVATF]-1659879123924
GPR[SPS]-1659879123924
[889603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659879124460
GPR[ESUN]-1659879124460
GPR[SSUN]-1659879124460
1331276989
GPR[SPVATF]-1659879124731
GPR[EPVATF]-1659879125449
GPR[SPS]-1659879125449
[891126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:353.
GPR[EPS]-1659879125983
GPR[SPVATF]-1659879125983
GPR[EPVATF]-1659879126726
GPR[SPS]-1659879126726
[892403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:353.
GPR[EPS]-1659879127260
GPR[ESUN]-1659879127260
GPR[SSUN]-1659879127260
1331276989
GPR[ESUN]-1659879127480
GPR[SSUN]-1659879127480
1795686761
GPR[ESUN]-1659879127752
GPR[SSUN]-1659879127752
-839544615
GPR[SPVATF]-1659879128033
GPR[EPVATF]-1659879128775
GPR[SPS]-1659879128775
[895229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:371.
GPR[EPS]-1659879130086
GPR[ESUN]-1659879130086
GPR[SSUN]-1659879130086
-839544615
GPR[ESUN]-1659879130363
GPR[SSUN]-1659879130363
-718432441
GPR[SPVATF]-1659879130609
GPR[EPVATF]-1659879131332
GPR[SPS]-1659879131332
[897188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:460.
GPR[EPS]-1659879132045
GPR[ESUN]-1659879132045
GPR[SSUN]-1659879132045
-718432441
GPR[SPVATF]-1659879132292
GPR[EPVATF]-1659879133089
GPR[SPS]-1659879133089
[898938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:459.
GPR[EPS]-1659879133795
GPR[ESUN]-1659879133795
GPR[SSUN]-1659879133795
-839544615
GPR[ESUN]-1659879134075
GPR[SSUN]-1659879134075
-839544615
GPR[SPVATF]-1659879134342
GPR[EPVATF]-1659879135086
GPR[SPS]-1659879135086
GPR[EPS]-1659879145099
GPR[SPVATR]-1659879145099
[910242] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:680: PRECONDITION ((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2) || ((com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))) && (com.google.javascript.jscomp.GlobalNamespace.this.nameMap!=null)
[911279] INFO TestPatch - Running test suite to check the patch "((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2) || ((com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))) && (com.google.javascript.jscomp.GlobalNamespace.this.nameMap!=null)" is working
GPR[EPVATR]-1659879148672
[913815] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879148672
[913819] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -679,3 +679,5 @@
 
-      handleGet(t, n, parent, name, type);
+      if (((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2) || ((com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))) && (com.google.javascript.jscomp.GlobalNamespace.this.nameMap!=null)) {
+        handleGet(t, n, parent, name, type);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_909220_16ts_1659879148676.diff
GPR[ESUN]-1659879148677
GPR[SSUN]-1659879148677
-839544615
GPR[SPVATF]-1659879149053
GPR[EPVATF]-1659879149881
GPR[SPS]-1659879149881
GPR[EPS]-1659879156421
GPR[SPVATR]-1659879156421
[921564] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:636: PRECONDITION (name.length() <= 1) || ((!(com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() == com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size())) && (com.google.javascript.jscomp.GlobalNamespace.this.compiler!=null))
[922599] INFO TestPatch - Running test suite to check the patch "(name.length() <= 1) || ((!(com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() == com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size())) && (com.google.javascript.jscomp.GlobalNamespace.this.compiler!=null))" is working
GPR[EPVATR]-1659879160075
[925218] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879160075
[925222] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -635,23 +635,24 @@
       if (parent != null) {
-        switch (parent.getType()) {
-          case Token.IF:
-          case Token.TYPEOF:
-          case Token.VOID:
-          case Token.NOT:
-          case Token.BITNOT:
-          case Token.POS:
-          case Token.NEG:
+        if ((name.length() <= 1) || ((!(com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() == com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size())) && (com.google.javascript.jscomp.GlobalNamespace.this.compiler!=null))) {
+          switch (parent.getType()) {
+            case Token.IF:
+            case Token.TYPEOF:
+            case Token.VOID:
+            case Token.NOT:
+            case Token.BITNOT:
+            case Token.POS:
+            case Token.NEG:
             break;
-          case Token.CALL:
+            case Token.CALL:
             type = n == parent.getFirstChild()
-                   ? Ref.Type.CALL_GET
-                   : Ref.Type.ALIASING_GET;
+            ? Ref.Type.CALL_GET
+            : Ref.Type.ALIASING_GET;
             break;
-          case Token.NEW:
+            case Token.NEW:
             type = n == parent.getFirstChild()
-                   ? Ref.Type.DIRECT_GET
-                   : Ref.Type.ALIASING_GET;
+            ? Ref.Type.DIRECT_GET
+            : Ref.Type.ALIASING_GET;
             break;
-          case Token.OR:
-          case Token.AND:
+            case Token.OR:
+            case Token.AND:
             // This node is x or y in (x||y) or (x&&y). We only know that an
@@ -662,3 +663,3 @@
             break;
-          case Token.HOOK:
+            case Token.HOOK:
             if (n != parent.getFirstChild()) {
@@ -670,8 +671,9 @@
             break;
-          case Token.DELPROP:
+            case Token.DELPROP:
             type = Ref.Type.DELETE_PROP;
             break;
-          default:
+            default:
             type = Ref.Type.ALIASING_GET;
             break;
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_920623_17ts_1659879160079.diff
GPR[ESUN]-1659879160080
GPR[SSUN]-1659879160080
-839544615
GPR[SPVATF]-1659879160459
GPR[EPVATF]-1659879161283
GPR[SPS]-1659879161283
GPR[EPS]-1659879167338
GPR[SPVATR]-1659879167338
[932481] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:635: PRECONDITION ((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))
[933626] INFO TestPatch - Running test suite to check the patch "((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))" is working
GPR[EPVATR]-1659879171095
[936238] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879171096
[936243] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -634,24 +634,25 @@
       Ref.Type type = Ref.Type.DIRECT_GET;
-      if (parent != null) {
-        switch (parent.getType()) {
-          case Token.IF:
-          case Token.TYPEOF:
-          case Token.VOID:
-          case Token.NOT:
-          case Token.BITNOT:
-          case Token.POS:
-          case Token.NEG:
+      if (((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))) {
+        if (parent != null) {
+          switch (parent.getType()) {
+            case Token.IF:
+            case Token.TYPEOF:
+            case Token.VOID:
+            case Token.NOT:
+            case Token.BITNOT:
+            case Token.POS:
+            case Token.NEG:
             break;
-          case Token.CALL:
+            case Token.CALL:
             type = n == parent.getFirstChild()
-                   ? Ref.Type.CALL_GET
-                   : Ref.Type.ALIASING_GET;
+            ? Ref.Type.CALL_GET
+            : Ref.Type.ALIASING_GET;
             break;
-          case Token.NEW:
+            case Token.NEW:
             type = n == parent.getFirstChild()
-                   ? Ref.Type.DIRECT_GET
-                   : Ref.Type.ALIASING_GET;
+            ? Ref.Type.DIRECT_GET
+            : Ref.Type.ALIASING_GET;
             break;
-          case Token.OR:
-          case Token.AND:
+            case Token.OR:
+            case Token.AND:
             // This node is x or y in (x||y) or (x&&y). We only know that an
@@ -662,3 +663,3 @@
             break;
-          case Token.HOOK:
+            case Token.HOOK:
             if (n != parent.getFirstChild()) {
@@ -670,8 +671,9 @@
             break;
-          case Token.DELPROP:
+            case Token.DELPROP:
             type = Ref.Type.DELETE_PROP;
             break;
-          default:
+            default:
             type = Ref.Type.ALIASING_GET;
             break;
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_931644_18ts_1659879171100.diff
GPR[SPVATF]-1659879171101
GPR[EPVATF]-1659879171926
GPR[SPS]-1659879171926
GPR[EPS]-1659879178337
GPR[SPVATR]-1659879178337
[943480] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:635: CONDITIONAL ((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))
[944519] INFO TestPatch - Running test suite to check the patch "((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))" is working
GPR[EPVATR]-1659879181959
[947102] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659879181960
[947106] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -634,3 +634,3 @@
       Ref.Type type = Ref.Type.DIRECT_GET;
-      if (parent != null) {
+      if (((com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size()) != (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || ((name.length() <= 2) && (parent != null))) {
         switch (parent.getType()) {
@@ -643,35 +643,35 @@
           case Token.NEG:
-            break;
+          break;
           case Token.CALL:
-            type = n == parent.getFirstChild()
-                   ? Ref.Type.CALL_GET
-                   : Ref.Type.ALIASING_GET;
-            break;
+          type = n == parent.getFirstChild()
+          ? Ref.Type.CALL_GET
+          : Ref.Type.ALIASING_GET;
+          break;
           case Token.NEW:
-            type = n == parent.getFirstChild()
-                   ? Ref.Type.DIRECT_GET
-                   : Ref.Type.ALIASING_GET;
-            break;
+          type = n == parent.getFirstChild()
+          ? Ref.Type.DIRECT_GET
+          : Ref.Type.ALIASING_GET;
+          break;
           case Token.OR:
           case Token.AND:
-            // This node is x or y in (x||y) or (x&&y). We only know that an
-            // alias is not getting created for this name if the result is used
-            // in a boolean context or assigned to the same name
-            // (e.g. var a = a || {}).
-            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
-            break;
+          // This node is x or y in (x||y) or (x&&y). We only know that an
+          // alias is not getting created for this name if the result is used
+          // in a boolean context or assigned to the same name
+          // (e.g. var a = a || {}).
+          type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
+          break;
           case Token.HOOK:
-            if (n != parent.getFirstChild()) {
-              // This node is y or z in (x?y:z). We only know that an alias is
-              // not getting created for this name if the result is assigned to
-              // the same name (e.g. var a = a ? a : {}).
-              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
-            }
-            break;
+          if (n != parent.getFirstChild()) {
+            // This node is y or z in (x?y:z). We only know that an alias is
+            // not getting created for this name if the result is assigned to
+            // the same name (e.g. var a = a ? a : {}).
+            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
+          }
+          break;
           case Token.DELPROP:
-            type = Ref.Type.DELETE_PROP;
-            break;
+          type = Ref.Type.DELETE_PROP;
+          break;
           default:
-            type = Ref.Type.ALIASING_GET;
-            break;
+          type = Ref.Type.ALIASING_GET;
+          break;
         }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_942507_19ts_1659879181963.diff
GPR[ESUN]-1659879181964
GPR[SSUN]-1659879181964
-839544615
GPR[ESUN]-1659879182289
GPR[SSUN]-1659879182289
-1345859678
GPR[SPVATF]-1659879182563
GPR[EPVATF]-1659879183404
GPR[SPS]-1659879183404
GPR[EPS]-1659880831597
GPR[ESUN]-1659880831597
GPR[SSUN]-1659880831597
GPR[ESUN]-1659880831597
GPR[SSUN]-1659880831597
GPR[ESUN]-1659880831597
GPR[SSUN]-1659880831597
GPR[ESUN]-1659880831597
GPR[SSUN]-1659880831597
-839544615
GPR[SPVATF]-1659880832038
GPR[EPVATF]-1659880832876
GPR[SPS]-1659880832876
[2599322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:426.
GPR[EPS]-1659880834179
GPR[ESUN]-1659880834179
GPR[SSUN]-1659880834179
1795686761
GPR[ESUN]-1659880834440
GPR[SSUN]-1659880834440
1795686761
GPR[SPVATF]-1659880834691
GPR[EPVATF]-1659880835544
GPR[SPS]-1659880835544
GPR[EPS]-1659880861813
GPR[ESUN]-1659880861813
GPR[SSUN]-1659880861813
1795686761
GPR[SPVATF]-1659880862071
GPR[EPVATF]-1659880862902
GPR[SPS]-1659880862902
[2628695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:244.
GPR[EPS]-1659880863553
GPR[ESUN]-1659880863553
GPR[SSUN]-1659880863553
1795686761
GPR[SPVATF]-1659880863810
GPR[EPVATF]-1659880864643
GPR[SPS]-1659880864643
[2630411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:243.
GPR[EPS]-1659880865268
GPR[ESUN]-1659880865268
GPR[SSUN]-1659880865268
1795686761
GPR[SPVATF]-1659880865523
GPR[EPVATF]-1659880866383
GPR[SPS]-1659880866383
[2632148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:242.
GPR[EPS]-1659880867005
GPR[SPVATF]-1659880867005
GPR[EPVATF]-1659880867870
GPR[SPS]-1659880867870
GPR[EPS]-1659880916782
GPR[ESUN]-1659880916782
GPR[SSUN]-1659880916782
1795686761
GPR[ESUN]-1659880917268
GPR[SSUN]-1659880917268
1795686761
GPR[SPVATF]-1659880917624
GPR[EPVATF]-1659880918240
GPR[SPS]-1659880918240
[2684550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:157.
GPR[EPS]-1659880919407
GPR[ESUN]-1659880919407
GPR[SSUN]-1659880919407
1795686761
GPR[ESUN]-1659880919714
GPR[SSUN]-1659880919714
1795686761
GPR[SPVATF]-1659880920020
GPR[EPVATF]-1659880920582
GPR[SPS]-1659880920582
GPR[EPS]-1659880932125
GPR[ESUN]-1659880932125
GPR[SSUN]-1659880932125
1795686761
GPR[ESUN]-1659880932404
GPR[SSUN]-1659880932404
1795686761
GPR[SPVATF]-1659880932684
GPR[EPVATF]-1659880933281
GPR[SPS]-1659880933281
[2699214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:209.
GPR[EPS]-1659880934071
GPR[ESUN]-1659880934071
GPR[SSUN]-1659880934071
1795686761
GPR[SPVATF]-1659880934340
GPR[EPVATF]-1659880934941
GPR[SPS]-1659880934941
[2700827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:208.
GPR[EPS]-1659880935684
GPR[SPVATF]-1659880935684
GPR[EPVATF]-1659880936270
GPR[SPS]-1659880936270
[2702183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:208.
GPR[EPS]-1659880937040
GPR[ESUN]-1659880937040
GPR[SSUN]-1659880937040
1795686761
GPR[ESUN]-1659880937314
GPR[SSUN]-1659880937314
1795686761
GPR[SPVATF]-1659880937599
GPR[EPVATF]-1659880938183
GPR[SPS]-1659880938183
[2704022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:198.
GPR[EPS]-1659880938879
GPR[SPVATF]-1659880938879
GPR[EPVATF]-1659880939465
GPR[SPS]-1659880939465
[2705297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:198.
GPR[EPS]-1659880940154
GPR[ESUN]-1659880940154
GPR[SSUN]-1659880940154
1795686761
GPR[ESUN]-1659880940423
GPR[SSUN]-1659880940423
1795686761
GPR[SPVATF]-1659880940687
GPR[EPVATF]-1659880941252
GPR[SPS]-1659880941252
[2707092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:182.
GPR[EPS]-1659880941949
GPR[SPVATF]-1659880941950
GPR[EPVATF]-1659880942527
GPR[SPS]-1659880942527
[2708335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:182.
GPR[EPS]-1659880943193
GPR[ESUN]-1659880943193
GPR[SSUN]-1659880943193
1795686761
GPR[SPVATF]-1659880943456
GPR[EPVATF]-1659880944031
GPR[SPS]-1659880944031
[2709869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:181.
GPR[EPS]-1659880944726
GPR[ESUN]-1659880944726
GPR[SSUN]-1659880944726
1795686761
GPR[ESUN]-1659880944988
GPR[SSUN]-1659880944988
1795686761
GPR[SPVATF]-1659880945252
GPR[EPVATF]-1659880947144
GPR[SPS]-1659880947144
[2712936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:173.
GPR[EPS]-1659880947793
GPR[ESUN]-1659880947793
GPR[SSUN]-1659880947793
1795686761
GPR[ESUN]-1659880948050
GPR[SSUN]-1659880948050
1795686761
GPR[ESUN]-1659880948300
GPR[SSUN]-1659880948300
1795686761
GPR[ESUN]-1659880948554
GPR[SSUN]-1659880948554
1795686761
GPR[SPVATF]-1659880948811
GPR[EPVATF]-1659880949381
GPR[SPS]-1659880949381
[2715167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:161.
GPR[EPS]-1659880950024
GPR[SPVATF]-1659880950024
GPR[EPVATF]-1659880950590
GPR[SPS]-1659880950590
[2716363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:161.
GPR[EPS]-1659880951220
GPR[ESUN]-1659880951220
GPR[SSUN]-1659880951220
1795686761
GPR[SPVATF]-1659880951475
GPR[EPVATF]-1659880952039
GPR[SPS]-1659880952039
[2717810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:156.
GPR[EPS]-1659880952667
GPR[SPVATF]-1659880952667
GPR[EPVATF]-1659880953249
GPR[SPS]-1659880953249
[2719016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:156.
GPR[EPS]-1659880953873
GPR[ESUN]-1659880953874
GPR[SSUN]-1659880953874
1795686761
GPR[SPVATF]-1659880954127
GPR[EPVATF]-1659880954710
GPR[SPS]-1659880954710
[2720388] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(253).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior",com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter",com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack",com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap",com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler",com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectionEnds();
                }
                if (runtimeAngelicValue)
                    v = t.getScope().getVar(n.getString());

            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                if (currentBlock.isHoisted) {
                    return false;
                }
            }
            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[2720389] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659880955246
GPR[SSUN]-1659880955246
1795686761
GPR[SPVATF]-1659880955502
GPR[EPVATF]-1659880956095
GPR[SPS]-1659880956095
[2721806] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(254).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior",com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter",com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack",com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap",com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("\"arguments\"","arguments");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler",com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectionEnds();
            }
            if (runtimeAngelicValue) if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                v = t.getScope().getVar(n.getString());
            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                if (currentBlock.isHoisted) {
                    return false;
                }
            }
            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[2721807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659880956665
GPR[EPVATF]-1659880957271
GPR[SPS]-1659880957271
[2723034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:151.
GPR[EPS]-1659880957892
GPR[ESUN]-1659880957892
GPR[SSUN]-1659880957892
1795686761
GPR[SPVATF]-1659880958149
GPR[EPVATF]-1659880958766
GPR[SPS]-1659880958766
[2724518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:149.
GPR[EPS]-1659880959375
GPR[SPVATF]-1659880959375
GPR[EPVATF]-1659880959982
GPR[SPS]-1659880959982
[2725718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:149.
GPR[EPS]-1659880960575
GPR[ESUN]-1659880960575
GPR[SSUN]-1659880960575
GPR[ESUN]-1659880960575
GPR[SSUN]-1659880960575
1537627151
GPR[ESUN]-1659880960793
GPR[SSUN]-1659880960794
-1345859678
GPR[ESUN]-1659880961085
GPR[SSUN]-1659880961085
-1345859678
GPR[ESUN]-1659880961355
GPR[SSUN]-1659880961355
-1345859678
GPR[SPVATF]-1659880961619
GPR[EPVATF]-1659880962273
GPR[SPS]-1659880962273
GPR[EPS]-1659882357695
GPR[SPVATF]-1659882357695
GPR[EPVATF]-1659882358435
GPR[SPS]-1659882358435
GPR[EPS]-1659883363139
GPR[ESUN]-1659883363139
GPR[SSUN]-1659883363139
-1345859678
GPR[ESUN]-1659883363571
GPR[SSUN]-1659883363571
GPR[ESUN]-1659883363571
GPR[SSUN]-1659883363571
GPR[ESUN]-1659883363571
GPR[SSUN]-1659883363571
GPR[ESUN]-1659883363571
GPR[SSUN]-1659883363571
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
GPR[ESUN]-1659883363572
GPR[SSUN]-1659883363572
-839544615
GPR[SPVATF]-1659883363840
GPR[EPVATF]-1659883364595
GPR[SPS]-1659883364595
[5131044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:632.
GPR[EPS]-1659883365901
GPR[ESUN]-1659883365901
GPR[SSUN]-1659883365901
-839544615
GPR[SPVATF]-1659883366189
GPR[EPVATF]-1659883366969
GPR[SPS]-1659883366969
GPR[EPS]-1659883374642
GPR[SPVATR]-1659883374642
[5139785] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:436: PRECONDITION (!(com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex == com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || (com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2)
[5140882] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex == com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || (com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2)" is working
GPR[EPVATR]-1659883378558
[5143701] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659883378558
[5143714] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -435,3 +435,5 @@
       } else {
-        handleGet(t, n, parent, name);
+        if ((!(com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex == com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size())) || (com.google.javascript.jscomp.GlobalNamespace.this.nameMap.size() <= 2)) {
+          handleGet(t, n, parent, name);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_5139115_20ts_1659883378571.diff
GPR[ESUN]-1659883378573
GPR[SSUN]-1659883378573
-839544615
GPR[ESUN]-1659883378843
GPR[SSUN]-1659883378843
-839544615
GPR[SPVATF]-1659883379107
GPR[EPVATF]-1659883379909
GPR[SPS]-1659883379909
GPR[EPS]-1659883385732
GPR[SPVATR]-1659883385732
[5150875] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace:160: PRECONDITION !(com.google.javascript.jscomp.GlobalNamespace.this.externsRoot!=null)
[5151970] INFO TestPatch - Running test suite to check the patch "!(com.google.javascript.jscomp.GlobalNamespace.this.externsRoot!=null)" is working
GPR[EPVATR]-1659883389667
[5154810] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659883389668
[5154814] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -159,3 +159,5 @@
   List<Name> getNameForest() {
-    ensureGenerated();
+    if (!(com.google.javascript.jscomp.GlobalNamespace.this.externsRoot!=null)) {
+      ensureGenerated();
+    }
     return globalNames;

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_5150215_21ts_1659883389671.diff
GPR[ESUN]-1659883389672
GPR[SSUN]-1659883389672
-839544615
GPR[SPVATF]-1659883389950
GPR[EPVATF]-1659883390758
GPR[SPS]-1659883390758
[5157245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:381.
GPR[EPS]-1659883392102
GPR[SPVATF]-1659883392103
GPR[EPVATF]-1659883392937
GPR[SPS]-1659883392937
GPR[EPS]-1659883411641
GPR[ESUN]-1659883411641
GPR[SSUN]-1659883411641
80988634
GPR[ESUN]-1659883411825
GPR[SSUN]-1659883411825
-839544615
GPR[ESUN]-1659883412095
GPR[SSUN]-1659883412095
-839544615
GPR[ESUN]-1659883412358
GPR[SSUN]-1659883412358
-839544615
GPR[SPVATF]-1659883412622
GPR[EPVATF]-1659883413466
GPR[SPS]-1659883413466
GPR[EPS]-1659883423320
GPR[SPVATR]-1659883423320
[5188463] INFO TestPatch - Applying patch: com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:755: PRECONDITION ((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex)) && ((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))
[5189716] INFO TestPatch - Running test suite to check the patch "((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex)) && ((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))" is working
GPR[EPVATR]-1659883427654
[5192797] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659883427655
[5192803] INFO NoPol - --- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -754,3 +754,5 @@
       // No need to look up additional ancestors, since they won't be used.
-      nameObj.addRef(new Ref(t, n, nameObj, type, currentPreOrderIndex++));
+      if (((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex)) && ((com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex <= 2) || (com.google.javascript.jscomp.GlobalNamespace.this.globalNames.size() < com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex))) {
+        nameObj.addRef(new Ref(t, n, nameObj, type, currentPreOrderIndex++));
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/130/seed_261/patch_5188204_22ts_1659883427660.diff
GPR[ESUN]-1659883427661
GPR[SSUN]-1659883427661
-839544615
GPR[ESUN]-1659883427928
GPR[SSUN]-1659883427928
-1684326478
GPR[ESUN]-1659883428166
GPR[SSUN]-1659883428166
-1684326478
GPR[ESUN]-1659883428408
GPR[SSUN]-1659883428408
-1684326478
GPR[SPVATF]-1659883428647
GPR[EPVATF]-1659883429459
GPR[SPS]-1659883429459
[5195207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer:472.
GPR[EPS]-1659883430065
GPR[ESUN]-1659883430065
GPR[SSUN]-1659883430065
-1117079791
GPR[ESUN]-1659883430270
GPR[SSUN]-1659883430270
-1117079791
GPR[SPVATF]-1659883430471
GPR[EPVATF]-1659883431291
GPR[SPS]-1659883431291
[5196918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:268.
GPR[EPS]-1659883431775
GPR[ESUN]-1659883431775
GPR[SSUN]-1659883431775
-1117079791
GPR[ESUN]-1659883431978
GPR[SSUN]-1659883431978
-1117079791
GPR[SPVATF]-1659883432176
GPR[EPVATF]-1659883432992
GPR[SPS]-1659883432992
[5198631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:363.
GPR[EPS]-1659883433488
GPR[ESUN]-1659883433488
GPR[SSUN]-1659883433488
-1117079791
GPR[SPVATF]-1659883433691
GPR[EPVATF]-1659883434497
GPR[SPS]-1659883434497
[5200125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:362.
GPR[EPS]-1659883434982
GPR[ESUN]-1659883434982
GPR[SSUN]-1659883434982
-1117079791
GPR[SPVATF]-1659883435184
GPR[EPVATF]-1659883435993
GPR[SPS]-1659883435993
[5201638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:361.
GPR[EPS]-1659883436495
GPR[ESUN]-1659883436495
GPR[SSUN]-1659883436495
-1117079791
GPR[SPVATF]-1659883436700
GPR[EPVATF]-1659883437513
GPR[SPS]-1659883437513
[5203137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:360.
GPR[EPS]-1659883437994
GPR[ESUN]-1659883437994
GPR[SSUN]-1659883437994
-1117079791
GPR[SPVATF]-1659883438197
GPR[EPVATF]-1659883439006
GPR[SPS]-1659883439006
[5204639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:359.
GPR[EPS]-1659883439496
GPR[ESUN]-1659883439496
GPR[SSUN]-1659883439497
-1117079791
GPR[ESUN]-1659883439698
GPR[SSUN]-1659883439698
-1117079791
GPR[SPVATF]-1659883439897
GPR[EPVATF]-1659883440719
GPR[SPS]-1659883440719
[5206382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:347.
GPR[EPS]-1659883441239
GPR[ESUN]-1659883441239
GPR[SSUN]-1659883441240
-1117079791
GPR[SPVATF]-1659883441442
GPR[EPVATF]-1659883442254
GPR[SPS]-1659883442254
[5207887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:346.
GPR[EPS]-1659883442744
GPR[ESUN]-1659883442744
GPR[SSUN]-1659883442744
-1117079791
GPR[SPVATF]-1659883442945
GPR[EPVATF]-1659883443757
GPR[SPS]-1659883443757
[5209388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:345.
GPR[EPS]-1659883444245
GPR[ESUN]-1659883444245
GPR[SSUN]-1659883444245
-839544615
GPR[SPVATF]-1659883444508
GPR[EPVATF]-1659883445339
GPR[SPS]-1659883445339
[5211776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:370.
GPR[EPS]-1659883446633
GPR[SPVATF]-1659883446633
GPR[EPVATF]-1659883447550
GPR[SPS]-1659883447550
[5217310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:370.
GPR[EPS]-1659883452167
GPR[ESUN]-1659883452167
GPR[SSUN]-1659883452167
-839544615
GPR[ESUN]-1659883452944
GPR[SSUN]-1659883452944
-1117079791
GPR[ESUN]-1659883453270
GPR[SSUN]-1659883453270
-1117079791
GPR[ESUN]-1659883453559
GPR[SSUN]-1659883453559
-1117079791
GPR[SPVATF]-1659883453835
GPR[EPVATF]-1659883454509
GPR[SPS]-1659883454509
[5220571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:653.
GPR[EPS]-1659883455428
GPR[ESUN]-1659883455428
GPR[SSUN]-1659883455428
-1117079791
GPR[SPVATF]-1659883455665
GPR[EPVATF]-1659883456257
GPR[SPS]-1659883456257
[5222059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:650.
GPR[EPS]-1659883456916
GPR[ESUN]-1659883456916
GPR[SSUN]-1659883456916
-1117079791
GPR[SPVATF]-1659883457142
GPR[EPVATF]-1659883457724
GPR[SPS]-1659883457724
[5223490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:649.
GPR[EPS]-1659883458347
GPR[ESUN]-1659883458347
GPR[SSUN]-1659883458347
-1117079791
GPR[ESUN]-1659883458580
GPR[SSUN]-1659883458580
-1117079791
GPR[SPVATF]-1659883458803
GPR[EPVATF]-1659883459379
GPR[SPS]-1659883459379
[5225112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:232.
GPR[EPS]-1659883459969
GPR[ESUN]-1659883459969
GPR[SSUN]-1659883459969
-1117079791
GPR[SPVATF]-1659883460191
GPR[EPVATF]-1659883460769
GPR[SPS]-1659883460769
[5226476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:280.
GPR[EPS]-1659883461333
GPR[ESUN]-1659883461333
GPR[SSUN]-1659883461333
-2054390034
GPR[SPVATF]-1659883461648
GPR[EPVATF]-1659883462236
GPR[SPS]-1659883462236
[5228400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$VerifyConstants:304.
GPR[EPS]-1659883463257
GPR[ESUN]-1659883463257
GPR[SSUN]-1659883463257
-718432441
GPR[SPVATF]-1659883463649
GPR[EPVATF]-1659883464326
GPR[SPS]-1659883464326
[5230277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:934.
GPR[EPS]-1659883465134
GPR[ESUN]-1659883465134
GPR[SSUN]-1659883465134
-718432441
GPR[SPVATF]-1659883465385
GPR[EPVATF]-1659883465946
GPR[SPS]-1659883465946
[5231874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:933.
GPR[EPS]-1659883466731
GPR[ESUN]-1659883466731
GPR[SSUN]-1659883466731
-383829259
GPR[SPVATF]-1659883466951
GPR[EPVATF]-1659883467509
GPR[SPS]-1659883467509
[5233189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GoogleCodingConvention:81.
GPR[EPS]-1659883468046
GPR[SPVATF]-1659883468046
GPR[EPVATF]-1659883468612
GPR[SPS]-1659883468612
[5234291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GoogleCodingConvention:81.
GPR[EPS]-1659883469148
GPR[ESUN]-1659883469148
GPR[SSUN]-1659883469148
-383829259
GPR[SPVATF]-1659883469352
GPR[EPVATF]-1659883469917
GPR[SPS]-1659883469917
[5235581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GoogleCodingConvention:80.
GPR[EPS]-1659883470438
GPR[ESUN]-1659883470438
GPR[SSUN]-1659883470438
-1117079791
GPR[ESUN]-1659883470645
GPR[SSUN]-1659883470645
-1117079791
GPR[SPVATF]-1659883470848
GPR[EPVATF]-1659883471073
[5236216] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883471074
GPR[SSUN]-1659883471074
-1117079791
GPR[SPVATF]-1659883471284
GPR[EPVATF]-1659883471506
[5236649] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883471506
GPR[SSUN]-1659883471506
-1117079791
GPR[SPVATF]-1659883471715
GPR[EPVATF]-1659883471939
[5237082] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883471939
GPR[SSUN]-1659883471939
-1117079791
GPR[SPVATF]-1659883472147
GPR[EPVATF]-1659883472372
[5237515] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883472372
GPR[SSUN]-1659883472372
-1117079791
GPR[ESUN]-1659883472589
GPR[SSUN]-1659883472589
-1117079791
GPR[SPVATF]-1659883472851
GPR[EPVATF]-1659883473075
[5238218] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883473075
GPR[SSUN]-1659883473075
-1117079791
GPR[SPVATF]-1659883473286
GPR[EPVATF]-1659883473516
[5238659] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883473516
GPR[SSUN]-1659883473516
-839544615
GPR[ESUN]-1659883473817
GPR[SSUN]-1659883473817
2433571
GPR[ESUN]-1659883474100
GPR[SSUN]-1659883474100
-1117079791
GPR[ESUN]-1659883474314
GPR[SSUN]-1659883474314
-1117079791
GPR[SPVATF]-1659883474524
GPR[EPVATF]-1659883475084
GPR[SPS]-1659883475084
[5240758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:143.
GPR[EPS]-1659883475615
GPR[ESUN]-1659883475615
GPR[SSUN]-1659883475615
-1117079791
GPR[ESUN]-1659883475828
GPR[SSUN]-1659883475828
-1117079791
GPR[SPVATF]-1659883476042
GPR[EPVATF]-1659883476267
[5241410] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659883476267
GPR[EPVATF]-1659883476500
[5241643] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883476500
GPR[SSUN]-1659883476500
-1117079791
GPR[SPVATF]-1659883476711
GPR[EPVATF]-1659883476940
[5242083] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883476940
GPR[SSUN]-1659883476940
-1117079791
GPR[SPVATF]-1659883477149
GPR[EPVATF]-1659883477378
[5242521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659883477378
GPR[SSUN]-1659883477378
-1345859678
GPR[ESUN]-1659883477652
GPR[SSUN]-1659883477652
-1345859678
GPR[SPVATF]-1659883477929
GPR[EPVATF]-1659883478498
GPR[SPS]-1659883478498
[5244412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:743.
GPR[EPS]-1659883479269
GPR[ESUN]-1659883479269
GPR[SSUN]-1659883479269
GPR[ESUN]-1659883479269
GPR[SSUN]-1659883479269
-839544615
GPR[ESUN]-1659883479551
GPR[SSUN]-1659883479551
2433571
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479802
GPR[ESUN]-1659883479802
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
GPR[ESUN]-1659883479803
GPR[SSUN]-1659883479803
-1684326478
GPR[SPVATF]-1659883480046
GPR[EPVATF]-1659883480613
GPR[SPS]-1659883480613
[5246385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:202.
GPR[EPS]-1659883481242
GPR[ESUN]-1659883481242
GPR[SSUN]-1659883481242
-1684326478
GPR[ESUN]-1659883481536
GPR[SSUN]-1659883481536
-1684326478
GPR[SPVATF]-1659883481778
GPR[EPVATF]-1659883482358
GPR[SPS]-1659883482358
[5248130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:170.
GPR[EPS]-1659883482987
GPR[ESUN]-1659883482987
GPR[SSUN]-1659883482987
-1684326478
GPR[SPVATF]-1659883483231
GPR[EPVATF]-1659883483827
GPR[SPS]-1659883483827
[5249695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:169.
GPR[EPS]-1659883484552
GPR[ESUN]-1659883484552
GPR[SSUN]-1659883484552
-1684326478
GPR[SPVATF]-1659883484803
GPR[EPVATF]-1659883485396
GPR[SPS]-1659883485396
[5251172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:165.
GPR[EPS]-1659883486029
GPR[SPVATF]-1659883486029
GPR[EPVATF]-1659883486619
GPR[SPS]-1659883486619
[5252383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:165.
GPR[EPS]-1659883487240
GPR[ESUN]-1659883487240
GPR[SSUN]-1659883487240
-1684326478
GPR[ESUN]-1659883487490
GPR[SSUN]-1659883487490
-1117079791
GPR[ESUN]-1659883487695
GPR[SSUN]-1659883487695
-1117079791
GPR[SPVATF]-1659883487901
GPR[EPVATF]-1659883488526
GPR[SPS]-1659883488526
[5254192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:377.
GPR[EPS]-1659883489049
GPR[ESUN]-1659883489049
GPR[SSUN]-1659883489049
-1117079791
GPR[SPVATF]-1659883489256
GPR[EPVATF]-1659883489903
GPR[SPS]-1659883489903
[5255623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659883490480
GPR[ESUN]-1659883490480
GPR[SSUN]-1659883490480
-1117079791
GPR[SPVATF]-1659883490690
GPR[EPVATF]-1659883491319
GPR[SPS]-1659883491319
[5256976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659883491833
GPR[ESUN]-1659883491833
GPR[SSUN]-1659883491833
-1117079791
GPR[SPVATF]-1659883492037
GPR[EPVATF]-1659883492680
GPR[SPS]-1659883492680
[5258319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:374.
GPR[EPS]-1659883493176
GPR[ESUN]-1659883493176
GPR[SSUN]-1659883493176
-1117079791
GPR[ESUN]-1659883493375
GPR[SSUN]-1659883493375
-1117079791
GPR[SPVATF]-1659883493571
GPR[EPVATF]-1659883494221
GPR[SPS]-1659883494222
[5259866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:260.
GPR[EPS]-1659883494723
GPR[ESUN]-1659883494723
GPR[SSUN]-1659883494723
GPR[ESUN]-1659883494723
GPR[SSUN]-1659883494723
GPR[ESUN]-1659883494723
GPR[SSUN]-1659883494723
704176156
GPR[SPVATF]-1659883494925
GPR[EPVATF]-1659883495587
GPR[SPS]-1659883495587
[5261237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:165.
GPR[EPS]-1659883496094
GPR[ESUN]-1659883496094
GPR[SSUN]-1659883496094
-839544615
GPR[SPVATF]-1659883496361
GPR[EPVATF]-1659883497027
GPR[SPS]-1659883497027
[5263406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:359.
GPR[EPS]-1659883498263
GPR[ESUN]-1659883498263
GPR[SSUN]-1659883498263
-839544615
GPR[SPVATF]-1659883498607
GPR[EPVATF]-1659883499263
GPR[SPS]-1659883499263
[5265640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:358.
GPR[EPS]-1659883500497
GPR[ESUN]-1659883500497
GPR[SSUN]-1659883500497
-839544615
GPR[ESUN]-1659883500774
GPR[SSUN]-1659883500774
-839544615
GPR[SPVATF]-1659883501046
GPR[EPVATF]-1659883501740
GPR[SPS]-1659883501741
GPR[EPS]-1659883531364
GPR[ESUN]-1659883531364
GPR[SSUN]-1659883531364
1616555300
GPR[ESUN]-1659883531564
GPR[SSUN]-1659883531564
1616555300
GPR[SPVATF]-1659883531756
GPR[EPVATF]-1659883532490
GPR[SPS]-1659883532490
[5298128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:125.
GPR[EPS]-1659883532985
GPR[ESUN]-1659883532985
GPR[SSUN]-1659883532985
1616555300
GPR[SPVATF]-1659883533185
GPR[EPVATF]-1659883533954
GPR[SPS]-1659883533954
[5299585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:124.
GPR[EPS]-1659883534442
GPR[ESUN]-1659883534442
GPR[SSUN]-1659883534442
-839544615
GPR[SPVATF]-1659883534748
GPR[EPVATF]-1659883535537
GPR[SPS]-1659883535537
[5301912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:517.
GPR[EPS]-1659883536769
GPR[ESUN]-1659883536769
GPR[SSUN]-1659883536769
-718432441
GPR[SPVATF]-1659883536997
GPR[EPVATF]-1659883537797
GPR[SPS]-1659883537797
[5303685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:191.
GPR[EPS]-1659883538542
GPR[ESUN]-1659883538542
GPR[SSUN]-1659883538542
-839544615
GPR[ESUN]-1659883538810
GPR[SSUN]-1659883538810
-839544615
GPR[ESUN]-1659883539084
GPR[SSUN]-1659883539084
-839544615
GPR[ESUN]-1659883539350
GPR[SSUN]-1659883539350
-839544615
GPR[ESUN]-1659883539616
GPR[SSUN]-1659883539616
-839544615
GPR[ESUN]-1659883539881
GPR[SSUN]-1659883539881
-839544615
GPR[ESUN]-1659883540148
GPR[SSUN]-1659883540148
-839544615
GPR[ESUN]-1659883540418
GPR[SSUN]-1659883540418
-839544615
GPR[SPVATF]-1659883540707
GPR[EPVATF]-1659883541502
GPR[SPS]-1659883541502
[5307890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:563.
GPR[EPS]-1659883542747
GPR[SPVATF]-1659883542747
GPR[EPVATF]-1659883543550
GPR[SPS]-1659883543550
[5310029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:563.
GPR[EPS]-1659883544886
GPR[ESUN]-1659883544886
GPR[SSUN]-1659883544886
-839544615
GPR[SPVATF]-1659883545168
GPR[EPVATF]-1659883545969
GPR[SPS]-1659883545969
GPR[EPS]-1659883985634
GPR[ESUN]-1659883985635
GPR[SSUN]-1659883985635
-839544615
GPR[ESUN]-1659883986066
GPR[SSUN]-1659883986066
-839544615
GPR[SPVATF]-1659883986328
GPR[EPVATF]-1659883987130
GPR[SPS]-1659883987130
[5753496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:557.
GPR[EPS]-1659883988353
GPR[ESUN]-1659883988353
GPR[SSUN]-1659883988353
-839544615
GPR[ESUN]-1659883988620
GPR[SSUN]-1659883988620
-839544615
GPR[SPVATF]-1659883988881
GPR[EPVATF]-1659883989701
GPR[SPS]-1659883989701
[5756060] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:554.
GPR[EPS]-1659883990917
GPR[ESUN]-1659883990917
GPR[SSUN]-1659883990917
-839544615
GPR[SPVATF]-1659883991183
GPR[EPVATF]-1659883991991
GPR[SPS]-1659883991991
GPR[EPS]-1659884045846
GPR[ESUN]-1659884045846
GPR[SSUN]-1659884045846
-839544615
GPR[SPVATF]-1659884046219
GPR[EPVATF]-1659884047025
GPR[SPS]-1659884047025
GPR[EPS]-1659884104290
GPR[SPVATF]-1659884104291
GPR[EPVATF]-1659884105126
GPR[SPS]-1659884105126
GPR[EPS]-1659884965571
GPR[ESUN]-1659884965571
GPR[SSUN]-1659884965571
-839544615
GPR[ESUN]-1659884966005
GPR[SSUN]-1659884966005
-839544615
GPR[SPVATF]-1659884966266
GPR[EPVATF]-1659884967050
GPR[SPS]-1659884967050
[6733430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1144.
GPR[EPS]-1659884968287
GPR[ESUN]-1659884968287
GPR[SSUN]-1659884968287
-839544615
GPR[ESUN]-1659884968574
GPR[SSUN]-1659884968574
-839544615
GPR[ESUN]-1659884968839
GPR[SSUN]-1659884968839
-839544615
GPR[SPVATF]-1659884969102
GPR[EPVATF]-1659884969896
GPR[SPS]-1659884969896
GPR[EPS]-1659885117461
GPR[ESUN]-1659885117461
GPR[SSUN]-1659885117461
-839544615
GPR[SPVATF]-1659885117878
GPR[EPVATF]-1659885118683
GPR[SPS]-1659885118683
GPR[EPS]-1659885184077
GPR[ESUN]-1659885184077
GPR[SSUN]-1659885184077
-839544615
GPR[SPVATF]-1659885184494
GPR[EPVATF]-1659885185300
GPR[SPS]-1659885185300
[6951660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:838.
GPR[EPS]-1659885186517
GPR[ESUN]-1659885186517
GPR[SSUN]-1659885186517
-839544615
GPR[SPVATF]-1659885186785
GPR[EPVATF]-1659885187602
GPR[SPS]-1659885187602
[6953959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:833.
GPR[EPS]-1659885188816
GPR[SPVATF]-1659885188816
GPR[EPVATF]-1659885189671
GPR[SPS]-1659885189671
[6956020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:833.
GPR[EPS]-1659885190877
GPR[ESUN]-1659885190877
GPR[SSUN]-1659885190877
-839544615
GPR[ESUN]-1659885191147
GPR[SSUN]-1659885191147
-839544615
GPR[SPVATF]-1659885191422
GPR[EPVATF]-1659885192255
GPR[SPS]-1659885192255
[6958631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:831.
GPR[EPS]-1659885193488
GPR[SPVATF]-1659885193488
GPR[EPVATF]-1659885194316
GPR[SPS]-1659885194316
[8758634] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659886993495
GPR[SSUN]-1659886993495
-839544615
GPR[ESUN]-1659886994071
GPR[SSUN]-1659886994071
-839544615
GPR[SPVATF]-1659886994442
GPR[EPVATF]-1659886995081
GPR[SPS]-1659886995081
[8762221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:783.
GPR[EPS]-1659886997078
GPR[ESUN]-1659886997078
GPR[SSUN]-1659886997078
-839544615
GPR[SPVATF]-1659886997447
GPR[EPVATF]-1659886998051
GPR[SPS]-1659886998051
[8764695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:782.
GPR[EPS]-1659886999552
GPR[SPVATF]-1659886999552
GPR[EPVATF]-1659887000137
GPR[SPS]-1659887000137
[8766698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:782.
GPR[EPS]-1659887001555
GPR[ESUN]-1659887001555
GPR[SSUN]-1659887001555
-839544615
GPR[ESUN]-1659887001860
GPR[SSUN]-1659887001860
-839544615
GPR[SPVATF]-1659887002178
GPR[EPVATF]-1659887002775
GPR[SPS]-1659887002775
[8769992] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GlobalNamespace implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref> {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.Node root;

    private final com.google.javascript.rhino.Node externsRoot;

    private boolean inExterns;

    private com.google.javascript.jscomp.Scope externsScope;

    private boolean generated = false;

    private int currentPreOrderIndex = 0;

    private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> globalNames = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();

    private java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> nameMap = new java.util.HashMap<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name>();

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root) {
        this(compiler, null, root);
    }

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node root) {
        this.compiler = compiler;
        this.externsRoot = externsRoot;
        this.root = root;
    }

    boolean hasExternsRoot() {
        return externsRoot != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return root.getParent();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getSlot(java.lang.String name) {
        return getOwnSlot(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getOwnSlot(java.lang.String name) {
        ensureGenerated();
        return nameMap.get(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        return compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Ref> getReferences(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        ensureGenerated();
        return java.util.Collections.unmodifiableList(slot.getRefs());
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        return this;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Name> getAllSymbols() {
        ensureGenerated();
        return java.util.Collections.unmodifiableCollection(getNameIndex().values());
    }

    private void ensureGenerated() {
        if (!generated) {
            process();
        }
    }

    java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> getNameForest() {
        ensureGenerated();
        return globalNames;
    }

    java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> getNameIndex() {
        ensureGenerated();
        return nameMap;
    }

    void scanNewNodes(com.google.javascript.jscomp.Scope scope, java.util.Set<com.google.javascript.rhino.Node> newNodes) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace(new com.google.javascript.jscomp.GlobalNamespace.NodeFilter(newNodes)));
        t.traverseAtScope(scope);
    }

    private static class NodeFilter implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        private final java.util.Set<com.google.javascript.rhino.Node> newNodes;

        NodeFilter(java.util.Set<com.google.javascript.rhino.Node> newNodes) {
            this.newNodes = newNodes;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            if (!n.isQualifiedName()) {
                return false;
            }
            com.google.javascript.rhino.Node current;
            for (current = n; current.isGetProp(); current = current.getFirstChild()) {
                if (newNodes.contains(current)) {
                    return true;
                }
            }
            return current.isName() && newNodes.contains(current);
        }
    }

    private void process() {
        if (externsRoot != null) {
            inExterns = true;
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externsRoot, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        }
        inExterns = false;
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        generated = true;
    }

    private boolean isGlobalNameReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        java.lang.String topVarName = getTopVarName(name);
        return isGlobalVarReference(topVarName, s);
    }

    private java.lang.String getTopVarName(java.lang.String name) {
        int firstDotIndex = name.indexOf('.');
        return firstDotIndex == (-1) ? name : name.substring(0, firstDotIndex);
    }

    private boolean isGlobalVarReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        com.google.javascript.jscomp.Scope.Var v = s.getVar(name);
        if ((v == null) && (externsScope != null)) {
            v = externsScope.getVar(name);
        }
        return (v != null) && (!v.isLocal());
    }

    private boolean isGlobalScope(com.google.javascript.jscomp.Scope s) {
        return s.getParent() == null;
    }

    private class BuildGlobalNamespace implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter;

        BuildGlobalNamespace() {
            this(null);
        }

        BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter) {
            this.nodeFilter = nodeFilter;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            collect(t, n, parent);
            return true;
        }

        public void collect(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if ((nodeFilter != null) && (!nodeFilter.apply(n))) {
                return;
            }
            if ((externsRoot != null) && (n == externsRoot)) {
                externsScope = t.getScope();
            }
            java.lang.String name;
            boolean isSet = false;
            com.google.javascript.jscomp.GlobalNamespace.Name.Type type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            boolean isPropAssign = false;
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                case com.google.javascript.rhino.Token.SETTER_DEF :
                case com.google.javascript.rhino.Token.STRING_KEY :
                    name = null;
                    if ((parent != null) && parent.isObjectLit()) {
                        name = getNameForObjLitKey(n);
                    }
                    if (name == null) {
                        return;
                    }
                    isSet = true;
                    switch (n.getType()) {
                        case com.google.javascript.rhino.Token.STRING_KEY :
                            type = getValueType(n.getFirstChild());
                            break;
                        case com.google.javascript.rhino.Token.GETTER_DEF :
                            type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET;
                            break;
                        case com.google.javascript.rhino.Token.SETTER_DEF :
                            type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET;
                            break;
                        default :
                            throw new java.lang.IllegalStateException("unexpected:" + n);
                    }
                    break;
                case com.google.javascript.rhino.Token.NAME :
                    if (parent != null) {
                        switch (parent.getType()) {
                            case com.google.javascript.rhino.Token.VAR :
                                isSet = true;
                                com.google.javascript.rhino.Node rvalue = n.getFirstChild();
                                type = (rvalue == null) ? com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER : getValueType(rvalue);
                                break;
                            case com.google.javascript.rhino.Token.ASSIGN :
                                if (parent.getFirstChild() == n) {
                                    isSet = true;
                                    type = getValueType(n.getNext());
                                }
                                break;
                            case com.google.javascript.rhino.Token.GETPROP :
                                return;
                            case com.google.javascript.rhino.Token.FUNCTION :
                                com.google.javascript.rhino.Node gramps = parent.getParent();
                                if ((gramps == null) || com.google.javascript.jscomp.NodeUtil.isFunctionExpression(parent)) {
                                    return;
                                }
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                                break;
                            case com.google.javascript.rhino.Token.INC :
                            case com.google.javascript.rhino.Token.DEC :
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                break;
                            default :
                                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                }
                        }
                    }
                    name = n.getString();
                    break;
                case com.google.javascript.rhino.Token.GETPROP :
                    if (parent != null) {
                        switch (parent.getType()) {
                            case com.google.javascript.rhino.Token.ASSIGN :
                                if (parent.getFirstChild() == n) {
                                    isSet = true;
                                    type = getValueType(n.getNext());
                                    isPropAssign = true;
                                }
                                break;
                            case com.google.javascript.rhino.Token.INC :
                            case com.google.javascript.rhino.Token.DEC :
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                break;
                            case com.google.javascript.rhino.Token.GETPROP :
                                return;
                            default :
                                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                }
                        }
                    }
                    name = n.getQualifiedName();
                    if (name == null) {
                        return;
                    }
                    break;
                default :
                    return;
            }
            com.google.javascript.jscomp.Scope scope = t.getScope();
            if (!isGlobalNameReference(name, scope)) {
                return;
            }
            if (isSet) {
                if (isGlobalScope(scope)) {
                    handleSetFromGlobal(t, n, parent, name, isPropAssign, type);
                } else {
                    handleSetFromLocal(t, n, parent, name);
                }
            } else {
                handleGet(t, n, parent, name);
            }
        }

        java.lang.String getNameForObjLitKey(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.common.base.Preconditions.checkState(parent.isObjectLit());
            com.google.javascript.rhino.Node gramps = parent.getParent();
            if (gramps == null) {
                return null;
            }
            com.google.javascript.rhino.Node greatGramps = gramps.getParent();
            java.lang.String name;
            switch (gramps.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                    if ((greatGramps == null) || (!greatGramps.isVar())) {
                        return null;
                    }
                    name = gramps.getString();
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    com.google.javascript.rhino.Node lvalue = gramps.getFirstChild();
                    name = lvalue.getQualifiedName();
                    break;
                case com.google.javascript.rhino.Token.STRING_KEY :
                    if ((greatGramps != null) && greatGramps.isObjectLit()) {
                        name = getNameForObjLitKey(gramps);
                    } else {
                        return null;
                    }
                    break;
                default :
                    return null;
            }
            if (name != null) {
                java.lang.String key = n.getString();
                if (com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) {
                    return (name + '.') + key;
                }
            }
            return null;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name.Type getValueType(com.google.javascript.rhino.Node n) {
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.OBJECTLIT :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT;
                case com.google.javascript.rhino.Token.FUNCTION :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                case com.google.javascript.rhino.Token.OR :
                    return getValueType(n.getLastChild());
                case com.google.javascript.rhino.Token.HOOK :
                    com.google.javascript.rhino.Node second = n.getFirstChild().getNext();
                    com.google.javascript.jscomp.GlobalNamespace.Name.Type t = getValueType(second);
                    if (t != com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) {
                        return t;
                    }
                    com.google.javascript.rhino.Node third = second.getNext();
                    return getValueType(third);
            }
            return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
        }

        void handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, boolean isPropAssign, com.google.javascript.jscomp.GlobalNamespace.Name.Type type) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.type = type;
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            } else if (isTypeDeclaration(n, parent)) {
                nameObj.setDeclaredType();
            }
        }

        private boolean isTypeDeclaration(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            com.google.javascript.rhino.Node valueNode = com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(n);
            com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(n);
            return ((info != null) && (valueNode != null)) && (((info.isConstructor() && valueNode.isFunction()) || (info.isInterface() && valueNode.isFunction())) || (info.hasEnumParameterType() && valueNode.isObjectLit()));
        }

        void handleSetFromLocal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            }
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Ref.Type type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
            if (parent != null) {
                switch (parent.getType()) {
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.CALL_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.NEW :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.OR :
                    case com.google.javascript.rhino.Token.AND :
                        type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        break;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (n != parent.getFirstChild()) {
                            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                        break;
                    default :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                }
            }
            handleGet(t, n, parent, name, type);
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref.Type determineGetTypeForHookOrBooleanExpr(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node parent, java.lang.String name) {
            com.google.javascript.rhino.Node prev = parent;
            for (com.google.javascript.rhino.Node anc : parent.getAncestors()) {
                switch (anc.getType()) {
                    case com.google.javascript.rhino.Token.EXPR_RESULT :
                    case com.google.javascript.rhino.Token.VAR :
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.WHILE :
                    case com.google.javascript.rhino.Token.FOR :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (anc.getFirstChild() == prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.ASSIGN :
                        if (!name.equals(anc.getFirstChild().getQualifiedName())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.NAME :
                        if (!name.equals(anc.getString())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        if (anc.getFirstChild() != prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                }
                prev = anc;
            }
            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.addRef(new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, type, currentPreOrderIndex++));
        }

        boolean maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            int numLevelsToRemove;
            java.lang.String prefix;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(328).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex",com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.nameMap",com.google.javascript.jscomp.GlobalNamespace.this.nameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("\".prototype\"",".prototype");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsRoot",com.google.javascript.jscomp.GlobalNamespace.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.globalNames",com.google.javascript.jscomp.GlobalNamespace.this.globalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.compiler",com.google.javascript.jscomp.GlobalNamespace.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter",com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.root",com.google.javascript.jscomp.GlobalNamespace.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.inExterns",com.google.javascript.jscomp.GlobalNamespace.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsScope",com.google.javascript.jscomp.GlobalNamespace.this.externsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.generated",com.google.javascript.jscomp.GlobalNamespace.this.generated);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(328).collectionEnds();
            }
            if (runtimeAngelicValue) if (name.endsWith(".prototype")) {
                numLevelsToRemove = 1;
                prefix = name.substring(0, name.length() - 10);
            } else {
                int i = name.indexOf(".prototype.");
                if (i == (-1)) {
                    return false;
                }
                prefix = name.substring(0, i);
                numLevelsToRemove = 2;
                i = name.indexOf('.', i + 11);
                while (i >= 0) {
                    numLevelsToRemove++;
                    i = name.indexOf('.', i + 1);
                } 
            }
            if ((parent != null) && com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n)) {
                return true;
            }
            for (int i = 0; i < numLevelsToRemove; i++) {
                parent = n;
                n = n.getFirstChild();
            }
            handleGet(t, n, parent, prefix, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.PROTOTYPE_GET);
            return true;
        }

        boolean isNestedAssign(com.google.javascript.rhino.Node parent) {
            return parent.isAssign() && (!parent.getParent().isExprResult());
        }

        com.google.javascript.jscomp.GlobalNamespace.Name getOrCreateName(java.lang.String name) {
            com.google.javascript.jscomp.GlobalNamespace.Name node = nameMap.get(name);
            if (node == null) {
                int i = name.lastIndexOf('.');
                if (i >= 0) {
                    java.lang.String parentName = name.substring(0, i);
                    com.google.javascript.jscomp.GlobalNamespace.Name parent = getOrCreateName(parentName);
                    node = parent.addProperty(name.substring(i + 1), inExterns);
                } else {
                    node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, null, inExterns);
                    globalNames.add(node);
                }
                nameMap.put(name, node);
            }
            return node;
        }
    }

    static class Name implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            OBJECTLIT,
            FUNCTION,
            GET,
            SET,
            OTHER;}

        private final java.lang.String baseName;

        final com.google.javascript.jscomp.GlobalNamespace.Name parent;

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> props;

        private com.google.javascript.jscomp.GlobalNamespace.Ref declaration;

        private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> refs;

        com.google.javascript.jscomp.GlobalNamespace.Name.Type type;

        private boolean declaredType = false;

        private boolean hasDeclaredTypeDescendant = false;

        int globalSets = 0;

        int localSets = 0;

        int aliasingGets = 0;

        int totalGets = 0;

        int callGets = 0;

        int deleteProps = 0;

        final boolean inExterns;

        com.google.javascript.rhino.JSDocInfo docInfo = null;

        Name(java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Name parent, boolean inExterns) {
            this.baseName = name;
            this.parent = parent;
            this.type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            this.inExterns = inExterns;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name addProperty(java.lang.String name, boolean inExterns) {
            if (props == null) {
                props = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();
            }
            com.google.javascript.jscomp.GlobalNamespace.Name node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, this, inExterns);
            props.add(node);
            return node;
        }

        java.lang.String getBaseName() {
            return baseName;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return getFullName();
        }

        java.lang.String getFullName() {
            return parent == null ? baseName : (parent.getFullName() + '.') + baseName;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.GlobalNamespace.Ref getDeclaration() {
            return declaration;
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return false;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return null;
        }

        void addRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            addRefInternal(ref);
            switch (ref.type) {
                case SET_FROM_GLOBAL :
                    if (declaration == null) {
                        declaration = ref;
                        docInfo = com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(ref);
                    }
                    globalSets++;
                    break;
                case SET_FROM_LOCAL :
                    localSets++;
                    break;
                case PROTOTYPE_GET :
                case DIRECT_GET :
                    totalGets++;
                    break;
                case ALIASING_GET :
                    aliasingGets++;
                    totalGets++;
                    break;
                case CALL_GET :
                    callGets++;
                    totalGets++;
                    break;
                case DELETE_PROP :
                    deleteProps++;
                    break;
                default :
                    throw new java.lang.IllegalStateException();
            }
        }

        void removeRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if ((refs != null) && refs.remove(ref)) {
                if (ref == declaration) {
                    declaration = null;
                    if (refs != null) {
                        for (com.google.javascript.jscomp.GlobalNamespace.Ref maybeNewDecl : refs) {
                            if (maybeNewDecl.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) {
                                declaration = maybeNewDecl;
                                break;
                            }
                        }
                    }
                }
                switch (ref.type) {
                    case SET_FROM_GLOBAL :
                        globalSets--;
                        break;
                    case SET_FROM_LOCAL :
                        localSets--;
                        break;
                    case PROTOTYPE_GET :
                    case DIRECT_GET :
                        totalGets--;
                        break;
                    case ALIASING_GET :
                        aliasingGets--;
                        totalGets--;
                        break;
                    case CALL_GET :
                        callGets--;
                        totalGets--;
                        break;
                    case DELETE_PROP :
                        deleteProps--;
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            }
        }

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> getRefs() {
            return refs == null ? com.google.common.collect.ImmutableList.<com.google.javascript.jscomp.GlobalNamespace.Ref>of() : refs;
        }

        void addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (refs == null) {
                refs = com.google.common.collect.Lists.newArrayList();
            }
            refs.add(ref);
        }

        boolean canEliminate() {
            if ((!canCollapseUnannotatedChildNames()) || (totalGets > 0)) {
                return false;
            }
            if (props != null) {
                for (com.google.javascript.jscomp.GlobalNamespace.Name n : props) {
                    if (!n.canCollapse()) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean isSimpleStubDeclaration() {
            if (getRefs().size() == 1) {
                com.google.javascript.jscomp.GlobalNamespace.Ref ref = refs.get(0);
                if ((ref.node.getParent() != null) && ref.node.getParent().isExprResult()) {
                    return true;
                }
            }
            return false;
        }

        boolean canCollapse() {
            return ((!inExterns) && (!isGetOrSetDefinition())) && (declaredType || ((((parent == null) || parent.canCollapseUnannotatedChildNames()) && ((globalSets > 0) || (localSets > 0))) && (deleteProps == 0)));
        }

        boolean isGetOrSetDefinition() {
            return (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET) || (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET);
        }

        boolean canCollapseUnannotatedChildNames() {
            if (((((type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) || isGetOrSetDefinition()) || (globalSets != 1)) || (localSets != 0)) || (deleteProps != 0)) {
                return false;
            }
            com.google.common.base.Preconditions.checkNotNull(declaration);
            if (declaration.getTwin() != null) {
                return false;
            }
            if (declaredType) {
                return true;
            }
            if ((parent != null) && parent.shouldKeepKeys()) {
                return false;
            }
            if (aliasingGets > 0) {
                return false;
            }
            return (parent == null) || parent.canCollapseUnannotatedChildNames();
        }

        boolean shouldKeepKeys() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT) && (aliasingGets > 0);
        }

        boolean needsToBeStubbed() {
            return (globalSets == 0) && (localSets > 0);
        }

        void setDeclaredType() {
            declaredType = true;
            for (com.google.javascript.jscomp.GlobalNamespace.Name ancestor = parent; ancestor != null; ancestor = ancestor.parent) {
                ancestor.hasDeclaredTypeDescendant = true;
            }
        }

        boolean isDeclaredType() {
            return declaredType;
        }

        boolean isNamespace() {
            return hasDeclaredTypeDescendant && (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT);
        }

        boolean isSimpleName() {
            return parent == null;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return (((((((((((getFullName() + " (") + type) + "): globalSets=") + globalSets) + ", localSets=") + localSets) + ", totalGets=") + totalGets) + ", aliasingGets=") + aliasingGets) + ", callGets=") + callGets;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return docInfo;
        }

        private static com.google.javascript.rhino.JSDocInfo getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (ref.node != null) {
                com.google.javascript.rhino.Node refParent = ref.node.getParent();
                switch (refParent.getType()) {
                    case com.google.javascript.rhino.Token.FUNCTION :
                    case com.google.javascript.rhino.Token.ASSIGN :
                        return refParent.getJSDocInfo();
                    case com.google.javascript.rhino.Token.VAR :
                        return ref.node == refParent.getFirstChild() ? refParent.getJSDocInfo() : ref.node.getJSDocInfo();
                }
            }
            return null;
        }
    }

    static class Ref implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            SET_FROM_GLOBAL,
            SET_FROM_LOCAL,
            PROTOTYPE_GET,
            ALIASING_GET,
            DIRECT_GET,
            CALL_GET,
            DELETE_PROP;}

        com.google.javascript.rhino.Node node;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.rhino.jstype.StaticSourceFile source;

        final com.google.javascript.jscomp.GlobalNamespace.Name name;

        final com.google.javascript.jscomp.GlobalNamespace.Ref.Type type;

        final com.google.javascript.jscomp.Scope scope;

        final int preOrderIndex;

        private com.google.javascript.jscomp.GlobalNamespace.Ref twin = null;

        Ref(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.GlobalNamespace.Name name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = node;
            this.name = name;
            this.module = (t.getInput() == null) ? null : t.getInput().getModule();
            this.source = node.getStaticSourceFile();
            this.type = type;
            this.scope = t.getScope();
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref original, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = original.node;
            this.name = original.name;
            this.module = original.module;
            this.source = original.source;
            this.type = type;
            this.scope = original.scope;
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.type = type;
            this.module = null;
            this.source = null;
            this.scope = null;
            this.name = null;
            this.preOrderIndex = index;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return node;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return source;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSymbol() {
            return name;
        }

        com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }

        java.lang.String getSourceName() {
            return source == null ? "" : source.getName();
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref getTwin() {
            return twin;
        }

        boolean isSet() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL);
        }

        static void markTwins(com.google.javascript.jscomp.GlobalNamespace.Ref a, com.google.javascript.jscomp.GlobalNamespace.Ref b) {
            com.google.common.base.Preconditions.checkArgument(((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET)) && ((((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)));
            a.twin = b;
            b.twin = a;
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref cloneAndReclassify(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(this, type, this.preOrderIndex);
        }

        static com.google.javascript.jscomp.GlobalNamespace.Ref createRefForTesting(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(type, -1);
        }
    }

    static class Tracker implements com.google.javascript.jscomp.CompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.io.PrintStream stream;

        private final com.google.common.base.Predicate<java.lang.String> isInterestingSymbol;

        private java.util.Set<java.lang.String> previousSymbolsInTree = com.google.common.collect.ImmutableSet.of();

        Tracker(com.google.javascript.jscomp.AbstractCompiler compiler, java.io.PrintStream stream, com.google.common.base.Predicate<java.lang.String> isInterestingSymbol) {
            this.compiler = compiler;
            this.stream = stream;
            this.isInterestingSymbol = isInterestingSymbol;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            com.google.javascript.jscomp.GlobalNamespace namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, externs, root);
            java.util.Set<java.lang.String> currentSymbols = com.google.common.collect.Sets.newTreeSet();
            for (java.lang.String name : namespace.getNameIndex().keySet()) {
                if (isInterestingSymbol.apply(name)) {
                    currentSymbols.add(name);
                }
            }
            java.lang.String passName = compiler.getLastPassName();
            if (passName == null) {
                passName = "[Unknown pass]";
            }
            for (java.lang.String sym : currentSymbols) {
                if (!previousSymbolsInTree.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Added by %s", sym, passName));
                }
            }
            for (java.lang.String sym : previousSymbolsInTree) {
                if (!currentSymbols.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Removed by %s", sym, passName));
                }
            }
            previousSymbolsInTree = currentSymbols;
        }
    }
}
[8769992] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659887004850
GPR[EPVATF]-1659887005440
GPR[SPS]-1659887005440
[8772105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:777.
GPR[EPS]-1659887006963
GPR[ESUN]-1659887006963
GPR[SSUN]-1659887006963
-839544615
GPR[ESUN]-1659887007256
GPR[SSUN]-1659887007256
-839544615
GPR[SPVATF]-1659887007610
GPR[EPVATF]-1659887008208
GPR[SPS]-1659887008208
GPR[EPS]-1659887571250
GPR[SPVATF]-1659887571250
GPR[EPVATF]-1659887571880
GPR[SPS]-1659887571880
[11136393] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659889371250
GPR[SSUN]-1659889371250
-718432441
GPR[SPVATF]-1659889371666
GPR[EPVATF]-1659889372307
GPR[SPS]-1659889372307
[11138260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:196.
GPR[EPS]-1659889373117
GPR[ESUN]-1659889373117
GPR[SSUN]-1659889373117
-718432441
GPR[SPVATF]-1659889373364
GPR[EPVATF]-1659889373993
GPR[SPS]-1659889373993
[11139904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:195.
GPR[EPS]-1659889374761
GPR[ESUN]-1659889374761
GPR[SSUN]-1659889374761
-718432441
GPR[SPVATF]-1659889375002
GPR[EPVATF]-1659889375635
GPR[SPS]-1659889375635
[11141558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:190.
GPR[EPS]-1659889376415
GPR[SPVATF]-1659889376416
GPR[EPVATF]-1659889377060
GPR[SPS]-1659889377060
[11142968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:190.
GPR[EPS]-1659889377825
GPR[ESUN]-1659889377825
GPR[SSUN]-1659889377825
-718432441
GPR[SPVATF]-1659889378111
GPR[EPVATF]-1659889378758
GPR[SPS]-1659889378758
[11144665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:189.
GPR[EPS]-1659889379522
GPR[ESUN]-1659889379522
GPR[SSUN]-1659889379522
-839544615
GPR[SPVATF]-1659889379815
GPR[EPVATF]-1659889380524
GPR[SPS]-1659889380524
[11146998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1142.
GPR[EPS]-1659889381855
GPR[SPVATF]-1659889381855
GPR[EPVATF]-1659889382524
GPR[SPS]-1659889382524
[11149009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1142.
GPR[EPS]-1659889383866
GPR[ESUN]-1659889383866
GPR[SSUN]-1659889383866
-839544615
GPR[SPVATF]-1659889384160
GPR[EPVATF]-1659889384900
GPR[SPS]-1659889384900
GPR[EPS]-1659889407412
GPR[ESUN]-1659889407412
GPR[SSUN]-1659889407412
-839544615
GPR[SPVATF]-1659889407710
GPR[EPVATF]-1659889408442
GPR[SPS]-1659889408442
GPR[EPS]-1659889433789
GPR[ESUN]-1659889433789
GPR[SSUN]-1659889433789
-839544615
GPR[SPVATF]-1659889434181
GPR[EPVATF]-1659889434972
GPR[SPS]-1659889434972
[11201448] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:937.
GPR[EPS]-1659889436305
GPR[ESUN]-1659889436305
GPR[SSUN]-1659889436305
-839544615
GPR[SPVATF]-1659889436594
GPR[EPVATF]-1659889437468
GPR[SPS]-1659889437468
[11203910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:936.
GPR[EPS]-1659889438767
GPR[ESUN]-1659889438767
GPR[SSUN]-1659889438767
-839544615
GPR[SPVATF]-1659889439062
GPR[EPVATF]-1659889439917
GPR[SPS]-1659889439917
[11206355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:935.
GPR[EPS]-1659889441212
GPR[SPVATF]-1659889441212
GPR[EPVATF]-1659889442064
GPR[SPS]-1659889442064
[11208534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:935.
GPR[EPS]-1659889443391
GPR[ESUN]-1659889443392
GPR[SSUN]-1659889443392
-839544615
GPR[ESUN]-1659889443680
GPR[SSUN]-1659889443680
-839544615
GPR[SPVATF]-1659889443964
GPR[EPVATF]-1659889444836
GPR[SPS]-1659889444836
GPR[EPS]-1659889476006
GPR[ESUN]-1659889476006
GPR[SSUN]-1659889476006
-839544615
GPR[SPVATF]-1659889476292
GPR[EPVATF]-1659889477182
GPR[SPS]-1659889477182
[11243661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1012.
GPR[EPS]-1659889478518
GPR[ESUN]-1659889478518
GPR[SSUN]-1659889478518
-839544615
GPR[SPVATF]-1659889478809
GPR[EPVATF]-1659889479680
GPR[SPS]-1659889479680
[11246108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1011.
GPR[EPS]-1659889480966
GPR[SPVATF]-1659889480966
GPR[EPVATF]-1659889481881
GPR[SPS]-1659889481882
[11248354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$Name:1011.
GPR[EPS]-1659889483211
GPR[ESUN]-1659889483212
GPR[SSUN]-1659889483212
-839544615
GPR[ESUN]-1659889483501
GPR[SSUN]-1659889483501
-839544615
GPR[SPVATF]-1659889483827
GPR[EPVATF]-1659889484717
GPR[SPS]-1659889484718
GPR[EPS]-1659889515752
GPR[ESUN]-1659889515752
GPR[SSUN]-1659889515752
-839544615
GPR[SPVATF]-1659889516133
GPR[EPVATF]-1659889517010
GPR[SPS]-1659889517010
GPR[EPS]-1659889547824
GPR[ESUN]-1659889547824
GPR[SSUN]-1659889547824
GPR[ESUN]-1659889547824
GPR[SSUN]-1659889547824
GPR[ESUN]-1659889547824
GPR[SSUN]-1659889547824
GPR[ESUN]-1659889547824
GPR[SSUN]-1659889547824
-839544615
GPR[ESUN]-1659889548112
GPR[SSUN]-1659889548112
-839544615
GPR[SPVATF]-1659889548394
GPR[EPVATF]-1659889549288
GPR[SPS]-1659889549288
[11315752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace:169.
GPR[EPS]-1659889550609
GPR[ESUN]-1659889550609
GPR[SSUN]-1659889550609
GPR[ESUN]-1659889550609
GPR[SSUN]-1659889550609
2433571
GPR[SPVATF]-1659889550930
GPR[EPVATF]-1659889551844
GPR[SPS]-1659889551844
[11317837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:719.
GPR[EPS]-1659889552694
GPR[ESUN]-1659889552694
GPR[SSUN]-1659889552694
2433571
GPR[ESUN]-1659889552959
GPR[SSUN]-1659889552959
GPR[ESUN]-1659889552959
GPR[SSUN]-1659889552959
GPR[ESUN]-1659889552959
GPR[SSUN]-1659889552959
-839544615
GPR[SPVATF]-1659889553243
GPR[EPVATF]-1659889554126
GPR[SPS]-1659889554126
[11320851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:389.
GPR[EPS]-1659889555708
GPR[ESUN]-1659889555708
GPR[SSUN]-1659889555708
-839544615
GPR[SPVATF]-1659889555989
GPR[EPVATF]-1659889556888
GPR[SPS]-1659889556888
[11324061] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GlobalNamespace implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref> {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.Node root;

    private final com.google.javascript.rhino.Node externsRoot;

    private boolean inExterns;

    private com.google.javascript.jscomp.Scope externsScope;

    private boolean generated = false;

    private int currentPreOrderIndex = 0;

    private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> globalNames = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();

    private java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> nameMap = new java.util.HashMap<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name>();

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root) {
        this(compiler, null, root);
    }

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node root) {
        this.compiler = compiler;
        this.externsRoot = externsRoot;
        this.root = root;
    }

    boolean hasExternsRoot() {
        return externsRoot != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return root.getParent();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getSlot(java.lang.String name) {
        return getOwnSlot(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getOwnSlot(java.lang.String name) {
        ensureGenerated();
        return nameMap.get(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        return compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Ref> getReferences(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        ensureGenerated();
        return java.util.Collections.unmodifiableList(slot.getRefs());
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        return this;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Name> getAllSymbols() {
        ensureGenerated();
        return java.util.Collections.unmodifiableCollection(getNameIndex().values());
    }

    private void ensureGenerated() {
        if (!generated) {
            process();
        }
    }

    java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> getNameForest() {
        ensureGenerated();
        return globalNames;
    }

    java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> getNameIndex() {
        ensureGenerated();
        return nameMap;
    }

    void scanNewNodes(com.google.javascript.jscomp.Scope scope, java.util.Set<com.google.javascript.rhino.Node> newNodes) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace(new com.google.javascript.jscomp.GlobalNamespace.NodeFilter(newNodes)));
        t.traverseAtScope(scope);
    }

    private static class NodeFilter implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        private final java.util.Set<com.google.javascript.rhino.Node> newNodes;

        NodeFilter(java.util.Set<com.google.javascript.rhino.Node> newNodes) {
            this.newNodes = newNodes;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            if (!n.isQualifiedName()) {
                return false;
            }
            com.google.javascript.rhino.Node current;
            for (current = n; current.isGetProp(); current = current.getFirstChild()) {
                if (newNodes.contains(current)) {
                    return true;
                }
            }
            return current.isName() && newNodes.contains(current);
        }
    }

    private void process() {
        if (externsRoot != null) {
            inExterns = true;
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externsRoot, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        }
        inExterns = false;
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        generated = true;
    }

    private boolean isGlobalNameReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        java.lang.String topVarName = getTopVarName(name);
        return isGlobalVarReference(topVarName, s);
    }

    private java.lang.String getTopVarName(java.lang.String name) {
        int firstDotIndex = name.indexOf('.');
        return firstDotIndex == (-1) ? name : name.substring(0, firstDotIndex);
    }

    private boolean isGlobalVarReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        com.google.javascript.jscomp.Scope.Var v = s.getVar(name);
        if ((v == null) && (externsScope != null)) {
            v = externsScope.getVar(name);
        }
        return (v != null) && (!v.isLocal());
    }

    private boolean isGlobalScope(com.google.javascript.jscomp.Scope s) {
        return s.getParent() == null;
    }

    private class BuildGlobalNamespace implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter;

        BuildGlobalNamespace() {
            this(null);
        }

        BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter) {
            this.nodeFilter = nodeFilter;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            collect(t, n, parent);
            return true;
        }

        public void collect(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if ((nodeFilter != null) && (!nodeFilter.apply(n))) {
                return;
            }
            if ((externsRoot != null) && (n == externsRoot)) {
                externsScope = t.getScope();
            }
            java.lang.String name;
            boolean isSet = false;
            com.google.javascript.jscomp.GlobalNamespace.Name.Type type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            boolean isPropAssign = false;
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                case com.google.javascript.rhino.Token.SETTER_DEF :
                case com.google.javascript.rhino.Token.STRING_KEY :
                    name = null;
                    if ((parent != null) && parent.isObjectLit()) {
                        name = getNameForObjLitKey(n);
                    }
                    if (name == null) {
                        return;
                    }
                    isSet = true;
                    switch (n.getType()) {
                        case com.google.javascript.rhino.Token.STRING_KEY :
                            type = getValueType(n.getFirstChild());
                            break;
                        case com.google.javascript.rhino.Token.GETTER_DEF :
                            type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET;
                            break;
                        case com.google.javascript.rhino.Token.SETTER_DEF :
                            type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET;
                            break;
                        default :
                            throw new java.lang.IllegalStateException("unexpected:" + n);
                    }
                    break;
                case com.google.javascript.rhino.Token.NAME :
                    if (parent != null) {
                        switch (parent.getType()) {
                            case com.google.javascript.rhino.Token.VAR :
                                isSet = true;
                                com.google.javascript.rhino.Node rvalue = n.getFirstChild();
                                type = (rvalue == null) ? com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER : getValueType(rvalue);
                                break;
                            case com.google.javascript.rhino.Token.ASSIGN :
                                if (parent.getFirstChild() == n) {
                                    isSet = true;
                                    type = getValueType(n.getNext());
                                }
                                break;
                            case com.google.javascript.rhino.Token.GETPROP :
                                return;
                            case com.google.javascript.rhino.Token.FUNCTION :
                                com.google.javascript.rhino.Node gramps = parent.getParent();
                                if ((gramps == null) || com.google.javascript.jscomp.NodeUtil.isFunctionExpression(parent)) {
                                    return;
                                }
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                                break;
                            case com.google.javascript.rhino.Token.INC :
                            case com.google.javascript.rhino.Token.DEC :
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                break;
                            default :
                                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                }
                        }
                    }
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(354).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex",com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("isSet",isSet);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.nameMap",com.google.javascript.jscomp.GlobalNamespace.this.nameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("isPropAssign",isPropAssign);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsRoot",com.google.javascript.jscomp.GlobalNamespace.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.globalNames",com.google.javascript.jscomp.GlobalNamespace.this.globalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.compiler",com.google.javascript.jscomp.GlobalNamespace.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter",com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.root",com.google.javascript.jscomp.GlobalNamespace.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.inExterns",com.google.javascript.jscomp.GlobalNamespace.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsScope",com.google.javascript.jscomp.GlobalNamespace.this.externsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.generated",com.google.javascript.jscomp.GlobalNamespace.this.generated);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(354).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        name = n.getString();

                    break;
                case com.google.javascript.rhino.Token.GETPROP :
                    if (parent != null) {
                        switch (parent.getType()) {
                            case com.google.javascript.rhino.Token.ASSIGN :
                                if (parent.getFirstChild() == n) {
                                    isSet = true;
                                    type = getValueType(n.getNext());
                                    isPropAssign = true;
                                }
                                break;
                            case com.google.javascript.rhino.Token.INC :
                            case com.google.javascript.rhino.Token.DEC :
                                isSet = true;
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                break;
                            case com.google.javascript.rhino.Token.GETPROP :
                                return;
                            default :
                                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                }
                        }
                    }
                    name = n.getQualifiedName();
                    if (name == null) {
                        return;
                    }
                    break;
                default :
                    return;
            }
            com.google.javascript.jscomp.Scope scope = t.getScope();
            if (!isGlobalNameReference(name, scope)) {
                return;
            }
            if (isSet) {
                if (isGlobalScope(scope)) {
                    handleSetFromGlobal(t, n, parent, name, isPropAssign, type);
                } else {
                    handleSetFromLocal(t, n, parent, name);
                }
            } else {
                handleGet(t, n, parent, name);
            }
        }

        java.lang.String getNameForObjLitKey(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.common.base.Preconditions.checkState(parent.isObjectLit());
            com.google.javascript.rhino.Node gramps = parent.getParent();
            if (gramps == null) {
                return null;
            }
            com.google.javascript.rhino.Node greatGramps = gramps.getParent();
            java.lang.String name;
            switch (gramps.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                    if ((greatGramps == null) || (!greatGramps.isVar())) {
                        return null;
                    }
                    name = gramps.getString();
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    com.google.javascript.rhino.Node lvalue = gramps.getFirstChild();
                    name = lvalue.getQualifiedName();
                    break;
                case com.google.javascript.rhino.Token.STRING_KEY :
                    if ((greatGramps != null) && greatGramps.isObjectLit()) {
                        name = getNameForObjLitKey(gramps);
                    } else {
                        return null;
                    }
                    break;
                default :
                    return null;
            }
            if (name != null) {
                java.lang.String key = n.getString();
                if (com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) {
                    return (name + '.') + key;
                }
            }
            return null;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name.Type getValueType(com.google.javascript.rhino.Node n) {
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.OBJECTLIT :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT;
                case com.google.javascript.rhino.Token.FUNCTION :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                case com.google.javascript.rhino.Token.OR :
                    return getValueType(n.getLastChild());
                case com.google.javascript.rhino.Token.HOOK :
                    com.google.javascript.rhino.Node second = n.getFirstChild().getNext();
                    com.google.javascript.jscomp.GlobalNamespace.Name.Type t = getValueType(second);
                    if (t != com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) {
                        return t;
                    }
                    com.google.javascript.rhino.Node third = second.getNext();
                    return getValueType(third);
            }
            return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
        }

        void handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, boolean isPropAssign, com.google.javascript.jscomp.GlobalNamespace.Name.Type type) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.type = type;
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            } else if (isTypeDeclaration(n, parent)) {
                nameObj.setDeclaredType();
            }
        }

        private boolean isTypeDeclaration(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            com.google.javascript.rhino.Node valueNode = com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(n);
            com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(n);
            return ((info != null) && (valueNode != null)) && (((info.isConstructor() && valueNode.isFunction()) || (info.isInterface() && valueNode.isFunction())) || (info.hasEnumParameterType() && valueNode.isObjectLit()));
        }

        void handleSetFromLocal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            }
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Ref.Type type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
            if (parent != null) {
                switch (parent.getType()) {
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.CALL_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.NEW :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.OR :
                    case com.google.javascript.rhino.Token.AND :
                        type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        break;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (n != parent.getFirstChild()) {
                            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                        break;
                    default :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                }
            }
            handleGet(t, n, parent, name, type);
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref.Type determineGetTypeForHookOrBooleanExpr(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node parent, java.lang.String name) {
            com.google.javascript.rhino.Node prev = parent;
            for (com.google.javascript.rhino.Node anc : parent.getAncestors()) {
                switch (anc.getType()) {
                    case com.google.javascript.rhino.Token.EXPR_RESULT :
                    case com.google.javascript.rhino.Token.VAR :
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.WHILE :
                    case com.google.javascript.rhino.Token.FOR :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (anc.getFirstChild() == prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.ASSIGN :
                        if (!name.equals(anc.getFirstChild().getQualifiedName())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.NAME :
                        if (!name.equals(anc.getString())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        if (anc.getFirstChild() != prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                }
                prev = anc;
            }
            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.addRef(new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, type, currentPreOrderIndex++));
        }

        boolean maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            int numLevelsToRemove;
            java.lang.String prefix;
            if (name.endsWith(".prototype")) {
                numLevelsToRemove = 1;
                prefix = name.substring(0, name.length() - 10);
            } else {
                int i = name.indexOf(".prototype.");
                if (i == (-1)) {
                    return false;
                }
                prefix = name.substring(0, i);
                numLevelsToRemove = 2;
                i = name.indexOf('.', i + 11);
                while (i >= 0) {
                    numLevelsToRemove++;
                    i = name.indexOf('.', i + 1);
                } 
            }
            if ((parent != null) && com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n)) {
                return true;
            }
            for (int i = 0; i < numLevelsToRemove; i++) {
                parent = n;
                n = n.getFirstChild();
            }
            handleGet(t, n, parent, prefix, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.PROTOTYPE_GET);
            return true;
        }

        boolean isNestedAssign(com.google.javascript.rhino.Node parent) {
            return parent.isAssign() && (!parent.getParent().isExprResult());
        }

        com.google.javascript.jscomp.GlobalNamespace.Name getOrCreateName(java.lang.String name) {
            com.google.javascript.jscomp.GlobalNamespace.Name node = nameMap.get(name);
            if (node == null) {
                int i = name.lastIndexOf('.');
                if (i >= 0) {
                    java.lang.String parentName = name.substring(0, i);
                    com.google.javascript.jscomp.GlobalNamespace.Name parent = getOrCreateName(parentName);
                    node = parent.addProperty(name.substring(i + 1), inExterns);
                } else {
                    node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, null, inExterns);
                    globalNames.add(node);
                }
                nameMap.put(name, node);
            }
            return node;
        }
    }

    static class Name implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            OBJECTLIT,
            FUNCTION,
            GET,
            SET,
            OTHER;}

        private final java.lang.String baseName;

        final com.google.javascript.jscomp.GlobalNamespace.Name parent;

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> props;

        private com.google.javascript.jscomp.GlobalNamespace.Ref declaration;

        private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> refs;

        com.google.javascript.jscomp.GlobalNamespace.Name.Type type;

        private boolean declaredType = false;

        private boolean hasDeclaredTypeDescendant = false;

        int globalSets = 0;

        int localSets = 0;

        int aliasingGets = 0;

        int totalGets = 0;

        int callGets = 0;

        int deleteProps = 0;

        final boolean inExterns;

        com.google.javascript.rhino.JSDocInfo docInfo = null;

        Name(java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Name parent, boolean inExterns) {
            this.baseName = name;
            this.parent = parent;
            this.type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            this.inExterns = inExterns;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name addProperty(java.lang.String name, boolean inExterns) {
            if (props == null) {
                props = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();
            }
            com.google.javascript.jscomp.GlobalNamespace.Name node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, this, inExterns);
            props.add(node);
            return node;
        }

        java.lang.String getBaseName() {
            return baseName;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return getFullName();
        }

        java.lang.String getFullName() {
            return parent == null ? baseName : (parent.getFullName() + '.') + baseName;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.GlobalNamespace.Ref getDeclaration() {
            return declaration;
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return false;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return null;
        }

        void addRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            addRefInternal(ref);
            switch (ref.type) {
                case SET_FROM_GLOBAL :
                    if (declaration == null) {
                        declaration = ref;
                        docInfo = com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(ref);
                    }
                    globalSets++;
                    break;
                case SET_FROM_LOCAL :
                    localSets++;
                    break;
                case PROTOTYPE_GET :
                case DIRECT_GET :
                    totalGets++;
                    break;
                case ALIASING_GET :
                    aliasingGets++;
                    totalGets++;
                    break;
                case CALL_GET :
                    callGets++;
                    totalGets++;
                    break;
                case DELETE_PROP :
                    deleteProps++;
                    break;
                default :
                    throw new java.lang.IllegalStateException();
            }
        }

        void removeRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if ((refs != null) && refs.remove(ref)) {
                if (ref == declaration) {
                    declaration = null;
                    if (refs != null) {
                        for (com.google.javascript.jscomp.GlobalNamespace.Ref maybeNewDecl : refs) {
                            if (maybeNewDecl.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) {
                                declaration = maybeNewDecl;
                                break;
                            }
                        }
                    }
                }
                switch (ref.type) {
                    case SET_FROM_GLOBAL :
                        globalSets--;
                        break;
                    case SET_FROM_LOCAL :
                        localSets--;
                        break;
                    case PROTOTYPE_GET :
                    case DIRECT_GET :
                        totalGets--;
                        break;
                    case ALIASING_GET :
                        aliasingGets--;
                        totalGets--;
                        break;
                    case CALL_GET :
                        callGets--;
                        totalGets--;
                        break;
                    case DELETE_PROP :
                        deleteProps--;
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            }
        }

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> getRefs() {
            return refs == null ? com.google.common.collect.ImmutableList.<com.google.javascript.jscomp.GlobalNamespace.Ref>of() : refs;
        }

        void addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (refs == null) {
                refs = com.google.common.collect.Lists.newArrayList();
            }
            refs.add(ref);
        }

        boolean canEliminate() {
            if ((!canCollapseUnannotatedChildNames()) || (totalGets > 0)) {
                return false;
            }
            if (props != null) {
                for (com.google.javascript.jscomp.GlobalNamespace.Name n : props) {
                    if (!n.canCollapse()) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean isSimpleStubDeclaration() {
            if (getRefs().size() == 1) {
                com.google.javascript.jscomp.GlobalNamespace.Ref ref = refs.get(0);
                if ((ref.node.getParent() != null) && ref.node.getParent().isExprResult()) {
                    return true;
                }
            }
            return false;
        }

        boolean canCollapse() {
            return ((!inExterns) && (!isGetOrSetDefinition())) && (declaredType || ((((parent == null) || parent.canCollapseUnannotatedChildNames()) && ((globalSets > 0) || (localSets > 0))) && (deleteProps == 0)));
        }

        boolean isGetOrSetDefinition() {
            return (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET) || (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET);
        }

        boolean canCollapseUnannotatedChildNames() {
            if (((((type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) || isGetOrSetDefinition()) || (globalSets != 1)) || (localSets != 0)) || (deleteProps != 0)) {
                return false;
            }
            com.google.common.base.Preconditions.checkNotNull(declaration);
            if (declaration.getTwin() != null) {
                return false;
            }
            if (declaredType) {
                return true;
            }
            if ((parent != null) && parent.shouldKeepKeys()) {
                return false;
            }
            if (aliasingGets > 0) {
                return false;
            }
            return (parent == null) || parent.canCollapseUnannotatedChildNames();
        }

        boolean shouldKeepKeys() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT) && (aliasingGets > 0);
        }

        boolean needsToBeStubbed() {
            return (globalSets == 0) && (localSets > 0);
        }

        void setDeclaredType() {
            declaredType = true;
            for (com.google.javascript.jscomp.GlobalNamespace.Name ancestor = parent; ancestor != null; ancestor = ancestor.parent) {
                ancestor.hasDeclaredTypeDescendant = true;
            }
        }

        boolean isDeclaredType() {
            return declaredType;
        }

        boolean isNamespace() {
            return hasDeclaredTypeDescendant && (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT);
        }

        boolean isSimpleName() {
            return parent == null;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return (((((((((((getFullName() + " (") + type) + "): globalSets=") + globalSets) + ", localSets=") + localSets) + ", totalGets=") + totalGets) + ", aliasingGets=") + aliasingGets) + ", callGets=") + callGets;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return docInfo;
        }

        private static com.google.javascript.rhino.JSDocInfo getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (ref.node != null) {
                com.google.javascript.rhino.Node refParent = ref.node.getParent();
                switch (refParent.getType()) {
                    case com.google.javascript.rhino.Token.FUNCTION :
                    case com.google.javascript.rhino.Token.ASSIGN :
                        return refParent.getJSDocInfo();
                    case com.google.javascript.rhino.Token.VAR :
                        return ref.node == refParent.getFirstChild() ? refParent.getJSDocInfo() : ref.node.getJSDocInfo();
                }
            }
            return null;
        }
    }

    static class Ref implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            SET_FROM_GLOBAL,
            SET_FROM_LOCAL,
            PROTOTYPE_GET,
            ALIASING_GET,
            DIRECT_GET,
            CALL_GET,
            DELETE_PROP;}

        com.google.javascript.rhino.Node node;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.rhino.jstype.StaticSourceFile source;

        final com.google.javascript.jscomp.GlobalNamespace.Name name;

        final com.google.javascript.jscomp.GlobalNamespace.Ref.Type type;

        final com.google.javascript.jscomp.Scope scope;

        final int preOrderIndex;

        private com.google.javascript.jscomp.GlobalNamespace.Ref twin = null;

        Ref(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.GlobalNamespace.Name name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = node;
            this.name = name;
            this.module = (t.getInput() == null) ? null : t.getInput().getModule();
            this.source = node.getStaticSourceFile();
            this.type = type;
            this.scope = t.getScope();
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref original, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = original.node;
            this.name = original.name;
            this.module = original.module;
            this.source = original.source;
            this.type = type;
            this.scope = original.scope;
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.type = type;
            this.module = null;
            this.source = null;
            this.scope = null;
            this.name = null;
            this.preOrderIndex = index;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return node;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return source;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSymbol() {
            return name;
        }

        com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }

        java.lang.String getSourceName() {
            return source == null ? "" : source.getName();
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref getTwin() {
            return twin;
        }

        boolean isSet() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL);
        }

        static void markTwins(com.google.javascript.jscomp.GlobalNamespace.Ref a, com.google.javascript.jscomp.GlobalNamespace.Ref b) {
            com.google.common.base.Preconditions.checkArgument(((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET)) && ((((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)));
            a.twin = b;
            b.twin = a;
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref cloneAndReclassify(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(this, type, this.preOrderIndex);
        }

        static com.google.javascript.jscomp.GlobalNamespace.Ref createRefForTesting(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(type, -1);
        }
    }

    static class Tracker implements com.google.javascript.jscomp.CompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.io.PrintStream stream;

        private final com.google.common.base.Predicate<java.lang.String> isInterestingSymbol;

        private java.util.Set<java.lang.String> previousSymbolsInTree = com.google.common.collect.ImmutableSet.of();

        Tracker(com.google.javascript.jscomp.AbstractCompiler compiler, java.io.PrintStream stream, com.google.common.base.Predicate<java.lang.String> isInterestingSymbol) {
            this.compiler = compiler;
            this.stream = stream;
            this.isInterestingSymbol = isInterestingSymbol;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            com.google.javascript.jscomp.GlobalNamespace namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, externs, root);
            java.util.Set<java.lang.String> currentSymbols = com.google.common.collect.Sets.newTreeSet();
            for (java.lang.String name : namespace.getNameIndex().keySet()) {
                if (isInterestingSymbol.apply(name)) {
                    currentSymbols.add(name);
                }
            }
            java.lang.String passName = compiler.getLastPassName();
            if (passName == null) {
                passName = "[Unknown pass]";
            }
            for (java.lang.String sym : currentSymbols) {
                if (!previousSymbolsInTree.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Added by %s", sym, passName));
                }
            }
            for (java.lang.String sym : previousSymbolsInTree) {
                if (!currentSymbols.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Removed by %s", sym, passName));
                }
            }
            previousSymbolsInTree = currentSymbols;
        }
    }
}
[11324061] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659889558918
GPR[SSUN]-1659889558918
GPR[ESUN]-1659889558918
GPR[SSUN]-1659889558918
-839544615
GPR[SPVATF]-1659889559210
GPR[EPVATF]-1659889560110
GPR[SPS]-1659889560110
[11326551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:425.
GPR[EPS]-1659889561409
GPR[SPVATF]-1659889561409
GPR[EPVATF]-1659889562297
GPR[SPS]-1659889562297
GPR[EPS]-1659889812166
GPR[EPS]-1659890862789
GPR[ESUN]-1659890862790
GPR[SSUN]-1659890862790
-839544615
GPR[ESUN]-1659890863250
GPR[SSUN]-1659890863251
-839544615
GPR[ESUN]-1659890863526
GPR[SSUN]-1659890863526
-839544615
GPR[SPVATF]-1659890863804
GPR[EPVATF]-1659890864647
GPR[SPS]-1659890864647
GPR[EPS]-1659890944601
GPR[SPVATF]-1659890944602
GPR[EPVATF]-1659890945468
GPR[SPS]-1659890945468
[14509745] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659892744602
GPR[SSUN]-1659892744602
-839544615
GPR[ESUN]-1659892745075
GPR[SSUN]-1659892745075
-839544615
GPR[ESUN]-1659892745360
GPR[SSUN]-1659892745360
-839544615
GPR[ESUN]-1659892745655
GPR[SSUN]-1659892745655
-839544615
GPR[ESUN]-1659892745940
GPR[SSUN]-1659892745940
-839544615
GPR[ESUN]-1659892746226
GPR[SSUN]-1659892746226
-839544615
GPR[SPVATF]-1659892746613
GPR[EPVATF]-1659892747499
GPR[SPS]-1659892747499
GPR[EPS]-1659893196302
GPR[ESUN]-1659893196302
GPR[SSUN]-1659893196302
-839544615
GPR[SPVATF]-1659893198041
GPR[EPVATF]-1659893198761
GPR[SPS]-1659893198761
GPR[EPS]-1659893415994
GPR[SPVATF]-1659893415994
GPR[EPVATF]-1659893417034
GPR[SPS]-1659893417034
GPR[EPS]-1659893631684
GPR[ESUN]-1659893631684
GPR[SSUN]-1659893631684
GPR[ESUN]-1659893631684
GPR[SSUN]-1659893631684
GPR[ESUN]-1659893631684
GPR[SSUN]-1659893631684
GPR[ESUN]-1659893631684
GPR[SSUN]-1659893631684
-839544615
GPR[ESUN]-1659893632283
GPR[SSUN]-1659893632283
-839544615
GPR[SPVATF]-1659893632792
GPR[EPVATF]-1659893633676
GPR[SPS]-1659893633676
[15401550] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GlobalNamespace implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref> {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.Node root;

    private final com.google.javascript.rhino.Node externsRoot;

    private boolean inExterns;

    private com.google.javascript.jscomp.Scope externsScope;

    private boolean generated = false;

    private int currentPreOrderIndex = 0;

    private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> globalNames = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();

    private java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> nameMap = new java.util.HashMap<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name>();

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root) {
        this(compiler, null, root);
    }

    GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node root) {
        this.compiler = compiler;
        this.externsRoot = externsRoot;
        this.root = root;
    }

    boolean hasExternsRoot() {
        return externsRoot != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return root.getParent();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getSlot(java.lang.String name) {
        return getOwnSlot(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.GlobalNamespace.Name getOwnSlot(java.lang.String name) {
        ensureGenerated();
        return nameMap.get(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        return compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Ref> getReferences(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        ensureGenerated();
        return java.util.Collections.unmodifiableList(slot.getRefs());
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.GlobalNamespace.Name slot) {
        return this;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace.Name> getAllSymbols() {
        ensureGenerated();
        return java.util.Collections.unmodifiableCollection(getNameIndex().values());
    }

    private void ensureGenerated() {
        if (!generated) {
            process();
        }
    }

    java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> getNameForest() {
        ensureGenerated();
        return globalNames;
    }

    java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name> getNameIndex() {
        ensureGenerated();
        return nameMap;
    }

    void scanNewNodes(com.google.javascript.jscomp.Scope scope, java.util.Set<com.google.javascript.rhino.Node> newNodes) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace(new com.google.javascript.jscomp.GlobalNamespace.NodeFilter(newNodes)));
        t.traverseAtScope(scope);
    }

    private static class NodeFilter implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        private final java.util.Set<com.google.javascript.rhino.Node> newNodes;

        NodeFilter(java.util.Set<com.google.javascript.rhino.Node> newNodes) {
            this.newNodes = newNodes;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            if (!n.isQualifiedName()) {
                return false;
            }
            com.google.javascript.rhino.Node current;
            for (current = n; current.isGetProp(); current = current.getFirstChild()) {
                if (newNodes.contains(current)) {
                    return true;
                }
            }
            return current.isName() && newNodes.contains(current);
        }
    }

    private void process() {
        if (externsRoot != null) {
            inExterns = true;
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externsRoot, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        }
        inExterns = false;
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace());
        generated = true;
    }

    private boolean isGlobalNameReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        java.lang.String topVarName = getTopVarName(name);
        return isGlobalVarReference(topVarName, s);
    }

    private java.lang.String getTopVarName(java.lang.String name) {
        int firstDotIndex = name.indexOf('.');
        return firstDotIndex == (-1) ? name : name.substring(0, firstDotIndex);
    }

    private boolean isGlobalVarReference(java.lang.String name, com.google.javascript.jscomp.Scope s) {
        com.google.javascript.jscomp.Scope.Var v = s.getVar(name);
        if ((v == null) && (externsScope != null)) {
            v = externsScope.getVar(name);
        }
        return (v != null) && (!v.isLocal());
    }

    private boolean isGlobalScope(com.google.javascript.jscomp.Scope s) {
        return s.getParent() == null;
    }

    private class BuildGlobalNamespace implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter;

        BuildGlobalNamespace() {
            this(null);
        }

        BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node> nodeFilter) {
            this.nodeFilter = nodeFilter;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            collect(t, n, parent);
            return true;
        }

        public void collect(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if ((nodeFilter != null) && (!nodeFilter.apply(n))) {
                return;
            }
            if ((externsRoot != null) && (n == externsRoot)) {
                externsScope = t.getScope();
            }
            java.lang.String name;
            boolean isSet = false;
            com.google.javascript.jscomp.GlobalNamespace.Name.Type type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            boolean isPropAssign = false;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(362).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex",com.google.javascript.jscomp.GlobalNamespace.this.currentPreOrderIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("isSet",isSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.nameMap",com.google.javascript.jscomp.GlobalNamespace.this.nameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("isPropAssign",isPropAssign);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsRoot",com.google.javascript.jscomp.GlobalNamespace.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.globalNames",com.google.javascript.jscomp.GlobalNamespace.this.globalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.compiler",com.google.javascript.jscomp.GlobalNamespace.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter",com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.this.nodeFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.root",com.google.javascript.jscomp.GlobalNamespace.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.inExterns",com.google.javascript.jscomp.GlobalNamespace.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.externsScope",com.google.javascript.jscomp.GlobalNamespace.this.externsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectInput("com.google.javascript.jscomp.GlobalNamespace.this.generated",com.google.javascript.jscomp.GlobalNamespace.this.generated);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(362).collectionEnds();
            }
            if (runtimeAngelicValue)
                switch (n.getType()) {
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        name = null;
                        if ((parent != null) && parent.isObjectLit()) {
                            name = getNameForObjLitKey(n);
                        }
                        if (name == null) {
                            return;
                        }
                        isSet = true;
                        switch (n.getType()) {
                            case com.google.javascript.rhino.Token.STRING_KEY :
                                type = getValueType(n.getFirstChild());
                                break;
                            case com.google.javascript.rhino.Token.GETTER_DEF :
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET;
                                break;
                            case com.google.javascript.rhino.Token.SETTER_DEF :
                                type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET;
                                break;
                            default :
                                throw new java.lang.IllegalStateException("unexpected:" + n);
                        }
                        break;
                    case com.google.javascript.rhino.Token.NAME :
                        if (parent != null) {
                            switch (parent.getType()) {
                                case com.google.javascript.rhino.Token.VAR :
                                    isSet = true;
                                    com.google.javascript.rhino.Node rvalue = n.getFirstChild();
                                    type = (rvalue == null) ? com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER : getValueType(rvalue);
                                    break;
                                case com.google.javascript.rhino.Token.ASSIGN :
                                    if (parent.getFirstChild() == n) {
                                        isSet = true;
                                        type = getValueType(n.getNext());
                                    }
                                    break;
                                case com.google.javascript.rhino.Token.GETPROP :
                                    return;
                                case com.google.javascript.rhino.Token.FUNCTION :
                                    com.google.javascript.rhino.Node gramps = parent.getParent();
                                    if ((gramps == null) || com.google.javascript.jscomp.NodeUtil.isFunctionExpression(parent)) {
                                        return;
                                    }
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                                    break;
                                case com.google.javascript.rhino.Token.INC :
                                case com.google.javascript.rhino.Token.DEC :
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                    break;
                                default :
                                    if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                        isSet = true;
                                        type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                    }
                            }
                        }
                        name = n.getString();
                        break;
                    case com.google.javascript.rhino.Token.GETPROP :
                        if (parent != null) {
                            switch (parent.getType()) {
                                case com.google.javascript.rhino.Token.ASSIGN :
                                    if (parent.getFirstChild() == n) {
                                        isSet = true;
                                        type = getValueType(n.getNext());
                                        isPropAssign = true;
                                    }
                                    break;
                                case com.google.javascript.rhino.Token.INC :
                                case com.google.javascript.rhino.Token.DEC :
                                    isSet = true;
                                    type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                    break;
                                case com.google.javascript.rhino.Token.GETPROP :
                                    return;
                                default :
                                    if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) {
                                        isSet = true;
                                        type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
                                    }
                            }
                        }
                        name = n.getQualifiedName();
                        if (name == null) {
                            return;
                        }
                        break;
                    default :
                        return;
                }

            com.google.javascript.jscomp.Scope scope = t.getScope();
            if (!isGlobalNameReference(name, scope)) {
                return;
            }
            if (isSet) {
                if (isGlobalScope(scope)) {
                    handleSetFromGlobal(t, n, parent, name, isPropAssign, type);
                } else {
                    handleSetFromLocal(t, n, parent, name);
                }
            } else {
                handleGet(t, n, parent, name);
            }
        }

        java.lang.String getNameForObjLitKey(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.common.base.Preconditions.checkState(parent.isObjectLit());
            com.google.javascript.rhino.Node gramps = parent.getParent();
            if (gramps == null) {
                return null;
            }
            com.google.javascript.rhino.Node greatGramps = gramps.getParent();
            java.lang.String name;
            switch (gramps.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                    if ((greatGramps == null) || (!greatGramps.isVar())) {
                        return null;
                    }
                    name = gramps.getString();
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    com.google.javascript.rhino.Node lvalue = gramps.getFirstChild();
                    name = lvalue.getQualifiedName();
                    break;
                case com.google.javascript.rhino.Token.STRING_KEY :
                    if ((greatGramps != null) && greatGramps.isObjectLit()) {
                        name = getNameForObjLitKey(gramps);
                    } else {
                        return null;
                    }
                    break;
                default :
                    return null;
            }
            if (name != null) {
                java.lang.String key = n.getString();
                if (com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) {
                    return (name + '.') + key;
                }
            }
            return null;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name.Type getValueType(com.google.javascript.rhino.Node n) {
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.OBJECTLIT :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT;
                case com.google.javascript.rhino.Token.FUNCTION :
                    return com.google.javascript.jscomp.GlobalNamespace.Name.Type.FUNCTION;
                case com.google.javascript.rhino.Token.OR :
                    return getValueType(n.getLastChild());
                case com.google.javascript.rhino.Token.HOOK :
                    com.google.javascript.rhino.Node second = n.getFirstChild().getNext();
                    com.google.javascript.jscomp.GlobalNamespace.Name.Type t = getValueType(second);
                    if (t != com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) {
                        return t;
                    }
                    com.google.javascript.rhino.Node third = second.getNext();
                    return getValueType(third);
            }
            return com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
        }

        void handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, boolean isPropAssign, com.google.javascript.jscomp.GlobalNamespace.Name.Type type) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.type = type;
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            } else if (isTypeDeclaration(n, parent)) {
                nameObj.setDeclaredType();
            }
        }

        private boolean isTypeDeclaration(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            com.google.javascript.rhino.Node valueNode = com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(n);
            com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(n);
            return ((info != null) && (valueNode != null)) && (((info.isConstructor() && valueNode.isFunction()) || (info.isInterface() && valueNode.isFunction())) || (info.hasEnumParameterType() && valueNode.isObjectLit()));
        }

        void handleSetFromLocal(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            com.google.javascript.jscomp.GlobalNamespace.Ref set = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);
            nameObj.addRef(set);
            if (isNestedAssign(parent)) {
                com.google.javascript.jscomp.GlobalNamespace.Ref get = new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET, currentPreOrderIndex++);
                nameObj.addRef(get);
                com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(set, get);
            }
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            if (maybeHandlePrototypePrefix(t, n, parent, name)) {
                return;
            }
            com.google.javascript.jscomp.GlobalNamespace.Ref.Type type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
            if (parent != null) {
                switch (parent.getType()) {
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.CALL_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.NEW :
                        type = (n == parent.getFirstChild()) ? com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET : com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                    case com.google.javascript.rhino.Token.OR :
                    case com.google.javascript.rhino.Token.AND :
                        type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        break;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (n != parent.getFirstChild()) {
                            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                        break;
                    default :
                        type = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        break;
                }
            }
            handleGet(t, n, parent, name, type);
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref.Type determineGetTypeForHookOrBooleanExpr(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node parent, java.lang.String name) {
            com.google.javascript.rhino.Node prev = parent;
            for (com.google.javascript.rhino.Node anc : parent.getAncestors()) {
                switch (anc.getType()) {
                    case com.google.javascript.rhino.Token.EXPR_RESULT :
                    case com.google.javascript.rhino.Token.VAR :
                    case com.google.javascript.rhino.Token.IF :
                    case com.google.javascript.rhino.Token.WHILE :
                    case com.google.javascript.rhino.Token.FOR :
                    case com.google.javascript.rhino.Token.TYPEOF :
                    case com.google.javascript.rhino.Token.VOID :
                    case com.google.javascript.rhino.Token.NOT :
                    case com.google.javascript.rhino.Token.BITNOT :
                    case com.google.javascript.rhino.Token.POS :
                    case com.google.javascript.rhino.Token.NEG :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                    case com.google.javascript.rhino.Token.HOOK :
                        if (anc.getFirstChild() == prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DIRECT_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.ASSIGN :
                        if (!name.equals(anc.getFirstChild().getQualifiedName())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.NAME :
                        if (!name.equals(anc.getString())) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.CALL :
                        if (anc.getFirstChild() != prev) {
                            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
                        }
                        break;
                    case com.google.javascript.rhino.Token.DELPROP :
                        return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.DELETE_PROP;
                }
                prev = anc;
            }
            return com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET;
        }

        void handleGet(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            com.google.javascript.jscomp.GlobalNamespace.Name nameObj = getOrCreateName(name);
            nameObj.addRef(new com.google.javascript.jscomp.GlobalNamespace.Ref(t, n, nameObj, type, currentPreOrderIndex++));
        }

        boolean maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, java.lang.String name) {
            int numLevelsToRemove;
            java.lang.String prefix;
            if (name.endsWith(".prototype")) {
                numLevelsToRemove = 1;
                prefix = name.substring(0, name.length() - 10);
            } else {
                int i = name.indexOf(".prototype.");
                if (i == (-1)) {
                    return false;
                }
                prefix = name.substring(0, i);
                numLevelsToRemove = 2;
                i = name.indexOf('.', i + 11);
                while (i >= 0) {
                    numLevelsToRemove++;
                    i = name.indexOf('.', i + 1);
                } 
            }
            if ((parent != null) && com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n)) {
                return true;
            }
            for (int i = 0; i < numLevelsToRemove; i++) {
                parent = n;
                n = n.getFirstChild();
            }
            handleGet(t, n, parent, prefix, com.google.javascript.jscomp.GlobalNamespace.Ref.Type.PROTOTYPE_GET);
            return true;
        }

        boolean isNestedAssign(com.google.javascript.rhino.Node parent) {
            return parent.isAssign() && (!parent.getParent().isExprResult());
        }

        com.google.javascript.jscomp.GlobalNamespace.Name getOrCreateName(java.lang.String name) {
            com.google.javascript.jscomp.GlobalNamespace.Name node = nameMap.get(name);
            if (node == null) {
                int i = name.lastIndexOf('.');
                if (i >= 0) {
                    java.lang.String parentName = name.substring(0, i);
                    com.google.javascript.jscomp.GlobalNamespace.Name parent = getOrCreateName(parentName);
                    node = parent.addProperty(name.substring(i + 1), inExterns);
                } else {
                    node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, null, inExterns);
                    globalNames.add(node);
                }
                nameMap.put(name, node);
            }
            return node;
        }
    }

    static class Name implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            OBJECTLIT,
            FUNCTION,
            GET,
            SET,
            OTHER;}

        private final java.lang.String baseName;

        final com.google.javascript.jscomp.GlobalNamespace.Name parent;

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name> props;

        private com.google.javascript.jscomp.GlobalNamespace.Ref declaration;

        private java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> refs;

        com.google.javascript.jscomp.GlobalNamespace.Name.Type type;

        private boolean declaredType = false;

        private boolean hasDeclaredTypeDescendant = false;

        int globalSets = 0;

        int localSets = 0;

        int aliasingGets = 0;

        int totalGets = 0;

        int callGets = 0;

        int deleteProps = 0;

        final boolean inExterns;

        com.google.javascript.rhino.JSDocInfo docInfo = null;

        Name(java.lang.String name, com.google.javascript.jscomp.GlobalNamespace.Name parent, boolean inExterns) {
            this.baseName = name;
            this.parent = parent;
            this.type = com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER;
            this.inExterns = inExterns;
        }

        com.google.javascript.jscomp.GlobalNamespace.Name addProperty(java.lang.String name, boolean inExterns) {
            if (props == null) {
                props = new java.util.ArrayList<com.google.javascript.jscomp.GlobalNamespace.Name>();
            }
            com.google.javascript.jscomp.GlobalNamespace.Name node = new com.google.javascript.jscomp.GlobalNamespace.Name(name, this, inExterns);
            props.add(node);
            return node;
        }

        java.lang.String getBaseName() {
            return baseName;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return getFullName();
        }

        java.lang.String getFullName() {
            return parent == null ? baseName : (parent.getFullName() + '.') + baseName;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.GlobalNamespace.Ref getDeclaration() {
            return declaration;
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return false;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return null;
        }

        void addRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            addRefInternal(ref);
            switch (ref.type) {
                case SET_FROM_GLOBAL :
                    if (declaration == null) {
                        declaration = ref;
                        docInfo = com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(ref);
                    }
                    globalSets++;
                    break;
                case SET_FROM_LOCAL :
                    localSets++;
                    break;
                case PROTOTYPE_GET :
                case DIRECT_GET :
                    totalGets++;
                    break;
                case ALIASING_GET :
                    aliasingGets++;
                    totalGets++;
                    break;
                case CALL_GET :
                    callGets++;
                    totalGets++;
                    break;
                case DELETE_PROP :
                    deleteProps++;
                    break;
                default :
                    throw new java.lang.IllegalStateException();
            }
        }

        void removeRef(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if ((refs != null) && refs.remove(ref)) {
                if (ref == declaration) {
                    declaration = null;
                    if (refs != null) {
                        for (com.google.javascript.jscomp.GlobalNamespace.Ref maybeNewDecl : refs) {
                            if (maybeNewDecl.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) {
                                declaration = maybeNewDecl;
                                break;
                            }
                        }
                    }
                }
                switch (ref.type) {
                    case SET_FROM_GLOBAL :
                        globalSets--;
                        break;
                    case SET_FROM_LOCAL :
                        localSets--;
                        break;
                    case PROTOTYPE_GET :
                    case DIRECT_GET :
                        totalGets--;
                        break;
                    case ALIASING_GET :
                        aliasingGets--;
                        totalGets--;
                        break;
                    case CALL_GET :
                        callGets--;
                        totalGets--;
                        break;
                    case DELETE_PROP :
                        deleteProps--;
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            }
        }

        java.util.List<com.google.javascript.jscomp.GlobalNamespace.Ref> getRefs() {
            return refs == null ? com.google.common.collect.ImmutableList.<com.google.javascript.jscomp.GlobalNamespace.Ref>of() : refs;
        }

        void addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (refs == null) {
                refs = com.google.common.collect.Lists.newArrayList();
            }
            refs.add(ref);
        }

        boolean canEliminate() {
            if ((!canCollapseUnannotatedChildNames()) || (totalGets > 0)) {
                return false;
            }
            if (props != null) {
                for (com.google.javascript.jscomp.GlobalNamespace.Name n : props) {
                    if (!n.canCollapse()) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean isSimpleStubDeclaration() {
            if (getRefs().size() == 1) {
                com.google.javascript.jscomp.GlobalNamespace.Ref ref = refs.get(0);
                if ((ref.node.getParent() != null) && ref.node.getParent().isExprResult()) {
                    return true;
                }
            }
            return false;
        }

        boolean canCollapse() {
            return ((!inExterns) && (!isGetOrSetDefinition())) && (declaredType || ((((parent == null) || parent.canCollapseUnannotatedChildNames()) && ((globalSets > 0) || (localSets > 0))) && (deleteProps == 0)));
        }

        boolean isGetOrSetDefinition() {
            return (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.GET) || (this.type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.SET);
        }

        boolean canCollapseUnannotatedChildNames() {
            if (((((type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OTHER) || isGetOrSetDefinition()) || (globalSets != 1)) || (localSets != 0)) || (deleteProps != 0)) {
                return false;
            }
            com.google.common.base.Preconditions.checkNotNull(declaration);
            if (declaration.getTwin() != null) {
                return false;
            }
            if (declaredType) {
                return true;
            }
            if ((parent != null) && parent.shouldKeepKeys()) {
                return false;
            }
            if (aliasingGets > 0) {
                return false;
            }
            return (parent == null) || parent.canCollapseUnannotatedChildNames();
        }

        boolean shouldKeepKeys() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT) && (aliasingGets > 0);
        }

        boolean needsToBeStubbed() {
            return (globalSets == 0) && (localSets > 0);
        }

        void setDeclaredType() {
            declaredType = true;
            for (com.google.javascript.jscomp.GlobalNamespace.Name ancestor = parent; ancestor != null; ancestor = ancestor.parent) {
                ancestor.hasDeclaredTypeDescendant = true;
            }
        }

        boolean isDeclaredType() {
            return declaredType;
        }

        boolean isNamespace() {
            return hasDeclaredTypeDescendant && (type == com.google.javascript.jscomp.GlobalNamespace.Name.Type.OBJECTLIT);
        }

        boolean isSimpleName() {
            return parent == null;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return (((((((((((getFullName() + " (") + type) + "): globalSets=") + globalSets) + ", localSets=") + localSets) + ", totalGets=") + totalGets) + ", aliasingGets=") + aliasingGets) + ", callGets=") + callGets;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return docInfo;
        }

        private static com.google.javascript.rhino.JSDocInfo getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref ref) {
            if (ref.node != null) {
                com.google.javascript.rhino.Node refParent = ref.node.getParent();
                switch (refParent.getType()) {
                    case com.google.javascript.rhino.Token.FUNCTION :
                    case com.google.javascript.rhino.Token.ASSIGN :
                        return refParent.getJSDocInfo();
                    case com.google.javascript.rhino.Token.VAR :
                        return ref.node == refParent.getFirstChild() ? refParent.getJSDocInfo() : ref.node.getJSDocInfo();
                }
            }
            return null;
        }
    }

    static class Ref implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        enum Type {

            SET_FROM_GLOBAL,
            SET_FROM_LOCAL,
            PROTOTYPE_GET,
            ALIASING_GET,
            DIRECT_GET,
            CALL_GET,
            DELETE_PROP;}

        com.google.javascript.rhino.Node node;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.rhino.jstype.StaticSourceFile source;

        final com.google.javascript.jscomp.GlobalNamespace.Name name;

        final com.google.javascript.jscomp.GlobalNamespace.Ref.Type type;

        final com.google.javascript.jscomp.Scope scope;

        final int preOrderIndex;

        private com.google.javascript.jscomp.GlobalNamespace.Ref twin = null;

        Ref(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.GlobalNamespace.Name name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = node;
            this.name = name;
            this.module = (t.getInput() == null) ? null : t.getInput().getModule();
            this.source = node.getStaticSourceFile();
            this.type = type;
            this.scope = t.getScope();
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref original, com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.node = original.node;
            this.name = original.name;
            this.module = original.module;
            this.source = original.source;
            this.type = type;
            this.scope = original.scope;
            this.preOrderIndex = index;
        }

        private Ref(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type, int index) {
            this.type = type;
            this.module = null;
            this.source = null;
            this.scope = null;
            this.name = null;
            this.preOrderIndex = index;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return node;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return source;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSymbol() {
            return name;
        }

        com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }

        java.lang.String getSourceName() {
            return source == null ? "" : source.getName();
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref getTwin() {
            return twin;
        }

        boolean isSet() {
            return (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL);
        }

        static void markTwins(com.google.javascript.jscomp.GlobalNamespace.Ref a, com.google.javascript.jscomp.GlobalNamespace.Ref b) {
            com.google.common.base.Preconditions.checkArgument(((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET)) && ((((a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL) || (a.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_GLOBAL)) || (b.type == com.google.javascript.jscomp.GlobalNamespace.Ref.Type.SET_FROM_LOCAL)));
            a.twin = b;
            b.twin = a;
        }

        com.google.javascript.jscomp.GlobalNamespace.Ref cloneAndReclassify(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(this, type, this.preOrderIndex);
        }

        static com.google.javascript.jscomp.GlobalNamespace.Ref createRefForTesting(com.google.javascript.jscomp.GlobalNamespace.Ref.Type type) {
            return new com.google.javascript.jscomp.GlobalNamespace.Ref(type, -1);
        }
    }

    static class Tracker implements com.google.javascript.jscomp.CompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.io.PrintStream stream;

        private final com.google.common.base.Predicate<java.lang.String> isInterestingSymbol;

        private java.util.Set<java.lang.String> previousSymbolsInTree = com.google.common.collect.ImmutableSet.of();

        Tracker(com.google.javascript.jscomp.AbstractCompiler compiler, java.io.PrintStream stream, com.google.common.base.Predicate<java.lang.String> isInterestingSymbol) {
            this.compiler = compiler;
            this.stream = stream;
            this.isInterestingSymbol = isInterestingSymbol;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            com.google.javascript.jscomp.GlobalNamespace namespace = new com.google.javascript.jscomp.GlobalNamespace(compiler, externs, root);
            java.util.Set<java.lang.String> currentSymbols = com.google.common.collect.Sets.newTreeSet();
            for (java.lang.String name : namespace.getNameIndex().keySet()) {
                if (isInterestingSymbol.apply(name)) {
                    currentSymbols.add(name);
                }
            }
            java.lang.String passName = compiler.getLastPassName();
            if (passName == null) {
                passName = "[Unknown pass]";
            }
            for (java.lang.String sym : currentSymbols) {
                if (!previousSymbolsInTree.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Added by %s", sym, passName));
                }
            }
            for (java.lang.String sym : previousSymbolsInTree) {
                if (!currentSymbols.contains(sym)) {
                    stream.println(java.lang.String.format("%s: Removed by %s", sym, passName));
                }
            }
            previousSymbolsInTree = currentSymbols;
        }
    }
}
[15401550] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659893636407
GPR[SSUN]-1659893636407
-839544615
GPR[ESUN]-1659893636729
GPR[SSUN]-1659893636729
-839544615
GPR[ESUN]-1659893637076
GPR[SSUN]-1659893637076
-839544615
GPR[ESUN]-1659893637385
GPR[SSUN]-1659893637385
-839544615
GPR[SPVATF]-1659893637696
GPR[EPVATF]-1659893638434
GPR[SPS]-1659893638434
GPR[EPS]-1659893657929
GPR[SPVATF]-1659893657929
GPR[EPVATF]-1659893658561
GPR[SPS]-1659893658561
GPR[EPS]-1659893746473
GPR[ESUN]-1659893746473
GPR[SSUN]-1659893746473
-839544615
GPR[SPVATF]-1659893746943
GPR[EPVATF]-1659893747643
GPR[SPS]-1659893747643
[15514441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:311.
GPR[EPS]-1659893749298
GPR[SPVATF]-1659893749299
GPR[EPVATF]-1659893749961
GPR[SPS]-1659893749961
GPR[EPS]-1659894121188
GPR[ESUN]-1659894121188
GPR[SSUN]-1659894121188
-839544615
GPR[ESUN]-1659894121647
GPR[SSUN]-1659894121647
-839544615
GPR[SPVATF]-1659894121942
GPR[EPVATF]-1659894122720
GPR[SPS]-1659894122720
GPR[EPS]-1659894304002
GPR[ESUN]-1659894304002
GPR[SSUN]-1659894304002
-839544615
GPR[ESUN]-1659894304458
GPR[SSUN]-1659894304458
-839544615
GPR[ESUN]-1659894304763
GPR[SSUN]-1659894304763
-839544615
GPR[SPVATF]-1659894305068
GPR[EPVATF]-1659894305900
GPR[SPS]-1659894305900
[16072640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace:226.
GPR[EPS]-1659894307498
GPR[ESUN]-1659894307498
GPR[SSUN]-1659894307498
-839544615
GPR[SPVATF]-1659894307800
GPR[EPVATF]-1659894310224
GPR[SPS]-1659894310224
GPR[EPS]-1659894344207
GPR[ESUN]-1659894344207
GPR[SSUN]-1659894344207
-839544615
GPR[SPVATF]-1659894344489
GPR[EPVATF]-1659894345327
GPR[SPS]-1659894345327
[16111894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace:223.
GPR[EPS]-1659894346751
GPR[ESUN]-1659894346751
GPR[SSUN]-1659894346751
-839544615
GPR[SPVATF]-1659894347035
GPR[EPVATF]-1659894347892
GPR[SPS]-1659894347892
GPR[EPS]-1659894361216
GPR[SPVATF]-1659894361216
GPR[EPVATF]-1659894362072
GPR[SPS]-1659894362072
GPR[EPS]-1659894379848
GPR[ESUN]-1659894379848
GPR[SSUN]-1659894379848
-839544615
GPR[ESUN]-1659894380129
GPR[SSUN]-1659894380130
-839544615
GPR[SPVATF]-1659894380408
GPR[EPVATF]-1659894381281
GPR[SPS]-1659894381281
GPR[EPS]-1659894398276
GPR[ESUN]-1659894398276
GPR[SSUN]-1659894398277
-839544615
GPR[SPVATF]-1659894398560
GPR[EPVATF]-1659894399408
GPR[SPS]-1659894399408
GPR[EPS]-1659894434208
GPR[SPVATF]-1659894434210
GPR[EPVATF]-1659894435061
GPR[SPS]-1659894435061
GPR[EPS]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473243
GPR[ESUN]-1659894473243
GPR[SSUN]-1659894473244
-1345859678
GPR[ESUN]-1659894473532
GPR[SSUN]-1659894473533
-1345859678
GPR[ESUN]-1659894473813
GPR[SSUN]-1659894473813
1537627151
GPR[ESUN]-1659894474040
GPR[SSUN]-1659894474040
-1345859678
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
GPR[ESUN]-1659894474320
GPR[SSUN]-1659894474320
-1117079791
GPR[ESUN]-1659894474538
GPR[SSUN]-1659894474538
-1117079791
GPR[SPVATF]-1659894474754
GPR[EPVATF]-1659894475631
GPR[SPS]-1659894475631
[16241302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:368.
GPR[EPS]-1659894476159
GPR[ESUN]-1659894476159
GPR[SSUN]-1659894476159
-1117079791
GPR[SPVATF]-1659894476373
GPR[EPVATF]-1659894477270
GPR[SPS]-1659894477270
[16242971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:367.
GPR[EPS]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
GPR[ESUN]-1659894477828
GPR[SSUN]-1659894477828
-1345859678
GPR[SPVATF]-1659894478107
GPR[EPVATF]-1659894478369
[16243512] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659894478369
GPR[EPVATF]-1659894478632
[16243775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894478632
GPR[SSUN]-1659894478632
GPR[ESUN]-1659894478632
GPR[SSUN]-1659894478632
704176156
GPR[ESUN]-1659894478848
GPR[SSUN]-1659894478848
704176156
GPR[SPVATF]-1659894479064
GPR[EPVATF]-1659894479328
[16244471] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659894479328
GPR[EPVATF]-1659894479592
[16244736] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894479593
GPR[SSUN]-1659894479593
704176156
GPR[SPVATF]-1659894479808
GPR[EPVATF]-1659894480073
[16245216] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894480073
GPR[SSUN]-1659894480073
704176156
GPR[SPVATF]-1659894480288
GPR[EPVATF]-1659894480552
[16245695] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894480552
GPR[SSUN]-1659894480552
704176156
GPR[ESUN]-1659894480767
GPR[SSUN]-1659894480767
GPR[ESUN]-1659894480767
GPR[SSUN]-1659894480767
GPR[ESUN]-1659894480767
GPR[SSUN]-1659894480767
GPR[ESUN]-1659894480767
GPR[SSUN]-1659894480767
2346
GPR[ESUN]-1659894480966
GPR[SSUN]-1659894480966
2433571
GPR[ESUN]-1659894481261
GPR[SSUN]-1659894481261
GPR[ESUN]-1659894481261
GPR[SSUN]-1659894481261
-1345859678
GPR[ESUN]-1659894481539
GPR[SSUN]-1659894481539
-1345859678
GPR[SPVATF]-1659894481818
GPR[EPVATF]-1659894482081
[16247225] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894482082
GPR[SSUN]-1659894482082
-1345859678
GPR[SPVATF]-1659894482363
GPR[EPVATF]-1659894482627
[16247770] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894482627
GPR[SSUN]-1659894482627
-1345859678
GPR[SPVATF]-1659894482911
GPR[EPVATF]-1659894483186
[16248330] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659894483187
GPR[EPVATF]-1659894483454
[16248597] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894483454
GPR[SSUN]-1659894483454
-1345859678
GPR[ESUN]-1659894483737
GPR[SSUN]-1659894483737
-1345859678
GPR[SPVATF]-1659894484015
GPR[EPVATF]-1659894484282
[16249426] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894484283
GPR[SSUN]-1659894484283
-1345859678
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
GPR[ESUN]-1659894484563
GPR[SSUN]-1659894484563
-1345859678
GPR[SPVATF]-1659894484844
GPR[EPVATF]-1659894485110
[16250253] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659894485110
GPR[EPVATF]-1659894485378
[16250521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659894485378
GPR[SSUN]-1659894485378
GPR[ESUN]-1659894485378
GPR[SSUN]-1659894485378
-1117079791
GPR[ESUN]-1659894485595
GPR[SSUN]-1659894485595
-1117079791
GPR[SPVATF]-1659894485811
GPR[EPVATF]-1659894486686
GPR[SPS]-1659894486686
[16252376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659894487233
GPR[ESUN]-1659894487233
GPR[SSUN]-1659894487233
-1117079791
GPR[SPVATF]-1659894487453
GPR[EPVATF]-1659894488332
GPR[SPS]-1659894488332
[16254002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:278.
GPR[EPS]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488859
GPR[ESUN]-1659894488859
GPR[SSUN]-1659894488860
GPR[ESUN]-1659894488860
GPR[SSUN]-1659894488860
GPR[ESUN]-1659894488860
GPR[SSUN]-1659894488860
-1117079791
GPR[ESUN]-1659894489073
GPR[SSUN]-1659894489073
-1117079791
GPR[SPVATF]-1659894489286
GPR[EPVATF]-1659894490176
GPR[SPS]-1659894490176
[16255851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:161.
GPR[EPS]-1659894490708
GPR[ESUN]-1659894490708
GPR[SSUN]-1659894490708
2433571
GPR[ESUN]-1659894490971
GPR[SSUN]-1659894490971
GPR[ESUN]-1659894490971
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
GPR[ESUN]-1659894490972
GPR[SSUN]-1659894490972
-2054390034
GPR[SPVATF]-1659894491253
GPR[EPVATF]-1659894492175
GPR[SPS]-1659894492175
[16257957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars:244.
GPR[EPS]-1659894492814
GPR[ESUN]-1659894492814
GPR[SSUN]-1659894492814
-1117079791
GPR[SPVATF]-1659894493031
GPR[EPVATF]-1659894493916
GPR[SPS]-1659894493916
[16259592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:810.
GPR[EPS]-1659894494449
GPR[ESUN]-1659894494449
GPR[SSUN]-1659894494449
GPR[ESUN]-1659894494449
GPR[SSUN]-1659894494449
-1345859678
GPR[ESUN]-1659894494728
GPR[SSUN]-1659894494729
-1345859678
GPR[SPVATF]-1659894495004
GPR[EPVATF]-1659894495880
GPR[SPS]-1659894495880
GPR[EPS]-1659895505673
GPR[EPS]-1659896234237
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 11:17:14 AM PDT\n
End running Nopol Closure/130 results at /experiment_home///results/Nopol/Closure/130/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_130
GPR[SSLE]-1659896235197
GPR[ESLE]-1659896295200
