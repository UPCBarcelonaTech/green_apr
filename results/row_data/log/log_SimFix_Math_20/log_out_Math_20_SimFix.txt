Sleep 1m start
GPR[SSLI]-1661320982131
GPR[ESLI]-1661321042137
Running SimFix Math 20b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 283
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Math/20/seed_283/
Project lc: math
New out script/workingdir/SimFix/math/math_20_buggy
The file script/workingdir/SimFix/math/math_20_buggy does not exist!
script/workingdir/SimFix/math/math_20_buggy
Current directory: script/workingdir/SimFix/math/math_20_buggy
classpath:  script/workingdir/SimFix/math/math_20_buggy/target/classes:script/workingdir/SimFix/math/math_20_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_20_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1661321057980
GPR[ESLB]-1661321117985
Calling SimFix: at script/workingdir/SimFix/math/math_20_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-58
Date init: Tue 23 Aug 2022 11:05:19 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661321120036
=================================================
Project : math_20	start : 22/08/23 23:05

Field type inconsistancy 'start' with types : Vector2D and Vector3D
Field type inconsistancy 'end' with types : Vector2D and Vector3D
Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector2D and Vector3D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector2D and Vector3D
GPR[ESUP]-1661321122837
MM Purify? false
GPR[SFL]-1661321123398
GPR[EFL]-1661321123442
GPR[SFP]-1661321123442
TIMEOUT : 18000000
GPR[SSUN]-1661321123454
org.apache.commons.math3.optimization.direct.CMAESOptimizer,240
GPR[ESUN]-1661321125280
GPR[SSUN]-1661321125280
org.apache.commons.math3.optimization.direct.CMAESOptimizer,241
Find no block!
GPR[SSUN]-1661321125590
org.apache.commons.math3.optimization.direct.CMAESOptimizer,247
GPR[ESUN]-1661321127371
GPR[SSUN]-1661321127371
org.apache.commons.math3.optimization.direct.CMAESOptimizer,250
Find no block!
GPR[SSUN]-1661321127670
org.apache.commons.math3.optimization.direct.CMAESOptimizer,562
========
if(k<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321129600
GPR[SPVAP]-1661321129600
GPR[EPVAP]-1661321132428
GPR[EPVS]-1661321132428
========
if(lambda<=dimension){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321132431
GPR[SPVAP]-1661321132431
GPR[EPVAP]-1661321137318
GPR[SPVATF]-1661321137318
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321139293
GPR[EPVS]-1661321139293
========
if(order<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321139295
GPR[SPVAP]-1661321139295
GPR[EPVAP]-1661321140417
GPR[EPVS]-1661321140417
========
if(lambda<0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321140420
GPR[SPVAP]-1661321140420
GPR[EPVAP]-1661321142470
GPR[SPVATF]-1661321142470
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321144396
GPR[EPVS]-1661321144396
========
if(n<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321144398
GPR[SPVAP]-1661321144398
GPR[EPVAP]-1661321145541
GPR[EPVS]-1661321145541
========
if(n<0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321145545
GPR[SPVAP]-1661321145545
GPR[EPVAP]-1661321146687
GPR[EPVS]-1661321146687
========
if(bestValue<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321146694
GPR[SPVAP]-1661321146694
GPR[EPVAP]-1661321147805
GPR[EPVS]-1661321147805
========
if(i<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321147807
GPR[SPVAP]-1661321147807
GPR[EPVAP]-1661321148965
GPR[EPVS]-1661321148965
========
if(length<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321148968
GPR[SPVAP]-1661321148968
GPR[EPVAP]-1661321150065
GPR[EPVS]-1661321150065
========
if(dimension<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321150067
GPR[SPVAP]-1661321150067
GPR[EPVAP]-1661321152140
GPR[SPVATF]-1661321152140
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321154042
GPR[EPVS]-1661321154042
========
if(diagonalOnly<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321154044
GPR[SPVAP]-1661321154044
GPR[EPVAP]-1661321156089
GPR[SPVATF]-1661321156089
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321158052
GPR[EPVS]-1661321158052
========
if(lambda<=iterations){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321158054
GPR[SPVAP]-1661321158054
GPR[EPVAP]-1661321160096
GPR[SPVATF]-1661321160096
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321162046
GPR[EPVS]-1661321162046
========
if(lambda<=0){
B=eye(dimension,dimension);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321162048
GPR[SPVAP]-1661321162048
GPR[EPVAP]-1661321164092
GPR[SPVATF]-1661321164092
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321166034
GPR[EPVS]-1661321166034
========
if(lambda<=0){
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321166036
GPR[SPVAP]-1661321166036
GPR[EPVAP]-1661321168060
GPR[SPVATF]-1661321168060
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321169990
GPR[EPVS]-1661321169990
========
if(lambda<=0){
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321169992
GPR[SPVAP]-1661321169992
GPR[EPVAP]-1661321172017
GPR[SPVATF]-1661321172017
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321173960
GPR[EPVS]-1661321173960
========
if(lambda<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321173962
GPR[SPVAP]-1661321173962
GPR[EPVAP]-1661321175975
GPR[SPVATF]-1661321175975
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321177893
GPR[EPVS]-1661321177893
========
if(diagonalOnly<=iterations){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321177895
GPR[SPVAP]-1661321177895
GPR[EPVAP]-1661321179907
GPR[SPVATF]-1661321179907
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321181877
GPR[EPVS]-1661321181877
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321181879
GPR[SPVAP]-1661321181879
GPR[EPVAP]-1661321183934
GPR[SPVATF]-1661321183935
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321185874
GPR[EPVS]-1661321185874
========
if(diagonalOnly<=0){
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321185876
GPR[SPVAP]-1661321185876
GPR[EPVAP]-1661321187990
GPR[SPVATF]-1661321187990
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321189929
GPR[EPVS]-1661321189929
========
if(diagonalOnly<=0){
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321189931
GPR[SPVAP]-1661321189931
GPR[EPVAP]-1661321191985
GPR[SPVATF]-1661321191985
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321193914
GPR[EPVS]-1661321193914
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321193916
GPR[SPVAP]-1661321193916
GPR[EPVAP]-1661321195935
GPR[SPVATF]-1661321195935
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321197908
GPR[EPVS]-1661321197908
========
if(lambda<=iterations){
B=eye(dimension,dimension);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321197910
GPR[SPVAP]-1661321197910
GPR[EPVAP]-1661321199946
GPR[SPVATF]-1661321199946
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321201890
GPR[EPVS]-1661321201890
========
if(lambda<=iterations){
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321201892
GPR[SPVAP]-1661321201892
GPR[EPVAP]-1661321203935
GPR[SPVATF]-1661321203935
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321205907
GPR[EPVS]-1661321205907
========
if(lambda<=iterations){
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321205909
GPR[SPVAP]-1661321205909
GPR[EPVAP]-1661321207936
GPR[SPVATF]-1661321207936
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321209838
GPR[EPVS]-1661321209838
========
if(lambda<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321209840
GPR[SPVAP]-1661321209840
GPR[EPVAP]-1661321211844
GPR[SPVATF]-1661321211844
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321213770
GPR[EPVS]-1661321213770
========
if(lambda<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321213772
GPR[SPVAP]-1661321213772
GPR[EPVAP]-1661321215805
GPR[SPVATF]-1661321215805
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321217746
GPR[EPVS]-1661321217746
========
if(lambda<=0){
B=eye(dimension,dimension);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321217748
GPR[SPVAP]-1661321217748
GPR[EPVAP]-1661321219762
GPR[SPVATF]-1661321219762
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321221712
GPR[EPVS]-1661321221712
========
if(lambda<=0){
B=eye(dimension,dimension);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321221714
GPR[SPVAP]-1661321221714
GPR[EPVAP]-1661321223733
GPR[SPVATF]-1661321223733
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321225658
GPR[EPVS]-1661321225658
========
if(lambda<=0){
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321225660
GPR[SPVAP]-1661321225660
GPR[EPVAP]-1661321227700
GPR[SPVATF]-1661321227700
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321229638
GPR[EPVS]-1661321229638
========
if(lambda<=0){
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321229640
GPR[SPVAP]-1661321229640
GPR[EPVAP]-1661321231681
GPR[SPVATF]-1661321231682
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321233592
GPR[EPVS]-1661321233592
========
if(lambda<=0){
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321233594
GPR[SPVAP]-1661321233594
GPR[EPVAP]-1661321235637
GPR[SPVATF]-1661321235637
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321237552
GPR[EPVS]-1661321237552
========
if(diagonalOnly<=iterations){
B=eye(dimension,dimension);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321237554
GPR[SPVAP]-1661321237554
GPR[EPVAP]-1661321239613
GPR[SPVATF]-1661321239613
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321241566
GPR[EPVS]-1661321241566
========
if(diagonalOnly<=iterations){
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321241568
GPR[SPVAP]-1661321241568
GPR[EPVAP]-1661321243593
GPR[SPVATF]-1661321243593
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321245521
GPR[EPVS]-1661321245521
========
if(diagonalOnly<=iterations){
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321245523
GPR[SPVAP]-1661321245523
GPR[EPVAP]-1661321247545
GPR[SPVATF]-1661321247545
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321249473
GPR[EPVS]-1661321249473
========
if(diagonalOnly<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321249475
GPR[SPVAP]-1661321249475
GPR[EPVAP]-1661321251530
GPR[SPVATF]-1661321251530
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321253489
GPR[EPVS]-1661321253489
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321253491
GPR[SPVAP]-1661321253491
GPR[EPVAP]-1661321255524
GPR[SPVATF]-1661321255524
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321257452
GPR[EPVS]-1661321257452
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321257454
GPR[SPVAP]-1661321257454
GPR[EPVAP]-1661321259502
GPR[SPVATF]-1661321259502
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321261433
GPR[EPVS]-1661321261433
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321261435
GPR[SPVAP]-1661321261435
GPR[EPVAP]-1661321263479
GPR[SPVATF]-1661321263479
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321265450
GPR[EPVS]-1661321265450
========
if(diagonalOnly<=0){
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321265452
GPR[SPVAP]-1661321265452
GPR[EPVAP]-1661321267461
GPR[SPVATF]-1661321267461
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321269362
GPR[EPVS]-1661321269362
========
if(diagonalOnly<=0){
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321269364
GPR[SPVAP]-1661321269364
GPR[EPVAP]-1661321271449
GPR[SPVATF]-1661321271449
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321273586
GPR[EPVS]-1661321273586
========
if(diagonalOnly<=0){
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321273589
GPR[SPVAP]-1661321273589
GPR[EPVAP]-1661321275629
GPR[SPVATF]-1661321275629
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321277606
GPR[EPVS]-1661321277606
========
if(lambda<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321277608
GPR[SPVAP]-1661321277608
GPR[EPVAP]-1661321279695
GPR[SPVATF]-1661321279696
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321281610
GPR[EPVS]-1661321281610
========
if(lambda<=iterations){
B=eye(dimension,dimension);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321281612
GPR[SPVAP]-1661321281612
GPR[EPVAP]-1661321283621
GPR[SPVATF]-1661321283621
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321285565
GPR[EPVS]-1661321285565
========
if(lambda<=iterations){
B=eye(dimension,dimension);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321285567
GPR[SPVAP]-1661321285567
GPR[EPVAP]-1661321287591
GPR[SPVATF]-1661321287591
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321289530
GPR[EPVS]-1661321289530
========
if(lambda<=iterations){
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321289532
GPR[SPVAP]-1661321289532
GPR[EPVAP]-1661321291560
GPR[SPVATF]-1661321291560
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321293535
GPR[EPVS]-1661321293535
========
if(lambda<=iterations){
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321293536
GPR[SPVAP]-1661321293536
GPR[EPVAP]-1661321295567
GPR[SPVATF]-1661321295567
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321297463
GPR[EPVS]-1661321297463
========
if(lambda<=iterations){
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321297465
GPR[SPVAP]-1661321297465
GPR[EPVAP]-1661321299475
GPR[SPVATF]-1661321299475
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321301404
GPR[EPVS]-1661321301404
========
if(lambda<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321301405
GPR[SPVAP]-1661321301405
GPR[EPVAP]-1661321303461
GPR[SPVATF]-1661321303461
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321306693
GPR[EPVS]-1661321306693
========
if(lambda<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321306695
GPR[SPVAP]-1661321306695
GPR[EPVAP]-1661321308737
GPR[SPVATF]-1661321308737
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321311636
GPR[EPVS]-1661321311636
========
if(lambda<=0){
B=eye(dimension,dimension);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321311638
GPR[SPVAP]-1661321311638
GPR[EPVAP]-1661321313696
GPR[SPVATF]-1661321313696
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321315667
GPR[EPVS]-1661321315667
========
if(lambda<=0){
BD=diag(diagD);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321315669
GPR[SPVAP]-1661321315669
GPR[EPVAP]-1661321317729
GPR[SPVATF]-1661321317729
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321319662
GPR[EPVS]-1661321319662
========
if(diagonalOnly<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321319664
GPR[SPVAP]-1661321319664
GPR[EPVAP]-1661321321722
GPR[SPVATF]-1661321321722
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321323677
GPR[EPVS]-1661321323677
========
if(diagonalOnly<=iterations){
B=eye(dimension,dimension);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321323678
GPR[SPVAP]-1661321323678
GPR[EPVAP]-1661321325715
GPR[SPVATF]-1661321325715
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321327651
GPR[EPVS]-1661321327651
========
if(diagonalOnly<=iterations){
B=eye(dimension,dimension);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321327653
GPR[SPVAP]-1661321327653
GPR[EPVAP]-1661321329687
GPR[SPVATF]-1661321329687
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321331614
GPR[EPVS]-1661321331614
========
if(diagonalOnly<=iterations){
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321331616
GPR[SPVAP]-1661321331616
GPR[EPVAP]-1661321333640
GPR[SPVATF]-1661321333641
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321335546
GPR[EPVS]-1661321335546
========
if(diagonalOnly<=iterations){
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321335547
GPR[SPVAP]-1661321335547
GPR[EPVAP]-1661321337604
GPR[SPVATF]-1661321337604
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321339504
GPR[EPVS]-1661321339504
========
if(diagonalOnly<=iterations){
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321339505
GPR[SPVAP]-1661321339506
GPR[EPVAP]-1661321341557
GPR[SPVATF]-1661321341557
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321343479
GPR[EPVS]-1661321343479
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321343480
GPR[SPVAP]-1661321343480
GPR[EPVAP]-1661321345501
GPR[SPVATF]-1661321345501
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321347460
GPR[EPVS]-1661321347460
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321347462
GPR[SPVAP]-1661321347462
GPR[EPVAP]-1661321349501
GPR[SPVATF]-1661321349501
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321351452
GPR[EPVS]-1661321351452
========
if(diagonalOnly<=0){
B=eye(dimension,dimension);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321351453
GPR[SPVAP]-1661321351453
GPR[EPVAP]-1661321353490
GPR[SPVATF]-1661321353490
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321355413
GPR[EPVS]-1661321355413
========
if(diagonalOnly<=0){
BD=diag(diagD);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321355415
GPR[SPVAP]-1661321355415
GPR[EPVAP]-1661321357453
GPR[SPVATF]-1661321357453
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321359359
GPR[EPVS]-1661321359359
========
if(lambda<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321359361
GPR[SPVAP]-1661321359361
GPR[EPVAP]-1661321361379
GPR[SPVATF]-1661321361379
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321363318
GPR[EPVS]-1661321363318
========
if(lambda<=iterations){
B=eye(dimension,dimension);
BD=diag(diagD);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321363319
GPR[SPVAP]-1661321363319
GPR[EPVAP]-1661321365345
GPR[SPVATF]-1661321365345
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321367262
GPR[EPVS]-1661321367262
========
if(lambda<=iterations){
B=eye(dimension,dimension);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321367264
GPR[SPVAP]-1661321367264
GPR[EPVAP]-1661321369284
GPR[SPVATF]-1661321369284
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321371230
GPR[EPVS]-1661321371230
========
if(lambda<=iterations){
BD=diag(diagD);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321371232
GPR[SPVAP]-1661321371232
GPR[EPVAP]-1661321373304
GPR[SPVATF]-1661321373304
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321375200
GPR[EPVS]-1661321375200
========
if(lambda<=0){
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);
B=eye(dimension,dimension);
BD=diag(diagD);
C=diag(diagC);

lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321375202
GPR[SPVAP]-1661321375202
GPR[EPVAP]-1661321377226
GPR[SPVATF]-1661321377226
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321379144
GPR[EPVS]-1661321379144
========
if(checkFeasableCount<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321379147
GPR[SPVAP]-1661321379147
GPR[EPVAP]-1661321381182
GPR[SPVATF]-1661321381182
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321383125
GPR[EPVS]-1661321383125
========
B.setColumn(DEFAULT_DIAGONALONLY,randn(dimension));
if(lambda<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321383127
GPR[SPVAP]-1661321383127
GPR[EPVAP]-1661321385144
GPR[SPVATF]-1661321385144
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321387082
GPR[EPVS]-1661321387082
========
B.setColumn(DEFAULT_DIAGONALONLY,randn(dimension));
if(i<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321387085
GPR[SPVAP]-1661321387085
GPR[EPVAP]-1661321388195
GPR[EPVS]-1661321388195
========
B.setColumn(DEFAULT_DIAGONALONLY,randn(dimension));
if(checkFeasableCount<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321388196
GPR[SPVAP]-1661321388196
GPR[EPVAP]-1661321390221
GPR[SPVATF]-1661321390221
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321392111
GPR[EPVS]-1661321392111
========
if(negccov<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321392114
GPR[SPVAP]-1661321392114
GPR[EPVAP]-1661321393215
GPR[EPVS]-1661321393215
========
B=times(arzneg,repmat(B,dimension,1));
if(lambda<=0){
lambda=4+(int)(3.0*Math.log(dimension));
}

========
MM Copying to MM
GPR[SPVS]-1661321393218
GPR[SPVAP]-1661321393218
GPR[EPVAP]-1661321394328
GPR[EPVS]-1661321394328
GPR[ESUN]-1661321394329
GPR[SSUN]-1661321394329
org.apache.commons.math3.optimization.direct.CMAESOptimizer,423
GPR[ESUN]-1661321396231
GPR[SSUN]-1661321396231
org.apache.commons.math3.optimization.direct.CMAESOptimizer,995
========
if(repaired[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321401034
GPR[SPVAP]-1661321401034
GPR[EPVAP]-1661321406965
GPR[SPVATF]-1661321406965
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321408947
GPR[EPVS]-1661321408947
========
if(divisor.mant[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321408950
GPR[SPVAP]-1661321408950
GPR[EPVAP]-1661321410073
GPR[EPVS]-1661321410073
========
if(x[i]>=1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321410077
GPR[SPVAP]-1661321410077
GPR[EPVAP]-1661321412139
GPR[SPVATF]-1661321412139
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321414073
GPR[EPVS]-1661321414073
========
if(x[i]>polynomials.length){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321414074
GPR[SPVAP]-1661321414074
GPR[EPVAP]-1661321415217
GPR[EPVS]-1661321415217
========
if(a.mant[i]>b.mant[i]){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321415219
GPR[SPVAP]-1661321415219
GPR[EPVAP]-1661321416333
GPR[EPVS]-1661321416333
========
if(a.mant[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321416335
GPR[SPVAP]-1661321416335
GPR[EPVAP]-1661321417463
GPR[EPVS]-1661321417463
========
if(x[i]>b.mant[i]){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321417465
GPR[SPVAP]-1661321417465
GPR[EPVAP]-1661321418566
GPR[EPVS]-1661321418566
========
if(sigma*(Math.max(Math.abs(repaired[i]),x[i]))>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321418569
GPR[SPVAP]-1661321418569
GPR[EPVAP]-1661321420621
GPR[SPVATF]-1661321420621
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321422591
GPR[EPVS]-1661321422591
========
if(boundaries[DEFAULT_DIAGONALONLY][ii]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321422594
GPR[SPVAP]-1661321422594
GPR[EPVAP]-1661321423697
GPR[EPVS]-1661321423697
========
if(x[i]>0.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321423698
GPR[SPVAP]-1661321423698
GPR[EPVAP]-1661321425742
GPR[SPVATF]-1661321425742
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321427709
GPR[EPVS]-1661321427709
========
if(x[i]>1.0){
e[m]=0.0;
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321427711
GPR[SPVAP]-1661321427711
GPR[EPVAP]-1661321428833
GPR[EPVS]-1661321428833
========
if(x[i]>1.0){
break;
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321428835
GPR[SPVAP]-1661321428835
GPR[EPVAP]-1661321429985
GPR[EPVS]-1661321429985
========
if(x[i]>1.0){
e[m]=0.0;
break;

repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321429987
GPR[SPVAP]-1661321429987
GPR[EPVAP]-1661321431086
GPR[EPVS]-1661321431086
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
e[m]=0.0;
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321431088
GPR[SPVAP]-1661321431088
GPR[EPVAP]-1661321432194
GPR[EPVS]-1661321432194
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
break;
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321432195
GPR[SPVAP]-1661321432195
GPR[EPVAP]-1661321433301
GPR[EPVS]-1661321433301
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
e[m]=0.0;
break;

repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321433303
GPR[SPVAP]-1661321433303
GPR[EPVAP]-1661321434399
GPR[EPVS]-1661321434399
========
i++;
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321434401
GPR[SPVAP]-1661321434401
GPR[EPVAP]-1661321436453
GPR[SPVATF]-1661321436453
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321438364
GPR[EPVS]-1661321438364
========
if(x[i]>internalArray.length){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321438367
GPR[SPVAP]-1661321438367
GPR[EPVAP]-1661321439481
GPR[EPVS]-1661321439481
========
inputSigma[DEFAULT_DIAGONALONLY-1]=repaired[n];
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321439484
GPR[SPVAP]-1661321439484
GPR[EPVAP]-1661321440588
GPR[EPVS]-1661321440588
========
if(sigma*x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321440591
GPR[SPVAP]-1661321440591
GPR[EPVAP]-1661321442612
GPR[SPVATF]-1661321442612
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321444539
GPR[EPVS]-1661321444539
========
if(x[i]-xval[DEFAULT_DIAGONALONLY]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321444543
GPR[SPVAP]-1661321444543
GPR[EPVAP]-1661321445639
GPR[EPVS]-1661321445639
========
if((maxIterations+i)>internalArray.length){
expandTo(startIndex+i);
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321445642
GPR[SPVAP]-1661321445642
GPR[EPVAP]-1661321446753
GPR[EPVS]-1661321446753
========
maxIterations=i;
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321446755
GPR[SPVAP]-1661321446755
GPR[EPVAP]-1661321448817
GPR[SPVATF]-1661321448817
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321450749
GPR[SPVATR]-1661321450750
TESTING : math_20
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testConstrainedRosen
MM messageFailing tests: 1
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661321493100
GPR[EPVS]-1661321493100
========
if(x[i+1]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321493103
GPR[SPVAP]-1661321493103
GPR[EPVAP]-1661321495182
GPR[SPVATF]-1661321495182
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321497110
GPR[EPVS]-1661321497110
========
x[1]=inputSigma[1];
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321497111
GPR[SPVAP]-1661321497111
GPR[EPVAP]-1661321499131
GPR[SPVATF]-1661321499131
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321501042
GPR[EPVS]-1661321501042
========
split(FACT[i],inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321501044
GPR[SPVAP]-1661321501044
GPR[EPVAP]-1661321502152
GPR[EPVS]-1661321502152
========
splitReciprocal(inputSigma,inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321502154
GPR[SPVAP]-1661321502154
GPR[EPVAP]-1661321503254
GPR[EPVS]-1661321503254
========
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321503256
GPR[SPVAP]-1661321503256
GPR[EPVAP]-1661321504363
GPR[EPVS]-1661321504363
========
x[1]=inputSigma[1];
split(FACT[i],inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321504365
GPR[SPVAP]-1661321504365
GPR[EPVAP]-1661321505485
GPR[EPVS]-1661321505485
========
x[1]=inputSigma[1];
splitReciprocal(inputSigma,inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321505487
GPR[SPVAP]-1661321505487
GPR[EPVAP]-1661321506639
GPR[EPVS]-1661321506639
========
x[1]=inputSigma[1];
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321506641
GPR[SPVAP]-1661321506641
GPR[EPVAP]-1661321507754
GPR[EPVS]-1661321507754
========
split(FACT[i],inputSigma);
splitReciprocal(inputSigma,inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321507756
GPR[SPVAP]-1661321507756
GPR[EPVAP]-1661321508873
GPR[EPVS]-1661321508873
========
split(FACT[i],inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321508875
GPR[SPVAP]-1661321508875
GPR[EPVAP]-1661321509973
GPR[EPVS]-1661321509973
========
splitReciprocal(inputSigma,inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321509974
GPR[SPVAP]-1661321509974
GPR[EPVAP]-1661321511072
GPR[EPVS]-1661321511072
========
x[1]=inputSigma[1];
split(FACT[i],inputSigma);
splitReciprocal(inputSigma,inputSigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321511074
GPR[SPVAP]-1661321511074
GPR[EPVAP]-1661321512169
GPR[EPVS]-1661321512169
========
x[1]=inputSigma[1];
split(FACT[i],inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321512171
GPR[SPVAP]-1661321512171
GPR[EPVAP]-1661321513273
GPR[EPVS]-1661321513274
========
x[1]=inputSigma[1];
splitReciprocal(inputSigma,inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321513275
GPR[SPVAP]-1661321513275
GPR[EPVAP]-1661321514373
GPR[EPVS]-1661321514373
========
split(FACT[i],inputSigma);
splitReciprocal(inputSigma,inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321514374
GPR[SPVAP]-1661321514374
GPR[EPVAP]-1661321515520
GPR[EPVS]-1661321515520
========
x[1]=inputSigma[1];
split(FACT[i],inputSigma);
splitReciprocal(inputSigma,inputSigma);
if((i&2)!=0){
inputSigma[0]=-facts[0];
facts[1]=-facts[1];
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321515521
GPR[SPVAP]-1661321515521
GPR[EPVAP]-1661321516621
GPR[EPVS]-1661321516621
========
x[DEFAULT_DIAGONALONLY]=work[i];
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321516623
GPR[SPVAP]-1661321516623
GPR[EPVAP]-1661321517725
GPR[EPVS]-1661321517725
========
x[i]=value;
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321517727
GPR[SPVAP]-1661321517727
GPR[EPVAP]-1661321518831
GPR[EPVS]-1661321518831
========
if(x[i]>1.0){
bandwidthInterval[1]=DEFAULT_DIAGONALONLY;
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321518835
GPR[SPVAP]-1661321518835
GPR[EPVAP]-1661321519925
GPR[EPVS]-1661321519925
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
bandwidthInterval[1]=DEFAULT_DIAGONALONLY;
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321519927
GPR[SPVAP]-1661321519927
GPR[EPVAP]-1661321521035
GPR[EPVS]-1661321521035
========
if(i<0){
i=-i-2;
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321521037
GPR[SPVAP]-1661321521037
GPR[EPVAP]-1661321523071
GPR[SPVATF]-1661321523071
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321524998
GPR[EPVS]-1661321524998
========
x[i]=FastMath.sqrt(ltI[i]);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321525002
GPR[SPVAP]-1661321525002
GPR[EPVAP]-1661321526096
GPR[EPVS]-1661321526096
========
if(inputSigma[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321526100
GPR[SPVAP]-1661321526100
GPR[EPVAP]-1661321528128
GPR[SPVATF]-1661321528128
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321530068
GPR[EPVS]-1661321530068
========
if(searchIndex(sigma,x)==-1){
throw new OutOfRangeException(sigma,x[0],yval[yval.length-1]);
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321530069
GPR[SPVAP]-1661321530069
GPR[EPVAP]-1661321531167
GPR[EPVS]-1661321531167
========
if(x[i]>1.0){
a[i]=a[j];
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321531170
GPR[SPVAP]-1661321531170
GPR[EPVAP]-1661321532268
GPR[EPVS]-1661321532268
========
if(x[i]>1.0){
a[j]=x[i];
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321532270
GPR[SPVAP]-1661321532270
GPR[EPVAP]-1661321533386
GPR[EPVS]-1661321533386
========
if(x[i]>1.0){
temp=b[i];
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321533387
GPR[SPVAP]-1661321533387
GPR[EPVAP]-1661321534492
GPR[EPVS]-1661321534492
========
if(x[i]>1.0){
b[j]=x[i];
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321534494
GPR[SPVAP]-1661321534494
GPR[EPVAP]-1661321535626
GPR[EPVS]-1661321535626
========
if(x[i]>1.0){
a[i]=a[j];
a[j]=x[i];
temp=b[i];
b[j]=x[i];

repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321535628
GPR[SPVAP]-1661321535628
GPR[EPVAP]-1661321536733
GPR[EPVS]-1661321536733
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
a[i]=a[j];
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321536735
GPR[SPVAP]-1661321536735
GPR[EPVAP]-1661321537843
GPR[EPVS]-1661321537843
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
a[j]=x[i];
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321537845
GPR[SPVAP]-1661321537845
GPR[EPVAP]-1661321538953
GPR[EPVS]-1661321538953
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
temp=b[i];
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321538955
GPR[SPVAP]-1661321538955
GPR[EPVAP]-1661321540052
GPR[EPVS]-1661321540052
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
b[j]=x[i];
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321540054
GPR[SPVAP]-1661321540054
GPR[EPVAP]-1661321541165
GPR[EPVS]-1661321541165
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
a[i]=a[j];
a[j]=x[i];
temp=b[i];
b[j]=x[i];

repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321541166
GPR[SPVAP]-1661321541166
GPR[EPVAP]-1661321542274
GPR[EPVS]-1661321542275
========
if(i>=polynomials.length){
i--;
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321542278
GPR[SPVAP]-1661321542278
GPR[EPVAP]-1661321543381
GPR[EPVS]-1661321543381
========
if(sigma*sigma>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321543383
GPR[SPVAP]-1661321543383
GPR[EPVAP]-1661321545453
GPR[SPVATF]-1661321545453
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321547386
GPR[EPVS]-1661321547386
========
if(inputSigma==null){
return Double.NaN;
}
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321547388
GPR[SPVAP]-1661321547388
GPR[EPVAP]-1661321548506
GPR[EPVS]-1661321548506
========
if(x[maxIterations]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321548509
GPR[SPVAP]-1661321548509
GPR[EPVAP]-1661321550539
GPR[SPVATF]-1661321550539
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321552474
GPR[EPVS]-1661321552474
========
if(x[maxIterations]>=1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321552477
GPR[SPVAP]-1661321552477
GPR[EPVAP]-1661321554530
GPR[SPVATF]-1661321554530
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321556430
GPR[EPVS]-1661321556430
========
if(sigma>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321556435
GPR[SPVAP]-1661321556435
GPR[EPVAP]-1661321558510
GPR[SPVATF]-1661321558510
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321560503
GPR[EPVS]-1661321560503
========
if(sigma>=1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321560505
GPR[SPVAP]-1661321560505
GPR[EPVAP]-1661321562518
GPR[SPVATF]-1661321562518
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321564461
GPR[EPVS]-1661321564461
========
boundaries[i][i]=(x*sigma-sigma*sigma)/sigma;
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321564464
GPR[SPVAP]-1661321564464
GPR[EPVAP]-1661321565581
GPR[EPVS]-1661321565581
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
imagEigenvalues[i]=FastMath.sqrt(FastMath.abs(0.5*(boundaries[i][i]-x)*p+boundaries[i+1][i]*matT[i][i+1]));
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321565583
GPR[SPVAP]-1661321565583
GPR[EPVAP]-1661321566713
GPR[EPVS]-1661321566713
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
realEigenvalues[i+1]=x+0.5*(boundaries[i][i]-x);
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321566715
GPR[SPVAP]-1661321566715
GPR[EPVAP]-1661321567840
GPR[EPVS]-1661321567840
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
imagEigenvalues[i+1]=-FastMath.sqrt(FastMath.abs(0.5*(boundaries[i][i]-x)*p+boundaries[i+1][i]*matT[i][i+1]));
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321567842
GPR[SPVAP]-1661321567842
GPR[EPVAP]-1661321568955
GPR[EPVS]-1661321568955
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
i++;
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321568956
GPR[SPVAP]-1661321568956
GPR[EPVAP]-1661321570996
GPR[SPVATF]-1661321570996
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321572988
GPR[EPVS]-1661321572988
========
if(x[i]>1.0){
repaired[i]=1.0;
}else {
imagEigenvalues[i]=FastMath.sqrt(FastMath.abs(0.5*(boundaries[i][i]-x)*p+boundaries[i+1][i]*matT[i][i+1]));
realEigenvalues[i+1]=x+0.5*(boundaries[i][i]-x);
imagEigenvalues[i+1]=-FastMath.sqrt(FastMath.abs(0.5*(boundaries[i][i]-x)*p+boundaries[i+1][i]*matT[i][i+1]));
i++;

repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321572990
GPR[SPVAP]-1661321572990
GPR[EPVAP]-1661321574109
GPR[EPVS]-1661321574109
========
addData(x[0],sigma);
if(x[i]>1.0){
repaired[i]=1.0;
}else {
repaired[i]=x[i];
}

========
MM Copying to MM
GPR[SPVS]-1661321574111
GPR[SPVAP]-1661321574111
GPR[EPVAP]-1661321575228
GPR[EPVS]-1661321575228
GPR[ESUN]-1661321575234
GPR[SSUN]-1661321575234
org.apache.commons.math3.optimization.direct.CMAESOptimizer,908
========
if(x==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321577322
GPR[SPVAP]-1661321577322
GPR[EPVAP]-1661321583245
GPR[SPVATF]-1661321583245
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321585242
GPR[EPVS]-1661321585242
========
if(exactPValue==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321585244
GPR[SPVAP]-1661321585244
GPR[EPVAP]-1661321586361
GPR[EPVS]-1661321586361
========
if(sigma==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321586363
GPR[SPVAP]-1661321586363
GPR[EPVAP]-1661321587463
GPR[EPVS]-1661321587463
========
if(w==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321587464
GPR[SPVAP]-1661321587464
GPR[EPVAP]-1661321588573
GPR[EPVS]-1661321588573
========
sigma=x[DEFAULT_DIAGONALONLY];
if(boundaries==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321588574
GPR[SPVAP]-1661321588574
GPR[EPVAP]-1661321590623
GPR[SPVATF]-1661321590623
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321592606
GPR[EPVS]-1661321592606
========
if(sigma==0.0){
DEFAULT_DIAGONALONLY+=DEFAULT_DIAGONALONLY-DEFAULT_DIAGONALONLY;
continue;
}
if(boundaries==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321592607
GPR[SPVAP]-1661321592607
GPR[EPVAP]-1661321593713
GPR[EPVS]-1661321593713
========
if(boundaries!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321593715
GPR[SPVAP]-1661321593715
GPR[EPVAP]-1661321595735
GPR[SPVATF]-1661321595736
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321597719
GPR[SPVATR]-1661321597719
TESTING : math_20
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTablet
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSphere
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testAckley
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSsDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRastrigin
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRosen
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testCigar
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTwoAxes
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testEllipse
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testElliRotated
MM messageFailing tests: 11
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661321637886
GPR[EPVS]-1661321637886
========
if(DEFAULT_DIAGONALONLY!=d3FdXdYdZ.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321637888
GPR[SPVAP]-1661321637888
GPR[EPVAP]-1661321639015
GPR[EPVS]-1661321639015
========
if(DEFAULT_DIAGONALONLY==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321639017
GPR[SPVAP]-1661321639017
GPR[EPVAP]-1661321640125
GPR[EPVS]-1661321640125
========
if(boundaries==d3FdXdYdZ.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321640127
GPR[SPVAP]-1661321640127
GPR[EPVAP]-1661321641237
GPR[EPVS]-1661321641237
========
if(xLen==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321641238
GPR[SPVAP]-1661321641238
GPR[EPVAP]-1661321642416
GPR[EPVS]-1661321642416
========
MathArrays.checkOrder(x);
if(boundaries==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321642418
GPR[SPVAP]-1661321642418
GPR[EPVAP]-1661321644480
GPR[SPVATF]-1661321644480
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321646478
GPR[EPVS]-1661321646478
========
MathArrays.checkOrder(res);
if(boundaries==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321646480
GPR[SPVAP]-1661321646480
GPR[EPVAP]-1661321647589
GPR[EPVS]-1661321647589
========
MathArrays.checkOrder(x);
if(boundaries!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321647590
GPR[SPVAP]-1661321647590
GPR[EPVAP]-1661321649601
GPR[SPVATF]-1661321649601
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321651564
GPR[SPVATR]-1661321651564
TESTING : math_20
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTablet
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSphere
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testAckley
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSsDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRastrigin
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRosen
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testCigar
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTwoAxes
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testEllipse
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testElliRotated
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testConstrainedRosen
MM messageFailing tests: 12
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661321691569
GPR[EPVS]-1661321691569
========
if(DEFAULT_DIAGONALONLY!=d2FdXdY.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321691571
GPR[SPVAP]-1661321691571
GPR[EPVAP]-1661321692711
GPR[EPVS]-1661321692711
========
if(boundaries==d2FdXdY.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321692713
GPR[SPVAP]-1661321692713
GPR[EPVAP]-1661321693819
GPR[EPVS]-1661321693819
========
if(DEFAULT_DIAGONALONLY!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321693821
GPR[SPVAP]-1661321693821
GPR[EPVAP]-1661321694921
GPR[EPVS]-1661321694921
========
if(xLen!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321694923
GPR[SPVAP]-1661321694923
GPR[EPVAP]-1661321696031
GPR[EPVS]-1661321696031
========
MathArrays.checkOrder(res);
if(boundaries!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321696033
GPR[SPVAP]-1661321696033
GPR[EPVAP]-1661321697141
GPR[EPVS]-1661321697141
========
MathArrays.checkOrder(x);
if(DEFAULT_DIAGONALONLY==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321697142
GPR[SPVAP]-1661321697142
GPR[EPVAP]-1661321698253
GPR[EPVS]-1661321698253
========
MathArrays.checkOrder(res);
if(DEFAULT_DIAGONALONLY==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321698255
GPR[SPVAP]-1661321698255
GPR[EPVAP]-1661321699373
GPR[EPVS]-1661321699373
========
MathArrays.checkOrder(x);
if(xLen==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321699375
GPR[SPVAP]-1661321699375
GPR[EPVAP]-1661321700517
GPR[EPVS]-1661321700517
========
MathArrays.checkOrder(res);
if(xLen==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321700518
GPR[SPVAP]-1661321700518
GPR[EPVAP]-1661321701621
GPR[EPVS]-1661321701621
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(boundaries==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321701623
GPR[SPVAP]-1661321701623
GPR[EPVAP]-1661321702723
GPR[EPVS]-1661321702723
========
MathArrays.checkOrder(x);
if(DEFAULT_DIAGONALONLY!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321702725
GPR[SPVAP]-1661321702725
GPR[EPVAP]-1661321703831
GPR[EPVS]-1661321703831
========
MathArrays.checkOrder(res);
if(DEFAULT_DIAGONALONLY!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321703832
GPR[SPVAP]-1661321703832
GPR[EPVAP]-1661321704939
GPR[EPVS]-1661321704939
========
MathArrays.checkOrder(x);
if(xLen!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321704940
GPR[SPVAP]-1661321704940
GPR[EPVAP]-1661321706061
GPR[EPVS]-1661321706061
========
MathArrays.checkOrder(res);
if(xLen!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321706063
GPR[SPVAP]-1661321706063
GPR[EPVAP]-1661321707174
GPR[EPVS]-1661321707174
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(boundaries!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321707175
GPR[SPVAP]-1661321707175
GPR[EPVAP]-1661321708284
GPR[EPVS]-1661321708284
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(DEFAULT_DIAGONALONLY==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321708286
GPR[SPVAP]-1661321708286
GPR[EPVAP]-1661321709398
GPR[EPVS]-1661321709398
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(xLen==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321709400
GPR[SPVAP]-1661321709400
GPR[EPVAP]-1661321710510
GPR[EPVS]-1661321710510
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(DEFAULT_DIAGONALONLY!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321710511
GPR[SPVAP]-1661321710511
GPR[EPVAP]-1661321711619
GPR[EPVS]-1661321711619
========
MathArrays.checkOrder(x);
MathArrays.checkOrder(res);
if(xLen!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321711621
GPR[SPVAP]-1661321711621
GPR[EPVAP]-1661321712716
GPR[EPVS]-1661321712716
========
if(DEFAULT_DIAGONALONLY==x.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321712719
GPR[SPVAP]-1661321712719
GPR[EPVAP]-1661321714761
GPR[SPVATF]-1661321714761
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321716721
GPR[EPVS]-1661321716721
========
if(boundaries==x.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321716723
GPR[SPVAP]-1661321716723
GPR[EPVAP]-1661321717836
GPR[EPVS]-1661321717836
========
if(nbPoints==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321717838
GPR[SPVAP]-1661321717838
GPR[EPVAP]-1661321718951
GPR[EPVS]-1661321718951
========
if(x.length!=y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321718953
GPR[SPVAP]-1661321718953
GPR[EPVAP]-1661321720057
GPR[EPVS]-1661321720057
========
if(x.length==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321720059
GPR[SPVAP]-1661321720059
GPR[EPVAP]-1661321721178
GPR[EPVS]-1661321721178
========
if(boundaries==y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321721179
GPR[SPVAP]-1661321721179
GPR[EPVAP]-1661321722292
GPR[EPVS]-1661321722292
========
if(length==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321722293
GPR[SPVAP]-1661321722293
GPR[EPVAP]-1661321723393
GPR[EPVS]-1661321723393
========
if(x!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321723394
GPR[SPVAP]-1661321723394
GPR[EPVAP]-1661321725424
GPR[SPVATF]-1661321725424
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321727363
GPR[SPVATR]-1661321727363
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661321769483
GPR[EPVS]-1661321769483
GPR[PF]-1661321769483
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_646043_1_ts_1661321769483.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM5038947830422929823/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/1_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_646043_1_ts_1661321769483.diff
MMOut command diff: []
========
if(x.length!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321769494
GPR[SPVAP]-1661321769494
GPR[EPVAP]-1661321770609
GPR[EPVS]-1661321770609
========
if(boundaries!=y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321770610
GPR[SPVAP]-1661321770610
GPR[EPVAP]-1661321771724
GPR[EPVS]-1661321771724
========
if(length!=null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321771726
GPR[SPVAP]-1661321771726
GPR[EPVAP]-1661321772824
GPR[EPVS]-1661321772825
========
if(x.length==y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321772826
GPR[SPVAP]-1661321772826
GPR[EPVAP]-1661321773932
GPR[EPVS]-1661321773932
========
if(x==y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321773933
GPR[SPVAP]-1661321773933
GPR[EPVAP]-1661321775039
GPR[EPVS]-1661321775039
========
if(length==y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321775040
GPR[SPVAP]-1661321775040
GPR[EPVAP]-1661321776149
GPR[EPVS]-1661321776149
========
if(x!=y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321776151
GPR[SPVAP]-1661321776151
GPR[EPVAP]-1661321777276
GPR[EPVS]-1661321777276
========
if(length!=y.length){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321777278
GPR[SPVAP]-1661321777278
GPR[EPVAP]-1661321778399
GPR[EPVS]-1661321778399
========
if(nextX==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321778402
GPR[SPVAP]-1661321778402
GPR[EPVAP]-1661321779521
GPR[EPVS]-1661321779521
========
if(xA==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321779523
GPR[SPVAP]-1661321779523
GPR[EPVAP]-1661321780652
GPR[EPVS]-1661321780652
========
if(nvars==null){
return x;
}

========
MM Copying to MM
GPR[SPVS]-1661321780655
GPR[SPVAP]-1661321780655
GPR[EPVAP]-1661321781749
GPR[EPVS]-1661321781749
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<values.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321786979
GPR[SPVAP]-1661321786979
GPR[EPVAP]-1661321788076
GPR[EPVS]-1661321788076
========
for(int i=0;i<ranks.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321788078
GPR[SPVAP]-1661321788078
GPR[EPVAP]-1661321789200
GPR[EPVS]-1661321789200
========
for(int i=0;i<imagEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321789202
GPR[SPVAP]-1661321789202
GPR[EPVAP]-1661321790322
GPR[EPVS]-1661321790322
========
for(int i=0;i<f.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321790324
GPR[SPVAP]-1661321790324
GPR[EPVAP]-1661321791451
GPR[EPVS]-1661321791451
========
for(int i=0;i<mant.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321791453
GPR[SPVAP]-1661321791453
GPR[EPVAP]-1661321792549
GPR[EPVS]-1661321792550
========
for(int i=0;i<y0.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321792551
GPR[SPVAP]-1661321792551
GPR[EPVAP]-1661321793662
GPR[EPVS]-1661321793662
========
for(int i=0;i<coefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321793664
GPR[SPVAP]-1661321793664
GPR[EPVAP]-1661321794765
GPR[EPVS]-1661321794765
========
for(int i=0;i<polynomials.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321794767
GPR[SPVAP]-1661321794767
GPR[EPVAP]-1661321795869
GPR[EPVS]-1661321795869
========
for(int i=0;i<dimensionSize.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321795872
GPR[SPVAP]-1661321795872
GPR[EPVAP]-1661321796989
GPR[EPVS]-1661321796990
========
for(int i=0;i<scaled.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321796992
GPR[SPVAP]-1661321796992
GPR[EPVAP]-1661321798095
GPR[EPVS]-1661321798095
========
for(int i=0;i<hVec.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321798097
GPR[SPVAP]-1661321798097
GPR[EPVAP]-1661321799208
GPR[EPVS]-1661321799208
========
for(int i=0;i<ds.data.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321799211
GPR[SPVAP]-1661321799211
GPR[EPVAP]-1661321800309
GPR[EPVS]-1661321800309
========
for(int i=0;i<sample.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321800312
GPR[SPVAP]-1661321800312
GPR[EPVAP]-1661321801429
GPR[EPVS]-1661321801429
========
for(int i=0;i<currentState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321801439
GPR[SPVAP]-1661321801439
GPR[EPVAP]-1661321802552
GPR[EPVS]-1661321802552
========
for(int i=0;i<inputArray.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321802554
GPR[SPVAP]-1661321802554
GPR[EPVAP]-1661321803656
GPR[EPVS]-1661321803656
========
for(int i=0;i<centroid.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321803658
GPR[SPVAP]-1661321803658
GPR[EPVAP]-1661321804768
GPR[EPVS]-1661321804768
========
for(int i=0;i<length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321804770
GPR[SPVAP]-1661321804770
GPR[EPVAP]-1661321805887
GPR[EPVS]-1661321805887
========
for(int i=0;i<secondaryMappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321805889
GPR[SPVAP]-1661321805889
GPR[EPVAP]-1661321807038
GPR[EPVS]-1661321807038
========
for(int i=0;i<real.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321807040
GPR[SPVAP]-1661321807040
GPR[EPVAP]-1661321808145
GPR[EPVS]-1661321808145
========
for(int i=0;i<indices.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321808148
GPR[SPVAP]-1661321808148
GPR[EPVAP]-1661321809252
GPR[EPVS]-1661321809252
========
for(int i=0;i<residuals.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321809254
GPR[SPVAP]-1661321809254
GPR[EPVAP]-1661321810348
GPR[EPVS]-1661321810349
========
for(int i=0;i<newPols.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321810351
GPR[SPVAP]-1661321810351
GPR[EPVAP]-1661321811461
GPR[EPVS]-1661321811461
========
for(int i=0;i<results.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321811463
GPR[SPVAP]-1661321811463
GPR[EPVAP]-1661321812585
GPR[EPVS]-1661321812585
========
for(int i=0;i<result.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321812587
GPR[SPVAP]-1661321812587
GPR[EPVAP]-1661321813707
GPR[EPVS]-1661321813707
========
for(int i=0;i<d.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321813709
GPR[SPVAP]-1661321813709
GPR[EPVAP]-1661321814820
GPR[EPVS]-1661321814820
========
for(int i=0;i<v.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321814822
GPR[SPVAP]-1661321814822
GPR[EPVAP]-1661321815932
GPR[EPVS]-1661321815932
========
for(int i=0;i<varcov.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321815935
GPR[SPVAP]-1661321815935
GPR[EPVAP]-1661321817033
GPR[EPVS]-1661321817033
========
for(int i=0;i<z.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321817035
GPR[SPVAP]-1661321817035
GPR[EPVAP]-1661321818161
GPR[EPVS]-1661321818161
========
for(int i=0;i<centered.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321818163
GPR[SPVAP]-1661321818163
GPR[EPVAP]-1661321819285
GPR[EPVS]-1661321819285
========
for(int i=0;i<parameters.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321819287
GPR[SPVAP]-1661321819287
GPR[EPVAP]-1661321820393
GPR[EPVS]-1661321820393
========
for(int i=0;i<point.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321820395
GPR[SPVAP]-1661321820395
GPR[EPVAP]-1661321821530
GPR[EPVS]-1661321821530
========
for(int i=0;i<tmp2.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321821534
GPR[SPVAP]-1661321821534
GPR[EPVAP]-1661321822643
GPR[EPVS]-1661321822643
========
for(int i=0;i<array.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321822645
GPR[SPVAP]-1661321822645
GPR[EPVAP]-1661321823739
GPR[EPVS]-1661321823739
========
for(int i=0;i<in.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321823741
GPR[SPVAP]-1661321823741
GPR[EPVAP]-1661321824880
GPR[EPVS]-1661321824880
========
for(int i=0;i<preMultiplied.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321824883
GPR[SPVAP]-1661321824883
GPR[EPVAP]-1661321825981
GPR[EPVS]-1661321825981
========
for(int i=0;i<r.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321825984
GPR[SPVAP]-1661321825984
GPR[EPVAP]-1661321827097
GPR[EPVS]-1661321827097
========
for(int i=0;i<shiftedPoint.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321827099
GPR[SPVAP]-1661321827099
GPR[EPVAP]-1661321828218
GPR[EPVS]-1661321828218
========
for(int i=0;i<gradient.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321828220
GPR[SPVAP]-1661321828220
GPR[EPVAP]-1661321829334
GPR[EPVS]-1661321829334
========
for(int i=0;i<data.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321829336
GPR[SPVAP]-1661321829336
GPR[EPVAP]-1661321830454
GPR[EPVS]-1661321830454
========
for(int i=0;i<sig.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321830458
GPR[SPVAP]-1661321830458
GPR[EPVAP]-1661321831568
GPR[EPVS]-1661321831568
========
for(int i=0;i<x.length;i++){
++DEFAULT_DIAGONALONLY;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321831572
GPR[SPVAP]-1661321831572
GPR[EPVAP]-1661321832676
GPR[EPVS]-1661321832676
========
for(int i=0;i<x.length;i++){
scale*=FastMath.PI;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321832678
GPR[SPVAP]-1661321832678
GPR[EPVAP]-1661321833783
GPR[EPVS]-1661321833783
========
for(int i=0;i<p1.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321833785
GPR[SPVAP]-1661321833785
GPR[EPVAP]-1661321834903
GPR[EPVS]-1661321834903
========
for(int i=0;i<doubles.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321834906
GPR[SPVAP]-1661321834906
GPR[EPVAP]-1661321836010
GPR[EPVS]-1661321836010
========
for(int i=0;i<matrixT.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321836012
GPR[SPVAP]-1661321836012
GPR[EPVAP]-1661321837125
GPR[EPVS]-1661321837125
========
for(int i=0;i<sub.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321837131
GPR[SPVAP]-1661321837131
GPR[EPVAP]-1661321838265
GPR[EPVS]-1661321838265
========
for(int i=0;i<xArray.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321838266
GPR[SPVAP]-1661321838267
GPR[EPVAP]-1661321839391
GPR[EPVS]-1661321839391
========
for(int i=0;i<lB.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321839393
GPR[SPVAP]-1661321839393
GPR[EPVAP]-1661321840559
GPR[EPVS]-1661321840559
========
for(int i=0;i<errors.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321840561
GPR[SPVAP]-1661321840561
GPR[EPVAP]-1661321841667
GPR[EPVS]-1661321841667
========
for(int i=0;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321841669
GPR[SPVAP]-1661321841669
GPR[EPVAP]-1661321843724
GPR[SPVATF]-1661321843724
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321845688
GPR[EPVS]-1661321845688
========
for(int i=0;i<=length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321845690
GPR[SPVAP]-1661321845690
GPR[EPVAP]-1661321846830
GPR[EPVS]-1661321846830
========
for(int i=0;i<historySize;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321846832
GPR[SPVAP]-1661321846832
GPR[EPVAP]-1661321848872
GPR[SPVATF]-1661321848872
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321850850
GPR[SPVATR]-1661321850851
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661321893607
GPR[EPVS]-1661321893607
GPR[PF]-1661321893607
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_770166_2_ts_1661321893607.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM3577562630380595818/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/2_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_770166_2_ts_1661321893607.diff
MMOut command diff: []
========
for(int i=0;i<interpolatedState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321893617
GPR[SPVAP]-1661321893617
GPR[EPVAP]-1661321894737
GPR[EPVS]-1661321894737
========
for(int i=0;i<realEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321894739
GPR[SPVAP]-1661321894739
GPR[EPVAP]-1661321895844
GPR[EPVS]-1661321895844
========
for(int i=0;i<covMatEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321895847
GPR[SPVAP]-1661321895847
GPR[EPVAP]-1661321896948
GPR[EPVS]-1661321896948
========
for(int i=0;i<mappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321896950
GPR[SPVAP]-1661321896950
GPR[EPVAP]-1661321898058
GPR[EPVS]-1661321898058
========
for(int i=0;i<selectedColumns.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321898060
GPR[SPVAP]-1661321898060
GPR[EPVAP]-1661321899173
GPR[EPVS]-1661321899173
========
for(int i=0;i<singularValues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321899175
GPR[SPVAP]-1661321899175
GPR[EPVAP]-1661321900334
GPR[EPVS]-1661321900334
========
for(int i=0;i<dimension;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321900338
GPR[SPVAP]-1661321900338
GPR[EPVAP]-1661321902368
GPR[SPVATF]-1661321902368
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321904303
GPR[SPVATR]-1661321904303
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661321946554
GPR[EPVS]-1661321946554
GPR[PF]-1661321946554
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_823113_3_ts_1661321946554.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM4819101212169972646/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/3_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_823113_3_ts_1661321946554.diff
MMOut command diff: []
========
for(int i=0;i<scale.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321946564
GPR[SPVAP]-1661321946564
GPR[EPVAP]-1661321947673
GPR[EPVS]-1661321947673
========
for(int i=length;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321947675
GPR[SPVAP]-1661321947675
GPR[EPVAP]-1661321948789
GPR[EPVS]-1661321948789
========
for(int i=0;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321948791
GPR[SPVAP]-1661321948791
GPR[EPVAP]-1661321949907
GPR[EPVS]-1661321949907
========
for(int i=0;i<mant.length-result.exp;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321949909
GPR[SPVAP]-1661321949909
GPR[EPVAP]-1661321951013
GPR[EPVS]-1661321951013
========
for(int i=0;i<diagonal.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321951016
GPR[SPVAP]-1661321951016
GPR[EPVAP]-1661321952160
GPR[EPVS]-1661321952160
========
for(int i=0;i<random.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321952162
GPR[SPVAP]-1661321952162
GPR[EPVAP]-1661321953319
GPR[EPVS]-1661321953319
========
for(int i=0;i<x.length;i++){
xn*=x;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321953321
GPR[SPVAP]-1661321953321
GPR[EPVAP]-1661321954457
GPR[EPVS]-1661321954457
========
for(int i=0;i<observed.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321954459
GPR[SPVAP]-1661321954459
GPR[EPVAP]-1661321955591
GPR[EPVS]-1661321955591
========
for(int i=0;i<observed1.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321955593
GPR[SPVAP]-1661321955593
GPR[EPVAP]-1661321956702
GPR[EPVS]-1661321956702
========
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321956704
GPR[SPVAP]-1661321956704
GPR[EPVAP]-1661321958741
GPR[SPVATF]-1661321958741
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321960701
GPR[EPVS]-1661321960702
========
for(int i=0;i<cache.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321960704
GPR[SPVAP]-1661321960704
GPR[EPVAP]-1661321961817
GPR[EPVS]-1661321961817
========
for(int i=0;i<this.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321961819
GPR[SPVAP]-1661321961819
GPR[EPVAP]-1661321962927
GPR[EPVS]-1661321962927
========
for(int i=0;i<blocks.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321962929
GPR[SPVAP]-1661321962929
GPR[EPVAP]-1661321964035
GPR[EPVS]-1661321964035
========
for(int i=diff;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321964040
GPR[SPVAP]-1661321964040
GPR[EPVAP]-1661321965145
GPR[EPVS]-1661321965145
========
for(int i=0;i<weightedResidualJacobian.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321965147
GPR[SPVAP]-1661321965147
GPR[EPVAP]-1661321966244
GPR[EPVS]-1661321966244
========
for(int i=0;i<lTData.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321966246
GPR[SPVAP]-1661321966246
GPR[EPVAP]-1661321967349
GPR[EPVS]-1661321967349
========
for(int i=0;i<N;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321967352
GPR[SPVAP]-1661321967352
GPR[EPVAP]-1661321968471
GPR[EPVS]-1661321968471
========
for(int i=diff;i<length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321968473
GPR[SPVAP]-1661321968473
GPR[EPVAP]-1661321969571
GPR[EPVS]-1661321969571
========
for(int i=0;i<points.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321969574
GPR[SPVAP]-1661321969574
GPR[EPVAP]-1661321970686
GPR[EPVS]-1661321970686
========
diff=mant.length;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321970688
GPR[SPVAP]-1661321970688
GPR[EPVAP]-1661321971791
GPR[EPVS]-1661321971791
========
DEFAULT_DIAGONALONLY++;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321971794
GPR[SPVAP]-1661321971794
GPR[EPVAP]-1661321972895
GPR[EPVS]-1661321972895
========
for(int i=0;i<x.length;i++){
sum+=FastMath.abs(res[i]-x[i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321972897
GPR[SPVAP]-1661321972897
GPR[EPVAP]-1661321974009
GPR[EPVS]-1661321974009
========
for(int i=DEFAULT_DIAGONALONLY;i<length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321974012
GPR[SPVAP]-1661321974012
GPR[EPVAP]-1661321975181
GPR[EPVS]-1661321975181
========
for(int i=0;i<coordinates.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321975183
GPR[SPVAP]-1661321975183
GPR[EPVAP]-1661321976296
GPR[EPVS]-1661321976296
========
for(int i=0;i<special.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321976300
GPR[SPVAP]-1661321976300
GPR[EPVAP]-1661321977401
GPR[EPVS]-1661321977401
========
for(int i=diff;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321977403
GPR[SPVAP]-1661321977403
GPR[EPVAP]-1661321978511
GPR[EPVS]-1661321978511
========
for(int i=diff;i<=length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321978513
GPR[SPVAP]-1661321978513
GPR[EPVAP]-1661321979609
GPR[EPVS]-1661321979609
========
for(int i=DEFAULT_DIAGONALONLY;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321979612
GPR[SPVAP]-1661321979612
GPR[EPVAP]-1661321980721
GPR[EPVS]-1661321980721
========
for(int i=DEFAULT_DIAGONALONLY;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321980723
GPR[SPVAP]-1661321980723
GPR[EPVAP]-1661321982821
GPR[SPVATF]-1661321982821
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321984719
GPR[EPVS]-1661321984719
========
for(int i=DEFAULT_DIAGONALONLY;i<=length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321984720
GPR[SPVAP]-1661321984720
GPR[EPVAP]-1661321985817
GPR[EPVS]-1661321985817
========
for(int i=0;i<interpolatedSecondaryState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321985821
GPR[SPVAP]-1661321985821
GPR[EPVAP]-1661321986931
GPR[EPVS]-1661321986931
========
for(int i=0;i<x.length;i++){
orders[i]=1;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321986935
GPR[SPVAP]-1661321986935
GPR[EPVAP]-1661321988037
GPR[EPVS]-1661321988037
========
for(int i=0;i<x.length;i++){
orders[i]=0;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321988039
GPR[SPVAP]-1661321988039
GPR[EPVAP]-1661321989152
GPR[EPVS]-1661321989152
========
for(int i=0;i<x.length;i++){
orders[i]=1;
orders[i]=0;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321989154
GPR[SPVAP]-1661321989154
GPR[EPVAP]-1661321990268
GPR[EPVS]-1661321990268
========
for(int i=0;i<=diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321990270
GPR[SPVAP]-1661321990270
GPR[EPVAP]-1661321991375
GPR[EPVS]-1661321991375
========
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661321991378
GPR[SPVAP]-1661321991378
GPR[EPVAP]-1661321993397
GPR[SPVATF]-1661321993397
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661321995330
GPR[SPVATR]-1661321995331
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322037212
GPR[EPVS]-1661322037212
GPR[PF]-1661322037212
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_913771_4_ts_1661322037212.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM7347832103593892830/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/4_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_913771_4_ts_1661322037212.diff
MMOut command diff: []
========
for(int i=0;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322037222
GPR[SPVAP]-1661322037222
GPR[EPVAP]-1661322039252
GPR[SPVATF]-1661322039252
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322041181
GPR[EPVS]-1661322041181
========
for(int i=diff;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322041183
GPR[SPVAP]-1661322041183
GPR[EPVAP]-1661322042297
GPR[EPVS]-1661322042297
========
for(int i=0;i<this.x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322042300
GPR[SPVAP]-1661322042300
GPR[EPVAP]-1661322043399
GPR[EPVS]-1661322043399
========
for(int i=0;i<x.length;i++){
points[i]=points[i]*sigma+diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322043404
GPR[SPVAP]-1661322043404
GPR[EPVAP]-1661322044512
GPR[EPVS]-1661322044512
========
for(int i=0;i<x.length;i++){
sum+=FastMath.abs(sigma);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322044515
GPR[SPVAP]-1661322044515
GPR[EPVAP]-1661322045620
GPR[EPVS]-1661322045620
========
for(int i=0;i<val.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322045623
GPR[SPVAP]-1661322045623
GPR[EPVAP]-1661322046717
GPR[EPVS]-1661322046717
========
for(int i=DEFAULT_ISACTIVECMA?0:1;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322046719
GPR[SPVAP]-1661322046719
GPR[EPVAP]-1661322048742
GPR[SPVATF]-1661322048742
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322050726
GPR[EPVS]-1661322050726
========
for(int i=DEFAULT_ISACTIVECMA?0:1;i<length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322050728
GPR[SPVAP]-1661322050728
GPR[EPVAP]-1661322051829
GPR[EPVS]-1661322051829
========
for(int i=length;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322051831
GPR[SPVAP]-1661322051831
GPR[EPVAP]-1661322052941
GPR[EPVS]-1661322052941
========
for(int i=0;i<x.length;i++){
max=FastMath.max(diff,FastMath.abs(res[i]-x[i]));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322052944
GPR[SPVAP]-1661322052944
GPR[EPVAP]-1661322054040
GPR[EPVS]-1661322054040
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
orders[j]=1;
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322054043
GPR[SPVAP]-1661322054043
GPR[EPVAP]-1661322055146
GPR[EPVS]-1661322055146
========
for(int i=0;i<x.length;i++){
orders[j]=0;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322055147
GPR[SPVAP]-1661322055147
GPR[EPVAP]-1661322056245
GPR[EPVS]-1661322056245
========
for(int i=0;i<x.length;i++){
orders[j]=1;
orders[j]=0;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322056246
GPR[SPVAP]-1661322056246
GPR[EPVAP]-1661322057354
GPR[EPVS]-1661322057354
========
for(int i=0;i<x.length;i++){
yEnd[i]=y0[i]+diff*f[0][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322057356
GPR[SPVAP]-1661322057356
GPR[EPVAP]-1661322058465
GPR[EPVS]-1661322058465
========
for(int i=DEFAULT_DIAGONALONLY;i<weightedResidualJacobian.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322058467
GPR[SPVAP]-1661322058467
GPR[EPVAP]-1661322059560
GPR[EPVS]-1661322059560
========
for(int i=0;i<this.res.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322059564
GPR[SPVAP]-1661322059564
GPR[EPVAP]-1661322060676
GPR[EPVS]-1661322060676
========
for(int i=0;i<root.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322060678
GPR[SPVAP]-1661322060678
GPR[EPVAP]-1661322061774
GPR[EPVS]-1661322061774
========
for(int i=0;i<x.length;i++){
newIndices[i]=DEFAULT_DIAGONALONLY;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322061775
GPR[SPVAP]-1661322061775
GPR[EPVAP]-1661322062891
GPR[EPVS]-1661322062891
========
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322062893
GPR[SPVAP]-1661322062893
GPR[EPVAP]-1661322064924
GPR[SPVATF]-1661322064924
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322066853
GPR[SPVATR]-1661322066854
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322109019
GPR[EPVS]-1661322109019
GPR[PF]-1661322109019
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_985578_5_ts_1661322109019.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM4948716019575282974/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/5_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_985578_5_ts_1661322109019.diff
MMOut command diff: []
========
for(int i=length;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322109028
GPR[SPVAP]-1661322109028
GPR[EPVAP]-1661322110208
GPR[EPVS]-1661322110208
========
for(int i=length;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322110210
GPR[SPVAP]-1661322110210
GPR[EPVAP]-1661322111305
GPR[EPVS]-1661322111305
========
for(int i=DEFAULT_DIAGONALONLY;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322111307
GPR[SPVAP]-1661322111307
GPR[EPVAP]-1661322113305
GPR[SPVATF]-1661322113305
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322115258
GPR[EPVS]-1661322115258
========
for(int i=length;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322115259
GPR[SPVAP]-1661322115259
GPR[EPVAP]-1661322116371
GPR[EPVS]-1661322116371
========
for(int i=0;i<DEFAULT_DIAGONALONLY+length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322116373
GPR[SPVAP]-1661322116373
GPR[EPVAP]-1661322117483
GPR[EPVS]-1661322117483
========
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY+length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322117485
GPR[SPVAP]-1661322117485
GPR[EPVAP]-1661322118588
GPR[EPVS]-1661322118588
========
for(int i=0;i<xval.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322118591
GPR[SPVAP]-1661322118591
GPR[EPVAP]-1661322119685
GPR[EPVS]-1661322119685
========
for(int i=0;i<x.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322119688
GPR[SPVAP]-1661322119688
GPR[EPVAP]-1661322120785
GPR[EPVS]-1661322120785
========
for(int i=0;i<x.length;i++){
x[index]=MathUtils.reduce(inputSigma[i],sigma,sigma);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322120786
GPR[SPVAP]-1661322120786
GPR[EPVAP]-1661322121878
GPR[EPVS]-1661322121878
========
for(int i=0;i<x.length;i++){
y[index]=yval[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322121879
GPR[SPVAP]-1661322121879
GPR[EPVAP]-1661322123002
GPR[EPVS]-1661322123002
========
for(int i=0;i<x.length;i++){
x[index]=MathUtils.reduce(inputSigma[i],sigma,sigma);
y[index]=yval[i];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322123004
GPR[SPVAP]-1661322123004
GPR[EPVAP]-1661322124129
GPR[EPVS]-1661322124129
========
for(int i=0;i<y.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322124132
GPR[SPVAP]-1661322124132
GPR[EPVAP]-1661322125251
GPR[EPVS]-1661322125251
========
for(int i=0;i<x.length;i++){
xk*=operand[operandOffset];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322125253
GPR[SPVAP]-1661322125253
GPR[EPVAP]-1661322126355
GPR[EPVS]-1661322126355
========
for(int i=maxIterations;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322126358
GPR[SPVAP]-1661322126358
GPR[EPVAP]-1661322128380
GPR[SPVATF]-1661322128380
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322130327
GPR[SPVATR]-1661322130328
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322172297
GPR[EPVS]-1661322172297
GPR[PF]-1661322172297
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1048857_6_ts_1661322172297.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM5562785933459649699/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/6_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1048857_6_ts_1661322172297.diff
MMOut command diff: []
========
for(int i=0;i<x.length;i++){
dataR[i]*=sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322172308
GPR[SPVAP]-1661322172308
GPR[EPVAP]-1661322173425
GPR[EPVS]-1661322173425
========
for(int i=0;i<last.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322173427
GPR[SPVAP]-1661322173427
GPR[EPVAP]-1661322174550
GPR[EPVS]-1661322174550
========
for(int i=0;i<x.length;i++){
xk*=sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322174552
GPR[SPVAP]-1661322174552
GPR[EPVAP]-1661322175652
GPR[EPVS]-1661322175652
========
for(int i=0;i<x.length;i++){
x2[i]=2*x[i]-x1[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322175654
GPR[SPVAP]-1661322175654
GPR[EPVAP]-1661322176757
GPR[EPVS]-1661322176757
========
for(int i=0;i<length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322176761
GPR[SPVAP]-1661322176761
GPR[EPVAP]-1661322177865
GPR[EPVS]-1661322177865
========
for(int i=0;i<x.length;i++){
max=FastMath.max(diff,FastMath.abs(sigma));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322177869
GPR[SPVAP]-1661322177869
GPR[EPVAP]-1661322178988
GPR[EPVS]-1661322178988
========
for(int i=0;i<x.length;i++){
total+=d[i]*rhs[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322178990
GPR[SPVAP]-1661322178990
GPR[EPVAP]-1661322180098
GPR[EPVS]-1661322180098
========
for(int i=0;i<x.length;i++){
xk*=-i*length;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322180100
GPR[SPVAP]-1661322180100
GPR[EPVAP]-1661322181224
GPR[EPVS]-1661322181224
========
for(int i=0;i<x.length;i++){
++i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322181227
GPR[SPVAP]-1661322181227
GPR[EPVAP]-1661322183281
GPR[SPVATF]-1661322183281
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322185186
GPR[EPVS]-1661322185186
========
for(int i=0;i<x.length;i++){
coefficient*=length-i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322185187
GPR[SPVAP]-1661322185188
GPR[EPVAP]-1661322186311
GPR[EPVS]-1661322186311
========
for(int i=0;i<=x.length;i++){
coefficient*=length-i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322186314
GPR[SPVAP]-1661322186314
GPR[EPVAP]-1661322187412
GPR[EPVS]-1661322187412
========
for(int i=0;i<diff;i++){
coefficient*=length-i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322187414
GPR[SPVAP]-1661322187414
GPR[EPVAP]-1661322188518
GPR[EPVS]-1661322188518
========
for(int i=0;i<=diff;i++){
coefficient*=length-i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322188519
GPR[SPVAP]-1661322188519
GPR[EPVAP]-1661322189648
GPR[EPVS]-1661322189648
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322189652
GPR[SPVAP]-1661322189652
GPR[EPVAP]-1661322190767
GPR[EPVS]-1661322190767
========
for(int i=0;i<x.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322190769
GPR[SPVAP]-1661322190769
GPR[EPVAP]-1661322191883
GPR[EPVS]-1661322191883
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322191884
GPR[SPVAP]-1661322191884
GPR[EPVAP]-1661322193010
GPR[EPVS]-1661322193010
========
for(int i=0;i<mant.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322193012
GPR[SPVAP]-1661322193012
GPR[EPVAP]-1661322194144
GPR[EPVS]-1661322194144
========
for(int i=0;i<x.length;i++){
bp[i][k]=0;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322194147
GPR[SPVAP]-1661322194147
GPR[EPVAP]-1661322195291
GPR[EPVS]-1661322195291
========
for(int i=0;i<guess.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322195293
GPR[SPVAP]-1661322195293
GPR[EPVAP]-1661322196393
GPR[EPVS]-1661322196393
========
for(int i=0;i<x.length;i++){
quotient[i]=0;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322196395
GPR[SPVAP]-1661322196395
GPR[EPVAP]-1661322197525
GPR[EPVS]-1661322197525
========
for(int i=0;i<x.length;i++){
remainder[i]=0;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322197527
GPR[SPVAP]-1661322197527
GPR[EPVAP]-1661322198623
GPR[EPVS]-1661322198623
========
for(int i=0;i<x.length;i++){
quotient[i]=0;
remainder[i]=0;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322198625
GPR[SPVAP]-1661322198625
GPR[EPVAP]-1661322199743
GPR[EPVS]-1661322199743
========
for(int i=0;i<x.length;i++){
mant[i]=diff%RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322199745
GPR[SPVAP]-1661322199745
GPR[EPVAP]-1661322200853
GPR[EPVS]-1661322200853
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff%RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322200854
GPR[SPVAP]-1661322200854
GPR[EPVAP]-1661322201961
GPR[EPVS]-1661322201961
========
for(int i=DEFAULT_DIAGONALONLY;i<mant.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322201963
GPR[SPVAP]-1661322201963
GPR[EPVAP]-1661322203073
GPR[EPVS]-1661322203073
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322203075
GPR[SPVAP]-1661322203075
GPR[EPVAP]-1661322204192
GPR[EPVS]-1661322204192
========
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322204194
GPR[SPVAP]-1661322204194
GPR[EPVAP]-1661322205301
GPR[EPVS]-1661322205301
========
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
rh=diff/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322205302
GPR[SPVAP]-1661322205302
GPR[EPVAP]-1661322206419
GPR[EPVS]-1661322206419
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322206421
GPR[SPVAP]-1661322206421
GPR[EPVAP]-1661322207519
GPR[EPVS]-1661322207519
========
for(int i=DEFAULT_DIAGONALONLY;i<mant.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322207521
GPR[SPVAP]-1661322207521
GPR[EPVAP]-1661322208656
GPR[EPVS]-1661322208656
========
for(int i=DEFAULT_DIAGONALONLY;i<mant.length;i++){
rh=diff/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322208658
GPR[SPVAP]-1661322208658
GPR[EPVAP]-1661322209789
GPR[EPVS]-1661322209789
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322209791
GPR[SPVAP]-1661322209791
GPR[EPVAP]-1661322210899
GPR[EPVS]-1661322210899
========
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
rh=diff/RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322210900
GPR[SPVAP]-1661322210900
GPR[EPVAP]-1661322212006
GPR[EPVS]-1661322212006
========
for(int i=DEFAULT_DIAGONALONLY;i<mant.length;i++){
rh=diff/RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322212007
GPR[SPVAP]-1661322212007
GPR[EPVAP]-1661322213135
GPR[EPVS]-1661322213135
========
for(int i=0;i<x.length;i++){
rh=a.mant[i]+b.mant[i]/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322213138
GPR[SPVAP]-1661322213138
GPR[EPVAP]-1661322214282
GPR[EPVS]-1661322214282
========
for(int i=0;i<x.length;i++){
result.mant[i]=a.mant[i]+b.mant[i]-diff*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322214284
GPR[SPVAP]-1661322214284
GPR[EPVAP]-1661322215409
GPR[EPVS]-1661322215409
========
for(int i=0;i<x.length;i++){
rh=a.mant[i]+b.mant[i]/RADIX;
result.mant[i]=a.mant[i]+b.mant[i]-diff*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322215410
GPR[SPVAP]-1661322215410
GPR[EPVAP]-1661322216529
GPR[EPVS]-1661322216529
========
for(int i=0;i<x.length;i++){
rh=DEFAULT_DIAGONALONLY/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322216531
GPR[SPVAP]-1661322216531
GPR[EPVAP]-1661322217632
GPR[EPVS]-1661322217632
========
for(int i=0;i<x.length;i++){
remainder[i]=DEFAULT_DIAGONALONLY-diff*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322217634
GPR[SPVAP]-1661322217634
GPR[EPVAP]-1661322218733
GPR[EPVS]-1661322218733
========
for(int i=0;i<x.length;i++){
rh=DEFAULT_DIAGONALONLY/RADIX;
remainder[i]=DEFAULT_DIAGONALONLY-diff*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322218734
GPR[SPVAP]-1661322218734
GPR[EPVAP]-1661322219839
GPR[EPVS]-1661322219839
========
for(int i=0;i<x.length;i++){
subVector[d]=i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322219841
GPR[SPVAP]-1661322219841
GPR[EPVAP]-1661322220937
GPR[EPVS]-1661322220937
========
for(int i=0;i<x.length;i++){
xk*=length*(diff-i);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322220939
GPR[SPVAP]-1661322220939
GPR[EPVAP]-1661322222040
GPR[EPVS]-1661322222040
========
sigma=res[i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322222043
GPR[SPVAP]-1661322222043
GPR[EPVAP]-1661322223152
GPR[EPVS]-1661322223152
========
sigma=length*sigma;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322223153
GPR[SPVAP]-1661322223153
GPR[EPVAP]-1661322224264
GPR[EPVS]-1661322224264
========
diff-=((DEFAULT_DIAGONALONLY*100)-length)%rsize;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322224267
GPR[SPVAP]-1661322224267
GPR[EPVAP]-1661322225381
GPR[EPVS]-1661322225381
========
for(int i=0;i<x.length;i++){
xL*=-i*DEFAULT_STOPFITNESS;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322225383
GPR[SPVAP]-1661322225383
GPR[EPVAP]-1661322226473
GPR[EPVS]-1661322226473
========
for(int i=0;i<x.length;i++){
xH*=i*diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322226474
GPR[SPVAP]-1661322226474
GPR[EPVAP]-1661322227612
GPR[EPVS]-1661322227612
========
for(int i=0;i<x.length;i++){
xL*=-i*DEFAULT_STOPFITNESS;
xH*=i*diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322227614
GPR[SPVAP]-1661322227614
GPR[EPVAP]-1661322228728
GPR[EPVS]-1661322228728
========
for(int i=0;i<x.length;i++){
result.mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322228730
GPR[SPVAP]-1661322228730
GPR[EPVAP]-1661322229840
GPR[EPVS]-1661322229840
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
result.mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322229841
GPR[SPVAP]-1661322229841
GPR[EPVAP]-1661322230939
GPR[EPVS]-1661322230939
========
x=newPointAndDirection(x,res,sigma)[0];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322230942
GPR[SPVAP]-1661322230942
GPR[EPVAP]-1661322232089
GPR[EPVS]-1661322232089
========
for(int i=0;i<buf.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322232092
GPR[SPVAP]-1661322232092
GPR[EPVAP]-1661322233201
GPR[EPVS]-1661322233201
========
splitMult(res,x,res);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322233202
GPR[SPVAP]-1661322233202
GPR[EPVAP]-1661322234320
GPR[EPVS]-1661322234320
========
checkDimension(DEFAULT_DIAGONALONLY,boundaries[0]);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322234323
GPR[SPVAP]-1661322234323
GPR[EPVAP]-1661322235425
GPR[EPVS]-1661322235425
========
for(int i=0;i<this.inputSigma.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322235428
GPR[SPVAP]-1661322235428
GPR[EPVAP]-1661322236524
GPR[EPVS]-1661322236524
========
for(int i=0;i<x.length;i++){
se[i]=Double.NaN;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322236525
GPR[SPVAP]-1661322236525
GPR[EPVAP]-1661322237639
GPR[EPVS]-1661322237639
========
for(int i=index;i<index;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322237641
GPR[SPVAP]-1661322237641
GPR[EPVAP]-1661322238750
GPR[EPVS]-1661322238750
========
for(int i=index;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322238751
GPR[SPVAP]-1661322238751
GPR[EPVAP]-1661322239855
GPR[EPVS]-1661322239855
========
for(int i=0;i<index;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322239857
GPR[SPVAP]-1661322239857
GPR[EPVAP]-1661322240973
GPR[EPVS]-1661322240973
========
for(int i=0;i<randomBytes.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322240975
GPR[SPVAP]-1661322240975
GPR[EPVAP]-1661322242101
GPR[EPVS]-1661322242101
========
boundaries[4][i]=16*(boundaries[0][i]-diff);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322242103
GPR[SPVAP]-1661322242103
GPR[EPVAP]-1661322243227
GPR[EPVS]-1661322243227
========
inputSigma[DEFAULT_DIAGONALONLY]=work[i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322243229
GPR[SPVAP]-1661322243229
GPR[EPVAP]-1661322244349
GPR[EPVS]-1661322244349
========
inputSigma[i]=diff;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322244350
GPR[SPVAP]-1661322244350
GPR[EPVAP]-1661322245486
GPR[EPVS]-1661322245486
========
x[diff+DEFAULT_DIAGONALONLY]=sigma;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322245488
GPR[SPVAP]-1661322245488
GPR[EPVAP]-1661322246621
GPR[EPVS]-1661322246621
========
for(int i=0;i<x.length;i++){
if(FastMath.abs(x[i])<=Precision.EPSILON*diff){
e[i]=0;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322246623
GPR[SPVAP]-1661322246623
GPR[EPVAP]-1661322247747
GPR[EPVS]-1661322247747
========
for(int i=0;i<simplex.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322247749
GPR[SPVAP]-1661322247749
GPR[EPVAP]-1661322248861
GPR[EPVS]-1661322248861
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(boundaries[i]==null){
throw new NullArgumentException();
}
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322248863
GPR[SPVAP]-1661322248863
GPR[EPVAP]-1661322249968
GPR[EPVS]-1661322249968
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(y.length!=DEFAULT_DIAGONALONLY){
throw new DimensionMismatchException(y.length,DEFAULT_DIAGONALONLY);
}
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322249970
GPR[SPVAP]-1661322249970
GPR[EPVAP]-1661322251063
GPR[EPVS]-1661322251063
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(boundaries[i]==null){
throw new NullArgumentException();
}
if(y.length!=DEFAULT_DIAGONALONLY){
throw new DimensionMismatchException(y.length,DEFAULT_DIAGONALONLY);
}

res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322251065
GPR[SPVAP]-1661322251065
GPR[EPVAP]-1661322252173
GPR[EPVS]-1661322252173
========
for(int i=0;i<x.length;i++){
tmp=luMax[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322252175
GPR[SPVAP]-1661322252175
GPR[EPVAP]-1661322253280
GPR[EPVS]-1661322253280
========
for(int i=0;i<x.length;i++){
luCol[i]=diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322253282
GPR[SPVAP]-1661322253282
GPR[EPVAP]-1661322254383
GPR[EPVS]-1661322254383
========
for(int i=0;i<x.length;i++){
tmp=luMax[i];
luCol[i]=diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322254384
GPR[SPVAP]-1661322254384
GPR[EPVAP]-1661322255502
GPR[EPVS]-1661322255502
========
for(int i=0;i<(length>>1);i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322255505
GPR[SPVAP]-1661322255505
GPR[EPVAP]-1661322256601
GPR[EPVS]-1661322256601
========
for(int i=0;i<rawData.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322256602
GPR[SPVAP]-1661322256602
GPR[EPVAP]-1661322257706
GPR[EPVS]-1661322257706
========
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322257708
GPR[SPVAP]-1661322257708
GPR[EPVAP]-1661322258812
GPR[EPVS]-1661322258812
========
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322258814
GPR[SPVAP]-1661322258814
GPR[EPVAP]-1661322259928
GPR[EPVS]-1661322259928
========
for(int i=0;i<dataC.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322259929
GPR[SPVAP]-1661322259929
GPR[EPVAP]-1661322261073
GPR[EPVS]-1661322261073
========
if(diff<0){
i=-i-2;
}
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322261075
GPR[SPVAP]-1661322261075
GPR[EPVAP]-1661322262176
GPR[EPVS]-1661322262176
========
for(int i=0;i<mu;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322262179
GPR[SPVAP]-1661322262179
GPR[EPVAP]-1661322264217
GPR[SPVATF]-1661322264217
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322266138
GPR[SPVATR]-1661322266138
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322308313
GPR[EPVS]-1661322308314
GPR[PF]-1661322308314
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1184872_7_ts_1661322308314.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM6695581953322298427/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/7_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1184872_7_ts_1661322308314.diff
MMOut command diff: []
========
for(int i=0;i<correlated.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322308324
GPR[SPVAP]-1661322308324
GPR[EPVAP]-1661322309436
GPR[EPVS]-1661322309436
========
verifyInputArray(x,res);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322309437
GPR[SPVAP]-1661322309438
GPR[EPVAP]-1661322310569
GPR[EPVS]-1661322310569
========
for(int i=0;i<x.length;i++){
rl=diff-diff/DEFAULT_DIAGONALONLY*DEFAULT_DIAGONALONLY;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322310572
GPR[SPVAP]-1661322310572
GPR[EPVAP]-1661322311674
GPR[EPVS]-1661322311674
========
for(int i=0;i<x.length;i++){
result.mant[i]=diff/DEFAULT_DIAGONALONLY;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322311676
GPR[SPVAP]-1661322311676
GPR[EPVAP]-1661322312788
GPR[EPVS]-1661322312788
========
for(int i=0;i<x.length;i++){
rl=diff-diff/DEFAULT_DIAGONALONLY*DEFAULT_DIAGONALONLY;
result.mant[i]=diff/DEFAULT_DIAGONALONLY;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322312790
GPR[SPVAP]-1661322312790
GPR[EPVAP]-1661322313911
GPR[EPVS]-1661322313911
========
for(int i=0;i<init.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322313914
GPR[SPVAP]-1661322313914
GPR[EPVAP]-1661322315015
GPR[EPVS]-1661322315015
========
for(int i=0;i<newCoefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322315018
GPR[SPVAP]-1661322315018
GPR[EPVAP]-1661322316144
GPR[EPVS]-1661322316144
========
for(int i=0;i<x.length;i++){
cost+=residualsWeights[i]*diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322316149
GPR[SPVAP]-1661322316149
GPR[EPVAP]-1661322317249
GPR[EPVS]-1661322317249
========
for(int i=0;i<loop.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322317251
GPR[SPVAP]-1661322317251
GPR[EPVAP]-1661322318359
GPR[EPVS]-1661322318359
========
diff=0.0;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322318361
GPR[SPVAP]-1661322318361
GPR[EPVAP]-1661322319476
GPR[EPVS]-1661322319476
========
for(int i=0;i<main.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322319478
GPR[SPVAP]-1661322319478
GPR[EPVAP]-1661322320581
GPR[EPVS]-1661322320581
========
for(int i=0;i<x.length;i++){
fvalXY[k][i][j]=sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322320584
GPR[SPVAP]-1661322320584
GPR[EPVAP]-1661322321677
GPR[EPVS]-1661322321677
========
for(int i=0;i<x.length;i++){
accum2+=diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322321680
GPR[SPVAP]-1661322321680
GPR[EPVAP]-1661322322781
GPR[EPVS]-1661322322781
========
for(int i=0;i<x.length;i++){
if(res[i]/(6*length)>=1){
robustnessWeights[i]=0;
}else {
 final double diff=1-res[i]/(6*length)*arg;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322322783
GPR[SPVAP]-1661322322783
GPR[EPVAP]-1661322323889
GPR[EPVS]-1661322323889
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=previousState[i]+sigma*diff+sigma*boundaries[1][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322323891
GPR[SPVAP]-1661322323891
GPR[EPVAP]-1661322325001
GPR[EPVS]-1661322325001
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=currentState[i]+sigma*diff-sigma*boundaries[1][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322325003
GPR[SPVAP]-1661322325003
GPR[EPVAP]-1661322326146
GPR[EPVS]-1661322326146
========
for(int i=0;i<pData.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322326148
GPR[SPVAP]-1661322326148
GPR[EPVAP]-1661322327260
GPR[EPVS]-1661322327260
========
for(int i=0;i<pData.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322327262
GPR[SPVAP]-1661322327262
GPR[EPVAP]-1661322328390
GPR[EPVS]-1661322328390
========
for(int i=0;i<list.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322328392
GPR[SPVAP]-1661322328392
GPR[EPVAP]-1661322329491
GPR[EPVS]-1661322329491
========
for(int i=0;i<x.length;i++){
d[i]=y[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322329494
GPR[SPVAP]-1661322329494
GPR[EPVAP]-1661322330596
GPR[EPVS]-1661322330596
========
for(int i=0;i<x.length;i++){
if(diff<sigma){
nearest=i;
min_dist=diff;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322330598
GPR[SPVAP]-1661322330598
GPR[EPVAP]-1661322331691
GPR[EPVS]-1661322331691
========
for(int i=0;i<x.length;i++){
d[i]=y[i];
if(diff<sigma){
nearest=i;
min_dist=diff;
}

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322331692
GPR[SPVAP]-1661322331692
GPR[EPVAP]-1661322332797
GPR[EPVS]-1661322332797
========
for(int i=0;i<x.length;i++){
result+=(x[i]-sigma*res[i]-sigma-diff)/(i+1);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322332799
GPR[SPVAP]-1661322332799
GPR[EPVAP]-1661322333911
GPR[EPVS]-1661322333911
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(diff==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322333913
GPR[SPVAP]-1661322333913
GPR[EPVAP]-1661322335011
GPR[EPVS]-1661322335011
========
for(int i=0;i<p.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322335015
GPR[SPVAP]-1661322335015
GPR[EPVAP]-1661322336115
GPR[EPVS]-1661322336115
========
for(int i=0;i<dRow.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322336117
GPR[SPVAP]-1661322336117
GPR[EPVAP]-1661322337223
GPR[EPVS]-1661322337223
========
for(int i=0;i<mappingI.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322337226
GPR[SPVAP]-1661322337226
GPR[EPVAP]-1661322338334
GPR[EPVS]-1661322338334
========
for(int i=0;i<x.length;i++){
r+=sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322338336
GPR[SPVAP]-1661322338336
GPR[EPVAP]-1661322339452
GPR[EPVS]-1661322339452
========
for(int i=0;i<x.length;i++){
tS*=size[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322339454
GPR[SPVAP]-1661322339454
GPR[EPVAP]-1661322340563
GPR[EPVS]-1661322340563
========
for(int i=0;i<yI.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322340567
GPR[SPVAP]-1661322340567
GPR[EPVAP]-1661322341667
GPR[EPVS]-1661322341667
========
for(int i=0;i<stirlingS2.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322341669
GPR[SPVAP]-1661322341669
GPR[EPVAP]-1661322342762
GPR[EPVS]-1661322342762
========
for(int i=0;i<=mu;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322342764
GPR[SPVAP]-1661322342764
GPR[EPVAP]-1661322344795
GPR[SPVATF]-1661322344796
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322346722
GPR[EPVS]-1661322346722
========
diff/=res[DEFAULT_DIAGONALONLY];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322346725
GPR[SPVAP]-1661322346725
GPR[EPVAP]-1661322347856
GPR[EPVS]-1661322347856
========
for(int i=DEFAULT_DIAGONALONLY;i<=diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322347859
GPR[SPVAP]-1661322347859
GPR[EPVAP]-1661322348969
GPR[EPVS]-1661322348969
========
for(int i=0;i<x.length;i++){
err=1.0-res[0]*res[0]-result[0]*in[1]-result[1]*in[0]-result[1]*in[1]*(result[0]+result[1]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322348971
GPR[SPVAP]-1661322348971
GPR[EPVAP]-1661322350094
GPR[EPVS]-1661322350094
========
for(int i=0;i<x.length;i++){
result[1]+=1.0-res[0]*res[0]-result[0]*in[1]-result[1]*in[0]-result[1]*in[1];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322350095
GPR[SPVAP]-1661322350095
GPR[EPVAP]-1661322351232
GPR[EPVS]-1661322351232
========
for(int i=0;i<x.length;i++){
err=1.0-res[0]*res[0]-result[0]*in[1]-result[1]*in[0]-result[1]*in[1]*(result[0]+result[1]);
result[1]+=1.0-res[0]*res[0]-result[0]*in[1]-result[1]*in[0]-result[1]*in[1];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322351234
GPR[SPVAP]-1661322351234
GPR[EPVAP]-1661322352344
GPR[EPVS]-1661322352344
========
for(int i=0;i<x.length;i++){
B.setEntry(i,DEFAULT_DIAGONALONLY,length*(diff*res[DEFAULT_DIAGONALONLY++]-x[i]*sums[DEFAULT_DIAGONALONLY]));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322352347
GPR[SPVAP]-1661322352347
GPR[EPVAP]-1661322353485
GPR[EPVS]-1661322353485
========
for(int i=0;i<x.length;i++){
B.setEntry(DEFAULT_DIAGONALONLY,i,length*(diff*res[DEFAULT_DIAGONALONLY++]-x[i]*sums[DEFAULT_DIAGONALONLY]));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322353487
GPR[SPVAP]-1661322353487
GPR[EPVAP]-1661322354597
GPR[EPVS]-1661322354597
========
for(int i=0;i<x.length;i++){
B.setEntry(i,DEFAULT_DIAGONALONLY,length*(diff*res[DEFAULT_DIAGONALONLY++]-x[i]*sums[DEFAULT_DIAGONALONLY]));
B.setEntry(DEFAULT_DIAGONALONLY,i,length*(diff*res[DEFAULT_DIAGONALONLY++]-x[i]*sums[DEFAULT_DIAGONALONLY]));

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322354598
GPR[SPVAP]-1661322354598
GPR[EPVAP]-1661322355689
GPR[EPVS]-1661322355689
========
for(int i=0;i<x.length;i++){
omegaReal[i]=omegaReal[i-1]*diff-omegaImaginaryCounterClockwise[i-1]*DEFAULT_STOPFITNESS;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322355692
GPR[SPVAP]-1661322355692
GPR[EPVAP]-1661322356817
GPR[EPVS]-1661322356817
========
for(int i=0;i<x.length;i++){
omegaImaginaryCounterClockwise[i]=omegaReal[i-1]*DEFAULT_STOPFITNESS+omegaImaginaryCounterClockwise[i-1]*diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322356818
GPR[SPVAP]-1661322356818
GPR[EPVAP]-1661322357937
GPR[EPVS]-1661322357937
========
for(int i=0;i<x.length;i++){
omegaReal[i]=omegaReal[i-1]*diff-omegaImaginaryCounterClockwise[i-1]*DEFAULT_STOPFITNESS;
omegaImaginaryCounterClockwise[i]=omegaReal[i-1]*DEFAULT_STOPFITNESS+omegaImaginaryCounterClockwise[i-1]*diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322357939
GPR[SPVAP]-1661322357939
GPR[EPVAP]-1661322359048
GPR[EPVS]-1661322359048
========
for(int i=0;i<x.length;i++){
bottom[i]=y[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322359050
GPR[SPVAP]-1661322359050
GPR[EPVAP]-1661322360181
GPR[EPVS]-1661322360181
========
for(int i=0;i<x.length;i++){
x[i]=MathUtils.reduce(inputSigma[index],sigma,sigma)-sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322360184
GPR[SPVAP]-1661322360184
GPR[EPVAP]-1661322361281
GPR[EPVS]-1661322361281
========
for(int i=0;i<x.length;i++){
y[i]=yval[index];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322361282
GPR[SPVAP]-1661322361282
GPR[EPVAP]-1661322362404
GPR[EPVS]-1661322362404
========
for(int i=0;i<x.length;i++){
index=diff-DEFAULT_DIAGONALONLY+i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322362407
GPR[SPVAP]-1661322362407
GPR[EPVAP]-1661322363527
GPR[EPVS]-1661322363527
========
for(int i=0;i<x.length;i++){
x[index]=MathUtils.reduce(inputSigma[i],sigma,sigma)+sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322363528
GPR[SPVAP]-1661322363528
GPR[EPVAP]-1661322364641
GPR[EPVS]-1661322364641
========
for(int i=0;i<x.length;i++){
x[i]=MathUtils.reduce(inputSigma[index],sigma,sigma)-sigma;
y[i]=yval[index];
index=diff-DEFAULT_DIAGONALONLY+i;
x[index]=MathUtils.reduce(inputSigma[i],sigma,sigma)+sigma;
y[index]=yval[i];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322364643
GPR[SPVAP]-1661322364643
GPR[EPVAP]-1661322365757
GPR[EPVS]-1661322365757
========
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
y[index]=yval[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322365758
GPR[SPVAP]-1661322365758
GPR[EPVAP]-1661322366893
GPR[EPVS]-1661322366893
========
for(int i=0;i<x.length;i++){
y[index]=yval[i];
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322366894
GPR[SPVAP]-1661322366894
GPR[EPVAP]-1661322367992
GPR[EPVS]-1661322367992
========
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
y[index]=yval[i];
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322367993
GPR[SPVAP]-1661322367993
GPR[EPVAP]-1661322369109
GPR[EPVS]-1661322369109
========
for(int i=0;i<beta.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322369113
GPR[SPVAP]-1661322369113
GPR[EPVAP]-1661322370267
GPR[EPVS]-1661322370267
========
for(int i=0;i<x.length;i++){
_i=newIndices[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322370269
GPR[SPVAP]-1661322370269
GPR[EPVAP]-1661322371376
GPR[EPVS]-1661322371376
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
zI+=inputSigma[i]*hK[j];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322371378
GPR[SPVAP]-1661322371378
GPR[EPVAP]-1661322372514
GPR[EPVS]-1661322372514
========
for(int i=0;i<x.length;i++){
lmDiag[i]=-sigma*diff+sigma*lmDiag[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322372516
GPR[SPVAP]-1661322372516
GPR[EPVAP]-1661322373648
GPR[EPVS]-1661322373648
========
for(int i=0;i<x.length;i++){
weightedResidualJacobian[i][pk]=sigma*diff+sigma*res[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322373650
GPR[SPVAP]-1661322373650
GPR[EPVAP]-1661322374750
GPR[EPVS]-1661322374750
========
for(int i=0;i<x.length;i++){
lmDiag[i]=-sigma*diff+sigma*lmDiag[i];
weightedResidualJacobian[i][pk]=sigma*diff+sigma*res[i];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322374751
GPR[SPVAP]-1661322374751
GPR[EPVAP]-1661322375891
GPR[EPVS]-1661322375891
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=previousState[i]+sigma*diff+sigma*boundaries[1][i]+yDotK[2][i]+sigma*boundaries[3][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322375893
GPR[SPVAP]-1661322375893
GPR[EPVAP]-1661322377014
GPR[EPVS]-1661322377014
========
for(int i=0;i<x.length;i++){
interpolatedDerivatives[i]=sigma*diff+sigma*boundaries[1][i]+yDotK[2][i]+sigma*boundaries[3][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322377016
GPR[SPVAP]-1661322377016
GPR[EPVAP]-1661322378121
GPR[EPVS]-1661322378121
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=previousState[i]+sigma*diff+sigma*boundaries[1][i]+yDotK[2][i]+sigma*boundaries[3][i];
interpolatedDerivatives[i]=sigma*diff+sigma*boundaries[1][i]+yDotK[2][i]+sigma*boundaries[3][i];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322378122
GPR[SPVAP]-1661322378122
GPR[EPVAP]-1661322379243
GPR[EPVS]-1661322379243
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=currentState[i]+sigma*diff+sigma*boundaries[1][i]+yDotK[2][i]+sigma*boundaries[3][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322379246
GPR[SPVAP]-1661322379246
GPR[EPVAP]-1661322380357
GPR[EPVS]-1661322380357
========
for(int i=DEFAULT_DIAGONALONLY;i<points.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322380358
GPR[SPVAP]-1661322380359
GPR[EPVAP]-1661322381465
GPR[EPVS]-1661322381465
========
for(int i=0;i<(DEFAULT_DIAGONALONLY>>1);i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322381468
GPR[SPVAP]-1661322381468
GPR[EPVAP]-1661322383540
GPR[SPVATF]-1661322383540
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322385486
GPR[SPVATR]-1661322385487
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322427649
GPR[EPVS]-1661322427649
GPR[PF]-1661322427649
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1304208_8_ts_1661322427649.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM6506857819642599161/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/8_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1304208_8_ts_1661322427649.diff
MMOut command diff: []
========
for(int i=0;i<x.length;i++){
x[i]=diff+0.5*(res[i]-f[DEFAULT_DIAGONALONLY-i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322427660
GPR[SPVAP]-1661322427660
GPR[EPVAP]-1661322428780
GPR[EPVS]-1661322428780
========
for(int i=0;i<x.length;i++){
x[n-i]=diff-0.5*(res[i]-f[DEFAULT_DIAGONALONLY-i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322428782
GPR[SPVAP]-1661322428782
GPR[EPVAP]-1661322429900
GPR[EPVS]-1661322429900
========
for(int i=0;i<x.length;i++){
x[i]=diff+0.5*(res[i]-f[DEFAULT_DIAGONALONLY-i]);
x[n-i]=diff-0.5*(res[i]-f[DEFAULT_DIAGONALONLY-i]);

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322429901
GPR[SPVAP]-1661322429901
GPR[EPVAP]-1661322431040
GPR[EPVS]-1661322431040
========
x[0]=0.0;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322431042
GPR[SPVAP]-1661322431042
GPR[EPVAP]-1661322433059
GPR[SPVATF]-1661322433059
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322434987
GPR[EPVS]-1661322434987
========
x[DEFAULT_DIAGONALONLY>>1]=2.0*res[n>>1];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322434988
GPR[SPVAP]-1661322434988
GPR[EPVAP]-1661322436101
GPR[EPVS]-1661322436101
========
for(int i=0;i<x.length;i++){
product[i+mant.length]=diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322436104
GPR[SPVAP]-1661322436104
GPR[EPVAP]-1661322437224
GPR[EPVS]-1661322437224
========
res[i]=sigma*length+diff;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322437227
GPR[SPVAP]-1661322437227
GPR[EPVAP]-1661322438331
GPR[EPVS]-1661322438331
========
x[i]=FastMath.abs(res[i]-res[i]);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322438333
GPR[SPVAP]-1661322438333
GPR[EPVAP]-1661322439433
GPR[EPVS]-1661322439434
========
inputSigma[DEFAULT_DIAGONALONLY]=FastMath.sqrt(ltI[i]);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322439436
GPR[SPVAP]-1661322439436
GPR[EPVAP]-1661322440537
GPR[EPVS]-1661322440537
========
for(int i=0;i<observations.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322440539
GPR[SPVAP]-1661322440539
GPR[EPVAP]-1661322441640
GPR[EPVS]-1661322441641
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=currentState[i]-diff*(v1[i]-sigma*(v2[i]+sigma*(v3[i]+sigma*v4[i])));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322441643
GPR[SPVAP]-1661322441643
GPR[EPVAP]-1661322442749
GPR[EPVS]-1661322442749
========
for(int i=0;i<length-DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322442752
GPR[SPVAP]-1661322442752
GPR[EPVAP]-1661322443847
GPR[EPVS]-1661322443847
========
for(int i=0;i<x.length;i++){
d[j]=diff*(res[i+1]-x[j])/x[i]-x[DEFAULT_DIAGONALONLY+j];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322443848
GPR[SPVAP]-1661322443848
GPR[EPVAP]-1661322444961
GPR[EPVS]-1661322444961
========
for(int i=0;i<xval.length-1;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322444963
GPR[SPVAP]-1661322444963
GPR[EPVAP]-1661322446077
GPR[EPVS]-1661322446077
========
for(int i=0;i<after.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322446079
GPR[SPVAP]-1661322446079
GPR[EPVAP]-1661322447187
GPR[EPVS]-1661322447187
========
for(int i=0;i<x.length;i++){
after[i]+=previous[i]+scaled[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322447188
GPR[SPVAP]-1661322447188
GPR[EPVAP]-1661322448303
GPR[EPVS]-1661322448303
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=currentState[i]-sigma*diff-sigma*boundaries[1][i]-sigma*boundaries[2][i]-sigma*boundaries[3][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322448307
GPR[SPVAP]-1661322448307
GPR[EPVAP]-1661322449400
GPR[EPVS]-1661322449400
========
for(int i=0;i<x.length;i++){
x[i]=diff-FastMath.sin(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322449403
GPR[SPVAP]-1661322449403
GPR[EPVAP]-1661322450505
GPR[EPVS]-1661322450505
========
for(int i=0;i<x.length;i++){
x[n-i]=diff+FastMath.sin(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322450506
GPR[SPVAP]-1661322450506
GPR[EPVAP]-1661322451650
GPR[EPVS]-1661322451651
========
for(int i=0;i<x.length;i++){
t1+=FastMath.cos(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322451652
GPR[SPVAP]-1661322451652
GPR[EPVAP]-1661322452780
GPR[EPVS]-1661322452780
========
for(int i=0;i<x.length;i++){
x[i]=diff-FastMath.sin(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);
x[n-i]=diff+FastMath.sin(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);
t1+=FastMath.cos(i*FastMath.PI/DEFAULT_DIAGONALONLY)*(res[i]-f[n-i]);

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322452781
GPR[SPVAP]-1661322452781
GPR[EPVAP]-1661322453917
GPR[EPVS]-1661322453917
========
for(int i=0;i<D.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322453920
GPR[SPVAP]-1661322453920
GPR[EPVAP]-1661322455033
GPR[EPVS]-1661322455033
========
boundaries[1][i]=sigma-v[0][i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322455034
GPR[SPVAP]-1661322455034
GPR[EPVAP]-1661322456145
GPR[EPVS]-1661322456145
========
boundaries[2][i]=v[0][i]-v[1][i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322456146
GPR[SPVAP]-1661322456146
GPR[EPVAP]-1661322457253
GPR[EPVS]-1661322457253
========
for(int i=0;i<x.length;i++){
tc[n-1]=c[n];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322457255
GPR[SPVAP]-1661322457255
GPR[EPVAP]-1661322458399
GPR[EPVS]-1661322458399
========
for(int i=0;i<x.length;i++){
coefficients[n-1]+=res[i]/diff*tc[n-1];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322458400
GPR[SPVAP]-1661322458400
GPR[EPVAP]-1661322459531
GPR[EPVS]-1661322459531
========
for(int i=0;i<x.length;i++){
tc[n-1]=c[n];
coefficients[n-1]+=res[i]/diff*tc[n-1];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322459532
GPR[SPVAP]-1661322459532
GPR[EPVAP]-1661322460672
GPR[EPVS]-1661322460672
========
for(int i=0;i<x.length;i++){
interpolatedState[i]=currentState[i]-diff*(v[0][i]-sigma*(v[1][i]+sigma*(v[2][i]+sigma*(v[3][i]+sigma*(v[4][i]+sigma*(v[5][i]+sigma*(v[6][i])))))));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322460676
GPR[SPVAP]-1661322460676
GPR[EPVAP]-1661322461837
GPR[EPVS]-1661322461837
========
for(int i=0;i<x.length;i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322461839
GPR[SPVAP]-1661322461839
GPR[EPVAP]-1661322462986
GPR[EPVS]-1661322462986
========
for(int i=0;i<x.length;i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322462988
GPR[SPVAP]-1661322462988
GPR[EPVAP]-1661322464116
GPR[EPVS]-1661322464116
========
for(int i=0;i<x.length;i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322464118
GPR[SPVAP]-1661322464118
GPR[EPVAP]-1661322465260
GPR[EPVS]-1661322465260
========
for(int i=0;i<x.length;i++){
b[i][r]=diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322465262
GPR[SPVAP]-1661322465262
GPR[EPVAP]-1661322466364
GPR[EPVS]-1661322466364
========
for(int i=0;i<x.length;i++){
prodHigh[i]=res[i]*x[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322466368
GPR[SPVAP]-1661322466368
GPR[EPVAP]-1661322467477
GPR[EPVS]-1661322467477
========
for(int i=0;i<x.length;i++){
prodLowSum+=res[i]-diff-(ca-res[i])*x[i]-SPLIT_FACTOR*x[i]-(cb-x[i])-(((inputSigma[i]-diff-(ca-res[i])*SPLIT_FACTOR*x[i]-(cb-x[i]))-aLow*bHigh)-aHigh*bLow);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322467479
GPR[SPVAP]-1661322467479
GPR[EPVAP]-1661322468591
GPR[EPVS]-1661322468591
========
for(int i=0;i<x.length;i++){
prodHigh[i]=res[i]*x[i];
prodLowSum+=res[i]-diff-(ca-res[i])*x[i]-SPLIT_FACTOR*x[i]-(cb-x[i])-(((inputSigma[i]-diff-(ca-res[i])*SPLIT_FACTOR*x[i]-(cb-x[i]))-aLow*bHigh)-aHigh*bLow);

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322468592
GPR[SPVAP]-1661322468592
GPR[EPVAP]-1661322469721
GPR[EPVS]-1661322469721
========
for(int i=0;i<STATIC_E.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322469725
GPR[SPVAP]-1661322469725
GPR[EPVAP]-1661322470828
GPR[EPVS]-1661322470828
========
for(int i=0;i<outBlock.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322470831
GPR[SPVAP]-1661322470831
GPR[EPVAP]-1661322471945
GPR[EPVS]-1661322471945
========
for(int i=0;i<lmDir.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322471947
GPR[SPVAP]-1661322471947
GPR[EPVAP]-1661322473079
GPR[EPVS]-1661322473079
========
for(int i=0;i<dataI.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322473082
GPR[SPVAP]-1661322473082
GPR[EPVAP]-1661322474176
GPR[EPVS]-1661322474176
========
for(int i=0;i<value.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322474179
GPR[SPVAP]-1661322474179
GPR[EPVAP]-1661322475284
GPR[EPVS]-1661322475284
========
for(int i=0;i<sequence.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322475291
GPR[SPVAP]-1661322475291
GPR[EPVAP]-1661322476402
GPR[EPVS]-1661322476402
========
for(int i=0;i<orders.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322476405
GPR[SPVAP]-1661322476405
GPR[EPVAP]-1661322477517
GPR[EPVS]-1661322477517
========
for(int i=0;i<cols.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322477519
GPR[SPVAP]-1661322477519
GPR[EPVAP]-1661322478643
GPR[EPVS]-1661322478643
========
boundaries=new double[diff][1];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322478644
GPR[SPVAP]-1661322478644
GPR[EPVAP]-1661322479755
GPR[EPVS]-1661322479755
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
stateVariation[j]+=scaled[j]*sigma;
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322479757
GPR[SPVAP]-1661322479757
GPR[EPVAP]-1661322480868
GPR[EPVS]-1661322480868
========
for(int i=0;i<x.length;i++){
interpolatedDerivatives[j]=(interpolatedDerivatives[j]+scaled[j]*sigma)/diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322480870
GPR[SPVAP]-1661322480870
GPR[EPVAP]-1661322481976
GPR[EPVS]-1661322481976
========
for(int i=0;i<x.length;i++){
stateVariation[j]+=scaled[j]*sigma;
interpolatedDerivatives[j]=(interpolatedDerivatives[j]+scaled[j]*sigma)/diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322481978
GPR[SPVAP]-1661322481978
GPR[EPVAP]-1661322483134
GPR[EPVS]-1661322483134
========
for(int i=0;i<interpolator.yDotK.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322483137
GPR[SPVAP]-1661322483137
GPR[EPVAP]-1661322484278
GPR[EPVS]-1661322484278
========
for(int i=0;i<yDotKLast.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322484281
GPR[SPVAP]-1661322484281
GPR[EPVAP]-1661322485462
GPR[EPVS]-1661322485462
========
for(int i=0;i<abscissas.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322485464
GPR[SPVAP]-1661322485464
GPR[EPVAP]-1661322486579
GPR[EPVS]-1661322486579
========
for(int i=0;i<nDataI.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322486582
GPR[SPVAP]-1661322486582
GPR[EPVAP]-1661322487708
GPR[EPVS]-1661322487708
========
for(int i=0;i<x.length;i++){
stateVariation[j]+=diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322487710
GPR[SPVAP]-1661322487710
GPR[EPVAP]-1661322488847
GPR[EPVS]-1661322488847
========
for(int i=0;i<x.length;i++){
interpolatedDerivatives[j]+=DEFAULT_DIAGONALONLY*diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322488848
GPR[SPVAP]-1661322488848
GPR[EPVAP]-1661322489960
GPR[EPVS]-1661322489960
========
for(int i=0;i<x.length;i++){
stateVariation[j]+=diff;
interpolatedDerivatives[j]+=DEFAULT_DIAGONALONLY*diff;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322489962
GPR[SPVAP]-1661322489962
GPR[EPVAP]-1661322491115
GPR[EPVS]-1661322491115
========
for(int i=0;i<arr.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322491117
GPR[SPVAP]-1661322491117
GPR[EPVAP]-1661322492222
GPR[EPVS]-1661322492222
========
for(int i=0;i<x.length;i++){
y1Diag[k]=new double[y.length];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322492223
GPR[SPVAP]-1661322492223
GPR[EPVAP]-1661322493343
GPR[EPVS]-1661322493343
========
for(int i=0;i<x.length;i++){
lastDimension=array[0];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322493345
GPR[SPVAP]-1661322493345
GPR[EPVAP]-1661322494465
GPR[EPVS]-1661322494465
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
shiftRight();
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322494467
GPR[SPVAP]-1661322494467
GPR[EPVAP]-1661322495578
GPR[EPVS]-1661322495578
========
for(int i=0;i<termJ.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322495580
GPR[SPVAP]-1661322495580
GPR[EPVAP]-1661322496686
GPR[EPVS]-1661322496686
========
for(int i=0;i<m.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322496688
GPR[SPVAP]-1661322496688
GPR[EPVAP]-1661322497791
GPR[EPVS]-1661322497791
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
s=K15_01*yDotK[0][j]+K15_06*yDotK[5][j]+K15_07*yDotK[6][j]+K15_08*yDotK[7][j]+K15_09*yDotK[8][j]+K15_10*yDotK[9][j]+K15_11*yDotK[10][j]+K15_12*yDotK[11][j]+K15_13*yDotK[12][j]+K15_14*yDotKLast[0][j];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322497795
GPR[SPVAP]-1661322497795
GPR[EPVAP]-1661322498974
GPR[EPVS]-1661322498974
========
diff*=Math.exp(Math.min(1.0,(normps/chiN-1.0)*cs/damps));
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322498976
GPR[SPVAP]-1661322498976
GPR[EPVAP]-1661322500085
GPR[EPVS]-1661322500085
========
DEFAULT_DIAGONALONLY=minadj/(divisor.mant[mant.length-1]+1);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322500087
GPR[SPVAP]-1661322500087
GPR[EPVAP]-1661322501217
GPR[EPVS]-1661322501217
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
s=K16_01*yDotK[0][j]+K16_06*yDotK[5][j]+K16_07*yDotK[6][j]+K16_08*yDotK[7][j]+K16_09*yDotK[8][j]+K16_10*yDotK[9][j]+K16_11*yDotK[10][j]+K16_12*yDotK[11][j]+K16_13*yDotK[12][j]+K16_14*yDotKLast[0][j]+K16_15*yDotKLast[1][j];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322501219
GPR[SPVAP]-1661322501219
GPR[EPVAP]-1661322502402
GPR[EPVS]-1661322502402
========
for(int i=0;i<term.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322502404
GPR[SPVAP]-1661322502404
GPR[EPVAP]-1661322503521
GPR[EPVS]-1661322503521
========
for(int i=0;i<xrow.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322503524
GPR[SPVAP]-1661322503524
GPR[EPVAP]-1661322504665
GPR[EPVS]-1661322504665
========
for(int i=0;i<rawdigits.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322504668
GPR[SPVAP]-1661322504668
GPR[EPVAP]-1661322505793
GPR[EPVS]-1661322505793
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
p[n]=1;
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322505795
GPR[SPVAP]-1661322505795
GPR[EPVAP]-1661322506925
GPR[EPVS]-1661322506925
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
coeff*=sigma;
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322506926
GPR[SPVAP]-1661322506926
GPR[EPVAP]-1661322508041
GPR[EPVS]-1661322508042
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
p[n]=1;
coeff*=sigma;

res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322508043
GPR[SPVAP]-1661322508043
GPR[EPVAP]-1661322509162
GPR[EPVS]-1661322509162
========
this.DEFAULT_DIAGONALONLY=brightnessExponent;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322509164
GPR[SPVAP]-1661322509164
GPR[EPVAP]-1661322510271
GPR[EPVS]-1661322510271
========
for(int i=0;i<binaryRepresentation.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322510274
GPR[SPVAP]-1661322510274
GPR[EPVAP]-1661322511392
GPR[EPVS]-1661322511392
========
for(int i=0;i<binaryRepresentation.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322511394
GPR[SPVAP]-1661322511394
GPR[EPVAP]-1661322512497
GPR[EPVS]-1661322512497
========
DEFAULT_DIAGONALONLY=r.length-(diff-i)*(nvm-in+1)/2;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322512500
GPR[SPVAP]-1661322512500
GPR[EPVAP]-1661322513613
GPR[EPVS]-1661322513613
========
for(int i=0;i<interpolatedState.length;i++){
interpolatedState[i]=currentState[i]-sigma*diff-sigma*boundaries[1][i]-sigma*boundaries[2][i]-sigma*boundaries[3][i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322513618
GPR[SPVAP]-1661322513618
GPR[EPVAP]-1661322514723
GPR[EPVS]-1661322514723
========
for(int i=0;i<beta.length;i++){
_i=newIndices[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322514728
GPR[SPVAP]-1661322514728
GPR[EPVAP]-1661322515852
GPR[EPVS]-1661322515852
========
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(DEFAULT_DIAGONALONLY>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322515855
GPR[SPVAP]-1661322515855
GPR[EPVAP]-1661322516958
GPR[EPVS]-1661322516958
========
for(int i=0;i<length;i++){
dataR[i]*=sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322516961
GPR[SPVAP]-1661322516961
GPR[EPVAP]-1661322518056
GPR[EPVS]-1661322518056
========
for(int i=0;i<mant.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322518059
GPR[SPVAP]-1661322518059
GPR[EPVAP]-1661322519176
GPR[EPVS]-1661322519176
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322519178
GPR[SPVAP]-1661322519178
GPR[EPVAP]-1661322520292
GPR[EPVS]-1661322520292
========
for(int i=0;i<x.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322520293
GPR[SPVAP]-1661322520294
GPR[EPVAP]-1661322521409
GPR[EPVS]-1661322521409
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322521411
GPR[SPVAP]-1661322521411
GPR[EPVAP]-1661322522525
GPR[EPVS]-1661322522525
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322522527
GPR[SPVAP]-1661322522527
GPR[EPVAP]-1661322523635
GPR[EPVS]-1661322523635
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322523636
GPR[SPVAP]-1661322523636
GPR[EPVAP]-1661322524746
GPR[EPVS]-1661322524746
========
for(int i=0;i<x.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322524748
GPR[SPVAP]-1661322524748
GPR[EPVAP]-1661322525867
GPR[EPVS]-1661322525867
========
for(int i=0;i<mant.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322525868
GPR[SPVAP]-1661322525868
GPR[EPVAP]-1661322526994
GPR[EPVS]-1661322526994
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322526995
GPR[SPVAP]-1661322526995
GPR[EPVAP]-1661322528091
GPR[EPVS]-1661322528091
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322528093
GPR[SPVAP]-1661322528093
GPR[EPVAP]-1661322529197
GPR[EPVS]-1661322529197
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322529199
GPR[SPVAP]-1661322529199
GPR[EPVAP]-1661322530340
GPR[EPVS]-1661322530341
========
for(int i=0;i<mant.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322530342
GPR[SPVAP]-1661322530342
GPR[EPVAP]-1661322531469
GPR[EPVS]-1661322531469
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322531471
GPR[SPVAP]-1661322531471
GPR[EPVAP]-1661322532573
GPR[EPVS]-1661322532573
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322532575
GPR[SPVAP]-1661322532575
GPR[EPVAP]-1661322533736
GPR[EPVS]-1661322533736
========
for(int i=0;i<x.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322533738
GPR[SPVAP]-1661322533738
GPR[EPVAP]-1661322534851
GPR[EPVS]-1661322534851
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322534853
GPR[SPVAP]-1661322534853
GPR[EPVAP]-1661322535959
GPR[EPVS]-1661322535959
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322535960
GPR[SPVAP]-1661322535960
GPR[EPVAP]-1661322537081
GPR[EPVS]-1661322537081
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322537083
GPR[SPVAP]-1661322537083
GPR[EPVAP]-1661322538184
GPR[EPVS]-1661322538184
========
for(int i=0;i<mant.length;i++){
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322538186
GPR[SPVAP]-1661322538186
GPR[EPVAP]-1661322539293
GPR[EPVS]-1661322539293
========
for(int i=0;i<mant.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322539294
GPR[SPVAP]-1661322539294
GPR[EPVAP]-1661322540395
GPR[EPVS]-1661322540395
========
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
rh=diff/RADIX;
mant[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322540398
GPR[SPVAP]-1661322540398
GPR[EPVAP]-1661322541532
GPR[EPVS]-1661322541532
========
for(int i=0;i<=x.length;i++){
xk*=-i*length;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322541534
GPR[SPVAP]-1661322541534
GPR[EPVAP]-1661322542641
GPR[EPVS]-1661322542641
========
for(int i=0;i<diff;i++){
xk*=-i*length;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322542642
GPR[SPVAP]-1661322542642
GPR[EPVAP]-1661322543753
GPR[EPVS]-1661322543753
========
for(int i=0;i<=diff;i++){
xk*=-i*length;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}

========
MM Copying to MM
GPR[SPVS]-1661322543754
GPR[SPVAP]-1661322543754
GPR[EPVAP]-1661322544862
GPR[EPVS]-1661322544862
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<ranks.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322550236
GPR[SPVAP]-1661322550236
GPR[EPVAP]-1661322551364
GPR[EPVS]-1661322551364
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<imagEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322551366
GPR[SPVAP]-1661322551366
GPR[EPVAP]-1661322552471
GPR[EPVS]-1661322552471
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<point.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322552474
GPR[SPVAP]-1661322552474
GPR[EPVAP]-1661322553586
GPR[EPVS]-1661322553586
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<in.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322553588
GPR[SPVAP]-1661322553588
GPR[EPVAP]-1661322554689
GPR[EPVS]-1661322554689
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<z.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322554691
GPR[SPVAP]-1661322554691
GPR[EPVAP]-1661322555798
GPR[EPVS]-1661322555798
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<mant.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322555800
GPR[SPVAP]-1661322555800
GPR[EPVAP]-1661322556917
GPR[EPVS]-1661322556917
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<data.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322556919
GPR[SPVAP]-1661322556919
GPR[EPVAP]-1661322558029
GPR[EPVS]-1661322558029
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<lB.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322558032
GPR[SPVAP]-1661322558032
GPR[EPVAP]-1661322559158
GPR[EPVS]-1661322559158
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<covMatEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322559160
GPR[SPVAP]-1661322559160
GPR[EPVAP]-1661322560266
GPR[EPVS]-1661322560266
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<realEigenvalues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322560268
GPR[SPVAP]-1661322560268
GPR[EPVAP]-1661322561385
GPR[EPVS]-1661322561385
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<singularValues.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322561386
GPR[SPVAP]-1661322561386
GPR[EPVAP]-1661322562504
GPR[EPVS]-1661322562504
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<y.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322562508
GPR[SPVAP]-1661322562508
GPR[EPVAP]-1661322563604
GPR[EPVS]-1661322563604
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<variablesToInclude.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322563606
GPR[SPVAP]-1661322563606
GPR[EPVAP]-1661322564744
GPR[EPVS]-1661322564744
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<special.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322564746
GPR[SPVAP]-1661322564746
GPR[EPVAP]-1661322565849
GPR[EPVS]-1661322565849
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<points.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322565851
GPR[SPVAP]-1661322565851
GPR[EPVAP]-1661322566965
GPR[EPVS]-1661322566965
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<coordinates.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322566967
GPR[SPVAP]-1661322566967
GPR[EPVAP]-1661322568075
GPR[EPVS]-1661322568075
========
if(boundaries==null){
return x;
}
double[] res=new double[real.length];
for(int i=0;i<real.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322568078
GPR[SPVAP]-1661322568078
GPR[EPVAP]-1661322569203
GPR[EPVS]-1661322569203
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<real.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322569204
GPR[SPVAP]-1661322569204
GPR[EPVAP]-1661322570305
GPR[EPVS]-1661322570305
========
if(boundaries==null){
return x;
}
double[] res=new double[real.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322570307
GPR[SPVAP]-1661322570307
GPR[EPVAP]-1661322571425
GPR[EPVS]-1661322571425
========
if(boundaries==null){
return x;
}
double[] res=new double[coefficients.length];
for(int i=0;i<coefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322571427
GPR[SPVAP]-1661322571427
GPR[EPVAP]-1661322572535
GPR[EPVS]-1661322572535
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<coefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322572537
GPR[SPVAP]-1661322572537
GPR[EPVAP]-1661322573640
GPR[EPVS]-1661322573640
========
if(boundaries==null){
return x;
}
double[] res=new double[coefficients.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322573641
GPR[SPVAP]-1661322573641
GPR[EPVAP]-1661322574796
GPR[EPVS]-1661322574796
========
if(boundaries==null){
return x;
}
double[] res=new double[indices.length];
for(int i=0;i<indices.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322574798
GPR[SPVAP]-1661322574798
GPR[EPVAP]-1661322575917
GPR[EPVS]-1661322575917
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<indices.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322575918
GPR[SPVAP]-1661322575918
GPR[EPVAP]-1661322577025
GPR[EPVS]-1661322577025
========
if(boundaries==null){
return x;
}
double[] res=new double[indices.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322577027
GPR[SPVAP]-1661322577027
GPR[EPVAP]-1661322578151
GPR[EPVS]-1661322578151
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<lower.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322578153
GPR[SPVAP]-1661322578153
GPR[EPVAP]-1661322579281
GPR[EPVS]-1661322579281
========
if((DEFAULT_DIAGONALONLY+DEFAULT_DIAGONALONLY)>internalArray.length){
expandTo(startIndex+i);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322579284
GPR[SPVAP]-1661322579284
GPR[EPVAP]-1661322580391
GPR[EPVS]-1661322580391
========
diff=DEFAULT_DIAGONALONLY;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322580392
GPR[SPVAP]-1661322580392
GPR[EPVAP]-1661322581497
GPR[EPVS]-1661322581497
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<results.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322581499
GPR[SPVAP]-1661322581499
GPR[EPVAP]-1661322582608
GPR[EPVS]-1661322582608
========
if(boundaries==null){
return x;
}
double[] res=new double[stats.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322582610
GPR[SPVAP]-1661322582610
GPR[EPVAP]-1661322583760
GPR[EPVS]-1661322583760
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return results;

========
MM Copying to MM
GPR[SPVS]-1661322583762
GPR[SPVAP]-1661322583762
GPR[EPVAP]-1661322584870
GPR[EPVS]-1661322584870
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<result.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322584872
GPR[SPVAP]-1661322584872
GPR[EPVAP]-1661322585980
GPR[EPVS]-1661322585980
========
if(boundaries==null){
return x;
}
double[] res=new double[means.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322585981
GPR[SPVAP]-1661322585981
GPR[EPVAP]-1661322587103
GPR[EPVS]-1661322587103
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1661322587105
GPR[SPVAP]-1661322587105
GPR[EPVAP]-1661322588217
GPR[EPVS]-1661322588217
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return repaired;

========
MM Copying to MM
GPR[SPVS]-1661322588218
GPR[SPVAP]-1661322588218
GPR[EPVAP]-1661322589328
GPR[EPVS]-1661322589328
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<val.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322589330
GPR[SPVAP]-1661322589330
GPR[EPVAP]-1661322590444
GPR[EPVS]-1661322590444
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322590450
GPR[SPVAP]-1661322590450
GPR[EPVAP]-1661322591564
GPR[EPVS]-1661322591564
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322591566
GPR[SPVAP]-1661322591566
GPR[EPVAP]-1661322593644
GPR[SPVATF]-1661322593644
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322595634
GPR[SPVATR]-1661322595635
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322637977
GPR[EPVS]-1661322637977
GPR[PF]-1661322637977
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1514536_9_ts_1661322637977.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM7684806228633782303/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/9_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1514536_9_ts_1661322637977.diff
MMOut command diff: []
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<root.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322638098
GPR[SPVAP]-1661322638098
GPR[EPVAP]-1661322639239
GPR[EPVS]-1661322639239
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<xArray.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322639241
GPR[SPVAP]-1661322639241
GPR[EPVAP]-1661322640336
GPR[EPVS]-1661322640336
========
if(boundaries!=null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322640339
GPR[SPVAP]-1661322640339
GPR[EPVAP]-1661322642411
GPR[SPVATF]-1661322642411
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322644366
GPR[SPVATR]-1661322644367
TESTING : math_20
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTablet
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSphere
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testAckley
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testSsDiffPow
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRastrigin
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testRosen
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testCigar
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testTwoAxes
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testEllipse
MM message  - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testElliRotated
MM messageFailing tests: 11
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661322684692
GPR[EPVS]-1661322684692
========
if(boundaries==null){
return x;
}
double[] res=new double[mappers.length];
for(int i=0;i<mappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322684695
GPR[SPVAP]-1661322684695
GPR[EPVAP]-1661322685810
GPR[EPVS]-1661322685810
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<mappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322685811
GPR[SPVAP]-1661322685811
GPR[EPVAP]-1661322686921
GPR[EPVS]-1661322686921
========
if(boundaries==null){
return x;
}
double[] res=new double[mappers.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322686923
GPR[SPVAP]-1661322686923
GPR[EPVAP]-1661322688037
GPR[EPVS]-1661322688037
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return mapped;

========
MM Copying to MM
GPR[SPVS]-1661322688038
GPR[SPVAP]-1661322688038
GPR[EPVAP]-1661322689161
GPR[EPVS]-1661322689161
========
if(boundaries==null){
return x;
}
double[] res=new double[mappers.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return mapped;

========
MM Copying to MM
GPR[SPVS]-1661322689164
GPR[SPVAP]-1661322689164
GPR[EPVAP]-1661322690276
GPR[EPVS]-1661322690276
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<mappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return mapped;

========
MM Copying to MM
GPR[SPVS]-1661322690277
GPR[SPVAP]-1661322690277
GPR[EPVAP]-1661322691405
GPR[EPVS]-1661322691405
========
if(boundaries==null){
return x;
}
double[] res=new double[mappers.length];
for(int i=0;i<mappers.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return mapped;

========
MM Copying to MM
GPR[SPVS]-1661322691407
GPR[SPVAP]-1661322691407
GPR[EPVAP]-1661322692508
GPR[EPVS]-1661322692508
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<random.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322692515
GPR[SPVAP]-1661322692515
GPR[EPVAP]-1661322693625
GPR[EPVS]-1661322693625
========
if(boundaries==null){
return x;
}
double[] res=new double[mean.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322693626
GPR[SPVAP]-1661322693626
GPR[EPVAP]-1661322694740
GPR[EPVS]-1661322694740
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return random;

========
MM Copying to MM
GPR[SPVS]-1661322694741
GPR[SPVAP]-1661322694741
GPR[EPVAP]-1661322695958
GPR[EPVS]-1661322695958
========
if(boundaries==null){
return x;
}
if(x.length<3){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,3,true);
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322695960
GPR[SPVAP]-1661322695960
GPR[EPVAP]-1661322697078
GPR[EPVS]-1661322697078
========
if(boundaries==null){
return x;
}
MathArrays.checkOrder(x);
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322697079
GPR[SPVAP]-1661322697079
GPR[EPVAP]-1661322699093
GPR[SPVATF]-1661322699093
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322701097
GPR[EPVS]-1661322701097
========
if(boundaries==null){
return x;
}
double[] res=new double[parameters.length];
for(int i=0;i<parameters.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322701100
GPR[SPVAP]-1661322701100
GPR[EPVAP]-1661322702211
GPR[EPVS]-1661322702211
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<parameters.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322702213
GPR[SPVAP]-1661322702213
GPR[EPVAP]-1661322703321
GPR[EPVS]-1661322703321
========
if(boundaries==null){
return x;
}
double[] res=new double[parameters.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322703322
GPR[SPVAP]-1661322703322
GPR[EPVAP]-1661322704419
GPR[EPVS]-1661322704419
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return gradient;

========
MM Copying to MM
GPR[SPVS]-1661322704421
GPR[SPVAP]-1661322704421
GPR[EPVAP]-1661322705533
GPR[EPVS]-1661322705533
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
xn*=x;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322705535
GPR[SPVAP]-1661322705535
GPR[EPVAP]-1661322706775
GPR[EPVS]-1661322706775
========
if(boundaries==null){
return x;
}
double[] res=new double[z.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322706779
GPR[SPVAP]-1661322706779
GPR[EPVAP]-1661322707889
GPR[EPVS]-1661322707889
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return zAbs;

========
MM Copying to MM
GPR[SPVS]-1661322707890
GPR[SPVAP]-1661322707890
GPR[EPVAP]-1661322709022
GPR[EPVS]-1661322709022
========
if(boundaries==null){
return x;
}
if(z.length==0){
throw new NoDataException();
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322709024
GPR[SPVAP]-1661322709024
GPR[EPVAP]-1661322710122
GPR[EPVS]-1661322710122
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<diagonal.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322710124
GPR[SPVAP]-1661322710124
GPR[EPVAP]-1661322711209
GPR[EPVS]-1661322711209
========
if(boundaries==null){
return x;
}
if(diff==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322711211
GPR[SPVAP]-1661322711211
GPR[EPVAP]-1661322712310
GPR[EPVS]-1661322712310
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322712312
GPR[SPVAP]-1661322712312
GPR[EPVAP]-1661322713419
GPR[EPVS]-1661322713419
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<dimension;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322713421
GPR[SPVAP]-1661322713421
GPR[EPVAP]-1661322715456
GPR[SPVATF]-1661322715456
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322717449
GPR[SPVATR]-1661322717450
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322759673
GPR[EPVS]-1661322759673
GPR[PF]-1661322759673
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1636232_10_ts_1661322759673.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM5174040614603277781/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/10_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1636232_10_ts_1661322759673.diff
MMOut command diff: []
========
diff=x[i];
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322759683
GPR[SPVAP]-1661322759683
GPR[EPVAP]-1661322760798
GPR[EPVS]-1661322760798
========
if(diff==0.0){
DEFAULT_DIAGONALONLY+=DEFAULT_DIAGONALONLY-i;
continue;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322760799
GPR[SPVAP]-1661322760799
GPR[EPVAP]-1661322761933
GPR[EPVS]-1661322761933
========
sigma=res[i];
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322761934
GPR[SPVAP]-1661322761934
GPR[EPVAP]-1661322763049
GPR[EPVS]-1661322763049
========
sigma=sigma*diff;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322763050
GPR[SPVAP]-1661322763050
GPR[EPVAP]-1661322764156
GPR[EPVS]-1661322764156
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
ensureDataConformance(x,inputSigma);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322764158
GPR[SPVAP]-1661322764158
GPR[EPVAP]-1661322765276
GPR[EPVS]-1661322765276
========
if(this.vorder[j]==series[i]){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322765278
GPR[SPVAP]-1661322765278
GPR[EPVAP]-1661322766397
GPR[EPVS]-1661322766397
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkVectorDimensions(v.data.length);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322766399
GPR[SPVAP]-1661322766399
GPR[EPVAP]-1661322767516
GPR[EPVS]-1661322767516
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkVectorDimensions(v.data.length);
for(int i=0;i<data.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322767518
GPR[SPVAP]-1661322767518
GPR[EPVAP]-1661322768625
GPR[EPVS]-1661322768625
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<this.res.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322768628
GPR[SPVAP]-1661322768628
GPR[EPVAP]-1661322769747
GPR[EPVS]-1661322769747
========
if(i==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322769749
GPR[SPVAP]-1661322769749
GPR[EPVAP]-1661322770869
GPR[EPVS]-1661322770869
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<guess.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322770871
GPR[SPVAP]-1661322770871
GPR[EPVAP]-1661322771981
GPR[EPVS]-1661322771981
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
sigmaArray[i][0]=((x==null)?0.3:inputSigma[i])/diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322771982
GPR[SPVAP]-1661322771982
GPR[EPVAP]-1661322773090
GPR[EPVS]-1661322773090
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<maxIterations;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322773092
GPR[SPVAP]-1661322773092
GPR[EPVAP]-1661322775153
GPR[SPVATF]-1661322775153
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322777108
GPR[EPVS]-1661322777108
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<randomBytes.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322777111
GPR[SPVAP]-1661322777111
GPR[EPVAP]-1661322778228
GPR[EPVS]-1661322778228
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<hash.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322778230
GPR[SPVAP]-1661322778230
GPR[EPVAP]-1661322779356
GPR[EPVS]-1661322779356
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
outBlock[outIndex++]=block[i*jWidth+jColumn];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322779359
GPR[SPVAP]-1661322779359
GPR[EPVAP]-1661322780517
GPR[EPVS]-1661322780517
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
block[i*jWidth+jColumn]=mBlock[mIndex++];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322780519
GPR[SPVAP]-1661322780519
GPR[EPVAP]-1661322781653
GPR[EPVS]-1661322781653
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<f.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322781655
GPR[SPVAP]-1661322781655
GPR[EPVAP]-1661322782767
GPR[EPVS]-1661322782767
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<this.DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322782769
GPR[SPVAP]-1661322782769
GPR[EPVAP]-1661322783895
GPR[EPVS]-1661322783895
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=diff;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322783897
GPR[SPVAP]-1661322783897
GPR[EPVAP]-1661322785015
GPR[EPVS]-1661322785015
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<simplex.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322785017
GPR[SPVAP]-1661322785017
GPR[EPVAP]-1661322786136
GPR[EPVS]-1661322786136
========
if(boundaries==null){
return x;
}
if(x.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,2,true);
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322786137
GPR[SPVAP]-1661322786137
GPR[EPVAP]-1661322787250
GPR[EPVS]-1661322787250
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<v.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322787252
GPR[SPVAP]-1661322787252
GPR[EPVAP]-1661322788357
GPR[EPVS]-1661322788357
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
singcheck();
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322788359
GPR[SPVAP]-1661322788359
GPR[EPVAP]-1661322789460
GPR[EPVS]-1661322789460
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
ss();
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322789461
GPR[SPVAP]-1661322789461
GPR[EPVAP]-1661322790589
GPR[EPVS]-1661322790589
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_ISACTIVECMA?0:1;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322790591
GPR[SPVAP]-1661322790591
GPR[EPVAP]-1661322792634
GPR[SPVATF]-1661322792634
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322794589
GPR[EPVS]-1661322794589
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_ISACTIVECMA?0:1;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322794591
GPR[SPVAP]-1661322794591
GPR[EPVAP]-1661322795715
GPR[EPVS]-1661322795715
========
if(boundaries[i].length!=DEFAULT_DIAGONALONLY){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322795717
GPR[SPVAP]-1661322795717
GPR[EPVAP]-1661322796853
GPR[EPVS]-1661322796853
========
if(boundaries[i].length==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322796854
GPR[SPVAP]-1661322796854
GPR[EPVAP]-1661322797970
GPR[EPVS]-1661322797970
========
if(boundaries==DEFAULT_DIAGONALONLY){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322797971
GPR[SPVAP]-1661322797971
GPR[EPVAP]-1661322799093
GPR[EPVS]-1661322799093
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
sum+=FastMath.abs(diff);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322799094
GPR[SPVAP]-1661322799094
GPR[EPVAP]-1661322800220
GPR[EPVS]-1661322800220
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<xval.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322800222
GPR[SPVAP]-1661322800222
GPR[EPVAP]-1661322801340
GPR[EPVS]-1661322801340
========
if(Precision.compareTo(res[i],0.0,EPSILON)==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322801342
GPR[SPVAP]-1661322801342
GPR[EPVAP]-1661322802453
GPR[EPVS]-1661322802453
========
if(boundaries!=DEFAULT_DIAGONALONLY){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322802455
GPR[SPVAP]-1661322802455
GPR[EPVAP]-1661322803576
GPR[EPVS]-1661322803576
========
if(boundaries[i].length!=null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322803578
GPR[SPVAP]-1661322803578
GPR[EPVAP]-1661322804682
GPR[EPVS]-1661322804682
========
if(boundaries[i].length==DEFAULT_DIAGONALONLY){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322804683
GPR[SPVAP]-1661322804683
GPR[EPVAP]-1661322805807
GPR[EPVS]-1661322805807
========
if(diff<=0){
throw new NoDataException(LocalizedFormats.INSUFFICIENT_DIMENSION);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322805809
GPR[SPVAP]-1661322805809
GPR[EPVAP]-1661322806927
GPR[EPVS]-1661322806927
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<(inputSigma==null)?-1:currentState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322806929
GPR[SPVAP]-1661322806929
GPR[EPVAP]-1661322808031
GPR[EPVS]-1661322808031
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<scale.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322808033
GPR[SPVAP]-1661322808033
GPR[EPVAP]-1661322809140
GPR[EPVS]-1661322809140
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
verifyInputArray(res,x);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322809143
GPR[SPVAP]-1661322809143
GPR[EPVAP]-1661322810245
GPR[EPVS]-1661322810245
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
max=FastMath.max(sigma,FastMath.abs(diff));
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322810247
GPR[SPVAP]-1661322810247
GPR[EPVAP]-1661322811357
GPR[EPVS]-1661322811357
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
MathUtils.checkNotNull(x);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322811359
GPR[SPVAP]-1661322811359
GPR[EPVAP]-1661322812460
GPR[EPVS]-1661322812460
========
if(boundaries==null){
return x;
}
if(diff==1){
return new double[]{0};
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322812462
GPR[SPVAP]-1661322812462
GPR[EPVAP]-1661322813589
GPR[EPVS]-1661322813589
========
if(boundaries==null){
return x;
}
double[] res=new double[dataC.length];
for(int i=0;i<dataC.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322813591
GPR[SPVAP]-1661322813591
GPR[EPVAP]-1661322814711
GPR[EPVS]-1661322814711
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<dataC.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322814712
GPR[SPVAP]-1661322814712
GPR[EPVAP]-1661322815812
GPR[EPVS]-1661322815812
========
if(boundaries==null){
return x;
}
double[] res=new double[dataC.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322815814
GPR[SPVAP]-1661322815814
GPR[EPVAP]-1661322816936
GPR[EPVS]-1661322816936
========
if(j==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322816938
GPR[SPVAP]-1661322816938
GPR[EPVAP]-1661322818056
GPR[EPVS]-1661322818056
========
if(rowData==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322818058
GPR[SPVAP]-1661322818058
GPR[EPVAP]-1661322819167
GPR[EPVS]-1661322819167
========
if(columnData==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322819168
GPR[SPVAP]-1661322819168
GPR[EPVAP]-1661322820289
GPR[EPVS]-1661322820289
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322820291
GPR[SPVAP]-1661322820291
GPR[EPVAP]-1661322822378
GPR[SPVATF]-1661322822378
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322824324
GPR[SPVATR]-1661322824325
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322865940
GPR[EPVS]-1661322865940
GPR[PF]-1661322865940
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1742500_11_ts_1661322865940.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM5046791647211197024/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/11_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1742500_11_ts_1661322865940.diff
MMOut command diff: []
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322865951
GPR[SPVAP]-1661322865951
GPR[EPVAP]-1661322867952
GPR[SPVATF]-1661322867952
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322869914
GPR[EPVS]-1661322869914
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322869915
GPR[SPVAP]-1661322869915
GPR[EPVAP]-1661322871933
GPR[SPVATF]-1661322871933
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322873866
GPR[EPVS]-1661322873866
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322873868
GPR[SPVAP]-1661322873868
GPR[EPVAP]-1661322874972
GPR[EPVS]-1661322874972
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322874974
GPR[SPVAP]-1661322874974
GPR[EPVAP]-1661322877039
GPR[SPVATF]-1661322877039
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322878955
GPR[EPVS]-1661322878955
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322878957
GPR[SPVAP]-1661322878957
GPR[EPVAP]-1661322880993
GPR[SPVATF]-1661322880993
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322882937
GPR[EPVS]-1661322882937
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322882939
GPR[SPVAP]-1661322882939
GPR[EPVAP]-1661322884997
GPR[SPVATF]-1661322884997
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322886966
GPR[EPVS]-1661322886966
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<varcov.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322886968
GPR[SPVAP]-1661322886968
GPR[EPVAP]-1661322888093
GPR[EPVS]-1661322888093
========
if(sample1.length<2){
throw new NumberIsTooSmallException(n,2,true);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322888095
GPR[SPVAP]-1661322888095
GPR[EPVAP]-1661322889201
GPR[EPVS]-1661322889201
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<newPols.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322889203
GPR[SPVAP]-1661322889203
GPR[EPVAP]-1661322890338
GPR[EPVS]-1661322890338
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=DEFAULT_DIAGONALONLY;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322890342
GPR[SPVAP]-1661322890342
GPR[EPVAP]-1661322891445
GPR[EPVS]-1661322891445
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=0;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322891446
GPR[SPVAP]-1661322891446
GPR[EPVAP]-1661322892560
GPR[EPVS]-1661322892560
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=0;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322892561
GPR[SPVAP]-1661322892561
GPR[EPVAP]-1661322893675
GPR[EPVS]-1661322893675
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322893677
GPR[SPVAP]-1661322893677
GPR[EPVAP]-1661322894809
GPR[EPVS]-1661322894809
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=DEFAULT_DIAGONALONLY;i<=x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322894811
GPR[SPVAP]-1661322894811
GPR[EPVAP]-1661322895915
GPR[EPVS]-1661322895915
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=0;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322895917
GPR[SPVAP]-1661322895917
GPR[EPVAP]-1661322897028
GPR[EPVS]-1661322897028
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkIndices(DEFAULT_DIAGONALONLY,DEFAULT_DIAGONALONLY);
for(int i=DEFAULT_DIAGONALONLY;i<=DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322897031
GPR[SPVAP]-1661322897031
GPR[EPVAP]-1661322898132
GPR[EPVS]-1661322898132
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<p.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322898135
GPR[SPVAP]-1661322898135
GPR[EPVAP]-1661322899242
GPR[EPVS]-1661322899242
========
if(i<0){
i=-i-2;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322899244
GPR[SPVAP]-1661322899244
GPR[EPVAP]-1661322900351
GPR[EPVS]-1661322900351
========
if(i>=polynomials.length){
i--;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322900353
GPR[SPVAP]-1661322900353
GPR[EPVAP]-1661322901477
GPR[EPVS]-1661322901477
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(singularValues[i]>diff){
a=1/singularValues[i];
}else {
a=0;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322901479
GPR[SPVAP]-1661322901479
GPR[EPVAP]-1661322902589
GPR[EPVS]-1661322902589
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkVectorDimensions(diff);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322902590
GPR[SPVAP]-1661322902590
GPR[EPVAP]-1661322903703
GPR[EPVS]-1661322903703
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkVectorDimensions(diff);
for(int i=0;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322903706
GPR[SPVAP]-1661322903706
GPR[EPVAP]-1661322904840
GPR[EPVS]-1661322904840
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322904843
GPR[SPVAP]-1661322904843
GPR[EPVAP]-1661322905949
GPR[EPVS]-1661322905949
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
d[i]=y[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322905951
GPR[SPVAP]-1661322905951
GPR[EPVAP]-1661322907061
GPR[EPVS]-1661322907061
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(diff<Double.POSITIVE_INFINITY){
nearest=i;
min_dist=diff;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322907063
GPR[SPVAP]-1661322907063
GPR[EPVAP]-1661322908185
GPR[EPVS]-1661322908185
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
d[i]=y[i];
if(diff<Double.POSITIVE_INFINITY){
nearest=i;
min_dist=diff;
}

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322908186
GPR[SPVAP]-1661322908186
GPR[EPVAP]-1661322909300
GPR[EPVS]-1661322909300
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
MathUtils.checkNotNull(res);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322909302
GPR[SPVAP]-1661322909302
GPR[EPVAP]-1661322910444
GPR[EPVS]-1661322910444
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<centroid.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322910446
GPR[SPVAP]-1661322910446
GPR[EPVAP]-1661322911544
GPR[EPVS]-1661322911544
========
if(secondaryMappers==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322911546
GPR[SPVAP]-1661322911546
GPR[EPVAP]-1661322912648
GPR[EPVS]-1661322912648
========
if(DEFAULT_DIAGONALONLY<0||i>=this.res.length){
throw new OutOfRangeException(i,0,this.parameters.length-1);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322912651
GPR[SPVAP]-1661322912651
GPR[EPVAP]-1661322913778
GPR[EPVS]-1661322913778
========
if(DEFAULT_DIAGONALONLY<0||j>=this.res.length){
throw new OutOfRangeException(j,0,this.parameters.length-1);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322913780
GPR[SPVAP]-1661322913780
GPR[EPVAP]-1661322914891
GPR[EPVS]-1661322914891
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<rawData.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322914893
GPR[SPVAP]-1661322914894
GPR[EPVAP]-1661322916015
GPR[EPVS]-1661322916015
========
if(boundaries==null){
return x;
}
MathArrays.checkOrder(inputSigma);
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322916017
GPR[SPVAP]-1661322916017
GPR[EPVAP]-1661322918108
GPR[SPVATF]-1661322918108
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322920082
GPR[EPVS]-1661322920082
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
inputSigma=getStartPoint();
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322920084
GPR[SPVAP]-1661322920084
GPR[EPVAP]-1661322922205
GPR[SPVATF]-1661322922205
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661322924144
GPR[SPVATR]-1661322924145
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661322966488
GPR[EPVS]-1661322966488
GPR[PF]-1661322966488
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1843047_12_ts_1661322966488.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM3612091878431724500/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/12_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_1843047_12_ts_1661322966488.diff
MMOut command diff: []
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<=diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322966497
GPR[SPVAP]-1661322966497
GPR[EPVAP]-1661322967617
GPR[EPVS]-1661322967617
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<=diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322967618
GPR[SPVAP]-1661322967618
GPR[EPVAP]-1661322968726
GPR[EPVS]-1661322968726
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<list.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322968728
GPR[SPVAP]-1661322968728
GPR[EPVAP]-1661322969892
GPR[EPVS]-1661322969892
========
System.arraycopy(valueCompiler.lowerIndirection,0,lowerIndirection,0,valueCompiler.lowerIndirection.length);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322969895
GPR[SPVAP]-1661322969895
GPR[EPVAP]-1661322971021
GPR[EPVS]-1661322971021
========
default :

if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322971023
GPR[SPVAP]-1661322971023
GPR[EPVAP]-1661322971982
GPR[EPVS]-1661322971982
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<newCoefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322971984
GPR[SPVAP]-1661322971984
GPR[EPVAP]-1661322973097
GPR[EPVS]-1661322973097
========
if(boundaries==null){
return x;
}
double[] res=new double[p.coefficients.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322973098
GPR[SPVAP]-1661322973098
GPR[EPVAP]-1661322974200
GPR[EPVS]-1661322974200
========
if(boundaries==null){
return x;
}
double[] res=new double[coefficients.length];
for(int i=0;i<newCoefficients.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322974201
GPR[SPVAP]-1661322974201
GPR[EPVAP]-1661322975321
GPR[EPVS]-1661322975321
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
verifyInputArray(res,x);
for(int i=diff;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322975323
GPR[SPVAP]-1661322975323
GPR[EPVAP]-1661322976449
GPR[EPVS]-1661322976449
========
sigma+=u-1;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322976451
GPR[SPVAP]-1661322976451
GPR[EPVAP]-1661322977601
GPR[EPVS]-1661322977601
========
if(sigma<=EXPONENTIAL_SA_QI[0]){
return sigma*(diff+u);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322977603
GPR[SPVAP]-1661322977603
GPR[EPVAP]-1661322978723
GPR[EPVS]-1661322978723
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<centered.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322978725
GPR[SPVAP]-1661322978725
GPR[EPVAP]-1661322979843
GPR[EPVS]-1661322979843
========
if(boundaries==null){
return x;
}
double[] res=new double[values.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322979844
GPR[SPVAP]-1661322979844
GPR[EPVAP]-1661322980959
GPR[EPVS]-1661322980959
========
if(i<0){
i=-i-2;
}
if(i>=polynomials.length){
i--;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322980960
GPR[SPVAP]-1661322980960
GPR[EPVAP]-1661322982070
GPR[EPVS]-1661322982070
========
if(boundaries==null){
return x;
}
PolynomialFunctionLagrangeForm.verifyInterpolationArray(x,inputSigma,true);
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322982072
GPR[SPVAP]-1661322982072
GPR[EPVAP]-1661322983185
GPR[EPVS]-1661322983185
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
res[0]=inputSigma.clone()[0];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322983186
GPR[SPVAP]-1661322983186
GPR[EPVAP]-1661322985217
GPR[SPVATF]-1661322985217
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322987134
GPR[EPVS]-1661322987134
========
if(boundaries==null){
return x;
}
if(dataR.length!=dataI.length){
throw new DimensionMismatchException(dataI.length,dataR.length);
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322987137
GPR[SPVAP]-1661322987137
GPR[EPVAP]-1661322988252
GPR[EPVS]-1661322988252
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return values;

========
MM Copying to MM
GPR[SPVS]-1661322988254
GPR[SPVAP]-1661322988254
GPR[EPVAP]-1661322989366
GPR[EPVS]-1661322989366
========
diff-=i;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322989368
GPR[SPVAP]-1661322989368
GPR[EPVAP]-1661322990494
GPR[EPVS]-1661322990494
========
DEFAULT_DIAGONALONLY+=i;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322990496
GPR[SPVAP]-1661322990496
GPR[EPVAP]-1661322991617
GPR[EPVS]-1661322991617
========
if(comparator==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322991619
GPR[SPVAP]-1661322991619
GPR[EPVAP]-1661322992727
GPR[EPVS]-1661322992727
========
if(Precision.equals(sigma,0.0,EPSILON)){
throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322992729
GPR[SPVAP]-1661322992729
GPR[EPVAP]-1661322993834
GPR[EPVS]-1661322993834
========
if(boundaries==null){
return x;
}
double[] res=new double[doubles.length];
for(int i=0;i<doubles.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322993837
GPR[SPVAP]-1661322993837
GPR[EPVAP]-1661322994951
GPR[EPVS]-1661322994951
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<doubles.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322994953
GPR[SPVAP]-1661322994953
GPR[EPVAP]-1661322996065
GPR[EPVS]-1661322996065
========
if(boundaries==null){
return x;
}
double[] res=new double[doubles.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322996066
GPR[SPVAP]-1661322996066
GPR[EPVAP]-1661322997166
GPR[EPVS]-1661322997166
========
Arrays.sort(new DoubleIndex[doubles.length]);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322997168
GPR[SPVAP]-1661322997168
GPR[EPVAP]-1661322998276
GPR[EPVS]-1661322998276
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<DEFAULT_DIAGONALONLY+length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322998278
GPR[SPVAP]-1661322998278
GPR[EPVAP]-1661322999401
GPR[EPVS]-1661322999401
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<DEFAULT_DIAGONALONLY+length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661322999404
GPR[SPVAP]-1661322999404
GPR[EPVAP]-1661323000505
GPR[EPVS]-1661323000505
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
nD[i]=d[i]*diff;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323000507
GPR[SPVAP]-1661323000507
GPR[EPVAP]-1661323001616
GPR[EPVS]-1661323001616
========
new double[2][][0]=res;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323001618
GPR[SPVAP]-1661323001618
GPR[EPVAP]-1661323002587
GPR[EPVS]-1661323002587
========
new double[2][][1]=new double[p.length];
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323002589
GPR[SPVAP]-1661323002589
GPR[EPVAP]-1661323003551
GPR[EPVS]-1661323003551
========
if(boundaries==null){
return x;
}
double[] res=new double[subVector.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323003552
GPR[SPVAP]-1661323003552
GPR[EPVAP]-1661323004645
GPR[EPVS]-1661323004645
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<pivot.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323004648
GPR[SPVAP]-1661323004649
GPR[EPVAP]-1661323005754
GPR[EPVS]-1661323005754
========
if(boundaries==null){
return x;
}
double[] res=new double[sample.length];
for(int i=0;i<sample.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323005756
GPR[SPVAP]-1661323005756
GPR[EPVAP]-1661323006862
GPR[EPVS]-1661323006862
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<sample.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323006863
GPR[SPVAP]-1661323006863
GPR[EPVAP]-1661323007968
GPR[EPVS]-1661323007969
========
if(boundaries==null){
return x;
}
double[] res=new double[sample.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323007970
GPR[SPVAP]-1661323007970
GPR[EPVAP]-1661323009089
GPR[EPVS]-1661323009089
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return standardizedSample;

========
MM Copying to MM
GPR[SPVS]-1661323009092
GPR[SPVAP]-1661323009092
GPR[EPVAP]-1661323010195
GPR[EPVS]-1661323010195
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<interpolatedState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323010198
GPR[SPVAP]-1661323010198
GPR[EPVAP]-1661323011331
GPR[EPVS]-1661323011331
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=DEFAULT_DIAGONALONLY;i<points.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323011333
GPR[SPVAP]-1661323011333
GPR[EPVAP]-1661323012431
GPR[EPVS]-1661323012431
========
if(boundaries==null){
return x;
}
double[] res=new double[dsY.length];
for(int i=0;i<dsY.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323012433
GPR[SPVAP]-1661323012433
GPR[EPVAP]-1661323013533
GPR[EPVS]-1661323013533
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<dsY.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323013535
GPR[SPVAP]-1661323013535
GPR[EPVAP]-1661323014643
GPR[EPVS]-1661323014643
========
if(boundaries==null){
return x;
}
double[] res=new double[dsY.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323014645
GPR[SPVAP]-1661323014645
GPR[EPVAP]-1661323015753
GPR[EPVS]-1661323015753
========
if(boundaries==null){
return x;
}
double[] res=new double[point.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323015755
GPR[SPVAP]-1661323015755
GPR[EPVAP]-1661323016855
GPR[EPVS]-1661323016855
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=diff;i<DEFAULT_DIAGONALONLY;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323016858
GPR[SPVAP]-1661323016858
GPR[EPVAP]-1661323017965
GPR[EPVS]-1661323017965
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(x[i]/(6*sigma)>=1){
robustnessWeights[i]=0;
}else {
 final double diff=1-x[i]/(6*sigma)*arg;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323017967
GPR[SPVAP]-1661323017967
GPR[EPVAP]-1661323019064
GPR[EPVS]-1661323019064
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<observed.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323019066
GPR[SPVAP]-1661323019066
GPR[EPVAP]-1661323020169
GPR[EPVS]-1661323020169
========
res[i]=sigma*x+diff;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323020171
GPR[SPVAP]-1661323020171
GPR[EPVAP]-1661323021273
GPR[EPVS]-1661323021273
========
inputSigma[i]=FastMath.abs(x[i]-res[i]);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323021275
GPR[SPVAP]-1661323021275
GPR[EPVAP]-1661323022381
GPR[EPVS]-1661323022381
========
if(interpolator.polynomials==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323022383
GPR[SPVAP]-1661323022383
GPR[EPVAP]-1661323023483
GPR[EPVS]-1661323023483
========
if(interpolator==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323023484
GPR[SPVAP]-1661323023484
GPR[EPVAP]-1661323024586
GPR[EPVS]-1661323024586
========
if(polynomials==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323024587
GPR[SPVAP]-1661323024587
GPR[EPVAP]-1661323025685
GPR[EPVS]-1661323025685
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<main.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323025688
GPR[SPVAP]-1661323025688
GPR[EPVAP]-1661323026790
GPR[EPVS]-1661323026790
========
result.exp=exp+x.exp-2*mant.length+1;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323026792
GPR[SPVAP]-1661323026792
GPR[EPVAP]-1661323027930
GPR[EPVS]-1661323027930
========
result.sign=(byte)((sign==x.sign)?1:-1);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323027932
GPR[SPVAP]-1661323027932
GPR[EPVAP]-1661323029053
GPR[EPVS]-1661323029053
========
if(result.mant[mant.length-1]==0){
result.exp=0;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323029055
GPR[SPVAP]-1661323029055
GPR[EPVAP]-1661323030160
GPR[EPVS]-1661323030160
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<observations.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323030162
GPR[SPVAP]-1661323030162
GPR[EPVAP]-1661323031266
GPR[EPVS]-1661323031267
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<(res==null)?-1:currentState.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323031268
GPR[SPVAP]-1661323031268
GPR[EPVAP]-1661323032372
GPR[EPVS]-1661323032372
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<normalized.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323032374
GPR[SPVAP]-1661323032374
GPR[EPVAP]-1661323033519
GPR[EPVS]-1661323033519
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return correlated;

========
MM Copying to MM
GPR[SPVS]-1661323033520
GPR[SPVAP]-1661323033520
GPR[EPVAP]-1661323034633
GPR[EPVS]-1661323034633
========
if(boundaries==null){
return x;
}
double[] res=new double[mean.length];
for(int i=0;i<normalized.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323034635
GPR[SPVAP]-1661323034635
GPR[EPVAP]-1661323035747
GPR[EPVS]-1661323035747
========
result.exp=exp-divisor.exp+diff-mant.length;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323035749
GPR[SPVAP]-1661323035749
GPR[EPVAP]-1661323036856
GPR[EPVS]-1661323036856
========
result.sign=(byte)((sign==divisor.sign)?1:-1);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323036857
GPR[SPVAP]-1661323036857
GPR[EPVAP]-1661323037969
GPR[EPVS]-1661323037970
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return value;

========
MM Copying to MM
GPR[SPVS]-1661323037972
GPR[SPVAP]-1661323037972
GPR[EPVAP]-1661323039063
GPR[EPVS]-1661323039063
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
valueCoeff*=x-statisticsSigmaHistory.get(DEFAULT_DIAGONALONLY);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323039065
GPR[SPVAP]-1661323039065
GPR[EPVAP]-1661323040160
GPR[EPVS]-1661323040160
========
if(boundaries==null){
return x;
}
checkInterpolation();
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323040161
GPR[SPVAP]-1661323040161
GPR[EPVAP]-1661323041264
GPR[EPVS]-1661323041264
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<observed1.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323041266
GPR[SPVAP]-1661323041266
GPR[EPVAP]-1661323042368
GPR[EPVS]-1661323042368
========
if(loop[0]==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323042370
GPR[SPVAP]-1661323042370
GPR[EPVAP]-1661323043464
GPR[EPVS]-1661323043464
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
if(Double.isInfinite(diff)){
throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,x);
}
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323043466
GPR[SPVAP]-1661323043466
GPR[EPVAP]-1661323044579
GPR[EPVS]-1661323044579
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
bottom0=res;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323044581
GPR[SPVAP]-1661323044581
GPR[EPVAP]-1661323045705
GPR[EPVS]-1661323045705
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(Double.isInfinite(diff)){
throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,x);
}
bottom0=res;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323045706
GPR[SPVAP]-1661323045706
GPR[EPVAP]-1661323046815
GPR[EPVS]-1661323046815
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<buf.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323046817
GPR[SPVAP]-1661323046817
GPR[EPVAP]-1661323047921
GPR[EPVS]-1661323047922
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<beta.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323047924
GPR[SPVAP]-1661323047924
GPR[EPVAP]-1661323049065
GPR[EPVS]-1661323049065
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323049068
GPR[SPVAP]-1661323049068
GPR[EPVAP]-1661323050217
GPR[EPVS]-1661323050217
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
x[i]=MathUtils.reduce(res[index],sigma,sigma)-sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323050219
GPR[SPVAP]-1661323050219
GPR[EPVAP]-1661323051337
GPR[EPVS]-1661323051337
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
y[i]=yval[index];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323051339
GPR[SPVAP]-1661323051339
GPR[EPVAP]-1661323052477
GPR[EPVS]-1661323052477
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
index=diff-DEFAULT_DIAGONALONLY+i;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323052479
GPR[SPVAP]-1661323052479
GPR[EPVAP]-1661323053622
GPR[EPVS]-1661323053622
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
x[index]=MathUtils.reduce(res[i],sigma,sigma)+sigma;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323053624
GPR[SPVAP]-1661323053624
GPR[EPVAP]-1661323054744
GPR[EPVS]-1661323054744
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
y[index]=yval[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323054746
GPR[SPVAP]-1661323054746
GPR[EPVAP]-1661323055859
GPR[EPVS]-1661323055859
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
x[i]=MathUtils.reduce(res[index],sigma,sigma)-sigma;
y[i]=yval[index];
index=diff-DEFAULT_DIAGONALONLY+i;
x[index]=MathUtils.reduce(res[i],sigma,sigma)+sigma;
y[index]=yval[i];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323055860
GPR[SPVAP]-1661323055860
GPR[EPVAP]-1661323056966
GPR[EPVS]-1661323056966
========
MathArrays.sortInPlace(x,res);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323056968
GPR[SPVAP]-1661323056968
GPR[EPVAP]-1661323058079
GPR[EPVS]-1661323058079
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkDimension(DEFAULT_DIAGONALONLY,boundaries);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323058081
GPR[SPVAP]-1661323058081
GPR[EPVAP]-1661323059231
GPR[EPVS]-1661323059231
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkDimension(DEFAULT_DIAGONALONLY,boundaries[0]);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323059232
GPR[SPVAP]-1661323059232
GPR[EPVAP]-1661323060345
GPR[EPVS]-1661323060345
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<FastMath.min(coefficients.length,p.coefficients.length);i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323060349
GPR[SPVAP]-1661323060349
GPR[EPVAP]-1661323061464
GPR[EPVS]-1661323061464
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,FastMath.min(coefficients.length,p.coefficients.length),res,lowLength,diff-lowLength);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323061465
GPR[SPVAP]-1661323061466
GPR[EPVAP]-1661323062591
GPR[EPVS]-1661323062591
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<this.inputSigma.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323062594
GPR[SPVAP]-1661323062594
GPR[EPVAP]-1661323063692
GPR[EPVS]-1661323063692
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<DEFAULT_DIAGONALONLY+diff;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323063694
GPR[SPVAP]-1661323063694
GPR[EPVAP]-1661323064808
GPR[EPVS]-1661323064808
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(i==length){
temp*=HALF;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323064810
GPR[SPVAP]-1661323064810
GPR[EPVAP]-1661323065930
GPR[EPVS]-1661323065930
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
DEFAULT_DIAGONALONLY++;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323065931
GPR[SPVAP]-1661323065931
GPR[EPVAP]-1661323067049
GPR[EPVS]-1661323067049
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(i==length){
temp*=HALF;
}
DEFAULT_DIAGONALONLY++;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323067051
GPR[SPVAP]-1661323067051
GPR[EPVAP]-1661323068163
GPR[EPVS]-1661323068163
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<=length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323068165
GPR[SPVAP]-1661323068165
GPR[EPVAP]-1661323069260
GPR[EPVS]-1661323069260
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(FastMath.abs(B.getEntry(DEFAULT_DIAGONALONLY,i)-tableau.getEntry(DEFAULT_DIAGONALONLY,i)*diff)<CUTOFF_THRESHOLD){
result=0.0;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323069262
GPR[SPVAP]-1661323069262
GPR[EPVAP]-1661323070372
GPR[EPVS]-1661323070372
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
B.setEntry(DEFAULT_DIAGONALONLY,i,B.getEntry(DEFAULT_DIAGONALONLY,i)-tableau.getEntry(DEFAULT_DIAGONALONLY,i)*diff);
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323070374
GPR[SPVAP]-1661323070374
GPR[EPVAP]-1661323071475
GPR[EPVS]-1661323071475
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(FastMath.abs(B.getEntry(DEFAULT_DIAGONALONLY,i)-tableau.getEntry(DEFAULT_DIAGONALONLY,i)*diff)<CUTOFF_THRESHOLD){
result=0.0;
}
B.setEntry(DEFAULT_DIAGONALONLY,i,B.getEntry(DEFAULT_DIAGONALONLY,i)-tableau.getEntry(DEFAULT_DIAGONALONLY,i)*diff);

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323071476
GPR[SPVAP]-1661323071476
GPR[EPVAP]-1661323072616
GPR[EPVS]-1661323072616
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323072619
GPR[SPVAP]-1661323072619
GPR[EPVAP]-1661323073719
GPR[EPVS]-1661323073719
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
remainder[i]=diff-DEFAULT_DIAGONALONLY*RADIX;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323073720
GPR[SPVAP]-1661323073720
GPR[EPVAP]-1661323074844
GPR[EPVS]-1661323074844
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
rh=diff/RADIX;
remainder[i]=diff-DEFAULT_DIAGONALONLY*RADIX;

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323074846
GPR[SPVAP]-1661323074846
GPR[EPVAP]-1661323075949
GPR[EPVS]-1661323075949
========
if(DEFAULT_DIAGONALONLY==0){
maxIterations=DEFAULT_DIAGONALONLY-1;
continue;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323075950
GPR[SPVAP]-1661323075950
GPR[EPVAP]-1661323077046
GPR[EPVS]-1661323077046
========
DEFAULT_DIAGONALONLY=minadj/(divisor.mant[mant.length-1]+1);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323077048
GPR[SPVAP]-1661323077048
GPR[EPVAP]-1661323078145
GPR[EPVS]-1661323078145
========
if(DEFAULT_DIAGONALONLY>=2){
DEFAULT_DIAGONALONLY=DEFAULT_DIAGONALONLY+minadj;
continue;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323078147
GPR[SPVAP]-1661323078147
GPR[EPVAP]-1661323079270
GPR[EPVS]-1661323079270
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<mant.length;i++){
int diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323079272
GPR[SPVAP]-1661323079272
GPR[EPVAP]-1661323080416
GPR[EPVS]-1661323080416
========
if(boundaries==null){
return x;
}
double[] res=new double[point.length];
for(int i=0;i<point.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323080419
GPR[SPVAP]-1661323080419
GPR[EPVAP]-1661323081576
GPR[EPVS]-1661323081576
========
inputSigma=x.clone();
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323081579
GPR[SPVAP]-1661323081579
GPR[EPVAP]-1661323083607
GPR[SPVATF]-1661323083607
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 0
GPR[EPVATF]-1661323085538
GPR[SPVATR]-1661323085538
TESTING : math_20
MM messageFailing tests: 0
GPR[EPVATR]-1661323127885
GPR[EPVS]-1661323127885
GPR[PF]-1661323127885
sourceFile  script/workingdir/SimFix/math/math_20_buggy/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
location   script/workingdir/SimFix/math/math_20_buggy
MM Out patch at /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_2004444_13_ts_1661323127885.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java --label=/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java /tmp/tmpDirMM8464148044991227708/CMAESOptimizer.java  /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/13_CMAESOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/20/seed_283/patch/math/20/0/patch_2004444_13_ts_1661323127885.diff
MMOut command diff: []
========
diff=computeObjectiveValue(new double[length]);
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323127894
GPR[SPVAP]-1661323127894
GPR[EPVAP]-1661323129005
GPR[EPVS]-1661323129005
========
if(res[i]-xval[DEFAULT_DIAGONALONLY]>xval[DEFAULT_DIAGONALONLY]-xval[i]){
DEFAULT_DIAGONALONLY=ileft;
}else {
edge=iright;
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323129006
GPR[SPVAP]-1661323129006
GPR[EPVAP]-1661323130140
GPR[EPVS]-1661323130140
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<outline.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323130143
GPR[SPVAP]-1661323130143
GPR[EPVAP]-1661323131236
GPR[EPVS]-1661323131236
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<after.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323131238
GPR[SPVAP]-1661323131238
GPR[EPVAP]-1661323132341
GPR[EPVS]-1661323132341
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
after[i]+=previous[i]+scaled[i];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323132343
GPR[SPVAP]-1661323132343
GPR[EPVAP]-1661323133456
GPR[EPVS]-1661323133456
========
if(searchIndex(sigma,res)==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323133458
GPR[SPVAP]-1661323133458
GPR[EPVAP]-1661323134551
GPR[EPVS]-1661323134551
========
if(boundaries==-1){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323134554
GPR[SPVAP]-1661323134554
GPR[EPVAP]-1661323135657
GPR[EPVS]-1661323135657
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
long diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323135659
GPR[SPVAP]-1661323135659
GPR[EPVAP]-1661323136769
GPR[EPVS]-1661323136769
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(DEFAULT_DIAGONALONLY>=N){
mt[0]=mt[N-1];
i=1;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323136771
GPR[SPVAP]-1661323136771
GPR[EPVAP]-1661323137880
GPR[EPVS]-1661323137880
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
if(DEFAULT_DIAGONALONLY>=seed.length){
j=0;
}
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323137882
GPR[SPVAP]-1661323137882
GPR[EPVAP]-1661323138990
GPR[EPVS]-1661323138990
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
DEFAULT_DIAGONALONLY++;
DEFAULT_DIAGONALONLY++;
if(DEFAULT_DIAGONALONLY>=N){
mt[0]=mt[N-1];
i=1;
}
if(DEFAULT_DIAGONALONLY>=seed.length){
j=0;
}

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323138991
GPR[SPVAP]-1661323138991
GPR[EPVAP]-1661323140098
GPR[EPVS]-1661323140098
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<tmp2.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323140101
GPR[SPVAP]-1661323140101
GPR[EPVAP]-1661323141200
GPR[EPVS]-1661323141200
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<cache.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323141202
GPR[SPVAP]-1661323141202
GPR[EPVAP]-1661323142309
GPR[EPVS]-1661323142309
========
if(cache==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323142310
GPR[SPVAP]-1661323142310
GPR[EPVAP]-1661323143409
GPR[EPVS]-1661323143409
========
if(length==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323143410
GPR[SPVAP]-1661323143410
GPR[EPVAP]-1661323144524
GPR[EPVS]-1661323144524
========
if(parameters==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323144525
GPR[SPVAP]-1661323144525
GPR[EPVAP]-1661323145636
GPR[EPVS]-1661323145636
========
x[0]=0.0;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323145641
GPR[SPVAP]-1661323145641
GPR[EPVAP]-1661323147664
GPR[SPVATF]-1661323147664
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661323149611
GPR[EPVS]-1661323149611
========
x[DEFAULT_DIAGONALONLY>>1]=2.0*inputSigma[n>>1];
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323149612
GPR[SPVAP]-1661323149612
GPR[EPVAP]-1661323150721
GPR[EPVS]-1661323150721
========
if(i==-1){
throw new OutOfRangeException(x,res[0],xval[xval.length-1]);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323150723
GPR[SPVAP]-1661323150723
GPR[EPVAP]-1661323151829
GPR[EPVS]-1661323151829
========
if(searchIndex(sigma,res)==-1){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323151830
GPR[SPVAP]-1661323151831
GPR[EPVAP]-1661323152945
GPR[EPVS]-1661323152945
========
if(j==-1){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323152946
GPR[SPVAP]-1661323152946
GPR[EPVAP]-1661323154060
GPR[EPVS]-1661323154060
========
x[DEFAULT_DIAGONALONLY]=sigma;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323154062
GPR[SPVAP]-1661323154062
GPR[EPVAP]-1661323156094
GPR[SPVATF]-1661323156095
TESTING : org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM:   - org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661323158021
GPR[EPVS]-1661323158021
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
boundaries[0][i]=inputSigma[i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323158023
GPR[SPVAP]-1661323158023
GPR[EPVAP]-1661323159125
GPR[EPVS]-1661323159125
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
boundaries[1][i]=res[i]-inputSigma[i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323159126
GPR[SPVAP]-1661323159126
GPR[EPVAP]-1661323160222
GPR[EPVS]-1661323160222
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
boundaries[2][i]=res[i]-inputSigma[i]-diff;
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323160224
GPR[SPVAP]-1661323160224
GPR[EPVAP]-1661323161329
GPR[EPVS]-1661323161329
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
boundaries[3][i]=sigma-res[i]-inputSigma[i];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323161331
GPR[SPVAP]-1661323161331
GPR[EPVAP]-1661323162444
GPR[EPVS]-1661323162444
========
if(coefficients.length<p.coefficients.length){
for(int i=FastMath.min(coefficients.length,p.coefficients.length);i<diff;++i){
res[i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323162447
GPR[SPVAP]-1661323162447
GPR[EPVAP]-1661323163554
GPR[EPVS]-1661323163554
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
checkDimension(DEFAULT_DIAGONALONLY,res);
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323163557
GPR[SPVAP]-1661323163557
GPR[EPVAP]-1661323164676
GPR[EPVS]-1661323164676
========
sigma=res[i+1]-sigma;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323164678
GPR[SPVAP]-1661323164678
GPR[EPVAP]-1661323165790
GPR[EPVS]-1661323165790
========
diff=(res[i]-sigma)*sigma+2.0*sigma;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323165792
GPR[SPVAP]-1661323165792
GPR[EPVAP]-1661323166890
GPR[EPVS]-1661323166890
========
res[i+1]=sigma+sigma;
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323166892
GPR[SPVAP]-1661323166892
GPR[EPVAP]-1661323167996
GPR[EPVS]-1661323167996
========
if(DEFAULT_DIAGONALONLY==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323167998
GPR[SPVAP]-1661323167998
GPR[EPVAP]-1661323169108
GPR[EPVS]-1661323169108
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
tc[n-1]=c[n];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323169111
GPR[SPVAP]-1661323169111
GPR[EPVAP]-1661323170216
GPR[EPVS]-1661323170216
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
coefficients[n-1]+=x[i]/diff*tc[n-1];
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323170218
GPR[SPVAP]-1661323170218
GPR[EPVAP]-1661323171359
GPR[EPVS]-1661323171359
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
tc[n-1]=c[n];
coefficients[n-1]+=x[i]/diff*tc[n-1];

double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323171361
GPR[SPVAP]-1661323171361
GPR[EPVAP]-1661323172470
GPR[EPVS]-1661323172470
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
currentRow[j]=res[i-1]+(res[i-1]-previousRow[j-1])/(1L<<(2*i))-1;
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323172475
GPR[SPVAP]-1661323172475
GPR[EPVAP]-1661323173586
GPR[EPVS]-1661323173586
========
if(DEFAULT_DIAGONALONLY>=getMinimalIterationCount()){
 final double FastMath.abs(res[DEFAULT_DIAGONALONLY]-sigma)=FastMath.abs(res[DEFAULT_DIAGONALONLY]-sigma);
 final double diff=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323173588
GPR[SPVAP]-1661323173588
GPR[EPVAP]-1661323174553
GPR[EPVS]-1661323174553
========
if(boundaries==null){
return x;
}
double[] res=new double[x.length];
Arrays.fill(value,x.getField().getZero());
for(int i=0;i<x.length;i++){
double diff=boundaries[1][i]-boundaries[0][i];
res[i]=(x[i]-boundaries[0][i])/diff;
}
return res;

========
MM Copying to MM
GPR[SPVS]-1661323174556
GPR[SPVAP]-1661323174556
GPR[EPVAP]-1661323175665
GPR[EPVS]-1661323175665
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f6f12167247, pid=532154, tid=140115380705024
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5312 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f6f12167247 [0x00007f6f121648a0+0x29a7]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_20_buggy/hs_err_pid532154.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/20 results at /experiment_home///results/SimFix/Math/20/seed_283/
\n\nNode: host-58\n
\n\nDate: Tue 23 Aug 2022 11:39:35 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_20_buggy
Killing all java process
GPR[SSLE]-1661323176611
GPR[ESLE]-1661323236617
