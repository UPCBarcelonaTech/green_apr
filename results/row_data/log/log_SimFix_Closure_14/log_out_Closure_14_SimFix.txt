Sleep 1m start
GPR[SSLI]-1659859620788
GPR[ESLI]-1659859680794
Running SimFix Closure 14b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/14/seed_261/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_14_buggy
The file script/workingdir/SimFix/closure/closure_14_buggy does not exist!
script/workingdir/SimFix/closure/closure_14_buggy
Current directory: script/workingdir/SimFix/closure/closure_14_buggy
classpath:  script/workingdir/SimFix/closure/closure_14_buggy/build/classes:script/workingdir/SimFix/closure/closure_14_buggy/lib/args4j.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/guava.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/json.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/jsr305.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/protobuf-java.jar:script/workingdir/SimFix/closure/closure_14_buggy/build/lib/rhino.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/ant.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/ant-launcher.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/caja-r4314.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/jarjar.jar:script/workingdir/SimFix/closure/closure_14_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_14_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659859700815
GPR[ESLB]-1659859760818
Calling SimFix: at script/workingdir/SimFix/closure/closure_14_buggy
build
build.xml
closure-compiler.pom
contrib
CONTRIBUTORS
COPYING
d4j-info
defects4j.build.properties
externs
gen
javadoc
lib
README
src
test
tools
content current dir: build build.xml closure-compiler.pom contrib CONTRIBUTORS COPYING d4j-info defects4j.build.properties externs gen javadoc lib README src test tools
Node: host-48
Date init: Sun 07 Aug 2022 01:09:23 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659859763149
=================================================
Project : closure_14	start : 22/08/07 01:09

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : JSType and Type
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
Field type inconsistancy 'THIS' with types : Token and int
GPR[ESUP]-1659859765794
MM Purify? false
GPR[SFL]-1659859766152
GPR[EFL]-1659859766194
GPR[SFP]-1659859766194
TIMEOUT : 18000000
GPR[SSUN]-1659859766209
com.google.javascript.jscomp.ControlFlowAnalysis,579
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859768939
GPR[SPVAP]-1659859768939
GPR[EPVAP]-1659859777707
GPR[SPVATF]-1659859777707
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859781377
GPR[EPVS]-1659859781377
========
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859781379
GPR[SPVAP]-1659859781379
GPR[EPVAP]-1659859785300
GPR[SPVATF]-1659859785300
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859788850
GPR[EPVS]-1659859788850
========
if(lastJump==null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859788852
GPR[SPVAP]-1659859788852
GPR[EPVAP]-1659859792769
GPR[SPVATF]-1659859792769
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859796464
GPR[EPVS]-1659859796464
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859796466
GPR[SPVAP]-1659859796466
GPR[EPVAP]-1659859798523
GPR[EPVS]-1659859798524
========
if(lastJump==node){
createEdge(lastJump,Branch.ON_EX,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859798525
GPR[SPVAP]-1659859798525
GPR[EPVAP]-1659859802430
GPR[SPVATF]-1659859802430
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859806539
GPR[EPVS]-1659859806539
========
if(lastJump==node){
createEdge(node,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859806540
GPR[SPVAP]-1659859806540
GPR[EPVAP]-1659859808550
GPR[EPVS]-1659859808550
========
if(c==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859808553
GPR[SPVAP]-1659859808553
GPR[EPVAP]-1659859810545
GPR[EPVS]-1659859810545
========
if(lastJump==cur.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859810547
GPR[SPVAP]-1659859810547
GPR[EPVAP]-1659859814571
GPR[SPVATF]-1659859814571
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859818096
GPR[EPVS]-1659859818096
========
if(lastJump==cur){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859818098
GPR[SPVAP]-1659859818098
GPR[EPVAP]-1659859822095
GPR[SPVATF]-1659859822095
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859826217
GPR[EPVS]-1659859826217
========
if(cur.getChildCount()==4){
parent=cur.getFirstChild().getNext().getNext();
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859826219
GPR[SPVAP]-1659859826219
GPR[EPVAP]-1659859830137
GPR[SPVATF]-1659859830137
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859833722
GPR[EPVS]-1659859833722
========
if(cur.getChildCount()==4){
parent=cur.getFirstChild().getNext().getNext();
}
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859833723
GPR[SPVAP]-1659859833723
GPR[EPVAP]-1659859837736
GPR[SPVATF]-1659859837736
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859841296
GPR[EPVS]-1659859841296
========
if(parent.getLastChild()==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859841298
GPR[SPVAP]-1659859841298
GPR[EPVAP]-1659859845243
GPR[SPVATF]-1659859845243
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859849257
GPR[EPVS]-1659859849257
========
if(parent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859849258
GPR[SPVAP]-1659859849258
GPR[EPVAP]-1659859853467
GPR[SPVATF]-1659859853468
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859857261
GPR[EPVS]-1659859857261
========
if(caseNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859857264
GPR[SPVAP]-1659859857264
GPR[EPVAP]-1659859859183
GPR[EPVS]-1659859859184
========
if(lastJump==previousCase){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859859185
GPR[SPVAP]-1659859859185
GPR[EPVAP]-1659859861053
GPR[EPVS]-1659859861053
========
if(lastJump==node){
createEdge(node,Branch.ON_EX,catchBlock);
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859861056
GPR[SPVAP]-1659859861056
GPR[EPVAP]-1659859863085
GPR[EPVS]-1659859863085
========
if(lastJump==node){
return ;
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859863087
GPR[SPVAP]-1659859863087
GPR[EPVAP]-1659859864941
GPR[EPVS]-1659859864941
========
if(lastJump==cfgNode){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859864943
GPR[SPVAP]-1659859864943
GPR[EPVAP]-1659859866809
GPR[EPVS]-1659859866809
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.ON_EX,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859866811
GPR[SPVAP]-1659859866811
GPR[EPVAP]-1659859868771
GPR[EPVS]-1659859868771
========
if(elseBlock==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859868773
GPR[SPVAP]-1659859868773
GPR[EPVAP]-1659859870773
GPR[EPVS]-1659859870773
========
if(lastJump==node){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859870775
GPR[SPVAP]-1659859870775
GPR[EPVAP]-1659859874796
GPR[SPVATF]-1659859874796
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859878437
GPR[EPVS]-1659859878437
========
if(lastJump==node){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859878439
GPR[SPVAP]-1659859878439
GPR[EPVAP]-1659859882316
GPR[SPVATF]-1659859882316
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859885860
GPR[EPVS]-1659859885860
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859885861
GPR[SPVAP]-1659859885861
GPR[EPVAP]-1659859889705
GPR[SPVATF]-1659859889705
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859893640
GPR[EPVS]-1659859893640
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859893641
GPR[SPVAP]-1659859893641
GPR[EPVAP]-1659859897531
GPR[SPVATF]-1659859897531
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859901108
GPR[EPVS]-1659859901108
========
if(lastJump==null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859901110
GPR[SPVAP]-1659859901110
GPR[EPVAP]-1659859905198
GPR[SPVATF]-1659859905198
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859908812
GPR[EPVS]-1659859908812
========
if(lastJump==null){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859908813
GPR[SPVAP]-1659859908813
GPR[EPVAP]-1659859912854
GPR[SPVATF]-1659859912854
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859916772
GPR[EPVS]-1659859916772
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859916773
GPR[SPVAP]-1659859916773
GPR[EPVAP]-1659859920859
GPR[SPVATF]-1659859920859
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859924695
GPR[EPVS]-1659859924695
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859924696
GPR[SPVAP]-1659859924696
GPR[EPVAP]-1659859928737
GPR[SPVATF]-1659859928737
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859932713
GPR[EPVS]-1659859932713
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859932715
GPR[SPVAP]-1659859932715
GPR[EPVAP]-1659859936701
GPR[SPVATF]-1659859936701
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859940236
GPR[EPVS]-1659859940236
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859940237
GPR[SPVAP]-1659859940237
GPR[EPVAP]-1659859944242
GPR[SPVATF]-1659859944242
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859947911
GPR[EPVS]-1659859947911
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==node){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859947912
GPR[SPVAP]-1659859947912
GPR[EPVAP]-1659859951865
GPR[SPVATF]-1659859951865
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859955793
GPR[EPVS]-1659859955793
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859955795
GPR[SPVAP]-1659859955795
GPR[EPVAP]-1659859959791
GPR[SPVATF]-1659859959792
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859963612
GPR[EPVS]-1659859963612
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==node){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859963614
GPR[SPVAP]-1659859963615
GPR[EPVAP]-1659859967659
GPR[SPVATF]-1659859967659
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859971176
GPR[EPVS]-1659859971176
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859971177
GPR[SPVAP]-1659859971177
GPR[EPVAP]-1659859975110
GPR[SPVATF]-1659859975110
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859978671
GPR[EPVS]-1659859978671
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859978673
GPR[SPVAP]-1659859978673
GPR[EPVAP]-1659859982622
GPR[SPVATF]-1659859982622
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859986597
GPR[EPVS]-1659859986597
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859986599
GPR[SPVAP]-1659859986599
GPR[EPVAP]-1659859990639
GPR[SPVATF]-1659859990639
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659859994373
GPR[EPVS]-1659859994373
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659859994375
GPR[SPVAP]-1659859994375
GPR[EPVAP]-1659859998446
GPR[SPVATF]-1659859998446
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860002128
GPR[EPVS]-1659860002128
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860002129
GPR[SPVAP]-1659860002129
GPR[EPVAP]-1659860006024
GPR[SPVATF]-1659860006024
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860010101
GPR[EPVS]-1659860010101
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860010103
GPR[SPVAP]-1659860010103
GPR[EPVAP]-1659860014111
GPR[SPVATF]-1659860014111
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860017683
GPR[EPVS]-1659860017683
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
if(lastJump==null){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860017685
GPR[SPVAP]-1659860017685
GPR[EPVAP]-1659860021582
GPR[SPVATF]-1659860021582
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860025676
GPR[EPVS]-1659860025676
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860025678
GPR[SPVAP]-1659860025678
GPR[EPVAP]-1659860029869
GPR[SPVATF]-1659860029869
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860033693
GPR[EPVS]-1659860033693
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860033695
GPR[SPVAP]-1659860033695
GPR[EPVAP]-1659860037681
GPR[SPVATF]-1659860037681
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860041234
GPR[EPVS]-1659860041234
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860041237
GPR[SPVAP]-1659860041237
GPR[EPVAP]-1659860045280
GPR[SPVATF]-1659860045280
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860049385
GPR[EPVS]-1659860049385
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860049387
GPR[SPVAP]-1659860049387
GPR[EPVAP]-1659860053438
GPR[SPVATF]-1659860053438
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860057293
GPR[EPVS]-1659860057293
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==node){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860057294
GPR[SPVAP]-1659860057294
GPR[EPVAP]-1659860061224
GPR[SPVATF]-1659860061224
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860064939
GPR[EPVS]-1659860064939
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860064941
GPR[SPVAP]-1659860064941
GPR[EPVAP]-1659860068894
GPR[SPVATF]-1659860068894
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860072571
GPR[EPVS]-1659860072571
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860072572
GPR[SPVAP]-1659860072572
GPR[EPVAP]-1659860076584
GPR[SPVATF]-1659860076585
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860080720
GPR[EPVS]-1659860080721
========
createEdge(node,Branch.ON_TRUE,computeFallThrough(node.getFirstChild().getNext()));
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(lastJump==null){
createEdge(node,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860080722
GPR[SPVAP]-1659860080722
GPR[EPVAP]-1659860084893
GPR[SPVATF]-1659860084894
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860088802
GPR[EPVS]-1659860088802
========
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860088804
GPR[SPVAP]-1659860088804
GPR[EPVAP]-1659860092995
GPR[SPVATF]-1659860092995
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860097156
GPR[EPVS]-1659860097156
========
if(node!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860097158
GPR[SPVAP]-1659860097158
GPR[EPVAP]-1659860101112
GPR[SPVATF]-1659860101112
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860104812
GPR[EPVS]-1659860104812
========
if(child==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860104814
GPR[SPVAP]-1659860104814
GPR[EPVAP]-1659860106665
GPR[EPVS]-1659860106666
========
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860106667
GPR[SPVAP]-1659860106667
GPR[EPVAP]-1659860110641
GPR[SPVATF]-1659860110641
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860114480
GPR[EPVS]-1659860114480
========
if(lastTrue==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860114483
GPR[SPVAP]-1659860114483
GPR[EPVAP]-1659860116349
GPR[EPVS]-1659860116349
========
if(lastFalse==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860116352
GPR[SPVAP]-1659860116352
GPR[EPVAP]-1659860118205
GPR[EPVS]-1659860118205
========
parent.getLastChild().detachFromParent();
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860118207
GPR[SPVAP]-1659860118207
GPR[EPVAP]-1659860122168
GPR[SPVATF]-1659860122168
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860125828
GPR[EPVS]-1659860125828
========
if(functionNode==functionNode){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860125833
GPR[SPVAP]-1659860125833
GPR[EPVAP]-1659860127746
GPR[EPVS]-1659860127746
========
if(functionNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860127747
GPR[SPVAP]-1659860127747
GPR[EPVAP]-1659860129811
GPR[EPVS]-1659860129811
========
if(lastJump==functionNode){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860129813
GPR[SPVAP]-1659860129813
GPR[EPVAP]-1659860131737
GPR[EPVS]-1659860131738
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
if(!maybeAssign.mayHaveSecondarySideEffects){
return ;
}
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860131741
GPR[SPVAP]-1659860131741
GPR[EPVAP]-1659860133682
GPR[EPVS]-1659860133682
========
if(next==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860133684
GPR[SPVAP]-1659860133684
GPR[EPVAP]-1659860135629
GPR[EPVS]-1659860135629
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860135631
GPR[SPVAP]-1659860135631
GPR[EPVAP]-1659860139798
GPR[SPVATF]-1659860139798
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860143442
GPR[EPVS]-1659860143442
========
if(lastJump!=node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860143444
GPR[SPVAP]-1659860143444
GPR[EPVAP]-1659860147370
GPR[SPVATF]-1659860147370
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860151155
GPR[EPVS]-1659860151155
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860151157
GPR[SPVAP]-1659860151157
GPR[EPVAP]-1659860155110
GPR[SPVATF]-1659860155110
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860158766
GPR[EPVS]-1659860158766
========
if(lastJump!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860158768
GPR[SPVAP]-1659860158768
GPR[EPVAP]-1659860162866
GPR[SPVATF]-1659860162866
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860166548
GPR[EPVS]-1659860166548
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860166549
GPR[SPVAP]-1659860166549
GPR[EPVAP]-1659860170654
GPR[SPVATF]-1659860170654
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860174664
GPR[EPVS]-1659860174664
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860174666
GPR[SPVAP]-1659860174666
GPR[EPVAP]-1659860178664
GPR[SPVATF]-1659860178664
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860182326
GPR[EPVS]-1659860182326
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump==node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860182328
GPR[SPVAP]-1659860182328
GPR[EPVAP]-1659860186222
GPR[SPVATF]-1659860186222
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860190215
GPR[EPVS]-1659860190215
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump!=node){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860190217
GPR[SPVAP]-1659860190217
GPR[EPVAP]-1659860194100
GPR[SPVATF]-1659860194100
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860197647
GPR[EPVS]-1659860197647
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860197649
GPR[SPVAP]-1659860197649
GPR[EPVAP]-1659860201591
GPR[SPVATF]-1659860201591
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860205439
GPR[EPVS]-1659860205439
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(lastJump==null){
createEdge(node,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860205441
GPR[SPVAP]-1659860205441
GPR[EPVAP]-1659860209398
GPR[SPVATF]-1659860209398
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860213412
GPR[EPVS]-1659860213412
========
if(node==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860213414
GPR[SPVAP]-1659860213414
GPR[EPVAP]-1659860217294
GPR[SPVATF]-1659860217294
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860221339
GPR[EPVS]-1659860221339
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
reachingDef.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860221341
GPR[SPVAP]-1659860221341
GPR[EPVAP]-1659860223278
GPR[EPVS]-1659860223278
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
if(lastJump!=null){
computeDependence(new Definition(node),lastJump);
}
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860223279
GPR[SPVAP]-1659860223279
GPR[EPVAP]-1659860225275
GPR[EPVS]-1659860225275
========
if(lastJump==n){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860225277
GPR[SPVAP]-1659860225277
GPR[EPVAP]-1659860227161
GPR[EPVS]-1659860227161
========
if(parent==cur.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860227164
GPR[SPVAP]-1659860227164
GPR[EPVAP]-1659860231244
GPR[SPVATF]-1659860231244
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860234851
GPR[EPVS]-1659860234851
========
if(parent==cur){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860234852
GPR[SPVAP]-1659860234852
GPR[EPVAP]-1659860238884
GPR[SPVATF]-1659860238884
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860242500
GPR[EPVS]-1659860242500
========
if(deflt==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860242502
GPR[SPVAP]-1659860242502
GPR[EPVAP]-1659860244387
GPR[EPVS]-1659860244388
========
if(lastJump!=node){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860244389
GPR[SPVAP]-1659860244389
GPR[EPVAP]-1659860248340
GPR[SPVATF]-1659860248340
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860251902
GPR[EPVS]-1659860251902
========
if(node!=null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860251904
GPR[SPVAP]-1659860251904
GPR[EPVAP]-1659860255807
GPR[SPVATF]-1659860255807
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860259342
GPR[EPVS]-1659860259342
========
if(lastJump!=null){
createEdge(lastJump,Branch.ON_FALSE,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860259343
GPR[SPVAP]-1659860259343
GPR[EPVAP]-1659860263476
GPR[SPVATF]-1659860263477
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860267184
GPR[EPVS]-1659860267184
========
if(lastJump==Token.GETELEM){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860267186
GPR[SPVAP]-1659860267186
GPR[EPVAP]-1659860269069
GPR[EPVS]-1659860269069
========
if(lastJump==GETELEM){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860269070
GPR[SPVAP]-1659860269070
GPR[EPVAP]-1659860270939
GPR[EPVS]-1659860270939
========
if(c==cur.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860270941
GPR[SPVAP]-1659860270941
GPR[EPVAP]-1659860272874
GPR[EPVS]-1659860272874
========
if(c==cur){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860272876
GPR[SPVAP]-1659860272876
GPR[EPVAP]-1659860274960
GPR[EPVS]-1659860274960
========
if(lastJump==Token.FUNCTION){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860274962
GPR[SPVAP]-1659860274962
GPR[EPVAP]-1659860276814
GPR[EPVS]-1659860276814
========
if(lastJump==FUNCTION){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860276816
GPR[SPVAP]-1659860276816
GPR[EPVAP]-1659860278695
GPR[EPVS]-1659860278695
========
if(cur.getLastChild()==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860278698
GPR[SPVAP]-1659860278698
GPR[EPVAP]-1659860282862
GPR[SPVATF]-1659860282862
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860286531
GPR[EPVS]-1659860286531
========
if(cur==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860286533
GPR[SPVAP]-1659860286533
GPR[EPVAP]-1659860290465
GPR[SPVATF]-1659860290465
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860294024
GPR[EPVS]-1659860294024
========
if(lastJump==parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860294026
GPR[SPVAP]-1659860294026
GPR[EPVAP]-1659860298097
GPR[SPVATF]-1659860298098
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860302156
GPR[EPVS]-1659860302156
========
if(cur.getLastChild()!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860302157
GPR[SPVAP]-1659860302157
GPR[EPVAP]-1659860306080
GPR[SPVATF]-1659860306080
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860309926
GPR[EPVS]-1659860309926
========
if(cur!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860309928
GPR[SPVAP]-1659860309928
GPR[EPVAP]-1659860313954
GPR[SPVATF]-1659860313954
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860317530
GPR[EPVS]-1659860317530
========
if(lastJump!=parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860317532
GPR[SPVAP]-1659860317532
GPR[EPVAP]-1659860321687
GPR[SPVATF]-1659860321687
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860325835
GPR[EPVS]-1659860325835
========
if(cur.getLastChild()==parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860325837
GPR[SPVAP]-1659860325837
GPR[EPVAP]-1659860329766
GPR[SPVATF]-1659860329766
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860333349
GPR[EPVS]-1659860333349
========
if(cur==parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860333350
GPR[SPVAP]-1659860333350
GPR[EPVAP]-1659860337268
GPR[SPVATF]-1659860337268
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860341253
GPR[EPVS]-1659860341253
========
if(cur.getLastChild()!=parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860341254
GPR[SPVAP]-1659860341254
GPR[EPVAP]-1659860345187
GPR[SPVATF]-1659860345187
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860348962
GPR[EPVS]-1659860348962
========
if(cur!=parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860348963
GPR[SPVAP]-1659860348963
GPR[EPVAP]-1659860353194
GPR[SPVATF]-1659860353194
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860356782
GPR[EPVS]-1659860356782
========
if(lastJump==Token.ASSIGN){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860356785
GPR[SPVAP]-1659860356785
GPR[EPVAP]-1659860358819
GPR[EPVS]-1659860358819
========
if(lastJump==ASSIGN){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860358820
GPR[SPVAP]-1659860358820
GPR[EPVAP]-1659860360778
GPR[EPVS]-1659860360778
========
if(oldRoot==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860360781
GPR[SPVAP]-1659860360781
GPR[EPVAP]-1659860362745
GPR[EPVS]-1659860362745
========
if(lastJump==node){
createEdge(lastJump,Branch.SYN_BLOCK,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860362748
GPR[SPVAP]-1659860362748
GPR[EPVAP]-1659860366927
GPR[SPVATF]-1659860366927
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860371128
GPR[EPVS]-1659860371128
========
if(lastParam==lastParam){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860371130
GPR[SPVAP]-1659860371130
GPR[EPVAP]-1659860373033
GPR[EPVS]-1659860373033
========
if(lastParam==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860373035
GPR[SPVAP]-1659860373035
GPR[EPVAP]-1659860375091
GPR[EPVS]-1659860375091
========
if(lastJump==lastParam){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860375093
GPR[SPVAP]-1659860375093
GPR[EPVAP]-1659860376940
GPR[EPVS]-1659860376940
========
if(parent==parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860376942
GPR[SPVAP]-1659860376942
GPR[EPVAP]-1659860381003
GPR[SPVATF]-1659860381003
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860384551
GPR[EPVS]-1659860384551
========
if(lastJump==parent.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860384553
GPR[SPVAP]-1659860384553
GPR[EPVAP]-1659860388538
GPR[SPVATF]-1659860388538
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860392267
GPR[EPVS]-1659860392267
========
if(lastJump==node){
removeChild(parent.getParent(),parent);
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860392269
GPR[SPVAP]-1659860392269
GPR[EPVAP]-1659860394187
GPR[EPVS]-1659860394187
========
if(parent==parent.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860394189
GPR[SPVAP]-1659860394189
GPR[EPVAP]-1659860398325
GPR[SPVATF]-1659860398325
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860402216
GPR[EPVS]-1659860402216
========
if(lhs==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860402219
GPR[SPVAP]-1659860402219
GPR[EPVAP]-1659860404105
GPR[EPVS]-1659860404105
========
if(cArg==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860404108
GPR[SPVAP]-1659860404108
GPR[EPVAP]-1659860406101
GPR[EPVS]-1659860406101
========
if(replacement==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860406103
GPR[SPVAP]-1659860406103
GPR[EPVAP]-1659860407989
GPR[EPVS]-1659860407989
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return false;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860407991
GPR[SPVAP]-1659860407991
GPR[EPVAP]-1659860409896
GPR[EPVS]-1659860409896
========
if(n==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860409898
GPR[SPVAP]-1659860409898
GPR[EPVAP]-1659860411823
GPR[EPVS]-1659860411823
========
if(lastJump==node){
cur.getLastChild().detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860411824
GPR[SPVAP]-1659860411824
GPR[EPVAP]-1659860415869
GPR[SPVATF]-1659860415869
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860419771
GPR[EPVS]-1659860419771
========
if(lastJump==parent){
cur.getLastChild().detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860419773
GPR[SPVAP]-1659860419773
GPR[EPVAP]-1659860423820
GPR[SPVATF]-1659860423820
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860427724
GPR[EPVS]-1659860427724
========
if(lastJump==cur.getFirstChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860427726
GPR[SPVAP]-1659860427726
GPR[EPVAP]-1659860431875
GPR[SPVATF]-1659860431876
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860435832
GPR[EPVS]-1659860435832
========
if(n==n){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860435834
GPR[SPVAP]-1659860435834
GPR[EPVAP]-1659860437730
GPR[EPVS]-1659860437730
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
refNodes.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860437731
GPR[SPVAP]-1659860437731
GPR[EPVAP]-1659860439800
GPR[EPVS]-1659860439800
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
checkedClass.hasInstanceOfReference=true;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860439802
GPR[SPVAP]-1659860439802
GPR[EPVAP]-1659860441792
GPR[EPVS]-1659860441792
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return ;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860441794
GPR[SPVAP]-1659860441794
GPR[EPVAP]-1659860443624
GPR[EPVS]-1659860443624
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
checkedClass.hasInstanceOfReference=true;
return ;

finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860443625
GPR[SPVAP]-1659860443625
GPR[EPVAP]-1659860445814
GPR[EPVS]-1659860445814
========
if(parent==n){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860445816
GPR[SPVAP]-1659860445816
GPR[EPVAP]-1659860447663
GPR[EPVS]-1659860447664
========
if(cur.getLastChild()==n){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860447665
GPR[SPVAP]-1659860447665
GPR[EPVAP]-1659860449594
GPR[EPVS]-1659860449594
========
if(cur==n){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860449596
GPR[SPVAP]-1659860449596
GPR[EPVAP]-1659860451685
GPR[EPVS]-1659860451685
========
if(firstInputRoot==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860451687
GPR[SPVAP]-1659860451687
GPR[EPVAP]-1659860453740
GPR[EPVS]-1659860453740
========
if(lastJump==scopeRoot){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860453742
GPR[SPVAP]-1659860453742
GPR[EPVAP]-1659860455739
GPR[EPVS]-1659860455739
========
if(parent==cur.getFirstChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860455740
GPR[SPVAP]-1659860455740
GPR[EPVAP]-1659860459787
GPR[SPVATF]-1659860459787
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860463781
GPR[EPVS]-1659860463781
========
if(lastJump==Token.CASE){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860463783
GPR[SPVAP]-1659860463783
GPR[EPVAP]-1659860465684
GPR[EPVS]-1659860465684
========
if(lastJump==CASE){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860465685
GPR[SPVAP]-1659860465685
GPR[EPVAP]-1659860467576
GPR[EPVS]-1659860467576
========
if(argNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860467578
GPR[SPVAP]-1659860467578
GPR[EPVAP]-1659860469665
GPR[EPVS]-1659860469665
========
if(lastJump==node){
eliminateParamsAfter(cur,lastJump.getNext());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860469667
GPR[SPVAP]-1659860469667
GPR[EPVAP]-1659860471591
GPR[EPVS]-1659860471591
========
if(lastJump==node){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860471592
GPR[SPVAP]-1659860471592
GPR[EPVAP]-1659860475924
GPR[SPVATF]-1659860475924
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860479957
GPR[EPVS]-1659860479957
========
if(lastJump==node){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860479958
GPR[SPVAP]-1659860479958
GPR[EPVAP]-1659860484130
GPR[SPVATF]-1659860484130
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860488180
GPR[EPVS]-1659860488180
========
if(lastJump==node){
return true;
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860488181
GPR[SPVAP]-1659860488181
GPR[EPVAP]-1659860490242
GPR[EPVS]-1659860490243
========
if(lastJump==node){
eliminateParamsAfter(cur,lastJump.getNext());
lastJump.detachFromParent();
compiler.reportCodeChange();
return true;

createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860490244
GPR[SPVAP]-1659860490244
GPR[EPVAP]-1659860492315
GPR[EPVS]-1659860492315
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
eliminateParamsAfter(cur,lastJump.getNext());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860492316
GPR[SPVAP]-1659860492316
GPR[EPVAP]-1659860494350
GPR[EPVS]-1659860494350
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860494351
GPR[SPVAP]-1659860494351
GPR[EPVAP]-1659860498400
GPR[SPVATF]-1659860498401
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860501965
GPR[EPVS]-1659860501965
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.getLastChild().addChildrenToFront(IR.var(lastJump).copyInformationFrom(argNode));
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860501967
GPR[SPVAP]-1659860501967
GPR[EPVAP]-1659860503840
GPR[EPVS]-1659860503840
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return true;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860503841
GPR[SPVAP]-1659860503841
GPR[EPVAP]-1659860505832
GPR[EPVS]-1659860505832
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
eliminateParamsAfter(cur,lastJump.getNext());
lastJump.detachFromParent();
cur.getLastChild().addChildrenToFront(IR.var(lastJump).copyInformationFrom(argNode));
return true;

finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860505833
GPR[SPVAP]-1659860505833
GPR[EPVAP]-1659860507697
GPR[EPVS]-1659860507697
========
if(lastJump!=node){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860507699
GPR[SPVAP]-1659860507699
GPR[EPVAP]-1659860511638
GPR[SPVATF]-1659860511638
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860515736
GPR[EPVS]-1659860515736
========
if(lastJump!=node){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860515738
GPR[SPVAP]-1659860515738
GPR[EPVAP]-1659860519729
GPR[SPVATF]-1659860519729
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860523350
GPR[EPVS]-1659860523350
========
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860523351
GPR[SPVAP]-1659860523351
GPR[EPVAP]-1659860527390
GPR[SPVATF]-1659860527390
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860531085
GPR[EPVS]-1659860531085
========
if(lastJump!=null){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860531086
GPR[SPVAP]-1659860531086
GPR[EPVAP]-1659860534937
GPR[SPVATF]-1659860534937
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860538819
GPR[EPVS]-1659860538819
========
if(lastJump!=null){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860538821
GPR[SPVAP]-1659860538821
GPR[EPVAP]-1659860542846
GPR[SPVATF]-1659860542846
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860546496
GPR[EPVS]-1659860546496
========
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860546497
GPR[SPVAP]-1659860546497
GPR[EPVAP]-1659860550618
GPR[SPVATF]-1659860550618
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860554212
GPR[EPVS]-1659860554212
========
if(lastJump==null){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860554213
GPR[SPVAP]-1659860554213
GPR[EPVAP]-1659860558052
GPR[SPVATF]-1659860558052
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860561640
GPR[EPVS]-1659860561640
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860561642
GPR[SPVAP]-1659860561642
GPR[EPVAP]-1659860565595
GPR[SPVATF]-1659860565595
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860569480
GPR[EPVS]-1659860569480
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860569482
GPR[SPVAP]-1659860569482
GPR[EPVAP]-1659860573507
GPR[SPVATF]-1659860573507
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860577203
GPR[EPVS]-1659860577203
========
if(lastJump==node){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860577205
GPR[SPVAP]-1659860577205
GPR[EPVAP]-1659860581170
GPR[SPVATF]-1659860581170
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860585132
GPR[EPVS]-1659860585132
========
if(lastJump==node){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860585134
GPR[SPVAP]-1659860585134
GPR[EPVAP]-1659860589079
GPR[SPVATF]-1659860589079
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860592973
GPR[EPVS]-1659860592973
========
if(lastJump==node){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860592975
GPR[SPVAP]-1659860592975
GPR[EPVAP]-1659860597103
GPR[SPVATF]-1659860597103
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860600754
GPR[EPVS]-1659860600754
========
if(lastJump!=node){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860600756
GPR[SPVAP]-1659860600756
GPR[EPVAP]-1659860604822
GPR[SPVATF]-1659860604822
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860608821
GPR[EPVS]-1659860608821
========
if(lastJump!=node){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860608823
GPR[SPVAP]-1659860608823
GPR[EPVAP]-1659860612719
GPR[SPVATF]-1659860612719
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860616320
GPR[EPVS]-1659860616320
========
if(lastJump!=node){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860616321
GPR[SPVAP]-1659860616321
GPR[EPVAP]-1659860620225
GPR[SPVATF]-1659860620225
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860623766
GPR[EPVS]-1659860623766
========
if(lastJump!=null){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860623768
GPR[SPVAP]-1659860623768
GPR[EPVAP]-1659860627714
GPR[SPVATF]-1659860627715
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860631736
GPR[EPVS]-1659860631736
========
if(lastJump!=null){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860631738
GPR[SPVAP]-1659860631738
GPR[EPVAP]-1659860635892
GPR[SPVATF]-1659860635892
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860639870
GPR[EPVS]-1659860639870
========
if(lastJump!=null){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860639872
GPR[SPVAP]-1659860639872
GPR[EPVAP]-1659860643804
GPR[SPVATF]-1659860643804
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860647789
GPR[EPVS]-1659860647789
========
if(lastJump==null){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860647790
GPR[SPVAP]-1659860647790
GPR[EPVAP]-1659860651725
GPR[SPVATF]-1659860651726
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860655252
GPR[EPVS]-1659860655252
========
if(lastJump==null){
lastJump.detachFromParent();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860655254
GPR[SPVAP]-1659860655254
GPR[EPVAP]-1659860659165
GPR[SPVATF]-1659860659165
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860662853
GPR[EPVS]-1659860662853
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860662855
GPR[SPVAP]-1659860662855
GPR[EPVAP]-1659860666981
GPR[SPVATF]-1659860666981
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860672596
GPR[EPVS]-1659860672596
========
if(lastJump==node){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860672598
GPR[SPVAP]-1659860672598
GPR[EPVAP]-1659860676563
GPR[SPVATF]-1659860676563
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860680285
GPR[EPVS]-1659860680285
========
if(lastJump!=node){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860680286
GPR[SPVAP]-1659860680286
GPR[EPVAP]-1659860684144
GPR[SPVATF]-1659860684145
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860687674
GPR[EPVS]-1659860687674
========
if(lastJump!=null){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860687675
GPR[SPVAP]-1659860687675
GPR[EPVAP]-1659860691561
GPR[SPVATF]-1659860691561
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860695211
GPR[EPVS]-1659860695211
========
if(lastJump==null){
lastJump.detachFromParent();
compiler.reportCodeChange();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
lastJump.detachFromParent();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860695213
GPR[SPVAP]-1659860695213
GPR[EPVAP]-1659860699161
GPR[SPVATF]-1659860699161
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860702669
GPR[EPVS]-1659860702669
========
if(n==cur.getLastChild()){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860702671
GPR[SPVAP]-1659860702671
GPR[EPVAP]-1659860704539
GPR[EPVS]-1659860704539
========
if(n==cur){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860704540
GPR[SPVAP]-1659860704540
GPR[EPVAP]-1659860706472
GPR[EPVS]-1659860706472
========
if(gramps==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860706474
GPR[SPVAP]-1659860706474
GPR[EPVAP]-1659860708332
GPR[EPVS]-1659860708332
========
if(resultNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860708333
GPR[SPVAP]-1659860708333
GPR[EPVAP]-1659860710406
GPR[EPVS]-1659860710406
========
Preconditions.checkArgument(cur.getLastChild().isReturn());
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860710407
GPR[SPVAP]-1659860710407
GPR[EPVAP]-1659860714278
GPR[SPVATF]-1659860714278
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860718292
GPR[EPVS]-1659860718292
========
Preconditions.checkArgument(cur.getLastChild().isReturn());
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860718294
GPR[SPVAP]-1659860718294
GPR[EPVAP]-1659860722309
GPR[SPVATF]-1659860722309
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860726077
GPR[EPVS]-1659860726077
========
if(c==c){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860726079
GPR[SPVAP]-1659860726079
GPR[EPVAP]-1659860728153
GPR[EPVS]-1659860728153
========
if(lastJump==c){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860728154
GPR[SPVAP]-1659860728154
GPR[EPVAP]-1659860730085
GPR[EPVS]-1659860730085
========
if(lastJump==last){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860730087
GPR[SPVAP]-1659860730087
GPR[EPVAP]-1659860731950
GPR[EPVS]-1659860731950
========
if(!cur.hasChildren()||block.hasOneChild()){
return false;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860731952
GPR[SPVAP]-1659860731952
GPR[EPVAP]-1659860733889
GPR[EPVS]-1659860733889
========
if(grandparent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860733890
GPR[SPVAP]-1659860733890
GPR[EPVAP]-1659860735799
GPR[EPVS]-1659860735800
========
if(newRoot==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860735801
GPR[SPVAP]-1659860735801
GPR[EPVAP]-1659860737651
GPR[EPVS]-1659860737651
========
getRoot().getLastChild().addChildToBack(lastJump);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860737652
GPR[SPVAP]-1659860737652
GPR[EPVAP]-1659860739540
GPR[EPVS]-1659860739540
========
if(rvalue==rvalue){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860739542
GPR[SPVAP]-1659860739542
GPR[EPVAP]-1659860741543
GPR[EPVS]-1659860741543
========
if(rvalue==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860741544
GPR[SPVAP]-1659860741544
GPR[EPVAP]-1659860743423
GPR[EPVS]-1659860743423
========
if(lastJump==rvalue){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860743425
GPR[SPVAP]-1659860743425
GPR[EPVAP]-1659860745341
GPR[EPVS]-1659860745341
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),parent);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860745343
GPR[SPVAP]-1659860745343
GPR[EPVAP]-1659860747188
GPR[EPVS]-1659860747188
========
if(cur.getFirstChild()==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860747190
GPR[SPVAP]-1659860747190
GPR[EPVAP]-1659860751252
GPR[SPVATF]-1659860751252
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860754860
GPR[EPVS]-1659860754860
========
if(getprop==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860754862
GPR[SPVAP]-1659860754862
GPR[EPVAP]-1659860756744
GPR[EPVS]-1659860756744
========
if(cur.getFirstChild()==parent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860756746
GPR[SPVAP]-1659860756746
GPR[EPVAP]-1659860760707
GPR[SPVATF]-1659860760707
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860764268
GPR[EPVS]-1659860764268
========
if(prev==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860764270
GPR[SPVAP]-1659860764270
GPR[EPVAP]-1659860766198
GPR[EPVS]-1659860766198
========
cur.addChildToBack(transform(label));
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860766199
GPR[SPVAP]-1659860766199
GPR[EPVAP]-1659860768113
GPR[EPVS]-1659860768113
========
cur.setLineno(label.getLineno());
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860768114
GPR[SPVAP]-1659860768114
GPR[EPVAP]-1659860770113
GPR[EPVS]-1659860770113
========
maybeSetLengthFrom(cur,label);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860770115
GPR[SPVAP]-1659860770115
GPR[EPVAP]-1659860772158
GPR[EPVS]-1659860772158
========
if(callee==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860772160
GPR[SPVAP]-1659860772160
GPR[EPVAP]-1659860774138
GPR[EPVS]-1659860774138
========
if(lastJump==param){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860774140
GPR[SPVAP]-1659860774140
GPR[EPVAP]-1659860776115
GPR[EPVS]-1659860776115
========
if(lastJump==Token.GETTER_DEF){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860776117
GPR[SPVAP]-1659860776117
GPR[EPVAP]-1659860777958
GPR[EPVS]-1659860777958
========
if(lastJump==GETTER_DEF){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860777959
GPR[SPVAP]-1659860777959
GPR[EPVAP]-1659860779911
GPR[EPVS]-1659860779911
========
if(lastJump==node){
Preconditions.checkState(!parent.getChildAtIndex(1).hasChildren());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860779912
GPR[SPVAP]-1659860779912
GPR[EPVAP]-1659860783785
GPR[SPVATF]-1659860783785
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860787385
GPR[EPVS]-1659860787385
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
add("set ");
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860787386
GPR[SPVAP]-1659860787386
GPR[EPVAP]-1659860789242
GPR[EPVS]-1659860789242
========
if(leftParent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860789244
GPR[SPVAP]-1659860789244
GPR[EPVAP]-1659860791206
GPR[EPVS]-1659860791206
========
if(lastJump==rightParent){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860791207
GPR[SPVAP]-1659860791207
GPR[EPVAP]-1659860793250
GPR[EPVS]-1659860793251
========
previous=cur;
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860793252
GPR[SPVAP]-1659860793252
GPR[EPVAP]-1659860797300
GPR[SPVATF]-1659860797300
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860801138
GPR[EPVS]-1659860801138
========
previous=cur;
if(node==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860801139
GPR[SPVAP]-1659860801139
GPR[EPVAP]-1659860805336
GPR[SPVATF]-1659860805336
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860808932
GPR[EPVS]-1659860808932
========
if(parent==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860808934
GPR[SPVAP]-1659860808934
GPR[EPVAP]-1659860812927
GPR[SPVATF]-1659860812927
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860816898
GPR[EPVS]-1659860816898
========
previous=cur;
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860816900
GPR[SPVAP]-1659860816900
GPR[EPVAP]-1659860820902
GPR[SPVATF]-1659860820903
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860824483
GPR[EPVS]-1659860824483
========
previous=cur;
if(parent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860824485
GPR[SPVAP]-1659860824485
GPR[EPVAP]-1659860828581
GPR[SPVATF]-1659860828581
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860832732
GPR[EPVS]-1659860832732
========
previous=cur;
if(parent==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860832734
GPR[SPVAP]-1659860832734
GPR[EPVAP]-1659860836671
GPR[SPVATF]-1659860836672
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860840231
GPR[EPVS]-1659860840231
========
if(value==value){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860840234
GPR[SPVAP]-1659860840234
GPR[EPVAP]-1659860842167
GPR[EPVS]-1659860842167
========
if(value==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860842168
GPR[SPVAP]-1659860842168
GPR[EPVAP]-1659860844135
GPR[EPVS]-1659860844135
========
if(lastJump==value){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860844137
GPR[SPVAP]-1659860844137
GPR[EPVAP]-1659860846355
GPR[EPVS]-1659860846355
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(decl.node,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860846357
GPR[SPVAP]-1659860846357
GPR[EPVAP]-1659860848384
GPR[EPVS]-1659860848384
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(label,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860848386
GPR[SPVAP]-1659860848386
GPR[EPVAP]-1659860850475
GPR[EPVS]-1659860850476
========
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(label,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860850478
GPR[SPVAP]-1659860850478
GPR[EPVAP]-1659860852359
GPR[EPVS]-1659860852359
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(label,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860852360
GPR[SPVAP]-1659860852360
GPR[EPVAP]-1659860854296
GPR[EPVS]-1659860854296
========
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(label,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860854298
GPR[SPVAP]-1659860854298
GPR[EPVAP]-1659860856372
GPR[EPVS]-1659860856372
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
mappedPaths.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860856373
GPR[SPVAP]-1659860856373
GPR[EPVAP]-1659860858483
GPR[EPVS]-1659860858483
========
if(fnNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860858485
GPR[SPVAP]-1659860858485
GPR[EPVAP]-1659860860391
GPR[EPVS]-1659860860391
========
if(varParent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860860393
GPR[SPVAP]-1659860860393
GPR[EPVAP]-1659860862342
GPR[EPVS]-1659860862343
========
if(destParent==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860862344
GPR[SPVAP]-1659860862344
GPR[EPVAP]-1659860864579
GPR[EPVS]-1659860864579
========
if(catchNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860864581
GPR[SPVAP]-1659860864581
GPR[EPVAP]-1659860866572
GPR[EPVS]-1659860866572
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
noSideEffectFunctionNames.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860866574
GPR[SPVAP]-1659860866574
GPR[EPVAP]-1659860868609
GPR[EPVS]-1659860868609
========
if(root==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860868610
GPR[SPVAP]-1659860868610
GPR[EPVAP]-1659860872604
GPR[SPVATF]-1659860872604
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860876470
GPR[EPVS]-1659860876470
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return lastJump;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860876471
GPR[SPVAP]-1659860876471
GPR[EPVAP]-1659860878423
GPR[EPVS]-1659860878423
========
if(root!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860878425
GPR[SPVAP]-1659860878425
GPR[EPVAP]-1659860882312
GPR[SPVATF]-1659860882312
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860886196
GPR[EPVS]-1659860886196
========
if(root==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860886197
GPR[SPVAP]-1659860886197
GPR[EPVAP]-1659860890349
GPR[SPVATF]-1659860890349
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860894008
GPR[EPVS]-1659860894008
========
if(root!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860894009
GPR[SPVAP]-1659860894009
GPR[EPVAP]-1659860897950
GPR[SPVATF]-1659860897950
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860901895
GPR[EPVS]-1659860901895
========
if(markAsCompiled==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860901897
GPR[SPVAP]-1659860901897
GPR[EPVAP]-1659860903826
GPR[EPVS]-1659860903826
========
if(lastJump==closurePass){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860903827
GPR[SPVAP]-1659860903827
GPR[EPVAP]-1659860905676
GPR[EPVS]-1659860905676
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(COMPILED_CONSTANT_NAME,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860905678
GPR[SPVAP]-1659860905678
GPR[EPVAP]-1659860907632
GPR[EPVS]-1659860907632
========
if(containingFunction==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860907634
GPR[SPVAP]-1659860907634
GPR[EPVAP]-1659860909475
GPR[EPVS]-1659860909475
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
propertyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860909477
GPR[SPVAP]-1659860909477
GPR[EPVAP]-1659860911421
GPR[EPVS]-1659860911421
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
prop=new Property(label);
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860911423
GPR[SPVAP]-1659860911423
GPR[EPVAP]-1659860913476
GPR[EPVS]-1659860913476
========
if(props==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
props.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860913478
GPR[SPVAP]-1659860913478
GPR[EPVAP]-1659860915332
GPR[EPVS]-1659860915332
========
if(props==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860915334
GPR[SPVAP]-1659860915334
GPR[EPVAP]-1659860917379
GPR[EPVS]-1659860917380
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
props.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860917381
GPR[SPVAP]-1659860917381
GPR[EPVAP]-1659860919302
GPR[EPVS]-1659860919302
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return true;
finallyMap.put(label,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860919304
GPR[SPVAP]-1659860919304
GPR[EPVAP]-1659860921140
GPR[EPVS]-1659860921140
========
if(p.newName!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860921142
GPR[SPVAP]-1659860921142
GPR[EPVAP]-1659860923054
GPR[EPVS]-1659860923054
========
if(p.newName==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860923056
GPR[SPVAP]-1659860923056
GPR[EPVAP]-1659860925056
GPR[EPVS]-1659860925056
========
if(newName==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860925058
GPR[SPVAP]-1659860925058
GPR[EPVAP]-1659860926904
GPR[EPVS]-1659860926904
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860926905
GPR[SPVAP]-1659860926905
GPR[EPVAP]-1659860928847
GPR[EPVS]-1659860928847
========
if(closurePass==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860928849
GPR[SPVAP]-1659860928849
GPR[EPVAP]-1659860930701
GPR[EPVS]-1659860930701
========
if(lastJump==locale){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860930702
GPR[SPVAP]-1659860930702
GPR[EPVAP]-1659860932655
GPR[EPVS]-1659860932655
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(CLOSURE_LOCALE_CONSTANT_NAME,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860932657
GPR[SPVAP]-1659860932657
GPR[EPVAP]-1659860934605
GPR[EPVS]-1659860934605
========
if(WHEN_IN_SRCS==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860934607
GPR[SPVAP]-1659860934607
GPR[EPVAP]-1659860936520
GPR[EPVS]-1659860936520
========
Preconditions.checkArgument(node.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860936522
GPR[SPVAP]-1659860936522
GPR[EPVAP]-1659860940548
GPR[SPVATF]-1659860940548
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860944644
GPR[EPVS]-1659860944644
========
if(value==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return ;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860944646
GPR[SPVAP]-1659860944646
GPR[EPVAP]-1659860946604
GPR[EPVS]-1659860946604
========
if(srcReferenceNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860946606
GPR[SPVAP]-1659860946606
GPR[EPVAP]-1659860948456
GPR[EPVS]-1659860948457
========
if(child!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860948458
GPR[SPVAP]-1659860948458
GPR[EPVAP]-1659860950526
GPR[EPVS]-1659860950526
========
if(child==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860950528
GPR[SPVAP]-1659860950528
GPR[EPVAP]-1659860952752
GPR[EPVS]-1659860952752
========
if(child!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860952754
GPR[SPVAP]-1659860952754
GPR[EPVAP]-1659860954591
GPR[EPVS]-1659860954591
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
continue;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860954594
GPR[SPVAP]-1659860954594
GPR[EPVAP]-1659860956468
GPR[EPVS]-1659860956468
========
if(name==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860956470
GPR[SPVAP]-1659860956470
GPR[EPVAP]-1659860958459
GPR[EPVS]-1659860958459
========
if(cur.isName()){
return true;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860958461
GPR[SPVAP]-1659860958461
GPR[EPVAP]-1659860960403
GPR[EPVS]-1659860960403
========
Preconditions.checkArgument(cur.isGetProp());
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860960404
GPR[SPVAP]-1659860960404
GPR[EPVAP]-1659860964444
GPR[SPVATF]-1659860964444
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860968289
GPR[EPVS]-1659860968289
========
if(msgNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860968291
GPR[SPVAP]-1659860968291
GPR[EPVAP]-1659860970115
GPR[EPVS]-1659860970115
========
if(node==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return ;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860970116
GPR[SPVAP]-1659860970116
GPR[EPVAP]-1659860971981
GPR[EPVS]-1659860971981
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return ;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860971982
GPR[SPVAP]-1659860971982
GPR[EPVAP]-1659860973858
GPR[EPVS]-1659860973858
========
Preconditions.checkState(cur.getChildCount()==2);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860973860
GPR[SPVAP]-1659860973860
GPR[EPVAP]-1659860977905
GPR[SPVATF]-1659860977905
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860981417
GPR[EPVS]-1659860981417
========
Preconditions.checkState(cur.getChildCount()==2);
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860981419
GPR[SPVAP]-1659860981419
GPR[EPVAP]-1659860985320
GPR[SPVATF]-1659860985320
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860989280
GPR[EPVS]-1659860989280
========
Preconditions.checkState(cur.getChildCount()==2);
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860989281
GPR[SPVAP]-1659860989281
GPR[EPVAP]-1659860993380
GPR[SPVATF]-1659860993380
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659860997160
GPR[EPVS]-1659860997160
========
Preconditions.checkState(cur.getChildCount()==2);
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659860997162
GPR[SPVAP]-1659860997162
GPR[EPVAP]-1659861001084
GPR[SPVATF]-1659861001085
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861005488
GPR[EPVS]-1659861005488
========
if(noSideEffectFunctionNames==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861005490
GPR[SPVAP]-1659861005490
GPR[EPVAP]-1659861007406
GPR[EPVS]-1659861007406
========
node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861007407
GPR[SPVAP]-1659861007407
GPR[EPVAP]-1659861011473
GPR[SPVATF]-1659861011473
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861015412
GPR[EPVS]-1659861015412
========
if(accessorCount==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861015414
GPR[SPVAP]-1659861015414
GPR[EPVAP]-1659861017365
GPR[EPVS]-1659861017365
========
NodeTraversal.traverse(compiler,root,new PropertyGatherer());
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861017367
GPR[SPVAP]-1659861017367
GPR[EPVAP]-1659861019189
GPR[EPVS]-1659861019189
========
if(length==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861019190
GPR[SPVAP]-1659861019190
GPR[EPVAP]-1659861021146
GPR[EPVS]-1659861021146
========
if(replacementTemplate==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861021149
GPR[SPVAP]-1659861021149
GPR[EPVAP]-1659861023091
GPR[EPVS]-1659861023091
========
if(lastJump==node){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861023093
GPR[SPVAP]-1659861023093
GPR[EPVAP]-1659861026996
GPR[SPVATF]-1659861026996
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861030549
GPR[EPVS]-1659861030549
========
if(lastJump==node){
return node.cloneTree();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861030550
GPR[SPVAP]-1659861030550
GPR[EPVAP]-1659861032468
GPR[EPVS]-1659861032468
========
if(lastJump==node){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
return node.cloneTree();

createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861032469
GPR[SPVAP]-1659861032469
GPR[EPVAP]-1659861034402
GPR[EPVS]-1659861034402
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861034404
GPR[SPVAP]-1659861034404
GPR[EPVAP]-1659861038400
GPR[SPVATF]-1659861038400
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861042296
GPR[EPVS]-1659861042296
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
return node.cloneTree();
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861042298
GPR[SPVAP]-1659861042298
GPR[EPVAP]-1659861044310
GPR[EPVS]-1659861044310
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
return node.cloneTree();

finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861044312
GPR[SPVAP]-1659861044312
GPR[EPVAP]-1659861046164
GPR[EPVS]-1659861046164
========
if(lastJump!=node){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861046165
GPR[SPVAP]-1659861046165
GPR[EPVAP]-1659861050023
GPR[SPVATF]-1659861050023
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861053976
GPR[EPVS]-1659861053976
========
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861053977
GPR[SPVAP]-1659861053977
GPR[EPVAP]-1659861057910
GPR[SPVATF]-1659861057910
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861061568
GPR[EPVS]-1659861061568
========
if(node!=null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861061569
GPR[SPVAP]-1659861061569
GPR[EPVAP]-1659861065510
GPR[SPVATF]-1659861065510
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861069183
GPR[EPVS]-1659861069183
========
if(node!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861069184
GPR[SPVAP]-1659861069184
GPR[EPVAP]-1659861073048
GPR[SPVATF]-1659861073048
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861076568
GPR[EPVS]-1659861076568
========
if(lastJump==null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861076569
GPR[SPVAP]-1659861076569
GPR[EPVAP]-1659861080578
GPR[SPVATF]-1659861080578
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861084072
GPR[EPVS]-1659861084072
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861084074
GPR[SPVAP]-1659861084074
GPR[EPVAP]-1659861088001
GPR[SPVATF]-1659861088001
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861092082
GPR[EPVS]-1659861092082
========
if(lastJump==node){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861092084
GPR[SPVAP]-1659861092084
GPR[EPVAP]-1659861096160
GPR[SPVATF]-1659861096160
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861099705
GPR[EPVS]-1659861099705
========
if(lastJump!=null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861099707
GPR[SPVAP]-1659861099707
GPR[EPVAP]-1659861103779
GPR[SPVATF]-1659861103779
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861107821
GPR[EPVS]-1659861107821
========
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861107822
GPR[SPVAP]-1659861107822
GPR[EPVAP]-1659861111768
GPR[SPVATF]-1659861111768
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861115628
GPR[EPVS]-1659861115628
========
if(lastJump!=node){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861115629
GPR[SPVAP]-1659861115629
GPR[EPVAP]-1659861119504
GPR[SPVATF]-1659861119504
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861123163
GPR[EPVS]-1659861123163
========
if(node!=null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861123164
GPR[SPVAP]-1659861123164
GPR[EPVAP]-1659861127078
GPR[SPVATF]-1659861127078
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861130609
GPR[EPVS]-1659861130609
========
if(lastJump==null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861130610
GPR[SPVAP]-1659861130610
GPR[EPVAP]-1659861134824
GPR[SPVATF]-1659861134824
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861139045
GPR[EPVS]-1659861139045
========
if(lastJump!=null){
Preconditions.checkState(!cur.isFunction()||!parent.isVar());
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
cur.replaceChild(node,node.cloneTree());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861139046
GPR[SPVAP]-1659861139046
GPR[EPVAP]-1659861143006
GPR[SPVATF]-1659861143006
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861146561
GPR[EPVS]-1659861146561
========
if(lastJump==TagType.Case){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861146564
GPR[SPVAP]-1659861146564
GPR[EPVAP]-1659861148505
GPR[EPVS]-1659861148505
========
if(lastJump==node){
child=node.getFirstChild().getNext();
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861148506
GPR[SPVAP]-1659861148506
GPR[EPVAP]-1659861150436
GPR[EPVS]-1659861150436
========
if(lastJump==JsMessage.Style.LEGACY){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861150438
GPR[SPVAP]-1659861150438
GPR[EPVAP]-1659861152495
GPR[EPVS]-1659861152495
========
if(lastJump==LEGACY){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861152497
GPR[SPVAP]-1659861152497
GPR[EPVAP]-1659861154392
GPR[EPVS]-1659861154392
========
if(parent.getFirstChild()==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861154394
GPR[SPVAP]-1659861154394
GPR[EPVAP]-1659861158262
GPR[SPVATF]-1659861158262
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861162176
GPR[EPVS]-1659861162176
========
if(parent.getFirstChild()!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861162177
GPR[SPVAP]-1659861162177
GPR[EPVAP]-1659861166047
GPR[SPVATF]-1659861166047
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861170094
GPR[EPVS]-1659861170094
========
if(parent!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861170096
GPR[SPVAP]-1659861170096
GPR[EPVAP]-1659861173952
GPR[SPVATF]-1659861173952
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861178005
GPR[EPVS]-1659861178005
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
mapping.node=cur;
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861178008
GPR[SPVAP]-1659861178008
GPR[EPVAP]-1659861179923
GPR[EPVS]-1659861179923
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
mapping.start=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861179924
GPR[SPVAP]-1659861179924
GPR[EPVAP]-1659861181782
GPR[EPVS]-1659861181782
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
mapping.node=cur;
mapping.start=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());

finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861181783
GPR[SPVAP]-1659861181783
GPR[EPVAP]-1659861183633
GPR[EPVS]-1659861183633
========
if(ancestor==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861183635
GPR[SPVAP]-1659861183635
GPR[EPVAP]-1659861185514
GPR[EPVS]-1659861185514
========
if(lastJump==possibleAncestor){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861185515
GPR[SPVAP]-1659861185515
GPR[EPVAP]-1659861187618
GPR[EPVS]-1659861187618
========
if(retVal==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861187620
GPR[SPVAP]-1659861187620
GPR[EPVAP]-1659861189488
GPR[EPVS]-1659861189488
========
if(valueNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861189490
GPR[SPVAP]-1659861189490
GPR[EPVAP]-1659861191344
GPR[EPVS]-1659861191344
========
if(!isReduceableFunctionExpression(node)){
return node;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861191345
GPR[SPVAP]-1659861191345
GPR[EPVAP]-1659861193262
GPR[EPVS]-1659861193262
========
if(tryFoldLiteralConstructor(lastJump)==lastJump){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861193264
GPR[SPVAP]-1659861193264
GPR[EPVAP]-1659861195163
GPR[EPVS]-1659861195163
========
if(tryFoldLiteralConstructor(lastJump)==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861195164
GPR[SPVAP]-1659861195164
GPR[EPVAP]-1659861197025
GPR[EPVS]-1659861197025
========
if(result==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861197026
GPR[SPVAP]-1659861197026
GPR[EPVAP]-1659861198878
GPR[EPVS]-1659861198879
========
if(lastJump==Token.STRING_KEY){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861198880
GPR[SPVAP]-1659861198880
GPR[EPVAP]-1659861200758
GPR[EPVS]-1659861200758
========
if(lastJump==STRING_KEY){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861200760
GPR[SPVAP]-1659861200760
GPR[EPVAP]-1659861202608
GPR[EPVS]-1659861202608
========
if(this.getIntProp(SLASH_V)!=cur.getIntProp(SLASH_V)){
return false;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861202609
GPR[SPVAP]-1659861202609
GPR[EPVAP]-1659861204581
GPR[EPVS]-1659861204581
========
if(result!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861204583
GPR[SPVAP]-1659861204583
GPR[EPVAP]-1659861206534
GPR[EPVS]-1659861206534
========
if(node!=lastJump){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861206535
GPR[SPVAP]-1659861206535
GPR[EPVAP]-1659861210492
GPR[SPVATF]-1659861210492
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861214123
GPR[EPVS]-1659861214123
========
case Token.NOT :

if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861214124
GPR[SPVAP]-1659861214124
GPR[EPVAP]-1659861215840
GPR[EPVS]-1659861215840
========
if(lhs==lhs){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861215842
GPR[SPVAP]-1659861215842
GPR[EPVAP]-1659861217789
GPR[EPVS]-1659861217789
========
if(lastJump==lhs){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861217791
GPR[SPVAP]-1659861217791
GPR[EPVAP]-1659861219681
GPR[EPVS]-1659861219681
========
if(tryRemoveRedundantExit(lastJump)!=lastJump){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861219683
GPR[SPVAP]-1659861219683
GPR[EPVAP]-1659861221638
GPR[EPVS]-1659861221638
========
if(tryRemoveRedundantExit(lastJump)==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861221640
GPR[SPVAP]-1659861221640
GPR[EPVAP]-1659861223514
GPR[EPVS]-1659861223514
========
cur=tryReplaceExitWithBreak(lastJump);
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861223516
GPR[SPVAP]-1659861223516
GPR[EPVAP]-1659861225371
GPR[EPVS]-1659861225371
========
if(tryRemoveRedundantExit(lastJump)!=lastJump){
return result;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861225375
GPR[SPVAP]-1659861225375
GPR[EPVAP]-1659861227216
GPR[EPVS]-1659861227216
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
mapping.end=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861227217
GPR[SPVAP]-1659861227217
GPR[EPVAP]-1659861229089
GPR[EPVS]-1659861229089
========
if(conditionalResultNode==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861229091
GPR[SPVAP]-1659861229091
GPR[EPVAP]-1659861230999
GPR[EPVS]-1659861230999
========
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
result=trySimplifyUnusedResult(cur.getFirstChild());
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861231000
GPR[SPVAP]-1659861231000
GPR[EPVAP]-1659861232974
GPR[EPVS]-1659861232974
========
case Token.AND :

if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861232975
GPR[SPVAP]-1659861232975
GPR[EPVAP]-1659861234918
GPR[EPVS]-1659861234918
========
if(gramp==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861234919
GPR[SPVAP]-1659861234920
GPR[EPVAP]-1659861236781
GPR[EPVS]-1659861236781
========
if(parent==null){
return false;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861236782
GPR[SPVAP]-1659861236782
GPR[EPVAP]-1659861238733
GPR[EPVS]-1659861238734
========
if(inExterns==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861238735
GPR[SPVAP]-1659861238735
GPR[EPVAP]-1659861240617
GPR[EPVS]-1659861240617
========
if(lastJump==inGlobalScope){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861240619
GPR[SPVAP]-1659861240619
GPR[EPVAP]-1659861242679
GPR[EPVS]-1659861242679
========
if(!isPrototypeMethodDefinition(node)){
return ;
}
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861242681
GPR[SPVAP]-1659861242681
GPR[EPVAP]-1659861244632
GPR[EPVS]-1659861244632
========
if(first==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861244633
GPR[SPVAP]-1659861244633
GPR[EPVAP]-1659861246537
GPR[EPVS]-1659861246537
========
Preconditions.checkArgument(node!=null&&node.parent==this,"The existing child node of the parent should not be null.");
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861246538
GPR[SPVAP]-1659861246538
GPR[EPVAP]-1659861248483
GPR[EPVS]-1659861248483
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861248484
GPR[SPVAP]-1659861248484
GPR[EPVAP]-1659861250361
GPR[EPVS]-1659861250361
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(lastJump==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861250362
GPR[SPVAP]-1659861250362
GPR[EPVAP]-1659861252328
GPR[EPVS]-1659861252328
========
if(lastJump==root){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861252330
GPR[SPVAP]-1659861252330
GPR[EPVAP]-1659861256339
GPR[SPVATF]-1659861256339
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861259870
GPR[EPVS]-1659861259870
========
if(parent==root){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861259871
GPR[SPVAP]-1659861259871
GPR[EPVAP]-1659861263951
GPR[SPVATF]-1659861263951
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861267613
GPR[EPVS]-1659861267613
========
if(p.newName!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861267615
GPR[SPVAP]-1659861267615
GPR[EPVAP]-1659861269491
GPR[EPVS]-1659861269491
========
if(newName!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861269493
GPR[SPVAP]-1659861269493
GPR[EPVAP]-1659861271428
GPR[EPVS]-1659861271428
========
if(lastJump!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861271429
GPR[SPVAP]-1659861271429
GPR[EPVAP]-1659861273263
GPR[EPVS]-1659861273263
========
if(p.newName!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861273265
GPR[SPVAP]-1659861273265
GPR[EPVAP]-1659861275120
GPR[EPVS]-1659861275120
========
if(p.newName==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861275121
GPR[SPVAP]-1659861275121
GPR[EPVAP]-1659861276962
GPR[EPVS]-1659861276962
========
if(p.newName==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861276963
GPR[SPVAP]-1659861276963
GPR[EPVAP]-1659861279009
GPR[EPVS]-1659861279009
========
if(newName==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861279011
GPR[SPVAP]-1659861279011
GPR[EPVAP]-1659861280846
GPR[EPVS]-1659861280846
========
if(lastJump==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861280847
GPR[SPVAP]-1659861280847
GPR[EPVAP]-1659861282878
GPR[EPVS]-1659861282878
========
if(newName==node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861282880
GPR[SPVAP]-1659861282880
GPR[EPVAP]-1659861284902
GPR[EPVS]-1659861284902
========
if(p.newName!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861284903
GPR[SPVAP]-1659861284903
GPR[EPVAP]-1659861286728
GPR[EPVS]-1659861286728
========
if(newName!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861286729
GPR[SPVAP]-1659861286729
GPR[EPVAP]-1659861288923
GPR[EPVS]-1659861288923
========
if(lastJump!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861288924
GPR[SPVAP]-1659861288924
GPR[EPVAP]-1659861290980
GPR[EPVS]-1659861290980
========
if(newName!=node){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861290981
GPR[SPVAP]-1659861290981
GPR[EPVAP]-1659861293047
GPR[EPVS]-1659861293047
========
if(p.newName==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861293049
GPR[SPVAP]-1659861293049
GPR[EPVAP]-1659861294898
GPR[EPVS]-1659861294898
========
if(newName==null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861294899
GPR[SPVAP]-1659861294899
GPR[EPVAP]-1659861296894
GPR[EPVS]-1659861296894
========
if(newName!=null){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(p.oldName,computeFallThrough(cur.getLastChild()));
}

========
MM Copying to MM
GPR[SPVS]-1659861296896
GPR[SPVAP]-1659861296896
GPR[EPVAP]-1659861298864
GPR[EPVS]-1659861298864
GPR[ESUN]-1659861298865
GPR[SSUN]-1659861298865
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter,250
Find no block!
GPR[SSUN]-1659861299336
com.google.javascript.jscomp.ControlFlowAnalysis,767
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.ON_EX,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861301660
GPR[SPVAP]-1659861301660
GPR[EPVAP]-1659861310326
GPR[SPVATF]-1659861310326
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedBreakwithFinally
MM: Failing tests: 0
GPR[EPVATF]-1659861321326
GPR[SPVATR]-1659861321327
TESTING : closure_14
MM messageFailing tests: 0
GPR[EPVATR]-1659861377391
GPR[EPVS]-1659861377391
GPR[PF]-1659861377391
sourceFile  script/workingdir/SimFix/closure/closure_14_buggy/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
location   script/workingdir/SimFix/closure/closure_14_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/14/seed_261/patch/closure/14/0/patch_1611201_1_ts_1659861377391.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/ControlFlowAnalysis.java --label=/src/com/google/javascript/jscomp/ControlFlowAnalysis.java /tmp/tmpDirMM1503047719717763832/ControlFlowAnalysis.java  /experiment_home///results/SimFix/Closure/14/seed_261/patch/closure/14/0/1_ControlFlowAnalysis.java  --unified=3  > /experiment_home///results/SimFix/Closure/14/seed_261/patch/closure/14/0/patch_1611201_1_ts_1659861377391.diff
MMOut command diff: []
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return ;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861377402
GPR[SPVAP]-1659861377402
GPR[EPVAP]-1659861379499
GPR[EPVS]-1659861379499
========
if(!(c.elements.get(0) instanceof Anchor&&c.elements.get(c.elements.size()-1) instanceof Anchor)){
return false;
}
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861379501
GPR[SPVAP]-1659861379501
GPR[EPVAP]-1659861381343
GPR[EPVS]-1659861381343
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.ON_FALSE,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861381345
GPR[SPVAP]-1659861381345
GPR[EPVAP]-1659861385317
GPR[SPVATF]-1659861385318
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861388983
GPR[EPVS]-1659861388983
========
createEdge(fromNode,Branch.ON_TRUE,computeFallThrough(parent));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861388984
GPR[SPVAP]-1659861388984
GPR[EPVAP]-1659861390857
GPR[EPVS]-1659861390857
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
compiler.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861390858
GPR[SPVAP]-1659861390858
GPR[EPVAP]-1659861392822
GPR[EPVS]-1659861392822
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
++astPositionCounter;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861392823
GPR[SPVAP]-1659861392823
GPR[EPVAP]-1659861394720
GPR[EPVS]-1659861394720
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
compiler.reportCodeChange();
++astPositionCounter;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861394722
GPR[SPVAP]-1659861394722
GPR[EPVAP]-1659861396556
GPR[EPVS]-1659861396556
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.addChildToFront(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861396557
GPR[SPVAP]-1659861396557
GPR[EPVAP]-1659861400661
GPR[SPVATF]-1659861400661
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861404332
GPR[EPVS]-1659861404332
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cur=parent;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861404334
GPR[SPVAP]-1659861404334
GPR[EPVAP]-1659861406181
GPR[EPVS]-1659861406181
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.addChildToFront(parent);
cur=parent;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861406182
GPR[SPVAP]-1659861406182
GPR[EPVAP]-1659861408152
GPR[EPVS]-1659861408152
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,parent);
}

========
MM Copying to MM
GPR[SPVS]-1659861408154
GPR[SPVAP]-1659861408154
GPR[EPVAP]-1659861412094
GPR[SPVATF]-1659861412094
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861419669
GPR[EPVS]-1659861419669
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.ON_FALSE,parent);
}

========
MM Copying to MM
GPR[SPVS]-1659861419670
GPR[SPVAP]-1659861419670
GPR[EPVAP]-1659861423641
GPR[SPVATF]-1659861423641
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861427263
GPR[EPVS]-1659861427263
========
parent.replaceChild(fromNode,finallyNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861427266
GPR[SPVAP]-1659861427266
GPR[EPVAP]-1659861429221
GPR[EPVS]-1659861429221
========
if(bestShadow.count<localAssignment.count){
continue;
}
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861429223
GPR[SPVAP]-1659861429223
GPR[EPVAP]-1659861431142
GPR[EPVS]-1659861431142
========
s.count++;
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861431144
GPR[SPVAP]-1659861431144
GPR[EPVAP]-1659861433087
GPR[EPVS]-1659861433087
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(!parent.isFunction()||!parent.isVar());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861433093
GPR[SPVAP]-1659861433093
GPR[EPVAP]-1659861437132
GPR[SPVATF]-1659861437132
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861441233
GPR[EPVS]-1659861441233
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861441234
GPR[SPVAP]-1659861441234
GPR[EPVAP]-1659861443167
GPR[EPVS]-1659861443168
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(!parent.isFunction()||!parent.isVar());
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861443169
GPR[SPVAP]-1659861443169
GPR[EPVAP]-1659861445132
GPR[EPVS]-1659861445132
========
Preconditions.checkState(astPositionCounter==1||parent.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861445133
GPR[SPVAP]-1659861445133
GPR[EPVAP]-1659861447037
GPR[EPVS]-1659861447037
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.putBooleanProp(Node.IS_CONSTANT_NAME,false);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861447039
GPR[SPVAP]-1659861447039
GPR[EPVAP]-1659861450986
GPR[SPVATF]-1659861450986
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861454811
GPR[EPVS]-1659861454811
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.putBooleanProp(Node.IS_CONSTANT_NAME,false);
compiler.reportCodeChange();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861454812
GPR[SPVAP]-1659861454812
GPR[EPVAP]-1659861456692
GPR[EPVS]-1659861456692
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.putBooleanProp(Node.IS_CONSTANT_NAME,false);
compiler.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861456694
GPR[SPVAP]-1659861456694
GPR[EPVAP]-1659861458529
GPR[EPVS]-1659861458529
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(fromNode.getString().equals(p.oldName));
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861458532
GPR[SPVAP]-1659861458532
GPR[EPVAP]-1659861460600
GPR[EPVS]-1659861460601
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
changed=shouldTraverseFunctions||!p.newName.equals(fromNode.getString());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861460602
GPR[SPVAP]-1659861460602
GPR[EPVAP]-1659861462437
GPR[EPVS]-1659861462437
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(fromNode.getString().equals(p.oldName));
changed=shouldTraverseFunctions||!p.newName.equals(fromNode.getString());

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861462438
GPR[SPVAP]-1659861462438
GPR[EPVAP]-1659861464364
GPR[EPVS]-1659861464364
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return computeFollowing(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861464366
GPR[SPVAP]-1659861464366
GPR[EPVAP]-1659861466206
GPR[EPVS]-1659861466206
========
Lists.newArrayList().add(symbols.get(0));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861466208
GPR[SPVAP]-1659861466208
GPR[EPVAP]-1659861468071
GPR[EPVS]-1659861468071
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.SYN_BLOCK,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861468074
GPR[SPVAP]-1659861468074
GPR[EPVAP]-1659861472132
GPR[SPVATF]-1659861472132
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861475688
GPR[EPVS]-1659861475688
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChildAfter(fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861475689
GPR[SPVAP]-1659861475689
GPR[EPVAP]-1659861479675
GPR[SPVATF]-1659861479675
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861483604
GPR[EPVS]-1659861483604
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
aliasInit=candidate.refInfo.getInitializingReference();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861483606
GPR[SPVAP]-1659861483606
GPR[EPVAP]-1659861485455
GPR[EPVS]-1659861485455
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkNotNull(node);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861485457
GPR[SPVAP]-1659861485457
GPR[EPVAP]-1659861489289
GPR[SPVATF]-1659861489289
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861493312
GPR[EPVS]-1659861493312
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
aliasInit=candidate.refInfo.getInitializingReference();
Preconditions.checkNotNull(node);

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861493314
GPR[SPVAP]-1659861493314
GPR[EPVAP]-1659861495317
GPR[EPVS]-1659861495317
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.removeChildren();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861495319
GPR[SPVAP]-1659861495319
GPR[EPVAP]-1659861499399
GPR[SPVATF]-1659861499399
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861503035
GPR[EPVS]-1659861503035
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
replaceNode(finallyNode.getParent(),getPropNode,fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861503038
GPR[SPVAP]-1659861503038
GPR[EPVAP]-1659861504972
GPR[EPVS]-1659861504972
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
replaceNode(finallyNode.getParent(),getPropNode,fromNode);
compiler.reportCodeChange();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861504974
GPR[SPVAP]-1659861504974
GPR[EPVAP]-1659861506926
GPR[EPVS]-1659861506926
========
parent.addChildToBack(parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861506930
GPR[SPVAP]-1659861506930
GPR[EPVAP]-1659861510909
GPR[SPVATF]-1659861510909
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861514939
GPR[EPVS]-1659861514939
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.copyInformationFrom(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861514942
GPR[SPVAP]-1659861514942
GPR[EPVAP]-1659861519042
GPR[SPVATF]-1659861519042
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861522604
GPR[EPVS]-1659861522604
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
n=fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861522606
GPR[SPVAP]-1659861522606
GPR[EPVAP]-1659861524474
GPR[EPVS]-1659861524474
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861524475
GPR[SPVAP]-1659861524475
GPR[EPVAP]-1659861526332
GPR[EPVS]-1659861526332
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
n=fromNode;
reportCodeChange();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861526333
GPR[SPVAP]-1659861526333
GPR[EPVAP]-1659861528186
GPR[EPVS]-1659861528186
========
parent.replaceChild(parent,fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861528188
GPR[SPVAP]-1659861528188
GPR[EPVAP]-1659861532212
GPR[SPVATF]-1659861532212
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861535810
GPR[EPVS]-1659861535810
========
compiler.reportCodeChange();
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861535811
GPR[SPVAP]-1659861535811
GPR[EPVAP]-1659861537768
GPR[EPVS]-1659861537768
========
finallyMap.add(new CallSite(parent,node,fromNode,finallyNode,node));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861537771
GPR[SPVAP]-1659861537771
GPR[EPVAP]-1659861539613
GPR[EPVS]-1659861539613
========
Preconditions.checkNotNull(parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861539615
GPR[SPVAP]-1659861539615
GPR[EPVAP]-1659861543486
GPR[SPVATF]-1659861543486
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861547621
GPR[EPVS]-1659861547621
========
shouldTraverseFunctions=true;
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861547623
GPR[SPVAP]-1659861547623
GPR[EPVAP]-1659861549675
GPR[EPVS]-1659861549675
========
parent.addChildToBack(fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861549676
GPR[SPVAP]-1659861549676
GPR[EPVAP]-1659861553717
GPR[SPVATF]-1659861553717
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861557338
GPR[EPVS]-1659861557338
========
Preconditions.checkNotNull(parent);
parent.addChildToBack(fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861557339
GPR[SPVAP]-1659861557339
GPR[EPVAP]-1659861561394
GPR[SPVATF]-1659861561395
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861564986
GPR[EPVS]-1659861564986
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyMap.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861564988
GPR[SPVAP]-1659861564988
GPR[EPVAP]-1659861566844
GPR[EPVS]-1659861566844
========
parent.removeChild(fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861566846
GPR[SPVAP]-1659861566846
GPR[EPVAP]-1659861570742
GPR[SPVATF]-1659861570742
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861574504
GPR[EPVS]-1659861574504
========
parent.removeChild(fromNode);
parent.replaceChild(parent,fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861574506
GPR[SPVAP]-1659861574506
GPR[EPVAP]-1659861578496
GPR[SPVATF]-1659861578496
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861582319
GPR[EPVS]-1659861582319
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861582321
GPR[SPVAP]-1659861582321
GPR[EPVAP]-1659861586397
GPR[SPVATF]-1659861586397
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861589929
GPR[EPVS]-1659861589929
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861589930
GPR[SPVAP]-1659861589930
GPR[EPVAP]-1659861591788
GPR[EPVS]-1659861591788
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861591790
GPR[SPVAP]-1659861591790
GPR[EPVAP]-1659861593727
GPR[EPVS]-1659861593727
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
return fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861593729
GPR[SPVAP]-1659861593729
GPR[EPVAP]-1659861595869
GPR[EPVS]-1659861595870
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
return fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861595871
GPR[SPVAP]-1659861595871
GPR[EPVAP]-1659861597919
GPR[EPVS]-1659861597919
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861597920
GPR[SPVAP]-1659861597920
GPR[EPVAP]-1659861599781
GPR[EPVS]-1659861599781
========
Preconditions.checkState(fromNode.isIf());
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861599783
GPR[SPVAP]-1659861599783
GPR[EPVAP]-1659861603918
GPR[SPVATF]-1659861603919
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861607743
GPR[EPVS]-1659861607743
========
parent.replaceChild(parent,IR.number(0));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861607745
GPR[SPVAP]-1659861607745
GPR[EPVAP]-1659861609731
GPR[EPVS]-1659861609731
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
result=IR.empty().srcref(fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861609733
GPR[SPVAP]-1659861609733
GPR[EPVAP]-1659861611610
GPR[EPVS]-1659861611610
========
parent.replaceChild(parent,fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.copyInformationFrom(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861611612
GPR[SPVAP]-1659861611612
GPR[EPVAP]-1659861615649
GPR[SPVATF]-1659861615649
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861619357
GPR[EPVS]-1659861619357
========
n2clone.parent=fromNode;
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861619359
GPR[SPVAP]-1659861619359
GPR[EPVAP]-1659861621252
GPR[EPVS]-1659861621252
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861621253
GPR[SPVAP]-1659861621253
GPR[EPVAP]-1659861623215
GPR[EPVS]-1659861623215
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861623217
GPR[SPVAP]-1659861623217
GPR[EPVAP]-1659861625292
GPR[EPVS]-1659861625292
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return fromNode;
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861625294
GPR[SPVAP]-1659861625294
GPR[EPVAP]-1659861627133
GPR[EPVS]-1659861627134
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
return fromNode;
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861627135
GPR[SPVAP]-1659861627135
GPR[EPVAP]-1659861629013
GPR[EPVS]-1659861629014
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.copyInformationFromForTree(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861629015
GPR[SPVAP]-1659861629015
GPR[EPVAP]-1659861633093
GPR[SPVATF]-1659861633093
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861636666
GPR[EPVS]-1659861636666
========
finallyNode.copyInformationFromForTree(parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861636667
GPR[SPVAP]-1659861636667
GPR[EPVAP]-1659861638535
GPR[EPVS]-1659861638535
========
parent.replaceChild(parent,finallyNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861638537
GPR[SPVAP]-1659861638537
GPR[EPVAP]-1659861640513
GPR[EPVS]-1659861640513
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
previous=fromNode.removeFirstChild();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861640515
GPR[SPVAP]-1659861640515
GPR[EPVAP]-1659861642458
GPR[EPVS]-1659861642458
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.copyInformationFrom(fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861642460
GPR[SPVAP]-1659861642460
GPR[EPVAP]-1659861646751
GPR[SPVATF]-1659861646751
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861650708
GPR[EPVS]-1659861650708
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861650709
GPR[SPVAP]-1659861650709
GPR[EPVAP]-1659861652568
GPR[EPVS]-1659861652568
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.copyInformationFrom(fromNode);
cfa.reportCodeChange();
return ;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861652569
GPR[SPVAP]-1659861652569
GPR[EPVAP]-1659861654533
GPR[EPVS]-1659861654533
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.copyInformationFrom(fromNode);
return ;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861654534
GPR[SPVAP]-1659861654534
GPR[EPVAP]-1659861656471
GPR[EPVS]-1659861656471
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(finallyNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861656472
GPR[SPVAP]-1659861656472
GPR[EPVAP]-1659861660428
GPR[SPVATF]-1659861660428
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861663987
GPR[EPVS]-1659861663987
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(node,finallyNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861663988
GPR[SPVAP]-1659861663988
GPR[EPVAP]-1659861667960
GPR[SPVATF]-1659861667960
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861671764
GPR[EPVS]-1659861671764
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return true;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861671765
GPR[SPVAP]-1659861671765
GPR[EPVAP]-1659861673619
GPR[EPVS]-1659861673619
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(finallyNode);
parent.replaceChild(node,finallyNode);
return true;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861673620
GPR[SPVAP]-1659861673620
GPR[EPVAP]-1659861675509
GPR[EPVS]-1659861675509
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(finallyNode);
parent.replaceChild(node,finallyNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861675510
GPR[SPVAP]-1659861675510
GPR[EPVAP]-1659861679510
GPR[SPVATF]-1659861679510
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861683505
GPR[EPVS]-1659861683505
========
parent.replaceChild(fromNode,parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861683506
GPR[SPVAP]-1659861683506
GPR[EPVAP]-1659861687568
GPR[SPVATF]-1659861687568
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861691562
GPR[EPVS]-1659861691562
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,node);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861691564
GPR[SPVAP]-1659861691564
GPR[EPVAP]-1659861695553
GPR[SPVATF]-1659861695553
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861699662
GPR[EPVS]-1659861699662
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return node;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861699663
GPR[SPVAP]-1659861699663
GPR[EPVAP]-1659861701724
GPR[EPVS]-1659861701724
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,node);
reportCodeChange();
return node;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861701726
GPR[SPVAP]-1659861701726
GPR[EPVAP]-1659861703649
GPR[EPVS]-1659861703649
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,node);
reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861703650
GPR[SPVAP]-1659861703650
GPR[EPVAP]-1659861705599
GPR[EPVS]-1659861705599
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyMap.put(finallyNode,parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861705601
GPR[SPVAP]-1659861705601
GPR[EPVAP]-1659861707705
GPR[EPVS]-1659861707705
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(parent.getLastChild()==fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861707707
GPR[SPVAP]-1659861707707
GPR[EPVAP]-1659861711604
GPR[SPVATF]-1659861711604
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861715165
GPR[EPVS]-1659861715165
========
parent.replaceChild(finallyNode,parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861715166
GPR[SPVAP]-1659861715166
GPR[EPVAP]-1659861717145
GPR[EPVS]-1659861717145
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
insertAfter=node.getFirstChild().detachFromParent();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861717147
GPR[SPVAP]-1659861717147
GPR[EPVAP]-1659861718985
GPR[EPVS]-1659861718985
========
node.removeChild(parent);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861718986
GPR[SPVAP]-1659861718986
GPR[EPVAP]-1659861722989
GPR[SPVATF]-1659861722989
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861726508
GPR[EPVS]-1659861726508
========
parent.replaceChild(finallyNode,node);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861726510
GPR[SPVAP]-1659861726510
GPR[EPVAP]-1659861728471
GPR[EPVS]-1659861728471
========
reportCodeChange();
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861728472
GPR[SPVAP]-1659861728473
GPR[EPVAP]-1659861730426
GPR[EPVS]-1659861730426
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
block=IR.block();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861730428
GPR[SPVAP]-1659861730428
GPR[EPVAP]-1659861732300
GPR[EPVS]-1659861732300
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
node.addChildToFront(fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861732301
GPR[SPVAP]-1659861732301
GPR[EPVAP]-1659861736319
GPR[SPVATF]-1659861736319
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861740316
GPR[EPVS]-1659861740316
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
block=IR.block();
node.addChildToFront(fromNode);

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861740317
GPR[SPVAP]-1659861740317
GPR[EPVAP]-1659861742234
GPR[EPVS]-1659861742234
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
block=parent;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861742236
GPR[SPVAP]-1659861742236
GPR[EPVAP]-1659861744068
GPR[EPVS]-1659861744068
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861744070
GPR[SPVAP]-1659861744070
GPR[EPVAP]-1659861745919
GPR[EPVS]-1659861745919
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861745921
GPR[SPVAP]-1659861745921
GPR[EPVAP]-1659861747844
GPR[EPVS]-1659861747844
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return fromNode;
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861747846
GPR[SPVAP]-1659861747846
GPR[EPVAP]-1659861749695
GPR[EPVS]-1659861749695
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
reportCodeChange();
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861749697
GPR[SPVAP]-1659861749697
GPR[EPVAP]-1659861751540
GPR[EPVS]-1659861751540
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
return fromNode;
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861751541
GPR[SPVAP]-1659861751541
GPR[EPVAP]-1659861753475
GPR[EPVS]-1659861753476
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
reportCodeChange();
return fromNode;
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861753477
GPR[SPVAP]-1659861753477
GPR[EPVAP]-1659861755637
GPR[EPVS]-1659861755638
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;
parent.replaceChild(parent,fromNode);
reportCodeChange();
return fromNode;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861755639
GPR[SPVAP]-1659861755639
GPR[EPVAP]-1659861757596
GPR[EPVS]-1659861757597
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
removeChild(parent.getParent(),parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861757598
GPR[SPVAP]-1659861757598
GPR[EPVAP]-1659861759604
GPR[EPVS]-1659861759604
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
last=finallyNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861759605
GPR[SPVAP]-1659861759605
GPR[EPVAP]-1659861761575
GPR[EPVS]-1659861761575
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.addSuppression("duplicate");
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861761577
GPR[SPVAP]-1659861761577
GPR[EPVAP]-1659861765547
GPR[SPVATF]-1659861765547
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861769338
GPR[EPVS]-1659861769338
========
fromNode.removeChild(fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861769340
GPR[SPVAP]-1659861769340
GPR[EPVAP]-1659861773252
GPR[SPVATF]-1659861773252
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861777204
GPR[EPVS]-1659861777204
========
fromNode.removeChild(fromNode);
parent.replaceChild(parent,fromNode);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861777206
GPR[SPVAP]-1659861777206
GPR[EPVAP]-1659861781180
GPR[SPVATF]-1659861781180
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861784891
GPR[EPVS]-1659861784891
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
node.replaceChild(parent,fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861784893
GPR[SPVAP]-1659861784893
GPR[EPVAP]-1659861788948
GPR[SPVATF]-1659861788948
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861792795
GPR[EPVS]-1659861792795
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861792797
GPR[SPVAP]-1659861792797
GPR[EPVAP]-1659861796843
GPR[SPVATF]-1659861796843
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861800768
GPR[EPVS]-1659861800768
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
curNode=fromNode;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861800770
GPR[SPVAP]-1659861800770
GPR[EPVAP]-1659861802818
GPR[EPVS]-1659861802818
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
traverseBranch(fromNode,parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861802819
GPR[SPVAP]-1659861802819
GPR[EPVAP]-1659861804669
GPR[EPVS]-1659861804669
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
popScope();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861804670
GPR[SPVAP]-1659861804670
GPR[EPVAP]-1659861806533
GPR[EPVS]-1659861806533
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
curNode=fromNode;
traverseBranch(fromNode,parent);
popScope();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861806534
GPR[SPVAP]-1659861806534
GPR[EPVAP]-1659861808367
GPR[EPVS]-1659861808367
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861808368
GPR[SPVAP]-1659861808368
GPR[EPVAP]-1659861810282
GPR[EPVS]-1659861810282
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861810283
GPR[SPVAP]-1659861810283
GPR[EPVAP]-1659861812135
GPR[EPVS]-1659861812135
========
Preconditions.checkState(fromNode.isName());
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861812137
GPR[SPVAP]-1659861812137
GPR[EPVAP]-1659861816090
GPR[SPVATF]-1659861816090
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861819612
GPR[EPVS]-1659861819612
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.addChildToFront(parent);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861819614
GPR[SPVAP]-1659861819614
GPR[EPVAP]-1659861823683
GPR[SPVATF]-1659861823683
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861827264
GPR[EPVS]-1659861827264
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.detachFromParent();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861827265
GPR[SPVAP]-1659861827265
GPR[EPVAP]-1659861831285
GPR[SPVATF]-1659861831285
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861835345
GPR[EPVS]-1659861835345
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(node);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861835347
GPR[SPVAP]-1659861835347
GPR[EPVAP]-1659861839370
GPR[SPVATF]-1659861839370
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861843012
GPR[EPVS]-1659861843012
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,IR.getprop(parent,node));
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861843014
GPR[SPVAP]-1659861843014
GPR[EPVAP]-1659861844874
GPR[EPVS]-1659861844874
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(node);
parent.replaceChild(fromNode,IR.getprop(parent,node));
compiler.reportCodeChange();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861844875
GPR[SPVAP]-1659861844875
GPR[EPVAP]-1659861846817
GPR[EPVS]-1659861846817
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
fromNode.removeChild(node);
compiler.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861846819
GPR[SPVAP]-1659861846819
GPR[EPVAP]-1659861848795
GPR[EPVS]-1659861848795
========
Preconditions.checkArgument(isStorageNode(fromNode));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861848797
GPR[SPVAP]-1659861848797
GPR[EPVAP]-1659861850667
GPR[EPVS]-1659861850667
========
Preconditions.checkState(parent.isObjectLit());
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861850669
GPR[SPVAP]-1659861850669
GPR[EPVAP]-1659861854775
GPR[SPVATF]-1659861854775
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861858742
GPR[EPVS]-1659861858742
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
insertExprResultState=false;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861858744
GPR[SPVAP]-1659861858744
GPR[EPVAP]-1659861860621
GPR[EPVS]-1659861860622
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
insertExprResultState=true;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861860623
GPR[SPVAP]-1659861860623
GPR[EPVAP]-1659861862451
GPR[EPVS]-1659861862451
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
insertExprResultState=false;
insertExprResultState=true;

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861862452
GPR[SPVAP]-1659861862452
GPR[EPVAP]-1659861864456
GPR[EPVS]-1659861864456
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
parent.replaceChild(fromNode,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),parent)).useSourceInfoFromForTree(n));
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861864457
GPR[SPVAP]-1659861864457
GPR[EPVAP]-1659861866499
GPR[EPVS]-1659861866499
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.add(fromNode.getString());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861866501
GPR[SPVAP]-1659861866501
GPR[EPVAP]-1659861868367
GPR[EPVS]-1659861868367
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(parent.isVar());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861868369
GPR[SPVAP]-1659861868369
GPR[EPVAP]-1659861872192
GPR[SPVATF]-1659861872192
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861876147
GPR[EPVS]-1659861876147
========
newChild.next=child.next;
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861876150
GPR[SPVAP]-1659861876150
GPR[EPVAP]-1659861878074
GPR[EPVS]-1659861878074
========
newChild.parent=this;
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861878076
GPR[SPVAP]-1659861878076
GPR[EPVAP]-1659861879962
GPR[EPVS]-1659861879962
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.replaceChild(parent,fromNode);
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861879965
GPR[SPVAP]-1659861879965
GPR[EPVAP]-1659861883952
GPR[SPVATF]-1659861883952
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861888142
GPR[EPVS]-1659861888142
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.replaceChild(parent,fromNode);
compiler.reportCodeChange();

cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861888143
GPR[SPVAP]-1659861888143
GPR[EPVAP]-1659861890160
GPR[EPVS]-1659861890160
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
finallyNode.replaceChild(parent,fromNode);
compiler.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861890162
GPR[SPVAP]-1659861890162
GPR[EPVAP]-1659861892049
GPR[EPVS]-1659861892049
========
parent.addChildToBack(node);
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861892051
GPR[SPVAP]-1659861892051
GPR[EPVAP]-1659861896016
GPR[SPVATF]-1659861896016
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861899919
GPR[EPVS]-1659861899919
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
return DotFormatter.toDot(parent,cfa.getCfg());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861899921
GPR[SPVAP]-1659861899921
GPR[EPVAP]-1659861902163
GPR[EPVS]-1659861902163
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
globalRegExpPropertiesUsed=true;
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861902165
GPR[SPVAP]-1659861902165
GPR[EPVAP]-1659861904083
GPR[EPVS]-1659861904083
========
if((parent.getLastChild()==null)||!functionNode.isFunction()){
return false;
}
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861904085
GPR[SPVAP]-1659861904085
GPR[EPVAP]-1659861906028
GPR[EPVS]-1659861906028
========
for(Node finallyNode : cfa.finallyMap.get(parent)){
Preconditions.checkState(parent.hasOneChild());
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861906030
GPR[SPVAP]-1659861906030
GPR[EPVAP]-1659861909906
GPR[SPVATF]-1659861909906
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861913893
GPR[EPVS]-1659861913893
========
if(!(parent.isScript()||parent.getParent()!=null&&grandparent.isFunction()&&parent.isBlock())){
return ;
}
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861913895
GPR[SPVAP]-1659861913895
GPR[EPVAP]-1659861915767
GPR[EPVS]-1659861915767
========
Preconditions.checkNotNull(parent.getQualifiedName());
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}

========
MM Copying to MM
GPR[SPVS]-1659861915768
GPR[SPVAP]-1659861915768
GPR[EPVAP]-1659861919784
GPR[SPVATF]-1659861919784
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861923660
GPR[EPVS]-1659861923660
GPR[ESUN]-1659861923661
GPR[SSUN]-1659861923661
com.google.javascript.jscomp.ControlFlowAnalysis,768
Find no block!
GPR[SSUN]-1659861924232
com.google.javascript.jscomp.ControlFlowAnalysis,844
========
if(lastJump==node){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861926200
GPR[SPVAP]-1659861926200
GPR[EPVAP]-1659861929806
GPR[EPVS]-1659861929806
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861929807
GPR[SPVAP]-1659861929807
GPR[EPVAP]-1659861937709
GPR[SPVATF]-1659861937709
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861941343
GPR[EPVS]-1659861941343
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861941344
GPR[SPVAP]-1659861941344
GPR[EPVAP]-1659861945326
GPR[SPVATF]-1659861945326
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861949362
GPR[EPVS]-1659861949362
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.UNCOND,cur.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861949364
GPR[SPVAP]-1659861949364
GPR[EPVAP]-1659861951285
GPR[EPVS]-1659861951285
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861951287
GPR[SPVAP]-1659861951287
GPR[EPVAP]-1659861955472
GPR[SPVATF]-1659861955472
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861959449
GPR[EPVS]-1659861959449
========
if(lastJump==null){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861959450
GPR[SPVAP]-1659861959450
GPR[EPVAP]-1659861963444
GPR[SPVATF]-1659861963444
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861967313
GPR[EPVS]-1659861967313
========
if(c==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861967314
GPR[SPVAP]-1659861967314
GPR[EPVAP]-1659861969506
GPR[EPVS]-1659861969506
========
if(lastJump==handler.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861969507
GPR[SPVAP]-1659861969507
GPR[EPVAP]-1659861973640
GPR[SPVATF]-1659861973640
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861977592
GPR[EPVS]-1659861977592
========
if(lastJump==handler){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861977593
GPR[SPVAP]-1659861977593
GPR[EPVAP]-1659861981519
GPR[SPVATF]-1659861981519
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659861985324
GPR[EPVS]-1659861985324
========
if(lastJump==cfgNode){
return ;
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861985325
GPR[SPVAP]-1659861985325
GPR[EPVAP]-1659861987440
GPR[EPVS]-1659861987440
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.UNCOND,computeFallThrough(cur.getLastChild()));
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861987442
GPR[SPVAP]-1659861987442
GPR[EPVAP]-1659861989431
GPR[EPVS]-1659861989431
========
if(lastJump==node){
createEdge(lastJump,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861989433
GPR[SPVAP]-1659861989433
GPR[EPVAP]-1659861991491
GPR[EPVS]-1659861991491
========
if(lastJump==node){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861991493
GPR[SPVAP]-1659861991493
GPR[EPVAP]-1659861993355
GPR[EPVS]-1659861993355
========
if(catchBlock.getLastChild()==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659861993356
GPR[SPVAP]-1659861993356
GPR[EPVAP]-1659861997324
GPR[SPVATF]-1659861997324
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862001156
GPR[EPVS]-1659862001156
========
if(catchBlock==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862001158
GPR[SPVAP]-1659862001158
GPR[EPVAP]-1659862005270
GPR[SPVATF]-1659862005270
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862008923
GPR[EPVS]-1659862008923
========
if(caseNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862008924
GPR[SPVAP]-1659862008924
GPR[EPVAP]-1659862010798
GPR[EPVS]-1659862010798
========
if(lastJump==previousCase){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862010800
GPR[SPVAP]-1659862010800
GPR[EPVAP]-1659862012888
GPR[EPVS]-1659862012888
========
if(lastTrue==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862012889
GPR[SPVAP]-1659862012889
GPR[EPVAP]-1659862014767
GPR[EPVS]-1659862014767
========
if(lastFalse==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862014768
GPR[SPVAP]-1659862014768
GPR[EPVAP]-1659862016663
GPR[EPVS]-1659862016663
========
cfgNode.detachFromParent();
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862016665
GPR[SPVAP]-1659862016665
GPR[EPVAP]-1659862020729
GPR[SPVATF]-1659862020729
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862024327
GPR[EPVS]-1659862024327
========
if(lastJump==cfgNode){
createEdge(lastJump,Branch.UNCOND,computeFollowNode(cur,this));
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862024328
GPR[SPVAP]-1659862024328
GPR[EPVAP]-1659862026178
GPR[EPVS]-1659862026178
========
if(catchBlock.getLastChild()==node){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862026180
GPR[SPVAP]-1659862026180
GPR[EPVAP]-1659862028132
GPR[EPVS]-1659862028132
========
if(catchBlock.getLastChild()==cfgNode){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862028133
GPR[SPVAP]-1659862028133
GPR[EPVAP]-1659862032136
GPR[SPVATF]-1659862032136
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862036198
GPR[EPVS]-1659862036198
========
if(catchBlock==node){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862036199
GPR[SPVAP]-1659862036199
GPR[EPVAP]-1659862038279
GPR[EPVS]-1659862038279
========
if(catchBlock==cfgNode){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862038281
GPR[SPVAP]-1659862038281
GPR[EPVAP]-1659862042454
GPR[SPVATF]-1659862042454
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862046020
GPR[EPVS]-1659862046020
========
if(catchBlock.getLastChild()==node){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862046021
GPR[SPVAP]-1659862046021
GPR[EPVAP]-1659862048123
GPR[EPVS]-1659862048123
========
if(catchBlock==node){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862048125
GPR[SPVAP]-1659862048125
GPR[EPVAP]-1659862050251
GPR[EPVS]-1659862050252
========
if(functionNode==functionNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862050253
GPR[SPVAP]-1659862050253
GPR[EPVAP]-1659862052114
GPR[EPVS]-1659862052114
========
if(functionNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862052115
GPR[SPVAP]-1659862052115
GPR[EPVAP]-1659862054055
GPR[EPVS]-1659862054056
========
if(lastJump==functionNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862054057
GPR[SPVAP]-1659862054057
GPR[EPVAP]-1659862056105
GPR[EPVS]-1659862056105
========
if(lastJump==catchBlock.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862056107
GPR[SPVAP]-1659862056107
GPR[EPVAP]-1659862060263
GPR[SPVATF]-1659862060263
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862063904
GPR[EPVS]-1659862063904
========
if(lastJump==catchBlock){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862063905
GPR[SPVAP]-1659862063905
GPR[EPVAP]-1659862068104
GPR[SPVATF]-1659862068104
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862071677
GPR[EPVS]-1659862071677
========
if(c==catchBlock.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862071678
GPR[SPVAP]-1659862071678
GPR[EPVAP]-1659862073609
GPR[EPVS]-1659862073609
========
if(c==catchBlock){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862073610
GPR[SPVAP]-1659862073610
GPR[EPVAP]-1659862075635
GPR[EPVS]-1659862075635
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862075636
GPR[SPVAP]-1659862075636
GPR[EPVAP]-1659862079514
GPR[SPVATF]-1659862079514
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862083544
GPR[EPVS]-1659862083544
========
if(lastJump==parent){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862083546
GPR[SPVAP]-1659862083546
GPR[EPVAP]-1659862085389
GPR[EPVS]-1659862085389
========
if(catchBlock.getLastChild()!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862085390
GPR[SPVAP]-1659862085390
GPR[EPVAP]-1659862089520
GPR[SPVATF]-1659862089520
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862093204
GPR[EPVS]-1659862093204
========
if(catchBlock!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862093205
GPR[SPVAP]-1659862093205
GPR[EPVAP]-1659862097276
GPR[SPVATF]-1659862097276
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862101315
GPR[EPVS]-1659862101315
========
if(lastJump==n){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862101318
GPR[SPVAP]-1659862101318
GPR[EPVAP]-1659862103198
GPR[EPVS]-1659862103198
========
if(parent==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862103199
GPR[SPVAP]-1659862103199
GPR[EPVAP]-1659862105248
GPR[EPVS]-1659862105248
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862105249
GPR[SPVAP]-1659862105249
GPR[EPVAP]-1659862109123
GPR[SPVATF]-1659862109124
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862112663
GPR[EPVS]-1659862112663
========
if(lastParam==lastParam){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862112665
GPR[SPVAP]-1659862112665
GPR[EPVAP]-1659862114640
GPR[EPVS]-1659862114640
========
if(lastParam==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862114641
GPR[SPVAP]-1659862114641
GPR[EPVAP]-1659862116500
GPR[EPVS]-1659862116500
========
if(lastJump==lastParam){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862116502
GPR[SPVAP]-1659862116502
GPR[EPVAP]-1659862118364
GPR[EPVS]-1659862118364
========
if(cfgNode==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862118365
GPR[SPVAP]-1659862118365
GPR[EPVAP]-1659862122306
GPR[SPVATF]-1659862122306
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862125857
GPR[EPVS]-1659862125857
========
if(node==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862125858
GPR[SPVAP]-1659862125858
GPR[EPVAP]-1659862127832
GPR[EPVS]-1659862127832
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
reachingDef.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862127834
GPR[SPVAP]-1659862127834
GPR[EPVAP]-1659862129694
GPR[EPVS]-1659862129694
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
if(lastJump!=null){
computeDependence(new Definition(cfgNode),lastJump);
}
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862129695
GPR[SPVAP]-1659862129695
GPR[EPVAP]-1659862131920
GPR[EPVS]-1659862131920
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(getMethodFromDeclarationName(config.name),handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862131921
GPR[SPVAP]-1659862131921
GPR[EPVAP]-1659862133987
GPR[EPVS]-1659862133987
========
if(cfgNode!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862137326
GPR[SPVAP]-1659862137326
GPR[EPVAP]-1659862141278
GPR[SPVATF]-1659862141278
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862144856
GPR[EPVS]-1659862144856
========
if(child==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862144857
GPR[SPVAP]-1659862144857
GPR[EPVAP]-1659862146846
GPR[EPVS]-1659862146846
========
if(lastJump==cfgNode){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862146848
GPR[SPVAP]-1659862146848
GPR[EPVAP]-1659862150951
GPR[SPVATF]-1659862150951
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862154832
GPR[EPVS]-1659862154832
========
if(lastJump==cfgNode){
createEdge(catchBlock,Branch.UNCOND,computeFallThrough(child));
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862154834
GPR[SPVAP]-1659862154834
GPR[EPVAP]-1659862156716
GPR[EPVS]-1659862156716
========
if(lastJump!=cfgNode){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862156717
GPR[SPVAP]-1659862156717
GPR[EPVAP]-1659862160620
GPR[SPVATF]-1659862160621
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862164638
GPR[EPVS]-1659862164638
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862164640
GPR[SPVAP]-1659862164640
GPR[EPVAP]-1659862168610
GPR[SPVATF]-1659862168610
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862172180
GPR[EPVS]-1659862172180
========
if(cfgNode!=null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862172182
GPR[SPVAP]-1659862172182
GPR[EPVAP]-1659862176261
GPR[SPVATF]-1659862176261
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862179809
GPR[EPVS]-1659862179809
========
if(cfgNode!=null){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862179810
GPR[SPVAP]-1659862179810
GPR[EPVAP]-1659862183663
GPR[SPVATF]-1659862183663
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862187704
GPR[EPVS]-1659862187704
========
if(lastJump==null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862187706
GPR[SPVAP]-1659862187706
GPR[EPVAP]-1659862191912
GPR[SPVATF]-1659862191912
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862195775
GPR[EPVS]-1659862195775
========
if(lastJump!=null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862195776
GPR[SPVAP]-1659862195776
GPR[EPVAP]-1659862199647
GPR[SPVATF]-1659862199647
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862203372
GPR[EPVS]-1659862203372
========
if(lastJump!=null){
createEdge(cfgNode,Branch.UNCOND,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862203373
GPR[SPVAP]-1659862203373
GPR[EPVAP]-1659862207401
GPR[SPVATF]-1659862207401
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862210982
GPR[EPVS]-1659862210982
========
if(script==script){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862210984
GPR[SPVAP]-1659862210984
GPR[EPVAP]-1659862213025
GPR[EPVS]-1659862213025
========
if(script==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862213027
GPR[SPVAP]-1659862213027
GPR[EPVAP]-1659862214898
GPR[EPVS]-1659862214898
========
if(lastJump==script){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862214899
GPR[SPVAP]-1659862214899
GPR[EPVAP]-1659862216920
GPR[EPVS]-1659862216920
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
IR.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862216921
GPR[SPVAP]-1659862216921
GPR[EPVAP]-1659862218778
GPR[EPVS]-1659862218778
========
if(lastJump==cfgNode){
script=IR.script();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862218779
GPR[SPVAP]-1659862218779
GPR[EPVAP]-1659862220830
GPR[EPVS]-1659862220830
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.addChildToBack(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862220832
GPR[SPVAP]-1659862220832
GPR[EPVAP]-1659862224704
GPR[SPVATF]-1659862224704
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862228244
GPR[EPVS]-1659862228244
========
lastJump.addChildToBack(cfgNode);
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862228246
GPR[SPVAP]-1659862228246
GPR[EPVAP]-1659862232278
GPR[SPVATF]-1659862232278
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862235960
GPR[EPVS]-1659862235960
========
lastJump.addChildToBack(cfgNode);
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.addChildToBack(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862235961
GPR[SPVAP]-1659862235961
GPR[EPVAP]-1659862240283
GPR[SPVATF]-1659862240283
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862243997
GPR[EPVS]-1659862243997
========
if(next==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862243999
GPR[SPVAP]-1659862243999
GPR[EPVAP]-1659862246095
GPR[EPVS]-1659862246095
========
if(lastJump==cfgNode){
createEdge(handler,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862246097
GPR[SPVAP]-1659862246097
GPR[EPVAP]-1659862250077
GPR[SPVATF]-1659862250077
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862253888
GPR[EPVS]-1659862253888
========
if(lastJump==cfgNode){
createEdge(handler,Branch.UNCOND,next);
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862253889
GPR[SPVAP]-1659862253889
GPR[EPVAP]-1659862255841
GPR[EPVS]-1659862255841
========
if(lastJump!=cfgNode){
createEdge(handler,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862255842
GPR[SPVAP]-1659862255842
GPR[EPVAP]-1659862259784
GPR[SPVATF]-1659862259785
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862263636
GPR[EPVS]-1659862263636
========
if(cfgNode!=null){
createEdge(handler,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862263637
GPR[SPVAP]-1659862263637
GPR[EPVAP]-1659862267687
GPR[SPVATF]-1659862267687
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862271591
GPR[EPVS]-1659862271591
========
if(lastJump==null){
createEdge(handler,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862271593
GPR[SPVAP]-1659862271593
GPR[EPVAP]-1659862275600
GPR[SPVATF]-1659862275600
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862279598
GPR[EPVS]-1659862279598
========
if(lastJump!=null){
createEdge(handler,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862279600
GPR[SPVAP]-1659862279600
GPR[EPVAP]-1659862283544
GPR[SPVATF]-1659862283544
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862287460
GPR[EPVS]-1659862287460
========
if(oldRoot==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862287462
GPR[SPVAP]-1659862287462
GPR[EPVAP]-1659862289364
GPR[EPVS]-1659862289364
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(handler,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862289365
GPR[SPVAP]-1659862289365
GPR[EPVAP]-1659862293232
GPR[SPVATF]-1659862293232
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862297100
GPR[EPVS]-1659862297100
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(handler,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862297101
GPR[SPVAP]-1659862297101
GPR[EPVAP]-1659862301095
GPR[SPVATF]-1659862301095
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862308144
GPR[EPVS]-1659862308144
========
if(cArg==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862308146
GPR[SPVAP]-1659862308146
GPR[EPVAP]-1659862310096
GPR[EPVS]-1659862310096
========
if(currentParent==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862310098
GPR[SPVAP]-1659862310098
GPR[EPVAP]-1659862312179
GPR[EPVS]-1659862312179
========
if(n==n){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862312181
GPR[SPVAP]-1659862312181
GPR[EPVAP]-1659862314012
GPR[EPVS]-1659862314012
========
if(handler.getLastChild()==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862314013
GPR[SPVAP]-1659862314013
GPR[EPVAP]-1659862318002
GPR[SPVATF]-1659862318002
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862321620
GPR[EPVS]-1659862321620
========
if(handler==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862321622
GPR[SPVAP]-1659862321622
GPR[EPVAP]-1659862325818
GPR[SPVATF]-1659862325818
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862329429
GPR[EPVS]-1659862329429
========
if(n==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862329430
GPR[SPVAP]-1659862329430
GPR[EPVAP]-1659862331315
GPR[EPVS]-1659862331315
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
refNodes.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862331316
GPR[SPVAP]-1659862331316
GPR[EPVAP]-1659862333167
GPR[EPVS]-1659862333167
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
checkedClass.hasInstanceOfReference=true;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862333169
GPR[SPVAP]-1659862333169
GPR[EPVAP]-1659862335076
GPR[EPVS]-1659862335076
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
return ;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862335077
GPR[SPVAP]-1659862335077
GPR[EPVAP]-1659862337032
GPR[EPVS]-1659862337032
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
checkedClass.hasInstanceOfReference=true;
return ;

finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862337033
GPR[SPVAP]-1659862337033
GPR[EPVAP]-1659862338980
GPR[EPVS]-1659862338980
========
if(parent==n){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862338981
GPR[SPVAP]-1659862338981
GPR[EPVAP]-1659862340875
GPR[EPVS]-1659862340875
========
if(handler.getLastChild()==n){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862340876
GPR[SPVAP]-1659862340876
GPR[EPVAP]-1659862342957
GPR[EPVS]-1659862342957
========
if(handler==n){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862342958
GPR[SPVAP]-1659862342958
GPR[EPVAP]-1659862344784
GPR[EPVS]-1659862344784
========
if(elseBlock==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862344786
GPR[SPVAP]-1659862344786
GPR[EPVAP]-1659862346736
GPR[EPVS]-1659862346736
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862346737
GPR[SPVAP]-1659862346737
GPR[EPVAP]-1659862350661
GPR[SPVATF]-1659862350661
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862354336
GPR[EPVS]-1659862354336
========
if(lastJump==cfgNode){
createEdge(catchBlock,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862354337
GPR[SPVAP]-1659862354337
GPR[EPVAP]-1659862356412
GPR[EPVS]-1659862356412
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862356413
GPR[SPVAP]-1659862356413
GPR[EPVAP]-1659862360503
GPR[SPVATF]-1659862360503
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862364096
GPR[EPVS]-1659862364096
========
connectToPossibleExceptionHandler(catchBlock,NodeUtil.getConditionExpression(node));
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862364097
GPR[SPVAP]-1659862364097
GPR[EPVAP]-1659862366041
GPR[EPVS]-1659862366041
========
if(cfgNode==null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862366043
GPR[SPVAP]-1659862366043
GPR[EPVAP]-1659862370072
GPR[SPVATF]-1659862370072
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862373761
GPR[EPVS]-1659862373761
========
if(cfgNode==null){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862373763
GPR[SPVAP]-1659862373763
GPR[EPVAP]-1659862377662
GPR[SPVATF]-1659862377663
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862381400
GPR[EPVS]-1659862381400
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(cfgNode==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862381402
GPR[SPVAP]-1659862381402
GPR[EPVAP]-1659862385415
GPR[SPVATF]-1659862385415
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862389471
GPR[EPVS]-1659862389471
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862389473
GPR[SPVAP]-1659862389473
GPR[EPVAP]-1659862393414
GPR[SPVATF]-1659862393414
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862397411
GPR[EPVS]-1659862397411
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862397412
GPR[SPVAP]-1659862397412
GPR[EPVAP]-1659862401504
GPR[SPVATF]-1659862401504
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862405552
GPR[EPVS]-1659862405552
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==cfgNode){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862405554
GPR[SPVAP]-1659862405554
GPR[EPVAP]-1659862409442
GPR[SPVATF]-1659862409442
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862413187
GPR[EPVS]-1659862413187
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862413188
GPR[SPVAP]-1659862413188
GPR[EPVAP]-1659862417309
GPR[SPVATF]-1659862417309
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862420784
GPR[EPVS]-1659862420784
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(cfgNode==null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862420785
GPR[SPVAP]-1659862420785
GPR[EPVAP]-1659862424766
GPR[SPVATF]-1659862424766
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862428346
GPR[EPVS]-1659862428346
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(cfgNode==null){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862428348
GPR[SPVAP]-1659862428348
GPR[EPVAP]-1659862432256
GPR[SPVATF]-1659862432256
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862436129
GPR[EPVS]-1659862436129
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==null){
createEdge(catchBlock,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862436130
GPR[SPVAP]-1659862436130
GPR[EPVAP]-1659862440250
GPR[SPVATF]-1659862440250
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862443824
GPR[EPVS]-1659862443824
========
createEdge(catchBlock,Branch.ON_TRUE,computeFallThrough(catchBlock.getFirstChild().getNext()));
if(lastJump==null){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862443825
GPR[SPVAP]-1659862443825
GPR[EPVAP]-1659862447938
GPR[SPVATF]-1659862447938
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862451748
GPR[EPVS]-1659862451748
========
if(parent==node){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862451750
GPR[SPVAP]-1659862451750
GPR[EPVAP]-1659862453707
GPR[EPVS]-1659862453707
========
if(parent==handler.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862453708
GPR[SPVAP]-1659862453708
GPR[EPVAP]-1659862455556
GPR[EPVS]-1659862455556
========
if(parent==handler){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862455558
GPR[SPVAP]-1659862455558
GPR[EPVAP]-1659862457491
GPR[EPVS]-1659862457491
========
if(c==c){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862457493
GPR[SPVAP]-1659862457493
GPR[EPVAP]-1659862459466
GPR[EPVS]-1659862459466
========
if(lastJump==c){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862459468
GPR[SPVAP]-1659862459468
GPR[EPVAP]-1659862461430
GPR[EPVS]-1659862461430
========
if(lastJump==last){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862461431
GPR[SPVAP]-1659862461431
GPR[EPVAP]-1659862463333
GPR[EPVS]-1659862463334
========
if(!handler.hasChildren()||block.hasOneChild()){
return false;
}
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862463335
GPR[SPVAP]-1659862463335
GPR[EPVAP]-1659862465192
GPR[EPVS]-1659862465192
========
if(resultNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862465193
GPR[SPVAP]-1659862465193
GPR[EPVAP]-1659862467289
GPR[EPVS]-1659862467290
========
Preconditions.checkArgument(handler.getLastChild().isReturn());
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862467291
GPR[SPVAP]-1659862467291
GPR[EPVAP]-1659862471220
GPR[SPVATF]-1659862471220
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862475113
GPR[EPVS]-1659862475113
========
Preconditions.checkArgument(handler.getLastChild().isReturn());
if(cfgNode==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862475114
GPR[SPVAP]-1659862475114
GPR[EPVAP]-1659862479268
GPR[SPVATF]-1659862479268
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862482828
GPR[EPVS]-1659862482828
========
Preconditions.checkArgument(handler.getLastChild().isReturn());
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862482830
GPR[SPVAP]-1659862482830
GPR[EPVAP]-1659862487159
GPR[SPVATF]-1659862487160
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862491176
GPR[EPVS]-1659862491176
========
if(firstInputRoot==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862491178
GPR[SPVAP]-1659862491178
GPR[EPVAP]-1659862493009
GPR[EPVS]-1659862493009
========
if(lhs==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862493010
GPR[SPVAP]-1659862493010
GPR[EPVAP]-1659862494948
GPR[EPVS]-1659862494948
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
mappedPaths.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862494950
GPR[SPVAP]-1659862494950
GPR[EPVAP]-1659862496914
GPR[EPVS]-1659862496915
========
if(deflt==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862496916
GPR[SPVAP]-1659862496916
GPR[EPVAP]-1659862498769
GPR[EPVS]-1659862498769
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862498770
GPR[SPVAP]-1659862498770
GPR[EPVAP]-1659862502648
GPR[SPVATF]-1659862502648
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862506752
GPR[EPVS]-1659862506752
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_FALSE,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862506754
GPR[SPVAP]-1659862506754
GPR[EPVAP]-1659862510789
GPR[SPVATF]-1659862510789
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862514428
GPR[EPVS]-1659862514428
========
if(gramps==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862514430
GPR[SPVAP]-1659862514430
GPR[EPVAP]-1659862516285
GPR[EPVS]-1659862516286
========
if(lastJump==handler.getFirstChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862516287
GPR[SPVAP]-1659862516287
GPR[EPVAP]-1659862520172
GPR[SPVATF]-1659862520172
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862524144
GPR[EPVS]-1659862524144
========
if(n==handler.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862524146
GPR[SPVAP]-1659862524146
GPR[EPVAP]-1659862526034
GPR[EPVS]-1659862526034
========
if(n==handler){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862526035
GPR[SPVAP]-1659862526035
GPR[EPVAP]-1659862527915
GPR[EPVS]-1659862527915
========
if(p.newName!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862527917
GPR[SPVAP]-1659862527917
GPR[EPVAP]-1659862529981
GPR[EPVS]-1659862529981
========
if(p.newName==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862529983
GPR[SPVAP]-1659862529983
GPR[EPVAP]-1659862532022
GPR[EPVS]-1659862532022
========
if(newName==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862532023
GPR[SPVAP]-1659862532023
GPR[EPVAP]-1659862533855
GPR[EPVS]-1659862533855
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862533856
GPR[SPVAP]-1659862533856
GPR[EPVAP]-1659862535692
GPR[EPVS]-1659862535692
========
if(lastJump==scopeRoot){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862535694
GPR[SPVAP]-1659862535694
GPR[EPVAP]-1659862537549
GPR[EPVS]-1659862537550
========
if(parent==handler.getFirstChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862537551
GPR[SPVAP]-1659862537551
GPR[EPVAP]-1659862539442
GPR[EPVS]-1659862539442
========
if(root==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862539444
GPR[SPVAP]-1659862539444
GPR[EPVAP]-1659862543579
GPR[SPVATF]-1659862543579
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862547094
GPR[EPVS]-1659862547094
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
return cfgNode;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862547095
GPR[SPVAP]-1659862547095
GPR[EPVAP]-1659862549002
GPR[EPVS]-1659862549002
========
if(root!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862549003
GPR[SPVAP]-1659862549003
GPR[EPVAP]-1659862553038
GPR[SPVATF]-1659862553038
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862557031
GPR[EPVS]-1659862557031
========
if(root==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862557033
GPR[SPVAP]-1659862557033
GPR[EPVAP]-1659862560884
GPR[SPVATF]-1659862560884
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862564588
GPR[EPVS]-1659862564588
========
if(root!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862564590
GPR[SPVAP]-1659862564590
GPR[EPVAP]-1659862568605
GPR[SPVATF]-1659862568605
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862572564
GPR[EPVS]-1659862572564
========
if(argNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862572566
GPR[SPVAP]-1659862572566
GPR[EPVAP]-1659862574556
GPR[EPVS]-1659862574556
========
if(lastJump==cfgNode){
eliminateParamsAfter(handler,cfgNode.getNext());
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862574557
GPR[SPVAP]-1659862574557
GPR[EPVAP]-1659862576520
GPR[EPVS]-1659862576520
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862576521
GPR[SPVAP]-1659862576521
GPR[EPVAP]-1659862580647
GPR[SPVATF]-1659862580647
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862584228
GPR[EPVS]-1659862584228
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862584230
GPR[SPVAP]-1659862584230
GPR[EPVAP]-1659862588352
GPR[SPVATF]-1659862588352
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862591878
GPR[EPVS]-1659862591878
========
if(lastJump==cfgNode){
return true;
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862591879
GPR[SPVAP]-1659862591879
GPR[EPVAP]-1659862593798
GPR[EPVS]-1659862593798
========
if(lastJump==cfgNode){
eliminateParamsAfter(handler,cfgNode.getNext());
cfgNode.detachFromParent();
compiler.reportCodeChange();
return true;

createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862593800
GPR[SPVAP]-1659862593800
GPR[EPVAP]-1659862595715
GPR[EPVS]-1659862595715
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
eliminateParamsAfter(handler,cfgNode.getNext());
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862595717
GPR[SPVAP]-1659862595717
GPR[EPVAP]-1659862597562
GPR[EPVS]-1659862597562
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862597563
GPR[SPVAP]-1659862597563
GPR[EPVAP]-1659862601436
GPR[SPVATF]-1659862601436
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862605284
GPR[EPVS]-1659862605284
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862605285
GPR[SPVAP]-1659862605285
GPR[EPVAP]-1659862609337
GPR[SPVATF]-1659862609337
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862613047
GPR[EPVS]-1659862613047
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
return true;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862613048
GPR[SPVAP]-1659862613048
GPR[EPVAP]-1659862614910
GPR[EPVS]-1659862614910
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
eliminateParamsAfter(handler,cfgNode.getNext());
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
return true;

finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862614911
GPR[SPVAP]-1659862614911
GPR[EPVAP]-1659862616968
GPR[EPVS]-1659862616968
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862616969
GPR[SPVAP]-1659862616969
GPR[EPVAP]-1659862621069
GPR[SPVATF]-1659862621069
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862624649
GPR[EPVS]-1659862624649
========
if(lastJump!=cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862624651
GPR[SPVAP]-1659862624651
GPR[EPVAP]-1659862628510
GPR[SPVATF]-1659862628510
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862632047
GPR[EPVS]-1659862632047
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862632048
GPR[SPVAP]-1659862632048
GPR[EPVAP]-1659862636122
GPR[SPVATF]-1659862636122
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862640200
GPR[EPVS]-1659862640200
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862640201
GPR[SPVAP]-1659862640201
GPR[EPVAP]-1659862644176
GPR[SPVATF]-1659862644176
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862648334
GPR[EPVS]-1659862648334
========
if(cfgNode!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862648335
GPR[SPVAP]-1659862648335
GPR[EPVAP]-1659862652330
GPR[SPVATF]-1659862652330
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862656224
GPR[EPVS]-1659862656224
========
if(cfgNode!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862656226
GPR[SPVAP]-1659862656226
GPR[EPVAP]-1659862660125
GPR[SPVATF]-1659862660125
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862663640
GPR[EPVS]-1659862663640
========
if(cfgNode!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862663641
GPR[SPVAP]-1659862663641
GPR[EPVAP]-1659862667608
GPR[SPVATF]-1659862667608
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862671219
GPR[EPVS]-1659862671219
========
if(cfgNode!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862671221
GPR[SPVAP]-1659862671221
GPR[EPVAP]-1659862675223
GPR[SPVATF]-1659862675223
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862679241
GPR[EPVS]-1659862679241
========
if(lastJump==null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862679243
GPR[SPVAP]-1659862679243
GPR[EPVAP]-1659862683138
GPR[SPVATF]-1659862683139
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862686761
GPR[EPVS]-1659862686761
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862686762
GPR[SPVAP]-1659862686762
GPR[EPVAP]-1659862690872
GPR[SPVATF]-1659862690872
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862694436
GPR[EPVS]-1659862694436
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862694437
GPR[SPVAP]-1659862694437
GPR[EPVAP]-1659862698279
GPR[SPVATF]-1659862698279
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862701996
GPR[EPVS]-1659862701996
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862701997
GPR[SPVAP]-1659862701997
GPR[EPVAP]-1659862706191
GPR[SPVATF]-1659862706191
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862710203
GPR[EPVS]-1659862710203
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862710204
GPR[SPVAP]-1659862710204
GPR[EPVAP]-1659862714187
GPR[SPVATF]-1659862714187
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862717917
GPR[EPVS]-1659862717917
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862717919
GPR[SPVAP]-1659862717919
GPR[EPVAP]-1659862722051
GPR[SPVATF]-1659862722051
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862725947
GPR[EPVS]-1659862725947
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862725949
GPR[SPVAP]-1659862725949
GPR[EPVAP]-1659862729852
GPR[SPVATF]-1659862729852
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862733740
GPR[EPVS]-1659862733740
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862733742
GPR[SPVAP]-1659862733742
GPR[EPVAP]-1659862737767
GPR[SPVATF]-1659862737767
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862741274
GPR[EPVS]-1659862741274
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862741276
GPR[SPVAP]-1659862741276
GPR[EPVAP]-1659862745159
GPR[SPVATF]-1659862745159
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862748757
GPR[EPVS]-1659862748757
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862748759
GPR[SPVAP]-1659862748759
GPR[EPVAP]-1659862752662
GPR[SPVATF]-1659862752662
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862756769
GPR[EPVS]-1659862756769
========
if(lastJump!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862756771
GPR[SPVAP]-1659862756771
GPR[EPVAP]-1659862760756
GPR[SPVATF]-1659862760756
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862764887
GPR[EPVS]-1659862764887
========
if(lastJump!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862764888
GPR[SPVAP]-1659862764888
GPR[EPVAP]-1659862768790
GPR[SPVATF]-1659862768790
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862772325
GPR[EPVS]-1659862772325
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862772326
GPR[SPVAP]-1659862772326
GPR[EPVAP]-1659862776295
GPR[SPVATF]-1659862776295
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862780137
GPR[EPVS]-1659862780137
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862780139
GPR[SPVAP]-1659862780139
GPR[EPVAP]-1659862784123
GPR[SPVATF]-1659862784124
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862787688
GPR[EPVS]-1659862787688
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862787689
GPR[SPVAP]-1659862787689
GPR[EPVAP]-1659862791655
GPR[SPVATF]-1659862791655
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862795605
GPR[EPVS]-1659862795605
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862795606
GPR[SPVAP]-1659862795606
GPR[EPVAP]-1659862799502
GPR[SPVATF]-1659862799502
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862803177
GPR[EPVS]-1659862803177
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862803178
GPR[SPVAP]-1659862803178
GPR[EPVAP]-1659862807123
GPR[SPVATF]-1659862807123
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862810992
GPR[EPVS]-1659862810992
========
if(lastJump!=cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862810994
GPR[SPVAP]-1659862810994
GPR[EPVAP]-1659862815158
GPR[SPVATF]-1659862815159
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862818805
GPR[EPVS]-1659862818805
========
if(lastJump!=cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862818806
GPR[SPVAP]-1659862818806
GPR[EPVAP]-1659862822798
GPR[SPVATF]-1659862822798
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862826788
GPR[EPVS]-1659862826788
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862826790
GPR[SPVAP]-1659862826790
GPR[EPVAP]-1659862830964
GPR[SPVATF]-1659862830964
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862834936
GPR[EPVS]-1659862834936
========
if(cfgNode!=null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862834938
GPR[SPVAP]-1659862834938
GPR[EPVAP]-1659862838913
GPR[SPVATF]-1659862838913
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862842795
GPR[EPVS]-1659862842795
========
if(cfgNode!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862842797
GPR[SPVAP]-1659862842797
GPR[EPVAP]-1659862846733
GPR[SPVATF]-1659862846733
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862850359
GPR[EPVS]-1659862850359
========
if(cfgNode!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862850360
GPR[SPVAP]-1659862850360
GPR[EPVAP]-1659862854387
GPR[SPVATF]-1659862854387
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862858150
GPR[EPVS]-1659862858150
========
if(cfgNode!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862858152
GPR[SPVAP]-1659862858152
GPR[EPVAP]-1659862862054
GPR[SPVATF]-1659862862054
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862865890
GPR[EPVS]-1659862865890
========
if(cfgNode!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862865891
GPR[SPVAP]-1659862865891
GPR[EPVAP]-1659862870007
GPR[SPVATF]-1659862870007
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862873888
GPR[EPVS]-1659862873888
========
if(cfgNode!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862873890
GPR[SPVAP]-1659862873890
GPR[EPVAP]-1659862877924
GPR[SPVATF]-1659862877924
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862881773
GPR[EPVS]-1659862881773
========
if(lastJump==null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862881775
GPR[SPVAP]-1659862881775
GPR[EPVAP]-1659862885766
GPR[SPVATF]-1659862885766
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862889734
GPR[EPVS]-1659862889734
========
if(lastJump==null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862889735
GPR[SPVAP]-1659862889735
GPR[EPVAP]-1659862893890
GPR[SPVATF]-1659862893890
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862897924
GPR[EPVS]-1659862897924
========
if(lastJump==null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862897926
GPR[SPVAP]-1659862897926
GPR[EPVAP]-1659862901850
GPR[SPVATF]-1659862901850
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862905576
GPR[EPVS]-1659862905576
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862905578
GPR[SPVAP]-1659862905578
GPR[EPVAP]-1659862909527
GPR[SPVATF]-1659862909527
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862913341
GPR[EPVS]-1659862913341
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862913342
GPR[SPVAP]-1659862913342
GPR[EPVAP]-1659862917356
GPR[SPVATF]-1659862917356
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862920964
GPR[EPVS]-1659862920964
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862920966
GPR[SPVAP]-1659862920966
GPR[EPVAP]-1659862924861
GPR[SPVATF]-1659862924862
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862928529
GPR[EPVS]-1659862928529
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862928531
GPR[SPVAP]-1659862928531
GPR[EPVAP]-1659862932508
GPR[SPVATF]-1659862932508
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862936249
GPR[EPVS]-1659862936249
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862936250
GPR[SPVAP]-1659862936250
GPR[EPVAP]-1659862940377
GPR[SPVATF]-1659862940378
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862944263
GPR[EPVS]-1659862944263
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862944265
GPR[SPVAP]-1659862944265
GPR[EPVAP]-1659862948206
GPR[SPVATF]-1659862948206
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862952160
GPR[EPVS]-1659862952160
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862952162
GPR[SPVAP]-1659862952162
GPR[EPVAP]-1659862956177
GPR[SPVATF]-1659862956177
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862959876
GPR[EPVS]-1659862959876
========
if(lastJump!=null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862959878
GPR[SPVAP]-1659862959878
GPR[EPVAP]-1659862963790
GPR[SPVATF]-1659862963790
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862967816
GPR[EPVS]-1659862967816
========
if(lastJump!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862967817
GPR[SPVAP]-1659862967817
GPR[EPVAP]-1659862972087
GPR[SPVATF]-1659862972088
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862975795
GPR[EPVS]-1659862975795
========
if(lastJump!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862975796
GPR[SPVAP]-1659862975796
GPR[EPVAP]-1659862979742
GPR[SPVATF]-1659862979742
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862983437
GPR[EPVS]-1659862983437
========
if(lastJump!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862983438
GPR[SPVAP]-1659862983438
GPR[EPVAP]-1659862987478
GPR[SPVATF]-1659862987478
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862991473
GPR[EPVS]-1659862991473
========
if(lastJump!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862991474
GPR[SPVAP]-1659862991474
GPR[EPVAP]-1659862995619
GPR[SPVATF]-1659862995619
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659862999297
GPR[EPVS]-1659862999297
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659862999298
GPR[SPVAP]-1659862999298
GPR[EPVAP]-1659863003206
GPR[SPVATF]-1659863003206
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863007296
GPR[EPVS]-1659863007296
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863007297
GPR[SPVAP]-1659863007297
GPR[EPVAP]-1659863011366
GPR[SPVATF]-1659863011366
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863014985
GPR[EPVS]-1659863014985
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863014986
GPR[SPVAP]-1659863014986
GPR[EPVAP]-1659863019039
GPR[SPVATF]-1659863019039
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863023124
GPR[EPVS]-1659863023124
========
if(lastJump!=cfgNode){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863023125
GPR[SPVAP]-1659863023125
GPR[EPVAP]-1659863027148
GPR[SPVATF]-1659863027148
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863030942
GPR[EPVS]-1659863030942
========
if(lastJump!=cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863030944
GPR[SPVAP]-1659863030944
GPR[EPVAP]-1659863034912
GPR[SPVATF]-1659863034912
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863038680
GPR[EPVS]-1659863038680
========
if(cfgNode!=null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863038682
GPR[SPVAP]-1659863038682
GPR[EPVAP]-1659863042775
GPR[SPVATF]-1659863042775
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863046691
GPR[EPVS]-1659863046691
========
if(cfgNode!=null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863046693
GPR[SPVAP]-1659863046693
GPR[EPVAP]-1659863050641
GPR[SPVATF]-1659863050641
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863054369
GPR[EPVS]-1659863054369
========
if(cfgNode!=null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863054370
GPR[SPVAP]-1659863054370
GPR[EPVAP]-1659863058541
GPR[SPVATF]-1659863058541
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863062169
GPR[EPVS]-1659863062169
========
if(cfgNode!=null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863062171
GPR[SPVAP]-1659863062171
GPR[EPVAP]-1659863066239
GPR[SPVATF]-1659863066239
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863069827
GPR[EPVS]-1659863069827
========
if(lastJump==null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863069828
GPR[SPVAP]-1659863069828
GPR[EPVAP]-1659863073952
GPR[SPVATF]-1659863073952
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863077535
GPR[EPVS]-1659863077535
========
if(lastJump==null){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863077536
GPR[SPVAP]-1659863077536
GPR[EPVAP]-1659863081505
GPR[SPVATF]-1659863081506
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863085044
GPR[EPVS]-1659863085044
========
if(lastJump==null){
cfgNode.detachFromParent();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863085045
GPR[SPVAP]-1659863085045
GPR[EPVAP]-1659863089182
GPR[SPVATF]-1659863089182
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863093134
GPR[EPVS]-1659863093134
========
if(lastJump==null){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863093135
GPR[SPVAP]-1659863093135
GPR[EPVAP]-1659863097350
GPR[SPVATF]-1659863097350
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863100961
GPR[EPVS]-1659863100961
========
if(lastJump==cfgNode){
cfgNode.detachFromParent();
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cfgNode.detachFromParent();
handler.getLastChild().addChildrenToFront(lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863100962
GPR[SPVAP]-1659863100962
GPR[EPVAP]-1659863104873
GPR[SPVATF]-1659863104873
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863108451
GPR[EPVS]-1659863108451
========
if(grandparent==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863108453
GPR[SPVAP]-1659863108453
GPR[EPVAP]-1659863110305
GPR[EPVS]-1659863110305
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(decl.node,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863110306
GPR[SPVAP]-1659863110306
GPR[EPVAP]-1659863112168
GPR[EPVS]-1659863112168
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
info=new NamedInfo();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863112170
GPR[SPVAP]-1659863112170
GPR[EPVAP]-1659863114110
GPR[EPVS]-1659863114110
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
fs=new FunctionState();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863114112
GPR[SPVAP]-1659863114112
GPR[EPVAP]-1659863115994
GPR[EPVS]-1659863115994
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
referenceInfo=new ReferenceCollection();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863115995
GPR[SPVAP]-1659863115995
GPR[EPVAP]-1659863117859
GPR[EPVS]-1659863117859
========
if(null==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863117861
GPR[SPVAP]-1659863117861
GPR[EPVAP]-1659863121708
GPR[SPVATF]-1659863121708
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863125531
GPR[EPVS]-1659863125531
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
result=new Reference(this,lastJump);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863125533
GPR[SPVAP]-1659863125533
GPR[EPVAP]-1659863127485
GPR[EPVS]-1659863127485
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
nameGenerator.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863127486
GPR[SPVAP]-1659863127486
GPR[EPVAP]-1659863129411
GPR[EPVS]-1659863129411
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
assignments.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863129413
GPR[SPVAP]-1659863129413
GPR[EPVAP]-1659863131296
GPR[EPVS]-1659863131296
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
properties.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863131297
GPR[SPVAP]-1659863131297
GPR[EPVAP]-1659863133162
GPR[EPVS]-1659863133162
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
typeSet=new UnionTypeBuilder(this,PROPERTY_CHECKING_UNION_SIZE);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863133163
GPR[SPVAP]-1659863133163
GPR[EPVAP]-1659863135376
GPR[EPVS]-1659863135376
========
if(newRoot==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863135378
GPR[SPVAP]-1659863135378
GPR[EPVAP]-1659863137308
GPR[EPVS]-1659863137308
========
getRoot().getLastChild().addChildToBack(cfgNode);
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863137309
GPR[SPVAP]-1659863137309
GPR[EPVAP]-1659863139239
GPR[EPVS]-1659863139239
========
if(rvalue==rvalue){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863139241
GPR[SPVAP]-1659863139241
GPR[EPVAP]-1659863141096
GPR[EPVS]-1659863141096
========
if(rvalue==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863141097
GPR[SPVAP]-1659863141097
GPR[EPVAP]-1659863143023
GPR[EPVS]-1659863143023
========
if(lastJump==rvalue){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863143025
GPR[SPVAP]-1659863143025
GPR[EPVAP]-1659863145052
GPR[EPVS]-1659863145052
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),lastJump);
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863145054
GPR[SPVAP]-1659863145054
GPR[EPVAP]-1659863146901
GPR[EPVS]-1659863146901
========
if(varParent==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863146903
GPR[SPVAP]-1659863146903
GPR[EPVAP]-1659863148761
GPR[EPVS]-1659863148761
========
if(replacement==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863148762
GPR[SPVAP]-1659863148762
GPR[EPVAP]-1659863150628
GPR[EPVS]-1659863150628
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
return false;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863150629
GPR[SPVAP]-1659863150629
GPR[EPVAP]-1659863152724
GPR[EPVS]-1659863152724
========
if(lastJump!=node){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863152726
GPR[SPVAP]-1659863152726
GPR[EPVAP]-1659863154608
GPR[EPVS]-1659863154608
========
if(destParent==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863154609
GPR[SPVAP]-1659863154609
GPR[EPVAP]-1659863156572
GPR[EPVS]-1659863156572
========
if(grandparent==grandparent){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863156574
GPR[SPVAP]-1659863156574
GPR[EPVAP]-1659863158684
GPR[EPVS]-1659863158684
========
if(lastJump==grandparent){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863158685
GPR[SPVAP]-1659863158685
GPR[EPVAP]-1659863160758
GPR[EPVS]-1659863160758
========
if(closurePass==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863160760
GPR[SPVAP]-1659863160760
GPR[EPVAP]-1659863162622
GPR[EPVS]-1659863162622
========
if(lastJump==locale){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863162624
GPR[SPVAP]-1659863162624
GPR[EPVAP]-1659863164509
GPR[EPVS]-1659863164510
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(CLOSURE_LOCALE_CONSTANT_NAME,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863164511
GPR[SPVAP]-1659863164511
GPR[EPVAP]-1659863166453
GPR[EPVS]-1659863166453
========
if(value==value){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863166455
GPR[SPVAP]-1659863166455
GPR[EPVAP]-1659863168376
GPR[EPVS]-1659863168377
========
if(value==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863168378
GPR[SPVAP]-1659863168378
GPR[EPVAP]-1659863170232
GPR[EPVS]-1659863170232
========
if(lastJump==value){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863170233
GPR[SPVAP]-1659863170233
GPR[EPVAP]-1659863172201
GPR[EPVS]-1659863172201
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
jsn=new JsName();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863172202
GPR[SPVAP]-1659863172202
GPR[EPVAP]-1659863174041
GPR[EPVS]-1659863174041
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
cached=jsString(catchBlock.getString(),shouldTraverseFunctions);
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863174043
GPR[SPVAP]-1659863174043
GPR[EPVAP]-1659863176109
GPR[EPVS]-1659863176109
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(t.type,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863176110
GPR[SPVAP]-1659863176110
GPR[EPVAP]-1659863178079
GPR[EPVS]-1659863178079
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
stat=new Stat();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863178080
GPR[SPVAP]-1659863178080
GPR[EPVAP]-1659863179935
GPR[EPVS]-1659863179935
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
if(!handler.isEmpty()){
stat.extraInfo=new int[handler.size()];
}
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863179936
GPR[SPVAP]-1659863179936
GPR[EPVAP]-1659863181895
GPR[EPVS]-1659863181895
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
stat=new Stat();
if(!handler.isEmpty()){
stat.extraInfo=new int[handler.size()];
}

finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863181897
GPR[SPVAP]-1659863181897
GPR[EPVAP]-1659863183718
GPR[EPVS]-1659863183718
========
if(lastJump==cfgNode){
removeChild(catchBlock.getParent(),parent);
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863183719
GPR[SPVAP]-1659863183719
GPR[EPVAP]-1659863185682
GPR[EPVS]-1659863185682
========
if(parent==catchBlock.getLastChild()){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863185683
GPR[SPVAP]-1659863185683
GPR[EPVAP]-1659863187641
GPR[EPVS]-1659863187641
========
if(parent==catchBlock){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863187642
GPR[SPVAP]-1659863187642
GPR[EPVAP]-1659863189592
GPR[EPVS]-1659863189592
========
if(INVALIDATED==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863189597
GPR[SPVAP]-1659863189597
GPR[EPVAP]-1659863191796
GPR[EPVS]-1659863191796
========
if(lastJump==cfgNode){
if(NodeUtil.mayHaveSideEffects(handler.getFirstChild(),compiler)){
replacement=IR.comma(handler.removeFirstChild(),info.value.cloneTree()).srcref(n);
}
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863191797
GPR[SPVAP]-1659863191797
GPR[EPVAP]-1659863193640
GPR[EPVS]-1659863193640
========
if(lastJump==cfgNode){
if(NodeUtil.mayHaveSideEffects(handler.getFirstChild(),compiler)){
replacement=IR.comma(handler.removeFirstChild(),info.value.cloneTree()).srcref(n);
}
compiler.reportCodeChange();

createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863193642
GPR[SPVAP]-1659863193642
GPR[EPVAP]-1659863195571
GPR[EPVS]-1659863195571
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
catchBlock.replaceChild(handler,info.value.cloneTree());
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863195573
GPR[SPVAP]-1659863195573
GPR[EPVAP]-1659863197538
GPR[EPVS]-1659863197538
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
compiler.reportCodeChange();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863197539
GPR[SPVAP]-1659863197539
GPR[EPVAP]-1659863201591
GPR[SPVATF]-1659863201591
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863205288
GPR[EPVS]-1659863205289
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
catchBlock.replaceChild(handler,info.value.cloneTree());
compiler.reportCodeChange();

finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863205290
GPR[SPVAP]-1659863205290
GPR[EPVAP]-1659863207275
GPR[EPVS]-1659863207276
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
IR.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863207277
GPR[SPVAP]-1659863207277
GPR[EPVAP]-1659863209128
GPR[EPVS]-1659863209128
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
compiler.reportCodeChange();
IR.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863209129
GPR[SPVAP]-1659863209129
GPR[EPVAP]-1659863211346
GPR[EPVS]-1659863211347
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
compiler.reportCodeChange();
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863211348
GPR[SPVAP]-1659863211348
GPR[EPVAP]-1659863215372
GPR[SPVATF]-1659863215372
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863218977
GPR[EPVS]-1659863218977
========
if(lastJump==cfgNode){
compiler.reportCodeChange();
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
compiler.reportCodeChange();
IR.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863218978
GPR[SPVAP]-1659863218978
GPR[EPVAP]-1659863220866
GPR[EPVS]-1659863220866
========
if(fnNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863220867
GPR[SPVAP]-1659863220867
GPR[EPVAP]-1659863222710
GPR[EPVS]-1659863222710
========
if(lastJump==name){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863222711
GPR[SPVAP]-1659863222711
GPR[EPVAP]-1659863224577
GPR[EPVS]-1659863224577
========
if(catchBlock.getJSDocInfo()==null||!catchBlock.isGetProp()||!member.getFirstChild().isThis()){
return ;
}
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863224578
GPR[SPVAP]-1659863224578
GPR[EPVAP]-1659863226506
GPR[EPVS]-1659863226506
========
if(value==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
return ;
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863226508
GPR[SPVAP]-1659863226508
GPR[EPVAP]-1659863228728
GPR[EPVS]-1659863228728
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
globalNames.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863228730
GPR[SPVAP]-1659863228730
GPR[EPVAP]-1659863230604
GPR[EPVS]-1659863230604
========
if(conditionalResultNode==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863230606
GPR[SPVAP]-1659863230606
GPR[EPVAP]-1659863232677
GPR[EPVS]-1659863232677
========
if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
result=trySimplifyUnusedResult(handler.getFirstChild());
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863232679
GPR[SPVAP]-1659863232679
GPR[EPVAP]-1659863234636
GPR[EPVS]-1659863234636
========
case Token.AND :

if(lastJump==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863234637
GPR[SPVAP]-1659863234637
GPR[EPVAP]-1659863236291
GPR[EPVS]-1659863236291
========
if(p.newName!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863236292
GPR[SPVAP]-1659863236292
GPR[EPVAP]-1659863238228
GPR[EPVS]-1659863238228
========
if(newName!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863238229
GPR[SPVAP]-1659863238229
GPR[EPVAP]-1659863240093
GPR[EPVS]-1659863240093
========
if(lastJump!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863240094
GPR[SPVAP]-1659863240094
GPR[EPVAP]-1659863242003
GPR[EPVS]-1659863242003
========
if(p.newName!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863242005
GPR[SPVAP]-1659863242005
GPR[EPVAP]-1659863243968
GPR[EPVS]-1659863243968
========
if(p.newName==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863243969
GPR[SPVAP]-1659863243969
GPR[EPVAP]-1659863245856
GPR[EPVS]-1659863245856
========
if(p.newName==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863245857
GPR[SPVAP]-1659863245857
GPR[EPVAP]-1659863247739
GPR[EPVS]-1659863247739
========
if(newName==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863247740
GPR[SPVAP]-1659863247740
GPR[EPVAP]-1659863249801
GPR[EPVS]-1659863249801
========
if(lastJump==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863249802
GPR[SPVAP]-1659863249802
GPR[EPVAP]-1659863251633
GPR[EPVS]-1659863251634
========
if(newName==cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863251635
GPR[SPVAP]-1659863251635
GPR[EPVAP]-1659863253650
GPR[EPVS]-1659863253650
========
if(p.newName!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863253651
GPR[SPVAP]-1659863253651
GPR[EPVAP]-1659863255581
GPR[EPVS]-1659863255581
========
if(newName!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(lastJump,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863255582
GPR[SPVAP]-1659863255582
GPR[EPVAP]-1659863257454
GPR[EPVS]-1659863257455
========
if(lastJump!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863257456
GPR[SPVAP]-1659863257456
GPR[EPVAP]-1659863259496
GPR[EPVS]-1659863259496
========
if(newName!=cfgNode){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863259497
GPR[SPVAP]-1659863259497
GPR[EPVAP]-1659863261319
GPR[EPVS]-1659863261319
========
if(p.newName==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863261321
GPR[SPVAP]-1659863261321
GPR[EPVAP]-1659863263232
GPR[EPVS]-1659863263232
========
if(newName==null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863263233
GPR[SPVAP]-1659863263233
GPR[EPVAP]-1659863265223
GPR[EPVS]-1659863265223
========
if(newName!=null){
createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());
}else {
finallyMap.put(p.oldName,handler.getLastChild());
}

========
MM Copying to MM
GPR[SPVS]-1659863265225
GPR[SPVAP]-1659863265225
GPR[EPVAP]-1659863267080
GPR[EPVS]-1659863267080
GPR[ESUN]-1659863267081
GPR[SSUN]-1659863267081
com.google.javascript.jscomp.ControlFlowAnalysis,491
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getFirstChild()==parent){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863269571
GPR[SPVAP]-1659863269571
GPR[EPVAP]-1659863278353
GPR[SPVATF]-1659863278353
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863281971
GPR[EPVS]-1659863281972
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(parent.isVar())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863281973
GPR[SPVAP]-1659863281973
GPR[EPVAP]-1659863286007
GPR[SPVATF]-1659863286007
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863289988
GPR[EPVS]-1659863289988
========
if(parent==null||parent.isFunction()||(node==cfa.root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863289990
GPR[SPVAP]-1659863289990
GPR[EPVAP]-1659863291958
GPR[EPVS]-1659863291958
========
if(parent==null||parent.isFunction()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863291960
GPR[SPVAP]-1659863291960
GPR[EPVAP]-1659863295793
GPR[SPVATF]-1659863295794
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863303561
GPR[EPVS]-1659863303561
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent!=null&&grandparent.isFunction()&&parent.isBlock()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863303562
GPR[SPVAP]-1659863303562
GPR[EPVAP]-1659863305475
GPR[EPVS]-1659863305476
========
Preconditions.checkState(parent!=null,"Cannot find continue target.");
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863305477
GPR[SPVAP]-1659863305477
GPR[EPVAP]-1659863309496
GPR[SPVATF]-1659863309496
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863313339
GPR[EPVS]-1659863313339
========
Preconditions.checkState(astPositionCounter==1||parent.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863313340
GPR[SPVAP]-1659863313340
GPR[EPVAP]-1659863315271
GPR[EPVS]-1659863315272
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.isStatementBlock(parent)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863315273
GPR[SPVAP]-1659863315273
GPR[EPVAP]-1659863319258
GPR[SPVATF]-1659863319258
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863322806
GPR[EPVS]-1659863322806
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863322807
GPR[SPVAP]-1659863322807
GPR[EPVAP]-1659863326795
GPR[SPVATF]-1659863326795
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863330476
GPR[EPVS]-1659863330476
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
newChild.parent=this;
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863330478
GPR[SPVAP]-1659863330478
GPR[EPVAP]-1659863332445
GPR[EPVS]-1659863332445
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
newChild.next=root;
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863332446
GPR[SPVAP]-1659863332446
GPR[EPVAP]-1659863334306
GPR[EPVS]-1659863334306
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
first=root;
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863334307
GPR[SPVAP]-1659863334307
GPR[EPVAP]-1659863336232
GPR[EPVS]-1659863336232
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
newChild.parent=this;
newChild.next=root;
first=root;

return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863336233
GPR[SPVAP]-1659863336233
GPR[EPVAP]-1659863338081
GPR[EPVS]-1659863338082
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863338083
GPR[SPVAP]-1659863338083
GPR[EPVAP]-1659863339947
GPR[EPVS]-1659863339947
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863339949
GPR[SPVAP]-1659863339949
GPR[EPVAP]-1659863341797
GPR[EPVS]-1659863341797
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isScript()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863341798
GPR[SPVAP]-1659863341798
GPR[EPVAP]-1659863345834
GPR[SPVATF]-1659863345834
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863349439
GPR[EPVS]-1659863349439
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isReturn()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863349441
GPR[SPVAP]-1659863349441
GPR[EPVAP]-1659863353323
GPR[SPVATF]-1659863353323
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863357110
GPR[EPVS]-1659863357110
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.isFunctionDeclaration(parent)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863357112
GPR[SPVAP]-1659863357112
GPR[EPVAP]-1659863361126
GPR[SPVATF]-1659863361126
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863365003
GPR[EPVS]-1659863365003
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&node==parent.getLastChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863365004
GPR[SPVAP]-1659863365004
GPR[EPVAP]-1659863369093
GPR[SPVATF]-1659863369094
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863372753
GPR[EPVS]-1659863372753
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getFirstChild()==node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863372755
GPR[SPVAP]-1659863372755
GPR[EPVAP]-1659863376631
GPR[SPVATF]-1659863376631
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863380549
GPR[EPVS]-1659863380549
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&node.getFirstChild()==parent){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863380551
GPR[SPVAP]-1659863380551
GPR[EPVAP]-1659863384511
GPR[SPVATF]-1659863384511
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863388175
GPR[EPVS]-1659863388175
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getLastChild()!=node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863388176
GPR[SPVAP]-1659863388176
GPR[EPVAP]-1659863392266
GPR[SPVATF]-1659863392266
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863396204
GPR[EPVS]-1659863396204
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getChildAtIndex(1)==node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863396206
GPR[SPVAP]-1659863396206
GPR[EPVAP]-1659863400368
GPR[SPVATF]-1659863400368
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863404302
GPR[EPVS]-1659863404302
========
if(parent!=null&&!parent.isExprResult()&&!parent.isScript()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863404303
GPR[SPVAP]-1659863404303
GPR[EPVAP]-1659863408205
GPR[SPVATF]-1659863408205
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863415762
GPR[EPVS]-1659863415762
========
if(parent!=null&&!parent.isExprResult()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863415763
GPR[SPVAP]-1659863415763
GPR[EPVAP]-1659863419812
GPR[SPVATF]-1659863419812
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863423394
GPR[EPVS]-1659863423394
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&parent.getFirstChild()==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863423395
GPR[SPVAP]-1659863423395
GPR[EPVAP]-1659863427429
GPR[SPVATF]-1659863427429
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863435122
GPR[EPVS]-1659863435122
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==n&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863435124
GPR[SPVAP]-1659863435124
GPR[EPVAP]-1659863437027
GPR[EPVS]-1659863437027
========
if(node.isGetProp()&&n==parent.getFirstChild()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863437029
GPR[SPVAP]-1659863437029
GPR[EPVAP]-1659863438887
GPR[EPVS]-1659863438887
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&node==parent.getFirstChild()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863438888
GPR[SPVAP]-1659863438888
GPR[EPVAP]-1659863442802
GPR[SPVATF]-1659863442802
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863450369
GPR[EPVS]-1659863450369
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==parent.getFirstChild()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863450370
GPR[SPVAP]-1659863450370
GPR[EPVAP]-1659863454331
GPR[SPVATF]-1659863454331
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863457932
GPR[EPVS]-1659863457932
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==parent&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863457933
GPR[SPVAP]-1659863457933
GPR[EPVAP]-1659863462185
GPR[SPVATF]-1659863462185
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863466117
GPR[EPVS]-1659863466117
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&parent.getFirstChild()==parent&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863466119
GPR[SPVAP]-1659863466119
GPR[EPVAP]-1659863470487
GPR[SPVATF]-1659863470487
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863474011
GPR[EPVS]-1659863474011
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(node.isOr())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863474012
GPR[SPVAP]-1659863474012
GPR[EPVAP]-1659863478151
GPR[SPVATF]-1659863478151
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863481688
GPR[EPVS]-1659863481688
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isInc()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863481690
GPR[SPVAP]-1659863481690
GPR[EPVAP]-1659863485938
GPR[SPVATF]-1659863485938
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863489647
GPR[EPVS]-1659863489647
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==getprop&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863489648
GPR[SPVAP]-1659863489648
GPR[EPVAP]-1659863491612
GPR[EPVS]-1659863491612
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&parent.getFirstChild()==node&&!parent.isInc()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863491614
GPR[SPVAP]-1659863491614
GPR[EPVAP]-1659863495455
GPR[SPVATF]-1659863495455
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863502765
GPR[EPVS]-1659863502765
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!isCallToScopeMethod(parent)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863502766
GPR[SPVAP]-1659863502766
GPR[EPVAP]-1659863504808
GPR[EPVS]-1659863504808
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.evaluatesToLocalValue(node.getFirstChild())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863504810
GPR[SPVAP]-1659863504810
GPR[EPVAP]-1659863508688
GPR[SPVATF]-1659863508688
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863512587
GPR[EPVS]-1659863512587
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(NodeUtil.isExprAssign(root)||parent.isName())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863512588
GPR[SPVAP]-1659863512588
GPR[EPVAP]-1659863516506
GPR[SPVATF]-1659863516506
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863520178
GPR[EPVS]-1659863520178
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
handleFunctionInputs(parent);
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863520179
GPR[SPVAP]-1659863520179
GPR[EPVAP]-1659863522308
GPR[EPVS]-1659863522308
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getLastChild()==node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863522310
GPR[SPVAP]-1659863522310
GPR[EPVAP]-1659863526315
GPR[SPVATF]-1659863526315
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863530247
GPR[EPVS]-1659863530247
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isFunction()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863530248
GPR[SPVAP]-1659863530248
GPR[EPVAP]-1659863534170
GPR[SPVATF]-1659863534170
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863538002
GPR[EPVS]-1659863538002
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&node==parent.getFirstChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863538004
GPR[SPVAP]-1659863538004
GPR[EPVAP]-1659863541871
GPR[SPVATF]-1659863541871
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863545904
GPR[EPVS]-1659863545904
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)!=node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863545906
GPR[SPVAP]-1659863545906
GPR[EPVAP]-1659863549956
GPR[SPVATF]-1659863549956
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863557467
GPR[EPVS]-1659863557467
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&parent.getFirstChild()!=node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863557468
GPR[SPVAP]-1659863557468
GPR[EPVAP]-1659863561390
GPR[SPVATF]-1659863561390
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863569112
GPR[EPVS]-1659863569112
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)!=n&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863569113
GPR[SPVAP]-1659863569113
GPR[EPVAP]-1659863571030
GPR[EPVS]-1659863571030
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!(parent.isVar()&&!parent.hasOneChild())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863571032
GPR[SPVAP]-1659863571032
GPR[EPVAP]-1659863574887
GPR[SPVATF]-1659863574887
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863578675
GPR[EPVS]-1659863578675
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isCall()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863578676
GPR[SPVAP]-1659863578676
GPR[EPVAP]-1659863582711
GPR[SPVATF]-1659863582711
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863586433
GPR[EPVS]-1659863586433
========
if(astPositionCounter!=node.getType()||getChildCount()!=node.getChildCount()||this.getClass()!=node.getClass()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863586435
GPR[SPVAP]-1659863586435
GPR[EPVAP]-1659863588313
GPR[EPVS]-1659863588314
========
if(astPositionCounter!=node.getType()||getChildCount()!=node.getChildCount()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863588315
GPR[SPVAP]-1659863588315
GPR[EPVAP]-1659863590177
GPR[EPVS]-1659863590177
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&this.getClass()!=node.getClass()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863590178
GPR[SPVAP]-1659863590178
GPR[EPVAP]-1659863592097
GPR[EPVS]-1659863592097
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&getChildCount()!=node.getChildCount()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863592098
GPR[SPVAP]-1659863592098
GPR[EPVAP]-1659863594023
GPR[EPVS]-1659863594023
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&getChildCount()==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863594024
GPR[SPVAP]-1659863594024
GPR[EPVAP]-1659863595904
GPR[EPVS]-1659863595904
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&root.getFirstChild()==node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863595906
GPR[SPVAP]-1659863595906
GPR[EPVAP]-1659863599931
GPR[SPVATF]-1659863599931
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863603736
GPR[EPVS]-1659863603736
========
Preconditions.checkState(node.getFirstChild()==parent);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863603738
GPR[SPVAP]-1659863603738
GPR[EPVAP]-1659863607715
GPR[SPVATF]-1659863607715
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863611300
GPR[EPVS]-1659863611300
========
Preconditions.checkState(node.getFirstChild()==parent);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&root.getFirstChild()==node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863611301
GPR[SPVAP]-1659863611301
GPR[EPVAP]-1659863615188
GPR[SPVATF]-1659863615188
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863619143
GPR[EPVS]-1659863619143
========
if(node!=null&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863619146
GPR[SPVAP]-1659863619146
GPR[EPVAP]-1659863623067
GPR[SPVATF]-1659863623067
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863626707
GPR[EPVS]-1659863626707
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863626708
GPR[SPVAP]-1659863626708
GPR[EPVAP]-1659863630625
GPR[SPVATF]-1659863630626
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863634645
GPR[EPVS]-1659863634645
========
if(node!=null&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863634646
GPR[SPVAP]-1659863634646
GPR[EPVAP]-1659863638544
GPR[SPVATF]-1659863638544
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863642124
GPR[EPVS]-1659863642124
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&node!=null&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863642125
GPR[SPVAP]-1659863642125
GPR[EPVAP]-1659863646125
GPR[SPVATF]-1659863646125
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863653521
GPR[EPVS]-1659863653521
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==null&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863653523
GPR[SPVAP]-1659863653523
GPR[EPVAP]-1659863657670
GPR[SPVATF]-1659863657670
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863661198
GPR[EPVS]-1659863661198
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)!=node&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863661199
GPR[SPVAP]-1659863661199
GPR[EPVAP]-1659863665241
GPR[SPVATF]-1659863665241
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863669061
GPR[EPVS]-1659863669061
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)!=null&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863669062
GPR[SPVAP]-1659863669062
GPR[EPVAP]-1659863673014
GPR[SPVATF]-1659863673014
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863680401
GPR[EPVS]-1659863680401
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&node!=null&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863680402
GPR[SPVAP]-1659863680402
GPR[EPVAP]-1659863684355
GPR[SPVATF]-1659863684355
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863687928
GPR[EPVS]-1659863687928
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==null&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863687930
GPR[SPVAP]-1659863687930
GPR[EPVAP]-1659863692011
GPR[SPVATF]-1659863692011
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863695791
GPR[EPVS]-1659863695791
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)!=null&&!NodeUtil.isFunctionDeclaration(root)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863695792
GPR[SPVAP]-1659863695792
GPR[EPVAP]-1659863700090
GPR[SPVATF]-1659863700090
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863703909
GPR[EPVS]-1659863703909
========
Preconditions.checkState(node.isName());
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863703912
GPR[SPVAP]-1659863703912
GPR[EPVAP]-1659863707900
GPR[SPVATF]-1659863707900
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863711756
GPR[EPVS]-1659863711756
========
connectToPossibleExceptionHandler(node,node.getFirstChild());
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863711758
GPR[SPVAP]-1659863711758
GPR[EPVAP]-1659863715803
GPR[SPVATF]-1659863715803
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863719340
GPR[EPVS]-1659863719340
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isNew()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863719343
GPR[SPVAP]-1659863719343
GPR[EPVAP]-1659863723479
GPR[SPVATF]-1659863723479
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863727459
GPR[EPVS]-1659863727459
========
if(parent!=null&&sibling.isString()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863727461
GPR[SPVAP]-1659863727461
GPR[EPVAP]-1659863729384
GPR[EPVS]-1659863729384
========
if((parent.isName()||parent.isAssign())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863729385
GPR[SPVAP]-1659863729385
GPR[EPVAP]-1659863733555
GPR[SPVATF]-1659863733555
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863737520
GPR[EPVS]-1659863737520
========
if(node.isBlock()&&parent!=null&&parent.isAssign()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863737522
GPR[SPVAP]-1659863737522
GPR[EPVAP]-1659863741377
GPR[SPVATF]-1659863741378
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863745483
GPR[EPVS]-1659863745483
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isFunction()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863745485
GPR[SPVAP]-1659863745485
GPR[EPVAP]-1659863749548
GPR[SPVATF]-1659863749548
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863753700
GPR[EPVS]-1659863753700
========
Preconditions.checkArgument(node.isGetProp());
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863753702
GPR[SPVAP]-1659863753702
GPR[EPVAP]-1659863757640
GPR[SPVATF]-1659863757640
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863761172
GPR[EPVS]-1659863761172
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.functionCallHasSideEffects(node,compiler)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863761174
GPR[SPVAP]-1659863761174
GPR[EPVAP]-1659863765070
GPR[SPVATF]-1659863765070
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863768760
GPR[EPVS]-1659863768760
========
if(node.isNew()&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863768761
GPR[SPVAP]-1659863768761
GPR[EPVAP]-1659863772820
GPR[SPVATF]-1659863772820
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863776940
GPR[EPVS]-1659863776940
========
if(node.isNew()&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.functionCallHasSideEffects(node,compiler)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863776941
GPR[SPVAP]-1659863776941
GPR[EPVAP]-1659863780893
GPR[SPVATF]-1659863780893
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863784827
GPR[EPVS]-1659863784827
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isExprResult()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863784829
GPR[SPVAP]-1659863784829
GPR[EPVAP]-1659863789005
GPR[SPVATF]-1659863789005
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863792539
GPR[EPVS]-1659863792539
========
if((node.getFirstChild()==null)||!functionNode.isFunction()){
return false;
}
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863792540
GPR[SPVAP]-1659863792540
GPR[EPVAP]-1659863794516
GPR[EPVS]-1659863794516
========
Preconditions.checkNotNull(node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863794519
GPR[SPVAP]-1659863794519
GPR[EPVAP]-1659863798494
GPR[SPVATF]-1659863798494
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863802300
GPR[EPVS]-1659863802300
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(parent.getJSType() instanceof EnumType)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863802302
GPR[SPVAP]-1659863802302
GPR[EPVAP]-1659863804275
GPR[EPVS]-1659863804275
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&NodeUtil.isGet(node)&&!parent.isGetProp()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863804277
GPR[SPVAP]-1659863804277
GPR[EPVAP]-1659863808247
GPR[SPVATF]-1659863808247
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863812060
GPR[EPVS]-1659863812060
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(parent.isNew()&&shouldTraverseFunctions)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863812062
GPR[SPVAP]-1659863812062
GPR[EPVAP]-1659863816020
GPR[SPVATF]-1659863816020
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863820008
GPR[EPVS]-1659863820008
========
Preconditions.checkState(root!=null);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863820009
GPR[SPVAP]-1659863820009
GPR[EPVAP]-1659863823910
GPR[SPVATF]-1659863823911
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863827456
GPR[EPVS]-1659863827456
========
exceptionHandler.push(node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863827457
GPR[SPVAP]-1659863827457
GPR[EPVAP]-1659863831373
GPR[SPVATF]-1659863831373
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863835343
GPR[EPVS]-1659863835343
========
Preconditions.checkState(root!=null);
exceptionHandler.push(node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863835344
GPR[SPVAP]-1659863835344
GPR[EPVAP]-1659863839271
GPR[SPVATF]-1659863839271
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863843080
GPR[EPVS]-1659863843080
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.mayHaveSideEffects(node.getFirstChild())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863843082
GPR[SPVAP]-1659863843082
GPR[EPVAP]-1659863847148
GPR[SPVATF]-1659863847148
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863850931
GPR[EPVS]-1659863850931
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!mayHaveSideEffects(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863850932
GPR[SPVAP]-1659863850932
GPR[EPVAP]-1659863852839
GPR[EPVS]-1659863852839
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&shouldTraverseFunctions){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863852841
GPR[SPVAP]-1659863852841
GPR[EPVAP]-1659863856777
GPR[SPVATF]-1659863856777
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863860628
GPR[EPVS]-1659863860628
========
if(node.isCall()&&n.getChildCount()==2&&"require".equals(n.getFirstChild().getQualifiedName())&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863860629
GPR[SPVAP]-1659863860629
GPR[EPVAP]-1659863862572
GPR[EPVS]-1659863862572
========
if(node.isCall()&&n.getChildCount()==2&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863862573
GPR[SPVAP]-1659863862573
GPR[EPVAP]-1659863864422
GPR[EPVS]-1659863864422
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!jsdocContainsDeclarations(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863864424
GPR[SPVAP]-1659863864424
GPR[EPVAP]-1659863866500
GPR[EPVS]-1659863866500
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isExprResult()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863866501
GPR[SPVAP]-1659863866501
GPR[EPVAP]-1659863870345
GPR[SPVATF]-1659863870345
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863873921
GPR[EPVS]-1659863873921
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863873922
GPR[SPVAP]-1659863873922
GPR[EPVAP]-1659863877836
GPR[SPVATF]-1659863877836
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863881519
GPR[EPVS]-1659863881519
========
Preconditions.checkArgument(parent!=node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863881520
GPR[SPVAP]-1659863881520
GPR[EPVAP]-1659863885396
GPR[SPVATF]-1659863885396
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863889072
GPR[EPVS]-1659863889072
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isExprResult()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863889073
GPR[SPVAP]-1659863889073
GPR[EPVAP]-1659863893006
GPR[SPVATF]-1659863893006
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863896893
GPR[EPVS]-1659863896893
========
Preconditions.checkArgument(parent!=node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isExprResult()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863896894
GPR[SPVAP]-1659863896894
GPR[EPVAP]-1659863900815
GPR[SPVATF]-1659863900815
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863904726
GPR[EPVS]-1659863904726
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
Preconditions.checkArgument(parent!=node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863904728
GPR[SPVAP]-1659863904728
GPR[EPVAP]-1659863908793
GPR[SPVATF]-1659863908793
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863912751
GPR[EPVS]-1659863912751
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
Preconditions.checkArgument(parent!=node);
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isExprResult()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863912753
GPR[SPVAP]-1659863912753
GPR[EPVAP]-1659863916780
GPR[SPVATF]-1659863916781
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863920307
GPR[EPVS]-1659863920307
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&node!=parent.getLastChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863920309
GPR[SPVAP]-1659863920309
GPR[EPVAP]-1659863924335
GPR[SPVATF]-1659863924335
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863927902
GPR[EPVS]-1659863927902
========
if(node.getParent()!=null&&node.isFunction()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863927903
GPR[SPVAP]-1659863927903
GPR[EPVAP]-1659863931793
GPR[SPVATF]-1659863931793
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863935415
GPR[EPVS]-1659863935415
========
Preconditions.checkArgument(node.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863935417
GPR[SPVAP]-1659863935417
GPR[EPVAP]-1659863939358
GPR[SPVATF]-1659863939358
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863943452
GPR[EPVS]-1659863943452
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.evaluatesToLocalValue(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863943454
GPR[SPVAP]-1659863943454
GPR[EPVAP]-1659863947355
GPR[SPVATF]-1659863947355
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863951092
GPR[EPVS]-1659863951092
========
connectToPossibleExceptionHandler(node,NodeUtil.getConditionExpression(node));
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863951094
GPR[SPVAP]-1659863951094
GPR[EPVAP]-1659863955120
GPR[SPVATF]-1659863955120
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863959172
GPR[EPVS]-1659863959172
========
if(parent!=null&&parent.isScript()&&node.isExprResult()&&!root.getLastChild().isAssign()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863959174
GPR[SPVAP]-1659863959174
GPR[EPVAP]-1659863963197
GPR[SPVATF]-1659863963197
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863967075
GPR[EPVS]-1659863967075
========
if(parent!=null&&grandparent.isScript()&&node.isExprResult()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863967077
GPR[SPVAP]-1659863967077
GPR[EPVAP]-1659863968990
GPR[EPVS]-1659863968990
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!root.getLastChild().isAssign()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863968991
GPR[SPVAP]-1659863968991
GPR[EPVAP]-1659863973129
GPR[SPVATF]-1659863973129
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863976678
GPR[EPVS]-1659863976678
========
if(parent!=null&&grandparent.isScript()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863976681
GPR[SPVAP]-1659863976681
GPR[EPVAP]-1659863978771
GPR[EPVS]-1659863978771
========
if(node.isBlock()&&parent!=null&&parent.isScript()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863978772
GPR[SPVAP]-1659863978772
GPR[EPVAP]-1659863982645
GPR[SPVATF]-1659863982645
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863986715
GPR[EPVS]-1659863986715
========
if(node.isBlock()&&parent!=null&&grandparent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863986717
GPR[SPVAP]-1659863986717
GPR[EPVAP]-1659863988591
GPR[EPVS]-1659863988591
========
if(node.isBlock()&&parent!=null&&parent.isScript()&&NodeUtil.getCatchBlock(parent)==node&&!root.getLastChild().isAssign()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863988592
GPR[SPVAP]-1659863988592
GPR[EPVAP]-1659863992605
GPR[SPVATF]-1659863992605
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659863996587
GPR[EPVS]-1659863996587
========
if(!isReduceableFunctionExpression(node)){
return node;
}
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863996589
GPR[SPVAP]-1659863996589
GPR[EPVAP]-1659863998451
GPR[EPVS]-1659863998451
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent==parent.getParent().getFirstChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659863998453
GPR[SPVAP]-1659863998453
GPR[EPVAP]-1659864002339
GPR[SPVATF]-1659864002339
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864005871
GPR[EPVS]-1659864005871
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.isForIn(parent)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864005873
GPR[SPVAP]-1659864005873
GPR[EPVAP]-1659864010181
GPR[SPVATF]-1659864010181
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864013775
GPR[EPVS]-1659864013775
========
n2clone.parent=root;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864013776
GPR[SPVAP]-1659864013776
GPR[EPVAP]-1659864015740
GPR[EPVS]-1659864015740
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.getFirstChild().getFirstChild().isAssign()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864015741
GPR[SPVAP]-1659864015741
GPR[EPVAP]-1659864019823
GPR[SPVATF]-1659864019823
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864023613
GPR[EPVS]-1659864023613
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&root.getFirstChild()!=node){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864023614
GPR[SPVAP]-1659864023614
GPR[EPVAP]-1659864027415
GPR[SPVATF]-1659864027415
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864030987
GPR[EPVS]-1659864030987
========
if(node.isInstanceOf()&&parent.getLastChild()==parent&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864030989
GPR[SPVAP]-1659864030989
GPR[EPVAP]-1659864034859
GPR[SPVATF]-1659864034859
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864038483
GPR[EPVS]-1659864038483
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&node.getLastChild()==parent&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864038484
GPR[SPVAP]-1659864038484
GPR[EPVAP]-1659864042454
GPR[SPVATF]-1659864042454
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864046076
GPR[EPVS]-1659864046076
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
checkedClass.hasInstanceOfReference=true;
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864046078
GPR[SPVAP]-1659864046078
GPR[EPVAP]-1659864047953
GPR[EPVS]-1659864047953
========
if(parent.isAssign()&&parent.getFirstChild()==parent&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864047954
GPR[SPVAP]-1659864047954
GPR[EPVAP]-1659864051996
GPR[SPVATF]-1659864051996
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864055819
GPR[EPVS]-1659864055819
========
processDirectives(node,new JsonML(TagType.BlockStmt));
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864055820
GPR[SPVAP]-1659864055820
GPR[EPVAP]-1659864057709
GPR[EPVS]-1659864057709
========
for(Node root : node.children()){
processNode(child,new JsonML(TagType.BlockStmt));
}
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864057711
GPR[SPVAP]-1659864057711
GPR[EPVAP]-1659864059697
GPR[EPVS]-1659864059697
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isFor()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864059698
GPR[SPVAP]-1659864059698
GPR[EPVAP]-1659864063881
GPR[SPVATF]-1659864063881
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864067768
GPR[EPVS]-1659864067768
========
child.next=null;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864067769
GPR[SPVAP]-1659864067769
GPR[EPVAP]-1659864069746
GPR[EPVS]-1659864069746
========
child.parent=null;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864069748
GPR[SPVAP]-1659864069748
GPR[EPVAP]-1659864071828
GPR[EPVS]-1659864071828
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(parent.isBlock()||parent.isScript())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864071831
GPR[SPVAP]-1659864071831
GPR[EPVAP]-1659864075764
GPR[SPVATF]-1659864075764
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864079457
GPR[EPVS]-1659864079457
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&(parent.isExprResult()||parent.isFor())){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864079458
GPR[SPVAP]-1659864079458
GPR[EPVAP]-1659864083352
GPR[SPVATF]-1659864083352
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864086885
GPR[EPVS]-1659864086885
========
if(parent!=null&&parent.isVar()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864086887
GPR[SPVAP]-1659864086887
GPR[EPVAP]-1659864090968
GPR[SPVATF]-1659864090968
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864094574
GPR[EPVS]-1659864094574
========
if(shouldTraverseFunctions&&node.getSourceFileName()!=null&&node.getLineno()>0&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864094576
GPR[SPVAP]-1659864094576
GPR[EPVAP]-1659864098718
GPR[SPVATF]-1659864098718
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864102643
GPR[EPVS]-1659864102643
========
if(shouldTraverseFunctions&&node.getSourceFileName()!=null&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864102644
GPR[SPVAP]-1659864102644
GPR[EPVAP]-1659864106511
GPR[SPVATF]-1659864106511
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864110512
GPR[EPVS]-1659864110512
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.getParent().isLabel()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864110513
GPR[SPVAP]-1659864110513
GPR[EPVAP]-1659864114533
GPR[SPVATF]-1659864114533
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864118101
GPR[EPVS]-1659864118101
========
if(parent!=null&&parent.isFor()&&parent.getChildCount()<4){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864118103
GPR[SPVAP]-1659864118103
GPR[EPVAP]-1659864121936
GPR[SPVATF]-1659864121936
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864126196
GPR[EPVS]-1659864126196
========
if(parent!=null&&parent.isFor()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864126197
GPR[SPVAP]-1659864126197
GPR[EPVAP]-1659864130346
GPR[SPVATF]-1659864130346
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864134060
GPR[EPVS]-1659864134060
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&parent.getChildCount()<4){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864134062
GPR[SPVAP]-1659864134062
GPR[EPVAP]-1659864138055
GPR[SPVATF]-1659864138055
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864141618
GPR[EPVS]-1659864141618
========
if(parent==null||!parent.isFunction()||root==parent.getFirstChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864141620
GPR[SPVAP]-1659864141620
GPR[EPVAP]-1659864145849
GPR[SPVATF]-1659864145849
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864152990
GPR[EPVS]-1659864152990
========
if(parent==null||!parent.isFunction()&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864152991
GPR[SPVAP]-1659864152991
GPR[EPVAP]-1659864157027
GPR[SPVATF]-1659864157027
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864160651
GPR[EPVS]-1659864160651
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&root==parent.getFirstChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864160652
GPR[SPVAP]-1659864160652
GPR[EPVAP]-1659864164671
GPR[SPVATF]-1659864164671
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864168664
GPR[EPVS]-1659864168664
========
if(parent==null||!parent.isFunction()&&root==parent.getFirstChild()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864168665
GPR[SPVAP]-1659864168665
GPR[EPVAP]-1659864172707
GPR[SPVATF]-1659864172707
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864176710
GPR[EPVS]-1659864176710
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!parent.isGetProp()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864176712
GPR[SPVAP]-1659864176712
GPR[EPVAP]-1659864180601
GPR[SPVATF]-1659864180601
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864184515
GPR[EPVS]-1659864184515
========
newChild.next=child.next;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864184516
GPR[SPVAP]-1659864184516
GPR[EPVAP]-1659864186426
GPR[EPVS]-1659864186426
========
newChild.parent=this;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864186427
GPR[SPVAP]-1659864186427
GPR[EPVAP]-1659864188281
GPR[EPVS]-1659864188281
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isBlock()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864188283
GPR[SPVAP]-1659864188283
GPR[EPVAP]-1659864192207
GPR[SPVATF]-1659864192208
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864196201
GPR[EPVS]-1659864196201
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
createEdge(node,Branch.ON_EX,root);
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864196203
GPR[SPVAP]-1659864196203
GPR[EPVAP]-1659864200224
GPR[SPVATF]-1659864200224
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864203844
GPR[EPVS]-1659864203844
========
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!node.isName()){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864203846
GPR[SPVAP]-1659864203846
GPR[EPVAP]-1659864207831
GPR[SPVATF]-1659864207831
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864211428
GPR[EPVS]-1659864211428
========
child.next=null;
child.parent=null;
if(node.isBlock()&&parent!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659864211429
GPR[SPVAP]-1659864211429
GPR[EPVAP]-1659864213390
GPR[EPVS]-1659864213390
GPR[ESUN]-1659864213391
GPR[SSUN]-1659864213391
com.google.javascript.jscomp.ControlFlowAnalysis,766
GPR[ESUN]-1659864214014
GPR[SSUN]-1659864214014
com.google.javascript.jscomp.ControlFlowAnalysis,764
========
if(oldPseudoNameMap!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864216292
GPR[SPVAP]-1659864216292
GPR[EPVAP]-1659864219884
GPR[EPVS]-1659864219884
========
if(cfa==null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864219886
GPR[SPVAP]-1659864219886
GPR[EPVAP]-1659864227729
GPR[SPVATF]-1659864227730
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864235567
GPR[EPVS]-1659864235567
========
if(parent==null||parent.isFunction()||(cfa!=null&&node==cfa.root)){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864235572
GPR[SPVAP]-1659864235572
GPR[EPVAP]-1659864239771
GPR[SPVATF]-1659864239771
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864247793
GPR[EPVS]-1659864247793
========
if(parent==null){
return null;
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864247796
GPR[SPVAP]-1659864247796
GPR[EPVAP]-1659864251735
GPR[SPVATF]-1659864251735
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864255282
GPR[EPVS]-1659864255282
========
if(parent==null){
return null;
}
if(cfa==null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864255283
GPR[SPVAP]-1659864255284
GPR[EPVAP]-1659864259515
GPR[SPVATF]-1659864259515
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864267330
GPR[EPVS]-1659864267330
========
if(affinityGraph!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864267332
GPR[SPVAP]-1659864267332
GPR[EPVAP]-1659864269229
GPR[EPVS]-1659864269229
========
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
compiler.reportCodeChange();
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864269248
GPR[SPVAP]-1659864269248
GPR[EPVAP]-1659864271288
GPR[EPVS]-1659864271288
========
if(cfa!=null){
Preconditions.checkState(fromNode.getString().equals(p.oldName));
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864271289
GPR[SPVAP]-1659864271289
GPR[EPVAP]-1659864273152
GPR[EPVS]-1659864273152
========
if(cfa!=TernaryValue.UNKNOWN){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864273158
GPR[SPVAP]-1659864273158
GPR[EPVAP]-1659864275030
GPR[EPVS]-1659864275030
========
if(cfa!=fromNode){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864275033
GPR[SPVAP]-1659864275033
GPR[EPVAP]-1659864276862
GPR[EPVS]-1659864276862
========
if(cfa==fromNode){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864276865
GPR[SPVAP]-1659864276865
GPR[EPVAP]-1659864278719
GPR[EPVS]-1659864278719
========
if(!NodeUtil.isExprAssign(parent)){
return false;
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864278724
GPR[SPVAP]-1659864278724
GPR[EPVAP]-1659864280583
GPR[EPVS]-1659864280583
========
if(PRIVATE!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864280585
GPR[SPVAP]-1659864280585
GPR[EPVAP]-1659864282478
GPR[EPVS]-1659864282478
========
if(globalSymbolNamespace!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864282482
GPR[SPVAP]-1659864282482
GPR[EPVAP]-1659864284320
GPR[EPVS]-1659864284320
========
if(!fromNode.isVar()){
return ;
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}

========
MM Copying to MM
GPR[SPVS]-1659864284324
GPR[SPVAP]-1659864284324
GPR[EPVAP]-1659864286183
GPR[EPVS]-1659864286183
========
if(parent.getLastChild()==fromNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864288970
GPR[SPVAP]-1659864288970
GPR[EPVAP]-1659864293043
GPR[SPVATF]-1659864293043
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864300072
GPR[EPVS]-1659864300072
========
if(parent.getLastChild()==cfgNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864300074
GPR[SPVAP]-1659864300074
GPR[EPVAP]-1659864302142
GPR[EPVS]-1659864302142
========
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864302143
GPR[SPVAP]-1659864302143
GPR[EPVAP]-1659864306208
GPR[SPVATF]-1659864306208
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864313705
GPR[EPVS]-1659864313705
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864313707
GPR[SPVAP]-1659864313707
GPR[EPVAP]-1659864317831
GPR[SPVATF]-1659864317831
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864325439
GPR[EPVS]-1659864325439
========
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864325441
GPR[SPVAP]-1659864325441
GPR[EPVAP]-1659864329479
GPR[SPVATF]-1659864329479
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864333005
GPR[EPVS]-1659864333005
========
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864333007
GPR[SPVAP]-1659864333007
GPR[EPVAP]-1659864337018
GPR[SPVATF]-1659864337018
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864344522
GPR[EPVS]-1659864344522
========
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864344523
GPR[SPVAP]-1659864344523
GPR[EPVAP]-1659864346474
GPR[EPVS]-1659864346474
========
if(fromNode.getFirstChild()!=null){
createEdge(fromNode,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864346476
GPR[SPVAP]-1659864346476
GPR[EPVAP]-1659864348401
GPR[EPVS]-1659864348401
========
if(parent.isDo()&&parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864348403
GPR[SPVAP]-1659864348403
GPR[EPVAP]-1659864352282
GPR[SPVATF]-1659864352282
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864359357
GPR[EPVS]-1659864359357
========
if(switchNode.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864359359
GPR[SPVAP]-1659864359359
GPR[EPVAP]-1659864361295
GPR[EPVS]-1659864361295
========
if(parent.getLastChild()==previousCase){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864361297
GPR[SPVAP]-1659864361297
GPR[EPVAP]-1659864363138
GPR[EPVS]-1659864363138
========
if(parent.getFirstChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864363141
GPR[SPVAP]-1659864363141
GPR[EPVAP]-1659864367027
GPR[SPVATF]-1659864367027
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864370840
GPR[EPVS]-1659864370840
========
if(parent.getFirstChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864370842
GPR[SPVAP]-1659864370842
GPR[EPVAP]-1659864374940
GPR[SPVATF]-1659864374940
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864382635
GPR[EPVS]-1659864382635
========
if(!NodeUtil.isExprAssign(fromNode)){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864382636
GPR[SPVAP]-1659864382637
GPR[EPVAP]-1659864384675
GPR[EPVS]-1659864384675
========
if((parent.getLastChild()==null)||!functionNode.isFunction()){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864384677
GPR[SPVAP]-1659864384677
GPR[EPVAP]-1659864386539
GPR[EPVS]-1659864386539
========
createEdge(fromNode,Branch.ON_TRUE,computeFallThrough(parent));
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864386541
GPR[SPVAP]-1659864386541
GPR[EPVAP]-1659864388412
GPR[EPVS]-1659864388412
========
connectToPossibleExceptionHandler(fromNode,NodeUtil.getConditionExpression(node));
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864388414
GPR[SPVAP]-1659864388414
GPR[EPVAP]-1659864390292
GPR[EPVS]-1659864390292
========
if(parent.getLastChild()==scopes){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864390294
GPR[SPVAP]-1659864390294
GPR[EPVAP]-1659864392567
GPR[EPVS]-1659864392567
========
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864392571
GPR[SPVAP]-1659864392571
GPR[EPVAP]-1659864396623
GPR[SPVATF]-1659864396623
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864404056
GPR[EPVS]-1659864404056
========
if(parent.getLastChild()==lhs){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864404058
GPR[SPVAP]-1659864404058
GPR[EPVAP]-1659864405999
GPR[EPVS]-1659864405999
========
if(parent.getLastChild()==child){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864406001
GPR[SPVAP]-1659864406001
GPR[EPVAP]-1659864407959
GPR[EPVS]-1659864407959
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864407962
GPR[SPVAP]-1659864407962
GPR[EPVAP]-1659864409877
GPR[EPVS]-1659864409877
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864409879
GPR[SPVAP]-1659864409879
GPR[EPVAP]-1659864411701
GPR[EPVS]-1659864411701
========
if(node==null){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864411702
GPR[SPVAP]-1659864411702
GPR[EPVAP]-1659864413697
GPR[EPVS]-1659864413697
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.getFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864413699
GPR[SPVAP]-1659864413699
GPR[EPVAP]-1659864417590
GPR[SPVATF]-1659864417590
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864421304
GPR[EPVS]-1659864421304
========
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.getFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864421305
GPR[SPVAP]-1659864421305
GPR[EPVAP]-1659864425374
GPR[SPVATF]-1659864425374
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864433503
GPR[EPVS]-1659864433503
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.getFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864433505
GPR[SPVAP]-1659864433505
GPR[EPVAP]-1659864437442
GPR[SPVATF]-1659864437442
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864445710
GPR[EPVS]-1659864445710
========
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.getFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864445711
GPR[SPVAP]-1659864445711
GPR[EPVAP]-1659864449737
GPR[SPVATF]-1659864449737
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864453708
GPR[EPVS]-1659864453708
========
if(parent.getLastChild()==Token.FUNCTION){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864453711
GPR[SPVAP]-1659864453711
GPR[EPVAP]-1659864455684
GPR[EPVS]-1659864455684
========
if(parent.getLastChild()==FUNCTION){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864455686
GPR[SPVAP]-1659864455686
GPR[EPVAP]-1659864457629
GPR[EPVS]-1659864457629
========
if(parent.getLastChild()==parameters){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864457631
GPR[SPVAP]-1659864457631
GPR[EPVAP]-1659864459458
GPR[EPVS]-1659864459458
========
if(parent.getLastChild()==anonymousNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864459460
GPR[SPVAP]-1659864459460
GPR[EPVAP]-1659864461317
GPR[EPVS]-1659864461317
========
if(parent.getLastChild()!=n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864461318
GPR[SPVAP]-1659864461318
GPR[EPVAP]-1659864463408
GPR[EPVS]-1659864463408
========
if(parent.getFirstChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864463410
GPR[SPVAP]-1659864463410
GPR[EPVAP]-1659864465278
GPR[EPVS]-1659864465278
========
if(parent.getFirstChild()!=n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864465280
GPR[SPVAP]-1659864465280
GPR[EPVAP]-1659864467326
GPR[EPVS]-1659864467326
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.removeFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864467328
GPR[SPVAP]-1659864467328
GPR[EPVAP]-1659864471607
GPR[SPVATF]-1659864471608
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864475781
GPR[EPVS]-1659864475781
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.removeChildAfter(node);
}

========
MM Copying to MM
GPR[SPVS]-1659864475782
GPR[SPVAP]-1659864475782
GPR[EPVAP]-1659864480027
GPR[SPVATF]-1659864480027
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864483795
GPR[EPVS]-1659864483795
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.removeFirstChild();
}

========
MM Copying to MM
GPR[SPVS]-1659864483797
GPR[SPVAP]-1659864483797
GPR[EPVAP]-1659864487921
GPR[SPVATF]-1659864487921
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864495537
GPR[EPVS]-1659864495537
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return parent.removeChildAfter(node);
}

========
MM Copying to MM
GPR[SPVS]-1659864495539
GPR[SPVAP]-1659864495539
GPR[EPVAP]-1659864499519
GPR[SPVATF]-1659864499519
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864506940
GPR[EPVS]-1659864506940
========
if(parent.getLastChild()==fromNode.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864506942
GPR[SPVAP]-1659864506942
GPR[EPVAP]-1659864510907
GPR[SPVATF]-1659864510907
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864518764
GPR[EPVS]-1659864518764
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864518766
GPR[SPVAP]-1659864518766
GPR[EPVAP]-1659864522731
GPR[SPVATF]-1659864522731
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864526339
GPR[EPVS]-1659864526339
========
if(parent.getJSType()!=null){
fromNode.setJSType(type);
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864526340
GPR[SPVAP]-1659864526340
GPR[EPVAP]-1659864528279
GPR[EPVS]-1659864528279
========
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864528280
GPR[SPVAP]-1659864528280
GPR[EPVAP]-1659864532345
GPR[SPVATF]-1659864532345
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864536339
GPR[EPVS]-1659864536339
========
compiler.reportCodeChange();
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864536340
GPR[SPVAP]-1659864536340
GPR[EPVAP]-1659864538393
GPR[EPVS]-1659864538393
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864538395
GPR[SPVAP]-1659864538395
GPR[EPVAP]-1659864540517
GPR[EPVS]-1659864540517
========
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864540518
GPR[SPVAP]-1659864540518
GPR[EPVAP]-1659864542592
GPR[EPVS]-1659864542592
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864542594
GPR[SPVAP]-1659864542594
GPR[EPVAP]-1659864546446
GPR[SPVATF]-1659864546446
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864554189
GPR[EPVS]-1659864554189
========
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864554190
GPR[SPVAP]-1659864554190
GPR[EPVAP]-1659864558294
GPR[SPVATF]-1659864558294
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864561991
GPR[EPVS]-1659864561991
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864561993
GPR[SPVAP]-1659864561993
GPR[EPVAP]-1659864566216
GPR[SPVATF]-1659864566216
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864573732
GPR[EPVS]-1659864573732
========
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864573734
GPR[SPVAP]-1659864573734
GPR[EPVAP]-1659864577663
GPR[SPVATF]-1659864577663
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864581540
GPR[EPVS]-1659864581540
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864581541
GPR[SPVAP]-1659864581541
GPR[EPVAP]-1659864585491
GPR[SPVATF]-1659864585491
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864589291
GPR[EPVS]-1659864589291
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864589292
GPR[SPVAP]-1659864589292
GPR[EPVAP]-1659864591150
GPR[EPVS]-1659864591150
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864591151
GPR[SPVAP]-1659864591151
GPR[EPVAP]-1659864595141
GPR[SPVATF]-1659864595141
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864599314
GPR[EPVS]-1659864599314
========
NodeUtil.copyNameAnnotations(parent.getLastChild(),fromNode);
parent.replaceChild(parent,fromNode);
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864599315
GPR[SPVAP]-1659864599315
GPR[EPVAP]-1659864603273
GPR[SPVATF]-1659864603273
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864606931
GPR[EPVS]-1659864606931
========
if(parent.getLastChild()==finallyNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864606934
GPR[SPVAP]-1659864606934
GPR[EPVAP]-1659864608777
GPR[EPVS]-1659864608777
========
if(parent.getFirstChild().getNext()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864608780
GPR[SPVAP]-1659864608780
GPR[EPVAP]-1659864612664
GPR[SPVATF]-1659864612664
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864620157
GPR[EPVS]-1659864620157
========
if(parent.getFirstChild().getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864620158
GPR[SPVAP]-1659864620158
GPR[EPVAP]-1659864624203
GPR[SPVATF]-1659864624204
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864632081
GPR[EPVS]-1659864632081
========
if(parent.getFirstChild().getNext()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864632082
GPR[SPVAP]-1659864632082
GPR[EPVAP]-1659864636040
GPR[SPVATF]-1659864636040
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864639707
GPR[EPVS]-1659864639707
========
if(parent.getFirstChild().getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864639708
GPR[SPVAP]-1659864639708
GPR[EPVAP]-1659864643883
GPR[SPVATF]-1659864643883
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864647877
GPR[EPVS]-1659864647877
========
if(parent.getFirstChild().getNext()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864647878
GPR[SPVAP]-1659864647878
GPR[EPVAP]-1659864649761
GPR[EPVS]-1659864649761
========
if(parent.getFirstChild().getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864649762
GPR[SPVAP]-1659864649762
GPR[EPVAP]-1659864651727
GPR[EPVS]-1659864651727
========
if(parent.getFirstChild().getNext()!=n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864651729
GPR[SPVAP]-1659864651729
GPR[EPVAP]-1659864653575
GPR[EPVS]-1659864653575
========
if(parent.getFirstChild().getLastChild()!=n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864653577
GPR[SPVAP]-1659864653577
GPR[EPVAP]-1659864655468
GPR[EPVS]-1659864655468
========
if(parent.getLastChild()==fromNode.getLastChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864655470
GPR[SPVAP]-1659864655470
GPR[EPVAP]-1659864659405
GPR[SPVATF]-1659864659405
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864666801
GPR[EPVS]-1659864666801
========
if(parent.getQualifiedName()==null){
return null;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864666804
GPR[SPVAP]-1659864666804
GPR[EPVAP]-1659864670729
GPR[SPVATF]-1659864670729
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864674343
GPR[EPVS]-1659864674343
========
if(parent.getQualifiedName()==null){
return null;
}
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864674344
GPR[SPVAP]-1659864674344
GPR[EPVAP]-1659864678611
GPR[SPVATF]-1659864678611
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864682604
GPR[EPVS]-1659864682604
========
Preconditions.checkState(parent.isObjectLit());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864682606
GPR[SPVAP]-1659864682606
GPR[EPVAP]-1659864686830
GPR[SPVATF]-1659864686830
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864690542
GPR[EPVS]-1659864690542
========
Preconditions.checkState(parent.isObjectLit());
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864690544
GPR[SPVAP]-1659864690544
GPR[EPVAP]-1659864694486
GPR[SPVATF]-1659864694486
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864698115
GPR[EPVS]-1659864698115
========
if(parent.getLastChild()==rValue){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864698116
GPR[SPVAP]-1659864698116
GPR[EPVAP]-1659864700244
GPR[EPVS]-1659864700244
========
if(parent.getLastChild()==onlyAffectsClassDef){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864700246
GPR[SPVAP]-1659864700246
GPR[EPVAP]-1659864702149
GPR[EPVS]-1659864702149
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return node.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864702151
GPR[SPVAP]-1659864702151
GPR[EPVAP]-1659864706010
GPR[SPVATF]-1659864706010
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864709740
GPR[EPVS]-1659864709740
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return node.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864709742
GPR[SPVAP]-1659864709742
GPR[EPVAP]-1659864713575
GPR[SPVATF]-1659864713575
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864721192
GPR[EPVS]-1659864721192
========
Preconditions.checkState(fromNode.hasOneChild());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864721194
GPR[SPVAP]-1659864721194
GPR[EPVAP]-1659864725387
GPR[SPVATF]-1659864725387
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864729242
GPR[EPVS]-1659864729242
========
Preconditions.checkState(fromNode.hasOneChild());
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864729243
GPR[SPVAP]-1659864729243
GPR[EPVAP]-1659864733291
GPR[SPVATF]-1659864733291
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864740875
GPR[EPVS]-1659864740875
========
if(parent.getLastChild()==Token.ASSIGN){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864740877
GPR[SPVAP]-1659864740877
GPR[EPVAP]-1659864742827
GPR[EPVS]-1659864742827
========
if(parent.getLastChild()==ASSIGN){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864742829
GPR[SPVAP]-1659864742829
GPR[EPVAP]-1659864744878
GPR[EPVS]-1659864744878
========
if(parent.getChildAtIndex(1)==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864744880
GPR[SPVAP]-1659864744880
GPR[EPVAP]-1659864748882
GPR[SPVATF]-1659864748882
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864756569
GPR[EPVS]-1659864756569
========
if(parent.getChildAtIndex(1)!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864756570
GPR[SPVAP]-1659864756570
GPR[EPVAP]-1659864760560
GPR[SPVATF]-1659864760560
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864764103
GPR[EPVS]-1659864764103
========
if(parent.getChildAtIndex(1)==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864764104
GPR[SPVAP]-1659864764104
GPR[EPVAP]-1659864765968
GPR[EPVS]-1659864765968
========
if(parent.getChildAtIndex(1)!=n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864765969
GPR[SPVAP]-1659864765969
GPR[EPVAP]-1659864767834
GPR[EPVS]-1659864767834
========
if(parent.getLastChild()==parent.getFirstChild().getNext()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864767836
GPR[SPVAP]-1659864767836
GPR[EPVAP]-1659864771856
GPR[SPVATF]-1659864771856
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864779054
GPR[EPVS]-1659864779054
========
if(parent.getLastChild()==firstNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864779056
GPR[SPVAP]-1659864779056
GPR[EPVAP]-1659864781200
GPR[EPVS]-1659864781200
========
if(fromNode==null){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864781202
GPR[SPVAP]-1659864781202
GPR[EPVAP]-1659864783172
GPR[EPVS]-1659864783172
========
getRoot().getLastChild().addChildToBack(fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864783174
GPR[SPVAP]-1659864783174
GPR[EPVAP]-1659864785115
GPR[EPVS]-1659864785116
========
if(parent.getLastChild()==subExpression){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864785117
GPR[SPVAP]-1659864785117
GPR[EPVAP]-1659864786992
GPR[EPVS]-1659864786992
========
if(parent.getLastChild()==next){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864786994
GPR[SPVAP]-1659864786994
GPR[EPVAP]-1659864788844
GPR[EPVS]-1659864788844
========
if(node==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864788846
GPR[SPVAP]-1659864788846
GPR[EPVAP]-1659864792656
GPR[SPVATF]-1659864792656
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864800512
GPR[EPVS]-1659864800512
========
if(node!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864800514
GPR[SPVAP]-1659864800514
GPR[EPVAP]-1659864804556
GPR[SPVATF]-1659864804556
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864808303
GPR[EPVS]-1659864808303
========
if(parent.getLastChild()==ControlFlowAnalysis.computeFollowNode(parent)){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864808305
GPR[SPVAP]-1659864808305
GPR[EPVAP]-1659864812202
GPR[SPVATF]-1659864812202
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864819588
GPR[EPVS]-1659864819588
========
if(parent.getLastChild()==follow){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864819589
GPR[SPVAP]-1659864819589
GPR[EPVAP]-1659864821479
GPR[EPVS]-1659864821479
========
root=skipFinallyNodes(follow);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864821480
GPR[SPVAP]-1659864821480
GPR[EPVAP]-1659864823430
GPR[EPVS]-1659864823430
========
if(parent.getLastChild()!=ControlFlowAnalysis.computeFollowNode(parent)){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864823431
GPR[SPVAP]-1659864823431
GPR[EPVAP]-1659864827367
GPR[SPVATF]-1659864827367
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864831155
GPR[EPVS]-1659864831155
========
if(parent.getLastChild()==lastParam){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864831157
GPR[SPVAP]-1659864831157
GPR[EPVAP]-1659864833076
GPR[EPVS]-1659864833076
========
if(ref.node.getJSDocInfo()==null&&parent.isVar()&&parent.hasOneChild()){
info=parent.getJSDocInfo();
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864833078
GPR[SPVAP]-1659864833078
GPR[EPVAP]-1659864834999
GPR[EPVS]-1659864834999
========
if(parent.getLastChild()==parent.getParent()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864835002
GPR[SPVAP]-1659864835002
GPR[EPVAP]-1659864838974
GPR[SPVATF]-1659864838974
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864846075
GPR[EPVS]-1659864846075
========
Preconditions.checkState(node.isName());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864846077
GPR[SPVAP]-1659864846077
GPR[EPVAP]-1659864850126
GPR[SPVATF]-1659864850126
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864853920
GPR[EPVS]-1659864853920
========
if(parent.isCall()&&parent.getFirstChild()==node){
return true;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864853922
GPR[SPVAP]-1659864853922
GPR[EPVAP]-1659864855907
GPR[EPVS]-1659864855907
========
Preconditions.checkState(node.isName());
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864855908
GPR[SPVAP]-1659864855908
GPR[EPVAP]-1659864859778
GPR[SPVATF]-1659864859778
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864863869
GPR[EPVS]-1659864863869
========
if(parent.getLastChild()==gramps){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864863870
GPR[SPVAP]-1659864863870
GPR[EPVAP]-1659864865868
GPR[EPVS]-1659864865868
========
if(NodeUtil.isStatement(node)){
return true;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864865869
GPR[SPVAP]-1659864865869
GPR[EPVAP]-1659864867818
GPR[EPVS]-1659864867818
========
if(NodeUtil.isExprAssign(parent)&&parent.getChildAtIndex(1)==node){
return true;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864867820
GPR[SPVAP]-1659864867820
GPR[EPVAP]-1659864869871
GPR[EPVS]-1659864869871
========
if(parent.getLastChild()==left){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864869873
GPR[SPVAP]-1659864869873
GPR[EPVAP]-1659864871699
GPR[EPVS]-1659864871699
========
if(parent.getLastChild()==firstParam){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864871700
GPR[SPVAP]-1659864871700
GPR[EPVAP]-1659864873567
GPR[EPVS]-1659864873567
========
if(parent.getLastChild()==inlineLocalFunctions){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864873570
GPR[SPVAP]-1659864873570
GPR[EPVAP]-1659864875426
GPR[EPVS]-1659864875426
========
if(parent.getLastChild()==flags){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864875428
GPR[SPVAP]-1659864875428
GPR[EPVAP]-1659864877361
GPR[EPVS]-1659864877361
========
if(parent.getLastChild()==node.getNext()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864877362
GPR[SPVAP]-1659864877362
GPR[EPVAP]-1659864881292
GPR[SPVATF]-1659864881292
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864888752
GPR[EPVS]-1659864888752
========
if(parent.getLastChild()==rvalue){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864888753
GPR[SPVAP]-1659864888753
GPR[EPVAP]-1659864890699
GPR[EPVS]-1659864890699
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864890701
GPR[SPVAP]-1659864890701
GPR[EPVAP]-1659864894906
GPR[SPVATF]-1659864894906
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864899348
GPR[EPVS]-1659864899348
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864899350
GPR[SPVAP]-1659864899350
GPR[EPVAP]-1659864903668
GPR[SPVATF]-1659864903668
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864907811
GPR[EPVS]-1659864907811
========
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864907813
GPR[SPVAP]-1659864907813
GPR[EPVAP]-1659864911910
GPR[SPVATF]-1659864911910
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864919596
GPR[EPVS]-1659864919596
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864919597
GPR[SPVAP]-1659864919597
GPR[EPVAP]-1659864923835
GPR[SPVATF]-1659864923835
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864927660
GPR[EPVS]-1659864927660
========
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864927662
GPR[SPVAP]-1659864927662
GPR[EPVAP]-1659864931773
GPR[SPVATF]-1659864931773
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864940003
GPR[EPVS]-1659864940003
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864940004
GPR[SPVAP]-1659864940004
GPR[EPVAP]-1659864944169
GPR[SPVATF]-1659864944169
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864948172
GPR[EPVS]-1659864948172
========
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864948174
GPR[SPVAP]-1659864948174
GPR[EPVAP]-1659864950216
GPR[EPVS]-1659864950216
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864950217
GPR[SPVAP]-1659864950217
GPR[EPVAP]-1659864952161
GPR[EPVS]-1659864952161
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864952162
GPR[SPVAP]-1659864952162
GPR[EPVAP]-1659864956345
GPR[SPVATF]-1659864956345
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864960204
GPR[EPVS]-1659864960204
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864960206
GPR[SPVAP]-1659864960206
GPR[EPVAP]-1659864964457
GPR[SPVATF]-1659864964457
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864968417
GPR[EPVS]-1659864968417
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864968419
GPR[SPVAP]-1659864968419
GPR[EPVAP]-1659864972680
GPR[SPVATF]-1659864972680
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864976654
GPR[EPVS]-1659864976654
========
Preconditions.checkState(fromNode.isName());
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return fromNode.getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659864976655
GPR[SPVAP]-1659864976655
GPR[EPVAP]-1659864978651
GPR[EPVS]-1659864978652
========
if(!parent.getFirstChild().getNext().isString()){
return ;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864978654
GPR[SPVAP]-1659864978654
GPR[EPVAP]-1659864980630
GPR[EPVS]-1659864980630
========
notifyOfRemoval(fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864980632
GPR[SPVAP]-1659864980632
GPR[EPVAP]-1659864982599
GPR[EPVS]-1659864982599
========
if(parent.getLastChild()==SPECIAL_EXTERNS){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864982601
GPR[SPVAP]-1659864982601
GPR[EPVAP]-1659864984601
GPR[EPVS]-1659864984601
========
if(parent.getLastChild()==forVar){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864984603
GPR[SPVAP]-1659864984603
GPR[EPVAP]-1659864986614
GPR[EPVS]-1659864986614
========
if(parent.getLastChild()==script){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864986615
GPR[SPVAP]-1659864986615
GPR[EPVAP]-1659864988622
GPR[EPVS]-1659864988622
========
parent.addChildToBack(fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864988623
GPR[SPVAP]-1659864988623
GPR[EPVAP]-1659864992990
GPR[SPVATF]-1659864992990
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659864997037
GPR[EPVS]-1659864997037
========
if(parent.getLastChild()==grandparent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864997038
GPR[SPVAP]-1659864997039
GPR[EPVAP]-1659864998984
GPR[EPVS]-1659864998984
========
if(!fromNode.isVar()){
return ;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659864998985
GPR[SPVAP]-1659864998985
GPR[EPVAP]-1659865000935
GPR[EPVS]-1659865000935
========
Preconditions.checkState(fromNode.hasOneChild());
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865000937
GPR[SPVAP]-1659865000937
GPR[EPVAP]-1659865005179
GPR[SPVATF]-1659865005179
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865013487
GPR[EPVS]-1659865013487
========
if(parent.getLastChild()==last){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865013491
GPR[SPVAP]-1659865013491
GPR[EPVAP]-1659865015602
GPR[EPVS]-1659865015602
========
if(getChildBefore(fromNode)==null)parent=first.next;else prev.next=child.next;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865015604
GPR[SPVAP]-1659865015604
GPR[EPVAP]-1659865017659
GPR[EPVS]-1659865017659
========
child.next=null;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865017661
GPR[SPVAP]-1659865017661
GPR[EPVAP]-1659865019651
GPR[EPVS]-1659865019651
========
child.parent=null;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865019653
GPR[SPVAP]-1659865019653
GPR[EPVAP]-1659865021630
GPR[EPVS]-1659865021630
========
if(parent.getLastChild()==RENAME_PROPERTY_FUNCTION_NAME){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865021633
GPR[SPVAP]-1659865021633
GPR[EPVAP]-1659865023743
GPR[EPVS]-1659865023743
========
if(parent.getLastChild()==grandParent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865023745
GPR[SPVAP]-1659865023745
GPR[EPVAP]-1659865025776
GPR[EPVS]-1659865025776
========
if(!fromNode.getLastChild().hasOneChild()){
return null;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865025779
GPR[SPVAP]-1659865025779
GPR[EPVAP]-1659865030001
GPR[SPVATF]-1659865030001
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865033764
GPR[EPVS]-1659865033764
========
if(!fromNode.getLastChild().hasOneChild()){
return null;
}
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865033766
GPR[SPVAP]-1659865033766
GPR[EPVAP]-1659865037906
GPR[SPVATF]-1659865037906
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865041914
GPR[EPVS]-1659865041914
========
parent.replaceChild(node,node);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865041916
GPR[SPVAP]-1659865041916
GPR[EPVAP]-1659865046124
GPR[SPVATF]-1659865046124
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865050337
GPR[EPVS]-1659865050337
========
reportCodeChange();
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865050339
GPR[SPVAP]-1659865050339
GPR[EPVAP]-1659865052473
GPR[EPVS]-1659865052473
========
if(parent.getLastChild()==c){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865052475
GPR[SPVAP]-1659865052475
GPR[EPVAP]-1659865054457
GPR[EPVS]-1659865054457
========
if(!fromNode.hasChildren()||block.hasOneChild()){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865054459
GPR[SPVAP]-1659865054459
GPR[EPVAP]-1659865056482
GPR[EPVS]-1659865056482
========
if(parent.getLastChild()==node.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865056483
GPR[SPVAP]-1659865056483
GPR[EPVAP]-1659865060763
GPR[SPVATF]-1659865060764
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865068939
GPR[EPVS]-1659865068939
========
parent.copyInformationFrom(fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865068941
GPR[SPVAP]-1659865068941
GPR[EPVAP]-1659865073374
GPR[SPVATF]-1659865073374
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865077413
GPR[EPVS]-1659865077413
========
newChild.next=child.next;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865077414
GPR[SPVAP]-1659865077414
GPR[EPVAP]-1659865079339
GPR[EPVS]-1659865079339
========
newChild.parent=this;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865079341
GPR[SPVAP]-1659865079341
GPR[EPVAP]-1659865081476
GPR[EPVS]-1659865081476
========
prevChild.next=parent;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865081478
GPR[SPVAP]-1659865081478
GPR[EPVAP]-1659865083479
GPR[EPVS]-1659865083479
========
parent.copyInformationFrom(fromNode);
if(parent.getLastChild()==last){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865083481
GPR[SPVAP]-1659865083481
GPR[EPVAP]-1659865085517
GPR[EPVS]-1659865085518
========
child.next=null;
if(parent.getLastChild()==last){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865085520
GPR[SPVAP]-1659865085520
GPR[EPVAP]-1659865087579
GPR[EPVS]-1659865087579
========
parent.copyInformationFrom(fromNode);
child.next=null;
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865087580
GPR[SPVAP]-1659865087580
GPR[EPVAP]-1659865089877
GPR[EPVS]-1659865089877
========
parent.copyInformationFrom(fromNode);
child.next=null;
if(parent.getLastChild()==last){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865089878
GPR[SPVAP]-1659865089878
GPR[EPVAP]-1659865091932
GPR[EPVS]-1659865091932
========
if(parent.getLastChild()==parent.getNext()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865091935
GPR[SPVAP]-1659865091935
GPR[EPVAP]-1659865096246
GPR[SPVATF]-1659865096246
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865104573
GPR[EPVS]-1659865104573
========
parent.removeChild(fromNode);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865104575
GPR[SPVAP]-1659865104575
GPR[EPVAP]-1659865109011
GPR[SPVATF]-1659865109011
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865113126
GPR[EPVS]-1659865113126
========
finallyMap.reportCodeChange();
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865113129
GPR[SPVAP]-1659865113129
GPR[EPVAP]-1659865115228
GPR[EPVS]-1659865115228
========
parent.removeChild(fromNode);
if(parent.getLastChild()==parent.getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865115229
GPR[SPVAP]-1659865115229
GPR[EPVAP]-1659865119618
GPR[SPVATF]-1659865119618
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865123965
GPR[EPVS]-1659865123965
========
parent.removeChild(fromNode);
if(parent.getLastChild()==parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865123967
GPR[SPVAP]-1659865123967
GPR[EPVAP]-1659865128311
GPR[SPVATF]-1659865128311
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865132367
GPR[EPVS]-1659865132367
========
parent.removeChild(fromNode);
if(parent.getLastChild()==n){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865132369
GPR[SPVAP]-1659865132369
GPR[EPVAP]-1659865134501
GPR[EPVS]-1659865134501
========
if(parent.getLastChild()==anchorUnusedVars){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865134503
GPR[SPVAP]-1659865134503
GPR[EPVAP]-1659865136587
GPR[EPVS]-1659865136587
========
if(parent.getLastChild()!=parent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865136589
GPR[SPVAP]-1659865136589
GPR[EPVAP]-1659865141023
GPR[SPVATF]-1659865141023
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865144993
GPR[EPVS]-1659865144993
========
if(parent.getLastChild()==rhsValue){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865144995
GPR[SPVAP]-1659865144995
GPR[EPVAP]-1659865146987
GPR[EPVS]-1659865146987
========
Preconditions.checkArgument(parent.getQualifiedName()!=null&&parent.getFirstChild().getQualifiedName()!=null);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865146989
GPR[SPVAP]-1659865146989
GPR[EPVAP]-1659865151014
GPR[SPVATF]-1659865151014
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865154971
GPR[EPVS]-1659865154971
========
if(parent.getLastChild()==Token.CASE){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865154973
GPR[SPVAP]-1659865154973
GPR[EPVAP]-1659865157043
GPR[EPVS]-1659865157043
========
if(parent.getLastChild()==CASE){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865157045
GPR[SPVAP]-1659865157045
GPR[EPVAP]-1659865158902
GPR[EPVS]-1659865158902
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return getBestLValue(parent);
}

========
MM Copying to MM
GPR[SPVS]-1659865158904
GPR[SPVAP]-1659865158904
GPR[EPVAP]-1659865160804
GPR[EPVS]-1659865160804
========
if(parent.getLastChild()==Token.GETELEM){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865160805
GPR[SPVAP]-1659865160805
GPR[EPVAP]-1659865162816
GPR[EPVS]-1659865162816
========
if(parent.getLastChild()==GETELEM){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865162818
GPR[SPVAP]-1659865162818
GPR[EPVAP]-1659865164656
GPR[EPVS]-1659865164656
========
if(parent.getLastChild()==parent.getParent().getFirstChild()){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865164657
GPR[SPVAP]-1659865164657
GPR[EPVAP]-1659865168701
GPR[SPVATF]-1659865168701
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865175772
GPR[EPVS]-1659865175772
========
if(parent.getLastChild()==rhs){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865175774
GPR[SPVAP]-1659865175774
GPR[EPVAP]-1659865177861
GPR[EPVS]-1659865177861
========
if(parent.getLastChild()==valueToExport){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865177864
GPR[SPVAP]-1659865177864
GPR[EPVAP]-1659865179726
GPR[EPVS]-1659865179726
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865179728
GPR[SPVAP]-1659865179728
GPR[EPVAP]-1659865183704
GPR[SPVATF]-1659865183704
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865187623
GPR[EPVS]-1659865187623
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865187625
GPR[SPVAP]-1659865187625
GPR[EPVAP]-1659865191593
GPR[SPVATF]-1659865191593
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865195157
GPR[EPVS]-1659865195157
========
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865195158
GPR[SPVAP]-1659865195158
GPR[EPVAP]-1659865199197
GPR[SPVATF]-1659865199197
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865203044
GPR[EPVS]-1659865203044
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865203045
GPR[SPVAP]-1659865203045
GPR[EPVAP]-1659865207146
GPR[SPVATF]-1659865207146
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865210880
GPR[EPVS]-1659865210880
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865210882
GPR[SPVAP]-1659865210882
GPR[EPVAP]-1659865214798
GPR[SPVATF]-1659865214798
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865218429
GPR[EPVS]-1659865218429
========
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865218430
GPR[SPVAP]-1659865218430
GPR[EPVAP]-1659865222332
GPR[SPVATF]-1659865222332
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865225889
GPR[EPVS]-1659865225889
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865225890
GPR[SPVAP]-1659865225890
GPR[EPVAP]-1659865229903
GPR[SPVATF]-1659865229903
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865233793
GPR[EPVS]-1659865233793
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865233794
GPR[SPVAP]-1659865233794
GPR[EPVAP]-1659865237691
GPR[SPVATF]-1659865237691
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865241256
GPR[EPVS]-1659865241256
========
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865241258
GPR[SPVAP]-1659865241258
GPR[EPVAP]-1659865245195
GPR[SPVATF]-1659865245195
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865248967
GPR[EPVS]-1659865248967
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865248969
GPR[SPVAP]-1659865248969
GPR[EPVAP]-1659865252964
GPR[SPVATF]-1659865252964
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865256721
GPR[EPVS]-1659865256721
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865256722
GPR[SPVAP]-1659865256722
GPR[EPVAP]-1659865260775
GPR[SPVATF]-1659865260775
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865264664
GPR[EPVS]-1659865264664
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865264665
GPR[SPVAP]-1659865264665
GPR[EPVAP]-1659865268656
GPR[SPVATF]-1659865268656
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865272608
GPR[EPVS]-1659865272608
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865272609
GPR[SPVAP]-1659865272609
GPR[EPVAP]-1659865276566
GPR[SPVATF]-1659865276567
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865280644
GPR[EPVS]-1659865280644
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865280645
GPR[SPVAP]-1659865280645
GPR[EPVAP]-1659865284539
GPR[SPVATF]-1659865284539
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865288404
GPR[EPVS]-1659865288404
========
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865288406
GPR[SPVAP]-1659865288406
GPR[EPVAP]-1659865292309
GPR[SPVATF]-1659865292309
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865295812
GPR[EPVS]-1659865295812
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865295814
GPR[SPVAP]-1659865295814
GPR[EPVAP]-1659865299797
GPR[SPVATF]-1659865299798
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865303487
GPR[EPVS]-1659865303487
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865303488
GPR[SPVAP]-1659865303488
GPR[EPVAP]-1659865307459
GPR[SPVATF]-1659865307459
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865311023
GPR[EPVS]-1659865311023
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865311025
GPR[SPVAP]-1659865311025
GPR[EPVAP]-1659865314964
GPR[SPVATF]-1659865314964
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865318648
GPR[EPVS]-1659865318648
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865318650
GPR[SPVAP]-1659865318650
GPR[EPVAP]-1659865322574
GPR[SPVATF]-1659865322574
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865326613
GPR[EPVS]-1659865326613
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865326615
GPR[SPVAP]-1659865326615
GPR[EPVAP]-1659865330740
GPR[SPVATF]-1659865330740
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865334576
GPR[EPVS]-1659865334576
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865334578
GPR[SPVAP]-1659865334578
GPR[EPVAP]-1659865338508
GPR[SPVATF]-1659865338508
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865342518
GPR[EPVS]-1659865342518
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865342520
GPR[SPVAP]-1659865342520
GPR[EPVAP]-1659865346465
GPR[SPVATF]-1659865346465
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865350500
GPR[EPVS]-1659865350500
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865350501
GPR[SPVAP]-1659865350501
GPR[EPVAP]-1659865354477
GPR[SPVATF]-1659865354477
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865358033
GPR[EPVS]-1659865358033
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865358034
GPR[SPVAP]-1659865358034
GPR[EPVAP]-1659865362047
GPR[SPVATF]-1659865362047
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865365977
GPR[EPVS]-1659865365977
========
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865365978
GPR[SPVAP]-1659865365978
GPR[EPVAP]-1659865369981
GPR[SPVATF]-1659865369981
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865373535
GPR[EPVS]-1659865373535
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865373536
GPR[SPVAP]-1659865373536
GPR[EPVAP]-1659865377624
GPR[SPVATF]-1659865377624
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865381682
GPR[EPVS]-1659865381682
========
Preconditions.checkArgument(fromNode.isFunction(),"Node must be a function.");
Preconditions.checkArgument(fromNode.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(parent.getParent()==null);
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865381683
GPR[SPVAP]-1659865381683
GPR[EPVAP]-1659865385587
GPR[SPVATF]-1659865385587
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865389136
GPR[EPVS]-1659865389136
========
if(parent.getLastChild()==JsMessage.Style.LEGACY){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865389137
GPR[SPVAP]-1659865389137
GPR[EPVAP]-1659865391013
GPR[EPVS]-1659865391014
========
if(parent.getLastChild()==LEGACY){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865391015
GPR[SPVAP]-1659865391015
GPR[EPVAP]-1659865392963
GPR[EPVS]-1659865392964
========
if(parent.getLastChild()==possibleAncestor){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865392965
GPR[SPVAP]-1659865392965
GPR[EPVAP]-1659865394831
GPR[EPVS]-1659865394831
========
if(parent.getLastChild()==rightParent){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865394834
GPR[SPVAP]-1659865394834
GPR[EPVAP]-1659865396703
GPR[EPVS]-1659865396703
========
if(parent.getLastChild()==maybeFn){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865396705
GPR[SPVAP]-1659865396705
GPR[EPVAP]-1659865398667
GPR[EPVS]-1659865398667
========
if(parent.getLastChild()==Token.STRING_KEY){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865398669
GPR[SPVAP]-1659865398669
GPR[EPVAP]-1659865400624
GPR[EPVS]-1659865400624
========
if(parent.getLastChild()==STRING_KEY){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865400625
GPR[SPVAP]-1659865400625
GPR[EPVAP]-1659865402525
GPR[EPVS]-1659865402525
========
if(this.getIntProp(SLASH_V)!=node.getIntProp(SLASH_V)){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865402527
GPR[SPVAP]-1659865402527
GPR[EPVAP]-1659865404367
GPR[EPVS]-1659865404367
========
if(parent.getLastChild()==this.node.fromNode){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865404369
GPR[SPVAP]-1659865404369
GPR[EPVAP]-1659865406224
GPR[EPVS]-1659865406224
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,node,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865406226
GPR[SPVAP]-1659865406226
GPR[EPVAP]-1659865408053
GPR[EPVS]-1659865408053
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865408054
GPR[SPVAP]-1659865408054
GPR[EPVAP]-1659865409928
GPR[EPVS]-1659865409928
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return tryFoldAddConstantString(node,fromNode,parent);
}

========
MM Copying to MM
GPR[SPVS]-1659865409931
GPR[SPVAP]-1659865409931
GPR[EPVAP]-1659865411905
GPR[EPVS]-1659865411905
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return tryFoldChildAddString(node,fromNode,parent);
}

========
MM Copying to MM
GPR[SPVS]-1659865411906
GPR[SPVAP]-1659865411906
GPR[EPVAP]-1659865413887
GPR[EPVS]-1659865413887
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865413888
GPR[SPVAP]-1659865413888
GPR[EPVAP]-1659865418213
GPR[SPVATF]-1659865418213
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865422115
GPR[EPVS]-1659865422115
========
Preconditions.checkArgument(node!=node);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865422116
GPR[SPVAP]-1659865422116
GPR[EPVAP]-1659865426030
GPR[SPVATF]-1659865426030
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865429999
GPR[EPVS]-1659865429999
========
Preconditions.checkArgument(node.isExprResult()||node.isFunction());
Preconditions.checkArgument(node!=node);
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865430000
GPR[SPVAP]-1659865430000
GPR[EPVAP]-1659865434041
GPR[SPVATF]-1659865434041
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865438053
GPR[EPVS]-1659865438053
========
case Token.NOT :

if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865438055
GPR[SPVAP]-1659865438055
GPR[EPVAP]-1659865439833
GPR[EPVS]-1659865439833
========
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865439836
GPR[SPVAP]-1659865439836
GPR[EPVAP]-1659865441859
GPR[EPVS]-1659865441859
========
if(parent.getLastChild()==node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865441861
GPR[SPVAP]-1659865441861
GPR[EPVAP]-1659865445828
GPR[SPVATF]-1659865445828
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865449374
GPR[EPVS]-1659865449374
========
if(parent.getLastChild()!=node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865449376
GPR[SPVAP]-1659865449376
GPR[EPVAP]-1659865453420
GPR[SPVATF]-1659865453420
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865460936
GPR[EPVS]-1659865460936
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865460937
GPR[SPVAP]-1659865460937
GPR[EPVAP]-1659865462906
GPR[EPVS]-1659865462906
========
if(parent.getLastChild()==null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865462908
GPR[SPVAP]-1659865462908
GPR[EPVAP]-1659865467068
GPR[SPVATF]-1659865467068
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865474679
GPR[EPVS]-1659865474679
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865474680
GPR[SPVAP]-1659865474680
GPR[EPVAP]-1659865476737
GPR[EPVS]-1659865476737
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865476738
GPR[SPVAP]-1659865476738
GPR[EPVAP]-1659865478563
GPR[EPVS]-1659865478563
========
if(parent.getLastChild()!=null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865478565
GPR[SPVAP]-1659865478565
GPR[EPVAP]-1659865482432
GPR[SPVATF]-1659865482432
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865486030
GPR[EPVS]-1659865486030
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865486032
GPR[SPVAP]-1659865486032
GPR[EPVAP]-1659865487883
GPR[EPVS]-1659865487883
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865487884
GPR[SPVAP]-1659865487884
GPR[EPVAP]-1659865489835
GPR[EPVS]-1659865489835
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865489836
GPR[SPVAP]-1659865489836
GPR[EPVAP]-1659865491720
GPR[EPVS]-1659865491720
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865491721
GPR[SPVAP]-1659865491721
GPR[EPVAP]-1659865493668
GPR[EPVS]-1659865493668
========
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865493670
GPR[SPVAP]-1659865493670
GPR[EPVAP]-1659865495535
GPR[EPVS]-1659865495535
========
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865495537
GPR[SPVAP]-1659865495537
GPR[EPVAP]-1659865497404
GPR[EPVS]-1659865497404
========
if(parent.getLastChild()==node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865497405
GPR[SPVAP]-1659865497405
GPR[EPVAP]-1659865499303
GPR[EPVS]-1659865499303
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865499304
GPR[SPVAP]-1659865499304
GPR[EPVAP]-1659865501158
GPR[EPVS]-1659865501158
========
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865501159
GPR[SPVAP]-1659865501159
GPR[EPVAP]-1659865503120
GPR[EPVS]-1659865503120
========
if(parent.getLastChild()!=node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865503121
GPR[SPVAP]-1659865503121
GPR[EPVAP]-1659865504973
GPR[EPVS]-1659865504974
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865504975
GPR[SPVAP]-1659865504975
GPR[EPVAP]-1659865506961
GPR[EPVS]-1659865506961
========
if(parent.getLastChild()==null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865506963
GPR[SPVAP]-1659865506963
GPR[EPVAP]-1659865508863
GPR[EPVS]-1659865508863
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865508864
GPR[SPVAP]-1659865508864
GPR[EPVAP]-1659865510766
GPR[EPVS]-1659865510766
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865510768
GPR[SPVAP]-1659865510768
GPR[EPVAP]-1659865512665
GPR[EPVS]-1659865512665
========
if(parent.getLastChild()!=null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865512667
GPR[SPVAP]-1659865512667
GPR[EPVAP]-1659865514636
GPR[EPVS]-1659865514636
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=null){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865514637
GPR[SPVAP]-1659865514637
GPR[EPVAP]-1659865516489
GPR[EPVS]-1659865516489
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()!=node){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865516491
GPR[SPVAP]-1659865516491
GPR[EPVAP]-1659865518417
GPR[EPVS]-1659865518417
========
if(!isReduceableFunctionExpression(fromNode)){
return node;
}
if(parent.getLastChild()==null){
if(!parent.isString()){
throw new IllegalStateException("Expected STRING, got "+Token.name(parent.getType()));
}
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return buildCallNode(FACTORY_METHOD_NAME,parent,fromNode);
}

========
MM Copying to MM
GPR[SPVS]-1659865518418
GPR[SPVAP]-1659865518418
GPR[EPVAP]-1659865520293
GPR[EPVS]-1659865520293
========
if(parent.getLastChild()==greatGramp){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865520294
GPR[SPVAP]-1659865520294
GPR[EPVAP]-1659865522257
GPR[EPVS]-1659865522257
========
if((node.getFirstChild()==null)||!functionNode.isFunction()){
return false;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865522259
GPR[SPVAP]-1659865522259
GPR[EPVAP]-1659865524317
GPR[EPVS]-1659865524317
========
if(parent.isNew()&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865524319
GPR[SPVAP]-1659865524319
GPR[EPVAP]-1659865526166
GPR[EPVS]-1659865526166
========
Preconditions.checkArgument(parent.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865526169
GPR[SPVAP]-1659865526169
GPR[EPVAP]-1659865530085
GPR[SPVATF]-1659865530085
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865534137
GPR[EPVS]-1659865534137
========
if(!NodeUtil.functionCallHasSideEffects(parent)){
return true;
}
if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865534138
GPR[SPVAP]-1659865534138
GPR[EPVAP]-1659865536087
GPR[EPVS]-1659865536087
========
if(parent.getLastChild()==operand){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865536089
GPR[SPVAP]-1659865536089
GPR[EPVAP]-1659865538289
GPR[EPVS]-1659865538289
========
if(parent.getLastChild()==src){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865538290
GPR[SPVAP]-1659865538290
GPR[EPVAP]-1659865540250
GPR[EPVS]-1659865540250
========
case Token.AND :

if(parent.getLastChild()==node){
if(cfa!=null){
for(Node finallyNode : cfa.finallyMap.get(parent)){
cfa.createEdge(fromNode,Branch.UNCOND,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865540253
GPR[SPVAP]-1659865540253
GPR[EPVAP]-1659865541945
GPR[EPVS]-1659865541945
GPR[ESUN]-1659865541945
GPR[SSUN]-1659865541945
com.google.javascript.jscomp.ControlFlowAnalysis,765
GPR[ESUN]-1659865542513
GPR[SSUN]-1659865542513
com.google.javascript.jscomp.ControlFlowAnalysis,770
GPR[ESUN]-1659865542722
GPR[SSUN]-1659865542722
com.google.javascript.jscomp.parsing.IRFactory,1013
========
if((lineSet==false)&&(finallyBlock!=null)){
lineSet=true;
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865544371
GPR[SPVAP]-1659865544371
GPR[EPVAP]-1659865553143
GPR[SPVATF]-1659865553143
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865556941
GPR[EPVS]-1659865556941
========
if((lineSet==false)&&(finallyBlock!=null)){
lp.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865556943
GPR[SPVAP]-1659865556943
GPR[EPVAP]-1659865559197
GPR[EPVS]-1659865559198
========
if((lineSet==false)&&(finallyBlock!=null)){
node.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865559199
GPR[SPVAP]-1659865559199
GPR[EPVAP]-1659865563426
GPR[SPVATF]-1659865563426
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865567412
GPR[EPVS]-1659865567412
========
if((lineSet==false)&&(finallyBlock!=null)){
block.addChildToBack(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865567414
GPR[SPVAP]-1659865567414
GPR[EPVAP]-1659865569305
GPR[EPVS]-1659865569306
========
if(SUSPICIOUS_COMMENT_WARNING!=null&&!SUSPICIOUS_COMMENT_WARNING.isEmpty()){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865569307
GPR[SPVAP]-1659865569307
GPR[EPVAP]-1659865573601
GPR[SPVATF]-1659865573601
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865577529
GPR[EPVS]-1659865577529
========
if(SUSPICIOUS_COMMENT_WARNING!=null&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865577531
GPR[SPVAP]-1659865577531
GPR[EPVAP]-1659865581746
GPR[SPVATF]-1659865581746
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865585332
GPR[EPVS]-1659865585332
========
if((lineSet==false)&&!SUSPICIOUS_COMMENT_WARNING.isEmpty()){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865585334
GPR[SPVAP]-1659865585334
GPR[EPVAP]-1659865589573
GPR[SPVATF]-1659865589573
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865593306
GPR[EPVS]-1659865593306
========
if((lineSet==false)&&(finallyBlock!=null)){
flagsNode.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865593308
GPR[SPVAP]-1659865593308
GPR[EPVAP]-1659865595408
GPR[EPVS]-1659865595408
========
if((lineSet==false)&&(finallyBlock!=null)){
node.addChildToBack(block);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865595409
GPR[SPVAP]-1659865595409
GPR[EPVAP]-1659865599489
GPR[SPVATF]-1659865599489
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865603148
GPR[EPVS]-1659865603148
========
if(SUSPICIOUS_COMMENT_WARNING!=null&&!SUSPICIOUS_COMMENT_WARNING.isEmpty()){
node.addChildToBack(block);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865603150
GPR[SPVAP]-1659865603150
GPR[EPVAP]-1659865607238
GPR[SPVATF]-1659865607238
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865611007
GPR[EPVS]-1659865611007
========
if(SUSPICIOUS_COMMENT_WARNING!=null&&(finallyBlock!=null)){
node.addChildToBack(block);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865611009
GPR[SPVAP]-1659865611009
GPR[EPVAP]-1659865614959
GPR[SPVATF]-1659865614959
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865618908
GPR[EPVS]-1659865618908
========
if((lineSet==false)&&!SUSPICIOUS_COMMENT_WARNING.isEmpty()){
node.addChildToBack(block);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865618910
GPR[SPVAP]-1659865618910
GPR[EPVAP]-1659865622868
GPR[SPVATF]-1659865622868
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865626468
GPR[EPVS]-1659865626468
========
if((lineSet==false)&&(finallyBlock!=null)){
prev.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865626470
GPR[SPVAP]-1659865626470
GPR[EPVAP]-1659865628374
GPR[EPVS]-1659865628374
========
if(sourceFile==null&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865628376
GPR[SPVAP]-1659865628376
GPR[EPVAP]-1659865632683
GPR[SPVATF]-1659865632683
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865636292
GPR[EPVS]-1659865636292
========
if(lineSet){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865636295
GPR[SPVAP]-1659865636295
GPR[EPVAP]-1659865640325
GPR[SPVATF]-1659865640325
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865643925
GPR[EPVS]-1659865643925
========
if(lineSet&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865643926
GPR[SPVAP]-1659865643926
GPR[EPVAP]-1659865648103
GPR[SPVATF]-1659865648103
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865651656
GPR[EPVS]-1659865651656
========
if(!block.getFirstChild().isExprResult()&&block.getFirstChild()!=node){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865651658
GPR[SPVAP]-1659865651658
GPR[EPVAP]-1659865655638
GPR[SPVATF]-1659865655638
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865659421
GPR[EPVS]-1659865659421
========
if(!block.getFirstChild().isExprResult()&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865659422
GPR[SPVAP]-1659865659422
GPR[EPVAP]-1659865663424
GPR[SPVATF]-1659865663425
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865667278
GPR[EPVS]-1659865667278
========
if((lineSet==false)&&block.getFirstChild()!=node){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865667279
GPR[SPVAP]-1659865667279
GPR[EPVAP]-1659865671313
GPR[SPVATF]-1659865671313
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865674895
GPR[EPVS]-1659865674895
========
if(originalInfo.name!=null&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865674897
GPR[SPVAP]-1659865674897
GPR[EPVAP]-1659865676753
GPR[EPVS]-1659865676753
========
block.addChildToFront(node);
if((lineSet==false)&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865676755
GPR[SPVAP]-1659865676755
GPR[EPVAP]-1659865680751
GPR[SPVATF]-1659865680751
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865684296
GPR[EPVS]-1659865684296
========
if(lineSet&&!match(JsDocToken.RC)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865684298
GPR[SPVAP]-1659865684298
GPR[EPVAP]-1659865686181
GPR[EPVS]-1659865686181
========
if((lineSet==false)&&!match(JsDocToken.RC)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865686183
GPR[SPVAP]-1659865686183
GPR[EPVAP]-1659865688050
GPR[EPVS]-1659865688050
========
if(lineSet&&block.getSourceFileName()!=null&&node.getLineno()>0&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865688052
GPR[SPVAP]-1659865688052
GPR[EPVAP]-1659865692029
GPR[SPVATF]-1659865692030
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865696008
GPR[EPVS]-1659865696008
========
if((lineSet==false)&&(finallyBlock!=null)){
mapping.node=block;
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865696010
GPR[SPVAP]-1659865696010
GPR[EPVAP]-1659865697974
GPR[EPVS]-1659865697974
========
if((lineSet==false)&&(finallyBlock!=null)){
mapping.start=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865697975
GPR[SPVAP]-1659865697975
GPR[EPVAP]-1659865699828
GPR[EPVS]-1659865699828
========
if((lineSet==false)&&(finallyBlock!=null)){
mapping.node=block;
mapping.start=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());

block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865699829
GPR[SPVAP]-1659865699829
GPR[EPVAP]-1659865701850
GPR[EPVS]-1659865701851
========
if((lineSet==false)&&(finallyBlock!=null)){
newRoot.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865701852
GPR[SPVAP]-1659865701852
GPR[EPVAP]-1659865704023
GPR[EPVS]-1659865704023
========
if((lineSet==false)&&(finallyBlock!=null)){
replaceReturnWithBreak(block,null,sourceName,sourceName);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865704024
GPR[SPVAP]-1659865704024
GPR[EPVAP]-1659865705929
GPR[EPVS]-1659865705929
========
if((lineSet==false)&&(finallyBlock!=null)){
root=IR.block().srcref(block);
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865705930
GPR[SPVAP]-1659865705930
GPR[EPVAP]-1659865707978
GPR[EPVS]-1659865707978
========
if((lineSet==false)&&(finallyBlock!=null)){
replaceReturnWithBreak(block,null,sourceName,sourceName);
root=IR.block().srcref(block);

block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865707980
GPR[SPVAP]-1659865707980
GPR[EPVAP]-1659865709875
GPR[EPVS]-1659865709875
========
if(!(lineSet)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865709877
GPR[SPVAP]-1659865709877
GPR[EPVAP]-1659865713898
GPR[SPVATF]-1659865713898
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865717479
GPR[EPVS]-1659865717479
========
if((allowDupe==false)&&(finallyBlock!=null)){
block.setLineno(finallyBlock.getLineno());
maybeSetLengthFrom(block,finallyBlock);
}

========
MM Copying to MM
GPR[SPVS]-1659865717480
GPR[SPVAP]-1659865717480
GPR[EPVAP]-1659865719383
GPR[EPVS]-1659865719383
GPR[ESUN]-1659865719384
GPR[SSUN]-1659865719384
com.google.javascript.jscomp.parsing.IRFactory,1014
GPR[ESUN]-1659865719900
GPR[SSUN]-1659865719900
com.google.javascript.jscomp.ControlFlowAnalysis,752
========
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(node.getNext());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865721982
GPR[SPVAP]-1659865721982
GPR[EPVAP]-1659865730785
GPR[SPVATF]-1659865730785
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865738408
GPR[EPVS]-1659865738408
========
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return parent.getFirstChild().getNext().getNext();
}

========
MM Copying to MM
GPR[SPVS]-1659865738411
GPR[SPVAP]-1659865738411
GPR[EPVAP]-1659865742319
GPR[SPVATF]-1659865742320
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865746329
GPR[EPVS]-1659865746329
========
Preconditions.checkState(parent.isIf());
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865746333
GPR[SPVAP]-1659865746333
GPR[EPVAP]-1659865750293
GPR[SPVATF]-1659865750293
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865754331
GPR[EPVS]-1659865754331
========
if(parent.isEmpty()||(n.isBlock()&&!n.hasChildren())){
return ;
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865754333
GPR[SPVAP]-1659865754333
GPR[EPVAP]-1659865756199
GPR[EPVS]-1659865756199
========
if(parent==null){
continue;
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865756202
GPR[SPVAP]-1659865756202
GPR[EPVAP]-1659865758051
GPR[EPVS]-1659865758051
========
parent.removeChild(parent);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865758054
GPR[SPVAP]-1659865758054
GPR[EPVAP]-1659865762032
GPR[SPVATF]-1659865762032
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865765714
GPR[EPVS]-1659865765714
========
if(NodeUtil.mayEffectMutableState(parent)){
return ;
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865765717
GPR[SPVAP]-1659865765717
GPR[EPVAP]-1659865767653
GPR[EPVS]-1659865767653
========
if(parent.isName()&&parent.getParent().isVar()){
return true;
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865767655
GPR[SPVAP]-1659865767655
GPR[EPVAP]-1659865769530
GPR[EPVS]-1659865769530
========
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865769532
GPR[SPVAP]-1659865769532
GPR[EPVAP]-1659865771400
GPR[EPVS]-1659865771400
========
Preconditions.checkState(parent.isName());
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865771402
GPR[SPVAP]-1659865771402
GPR[EPVAP]-1659865775355
GPR[SPVATF]-1659865775355
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865779053
GPR[EPVS]-1659865779053
========
NodeUtil.copyNameAnnotations(parent,fromNode);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865779054
GPR[SPVAP]-1659865779054
GPR[EPVAP]-1659865783134
GPR[SPVATF]-1659865783134
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865786737
GPR[EPVS]-1659865786737
========
parent.removeChild(node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865786739
GPR[SPVAP]-1659865786739
GPR[EPVAP]-1659865790613
GPR[SPVATF]-1659865790613
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865794296
GPR[EPVS]-1659865794296
========
parent.replaceChild(node,node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865794298
GPR[SPVAP]-1659865794298
GPR[EPVAP]-1659865798254
GPR[SPVATF]-1659865798254
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865801767
GPR[EPVS]-1659865801767
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.removeChild(node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865801768
GPR[SPVAP]-1659865801768
GPR[EPVAP]-1659865805653
GPR[SPVATF]-1659865805653
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865809584
GPR[EPVS]-1659865809584
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.replaceChild(node,node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865809586
GPR[SPVAP]-1659865809586
GPR[EPVAP]-1659865813515
GPR[SPVATF]-1659865813515
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865817163
GPR[EPVS]-1659865817163
========
NodeUtil.copyNameAnnotations(parent,fromNode);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865817164
GPR[SPVAP]-1659865817164
GPR[EPVAP]-1659865819015
GPR[EPVS]-1659865819015
========
parent.removeChild(node);
parent.replaceChild(node,node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865819016
GPR[SPVAP]-1659865819016
GPR[EPVAP]-1659865823035
GPR[SPVATF]-1659865823035
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865826551
GPR[EPVS]-1659865826551
========
parent.removeChild(node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865826553
GPR[SPVAP]-1659865826553
GPR[EPVAP]-1659865828487
GPR[EPVS]-1659865828487
========
parent.replaceChild(node,node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865828488
GPR[SPVAP]-1659865828488
GPR[EPVAP]-1659865830356
GPR[EPVS]-1659865830356
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.removeChild(node);
parent.replaceChild(node,node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865830357
GPR[SPVAP]-1659865830357
GPR[EPVAP]-1659865834280
GPR[SPVATF]-1659865834280
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865837865
GPR[EPVS]-1659865837865
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.removeChild(node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865837866
GPR[SPVAP]-1659865837866
GPR[EPVAP]-1659865839914
GPR[EPVS]-1659865839914
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.replaceChild(node,node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865839916
GPR[SPVAP]-1659865839916
GPR[EPVAP]-1659865841852
GPR[EPVS]-1659865841852
========
parent.removeChild(node);
parent.replaceChild(node,node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865841853
GPR[SPVAP]-1659865841853
GPR[EPVAP]-1659865843706
GPR[EPVS]-1659865843706
========
NodeUtil.copyNameAnnotations(parent,fromNode);
parent.removeChild(node);
parent.replaceChild(node,node);
compiler.reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865843707
GPR[SPVAP]-1659865843707
GPR[EPVAP]-1659865845823
GPR[EPVS]-1659865845823
========
parent.replaceChild(parent,fromNode);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865845824
GPR[SPVAP]-1659865845824
GPR[EPVAP]-1659865849719
GPR[SPVATF]-1659865849719
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865853576
GPR[EPVS]-1659865853576
========
for(Node node : getVarsDeclaredInBranch(parent)){
Node fromNode=IR.var(IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
copyNameAnnotations(nameNode,var.getFirstChild());
parent.addChildToFront(var);
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865853579
GPR[SPVAP]-1659865853579
GPR[EPVAP]-1659865855517
GPR[EPVS]-1659865855517
========
parent.addChildToBack(node);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865855519
GPR[SPVAP]-1659865855519
GPR[EPVAP]-1659865859498
GPR[SPVATF]-1659865859498
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865863556
GPR[EPVS]-1659865863556
========
if(NodeUtil.hasFinally(parent)){
return parent.getFirstChild().getLastChild();
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865863558
GPR[SPVAP]-1659865863558
GPR[EPVAP]-1659865867381
GPR[SPVATF]-1659865867381
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865875011
GPR[EPVS]-1659865875011
========
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return parent.getFirstChild().getLastChild();
}

========
MM Copying to MM
GPR[SPVS]-1659865875013
GPR[SPVAP]-1659865875013
GPR[EPVAP]-1659865878907
GPR[SPVATF]-1659865878907
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865882912
GPR[EPVS]-1659865882912
========
if(NodeUtil.hasFinally(parent)){
return parent.getFirstChild().getLastChild();
}else error

========
MM Copying to MM
GPR[SPVS]-1659865882914
GPR[SPVAP]-1659865882914
GPR[EPVAP]-1659865884889
GPR[EPVS]-1659865884890
========
parent.addChildToBack(parent);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865884892
GPR[SPVAP]-1659865884892
GPR[EPVAP]-1659865888915
GPR[SPVATF]-1659865888915
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865892858
GPR[EPVS]-1659865892858
========
parent.replaceChild(fromNode,fromNode);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865892859
GPR[SPVAP]-1659865892859
GPR[EPVAP]-1659865896804
GPR[SPVATF]-1659865896804
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865900493
GPR[EPVS]-1659865900493
========
reportCodeChange();
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865900494
GPR[SPVAP]-1659865900494
GPR[EPVAP]-1659865902580
GPR[EPVS]-1659865902580
========
if(compiler.getCodingConvention().hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865902583
GPR[SPVAP]-1659865902583
GPR[EPVAP]-1659865904525
GPR[EPVS]-1659865904525
========
Preconditions.checkArgument(parent.isFunction());
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865904527
GPR[SPVAP]-1659865904527
GPR[EPVAP]-1659865908633
GPR[SPVATF]-1659865908633
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865912328
GPR[EPVS]-1659865912328
========
Preconditions.checkState(fromNode.isGetProp());
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865912330
GPR[SPVAP]-1659865912330
GPR[EPVAP]-1659865916548
GPR[SPVATF]-1659865916548
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865920356
GPR[EPVS]-1659865920356
========
if(NodeUtil.hasFinally(parent)){
return fromNode.getFirstChild();
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865920358
GPR[SPVAP]-1659865920358
GPR[EPVAP]-1659865924348
GPR[SPVATF]-1659865924348
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM:   - com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865932000
GPR[EPVS]-1659865932000
========
shouldTraverseFunctions=true;
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865932002
GPR[SPVAP]-1659865932002
GPR[EPVAP]-1659865934004
GPR[EPVS]-1659865934004
========
if(parent.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return parent.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865934006
GPR[SPVAP]-1659865934006
GPR[EPVAP]-1659865935882
GPR[EPVS]-1659865935882
========
parent.addChildrenToFront(fromNode);
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865935884
GPR[SPVAP]-1659865935884
GPR[EPVAP]-1659865939793
GPR[SPVATF]-1659865939794
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM:   - com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659865943630
GPR[EPVS]-1659865943630
========
parent.addChildrenToBack(parent.getFirstChild().detachFromParent());
if(NodeUtil.hasFinally(parent)){
return computeFallThrough(parent.getLastChild());
}else {
return computeFollowNode(fromNode,parent,cfa);
}

========
MM Copying to MM
GPR[SPVS]-1659865943631
GPR[SPVAP]-1659865943631
GPR[EPVAP]-1659865947721
GPR[SPVATF]-1659865947721
TESTING : com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779
End running Closure/14 results at /experiment_home///results/SimFix/Closure/14/seed_261/
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 06:09:23 AM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_14_buggy
GPR[SSLE]-1659877763098
GPR[ESLE]-1659877823101
