Sleep 1m start
GPR[SSLI]-1659881472124
GPR[ESLI]-1659881532128
Running Nopol Math 78b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Math/78/seed_261/
The file script/workingdir/Nopol/Math_78 does not exist!
script/workingdir/Nopol/Math_78
script/workingdir/Nopol/Math_78
classpath:  script/workingdir/Nopol/Math_78/target/classes:script/workingdir/Nopol/Math_78/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Math_78/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659881547278
GPR[ESLB]-1659881607283
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Math_78//target/classes:script/workingdir/Nopol/Math_78//target/test-classes:script/workingdir/Nopol/Math_78/target/classes:script/workingdir/Nopol/Math_78/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Math_78/lib/junit-4.4.jar
Node: host-68
Date init: Sun 07 Aug 2022 07:13:27 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Math_78/src/main/java]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Math_78/target/classes/, file:script/workingdir/Nopol/Math_78/target/test-classes/, file:script/workingdir/Nopol/Math_78/target/classes/, file:script/workingdir/Nopol/Math_78/target/test-classes/, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Math_78/src/main/java], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Math/78/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[6] INFO NoPol - Maximum memory: 7 GB
[6] INFO NoPol - Total memory available to JVM: 1 GB
[7] INFO NoPol - Java version: 1.8.0_45
[8] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[8] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659881610507
GPR[ESUP]-1659881610508
GPR[SFL]-1659881610508
GPR[EFL]-1659881619207
GPR[SFP]-1659881619207
GPR[SSUN]-1659881619247
-1593974112
GPR[ESUN]-1659881619482
GPR[SSUN]-1659881619482
-1593974112
GPR[ESUN]-1659881619592
GPR[SSUN]-1659881619592
-1593974112
GPR[ESUN]-1659881619709
GPR[SSUN]-1659881619709
-642797969
GPR[SPVATF]-1659881619819
GPR[EPVATF]-1659881619851
GPR[SPS]-1659881619851
[12618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:178.
GPR[EPS]-1659881620439
GPR[ESUN]-1659881620439
GPR[SSUN]-1659881620439
-1593974112
GPR[ESUN]-1659881620553
GPR[SSUN]-1659881620553
-1593974112
GPR[ESUN]-1659881620662
GPR[SSUN]-1659881620662
-1593974112
GPR[ESUN]-1659881620775
GPR[SSUN]-1659881620775
-642797969
GPR[SPVATF]-1659881620888
GPR[EPVATF]-1659881620895
GPR[SPS]-1659881620895
[13261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:173.
GPR[EPS]-1659881621082
GPR[SPVATF]-1659881621083
GPR[EPVATF]-1659881621090
GPR[SPS]-1659881621090
[13435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:173.
GPR[EPS]-1659881621256
GPR[ESUN]-1659881621257
GPR[SSUN]-1659881621257
-642797969
GPR[SPVATF]-1659881621363
GPR[EPVATF]-1659881621370
GPR[SPS]-1659881621370
[13709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:170.
GPR[EPS]-1659881621530
GPR[SPVATF]-1659881621530
GPR[EPVATF]-1659881621537
GPR[SPS]-1659881621537
[13867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:170.
GPR[EPS]-1659881621688
GPR[ESUN]-1659881621688
GPR[SSUN]-1659881621688
-642797969
GPR[SPVATF]-1659881621786
GPR[EPVATF]-1659881621793
GPR[SPS]-1659881621793
[14133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:283.
GPR[EPS]-1659881621954
GPR[ESUN]-1659881621954
GPR[SSUN]-1659881621954
-642797969
GPR[SPVATF]-1659881622054
GPR[EPVATF]-1659881622061
GPR[SPS]-1659881622061
GPR[EPS]-1659881625374
GPR[SPVATR]-1659881625374
[17553] INFO TestPatch - Applying patch: org.apache.commons.math.analysis.solvers.BrentSolver:282: PRECONDITION -1 <= dx
[18611] INFO TestPatch - Running test suite to check the patch "-1 <= dx" is working
GPR[EPVATR]-1659881626474
[18653] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659881626474
[18664] INFO NoPol - --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -281,3 +281,5 @@
                     // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    if (-1 <= dx) {
+                        delta = 0.5 * dx;
+                    }
                     oldDelta = delta;

Saving patch at /experiment_home///results/Nopol/Math/78/seed_261/patch_15977_1ts_1659881626485.diff
GPR[ESUN]-1659881626486
GPR[SSUN]-1659881626486
1876105820
GPR[ESUN]-1659881626588
GPR[SSUN]-1659881626588
1876105820
GPR[SPVATF]-1659881626683
GPR[EPVATF]-1659881626690
GPR[SPS]-1659881626690
[18993] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DummyStepInterpolator extends org.apache.commons.math.ode.sampling.AbstractStepInterpolator {
    private static final long serialVersionUID = 1708010296707839488L;

    public DummyStepInterpolator() {
        super();
    }

    public DummyStepInterpolator(final double[] y, final boolean forward) {
        super(y, forward);
    }

    public DummyStepInterpolator(final org.apache.commons.math.ode.sampling.DummyStepInterpolator interpolator) {
        super(interpolator);
    }

    @java.lang.Override
    protected org.apache.commons.math.ode.sampling.StepInterpolator doCopy() {
        return new org.apache.commons.math.ode.sampling.DummyStepInterpolator(this);
    }

    @java.lang.Override
    protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) throws org.apache.commons.math.ode.DerivativeException {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(7).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("oneMinusThetaH",oneMinusThetaH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("theta",theta);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionEnds();
        }
        if (runtimeAngelicValue)
            java.lang.System.arraycopy(currentState, 0, interpolatedState, 0, org.apache.commons.math.ode.sampling.AbstractStepInterpolator.currentState.length);

    }

    @java.lang.Override
    public void writeExternal(final java.io.ObjectOutput out) throws java.io.IOException {
        writeBaseExternal(out);
    }

    @java.lang.Override
    public void readExternal(final java.io.ObjectInput in) throws java.io.IOException {
        final double t = readBaseExternal(in);
        setInterpolatedTime(t);
    }
}
[18993] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659881626814
GPR[SSUN]-1659881626814
-642797969
GPR[SPVATF]-1659881626911
GPR[EPVATF]-1659881626917
GPR[SPS]-1659881626917
[19239] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
    private static final long serialVersionUID = 7694577816772532779L;

    @java.lang.Deprecated
    public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
        super(f, 100, 1.0E-6);
    }

    public BrentSolver() {
        super(100, 1.0E-6);
    }

    @java.lang.Deprecated
    public double solve(double min, double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max);
    }

    @java.lang.Deprecated
    public double solve(double min, double max, double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max, initial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        double yInitial = f.value(initial);
        if (java.lang.Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        double yMin = f.value(min);
        if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        if ((yInitial * yMin) < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        double yMax = f.value(max);
        if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        if ((yInitial * yMax) < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifyInterval(min, max);
        double ret = java.lang.Double.NaN;
        double yMin = f.value(min);
        double yMax = f.value(max);
        double sign = yMin * yMax;
        if (sign > 0) {
            if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min, max, yMin, yMax);
            }
        } else if (sign < 0) {
            ret = solve(f, min, yMin, max, yMax, min, yMin);
        } else if (yMin == 0.0) {
            ret = min;
        } else {
            ret = max;
        }
        return ret;
    }

    private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        double delta = x1 - x0;
        double oldDelta = delta;
        int i = 0;
        while (i < maximalIterationCount) {
            if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {
                x0 = x1;
                x1 = x2;
                x2 = x0;
                y0 = y1;
                y1 = y2;
                y2 = y0;
            }
            if (java.lang.Math.abs(y1) <= functionValueAccuracy) {
                setResult(x1, i);
                return result;
            }
            double dx = x2 - x1;
            double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);
            if (java.lang.Math.abs(dx) <= tolerance) {
                setResult(x1, i);
                return result;
            }
            if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {
                delta = 0.5 * dx;
                oldDelta = delta;
            } else {
                double r3 = y1 / y0;
                double p;
                double p1;
                if (x0 == x2) {
                    p = dx * r3;
                    p1 = 1.0 - r3;
                } else {
                    double r1 = y0 / y2;
                    double r2 = y1 / y2;
                    p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("r2",r2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("r3",r3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("oldDelta",oldDelta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("f",f);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("dx",dx);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("y0",y0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("x0",x0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("y1",y1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("x1",x1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("y2",y2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("x2",x2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("tolerance",tolerance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("r1",r1);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);

                }
                if (p > 0.0) {
                    p1 = -p1;
                } else {
                    p = -p;
                }
                if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {
                    delta = 0.5 * dx;
                    oldDelta = delta;
                } else {
                    oldDelta = delta;
                    delta = p / p1;
                }
            }
            x0 = x1;
            y0 = y1;
            if (java.lang.Math.abs(delta) > tolerance) {
                x1 = x1 + delta;
            } else if (dx > 0.0) {
                x1 = x1 + (0.5 * tolerance);
            } else if (dx <= 0.0) {
                x1 = x1 - (0.5 * tolerance);
            }
            y1 = f.value(x1);
            if ((y1 > 0) == (y2 > 0)) {
                x2 = x0;
                y2 = y0;
                delta = x1 - x0;
                oldDelta = delta;
            }
            i++;
        } 
        throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
    }
}
[19239] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659881627060
GPR[SSUN]-1659881627060
-642797969
GPR[SPVATF]-1659881627166
GPR[EPVATF]-1659881627173
GPR[SPS]-1659881627173
[19529] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
    private static final long serialVersionUID = 7694577816772532779L;

    @java.lang.Deprecated
    public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
        super(f, 100, 1.0E-6);
    }

    public BrentSolver() {
        super(100, 1.0E-6);
    }

    @java.lang.Deprecated
    public double solve(double min, double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max);
    }

    @java.lang.Deprecated
    public double solve(double min, double max, double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max, initial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        double yInitial = f.value(initial);
        if (java.lang.Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        double yMin = f.value(min);
        if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        if ((yInitial * yMin) < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        double yMax = f.value(max);
        if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        if ((yInitial * yMax) < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifyInterval(min, max);
        double ret = java.lang.Double.NaN;
        double yMin = f.value(min);
        double yMax = f.value(max);
        double sign = yMin * yMax;
        if (sign > 0) {
            if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min, max, yMin, yMax);
            }
        } else if (sign < 0) {
            ret = solve(f, min, yMin, max, yMax, min, yMin);
        } else if (yMin == 0.0) {
            ret = min;
        } else {
            ret = max;
        }
        return ret;
    }

    private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        double delta = x1 - x0;
        double oldDelta = delta;
        int i = 0;
        while (i < maximalIterationCount) {
            if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {
                x0 = x1;
                x1 = x2;
                x2 = x0;
                y0 = y1;
                y1 = y2;
                y2 = y0;
            }
            if (java.lang.Math.abs(y1) <= functionValueAccuracy) {
                setResult(x1, i);
                return result;
            }
            double dx = x2 - x1;
            double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);
            if (java.lang.Math.abs(dx) <= tolerance) {
                setResult(x1, i);
                return result;
            }
            if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {
                delta = 0.5 * dx;
                oldDelta = delta;
            } else {
                double r3 = y1 / y0;
                double p;
                double p1;
                if (x0 == x2) {
                    p = dx * r3;
                    p1 = 1.0 - r3;
                } else {
                    double r1 = y0 / y2;
                    double r2 = y1 / y2;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("r2",r2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("r3",r3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("oldDelta",oldDelta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("f",f);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("dx",dx);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("y0",y0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("x0",x0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("y1",y1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("x1",x1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("y2",y2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("x2",x2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("tolerance",tolerance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("r1",r1);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));

                    p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
                }
                if (p > 0.0) {
                    p1 = -p1;
                } else {
                    p = -p;
                }
                if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {
                    delta = 0.5 * dx;
                    oldDelta = delta;
                } else {
                    oldDelta = delta;
                    delta = p / p1;
                }
            }
            x0 = x1;
            y0 = y1;
            if (java.lang.Math.abs(delta) > tolerance) {
                x1 = x1 + delta;
            } else if (dx > 0.0) {
                x1 = x1 + (0.5 * tolerance);
            } else if (dx <= 0.0) {
                x1 = x1 - (0.5 * tolerance);
            }
            y1 = f.value(x1);
            if ((y1 > 0) == (y2 > 0)) {
                x2 = x0;
                y2 = y0;
                delta = x1 - x0;
                oldDelta = delta;
            }
            i++;
        } 
        throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
    }
}
[19529] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659881627350
GPR[SSUN]-1659881627350
-642797969
GPR[ESUN]-1659881627468
GPR[SSUN]-1659881627468
-642797969
GPR[ESUN]-1659881627585
GPR[SSUN]-1659881627585
-642797969
GPR[SPVATF]-1659881627697
GPR[EPVATF]-1659881627707
GPR[SPS]-1659881627707
[20068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:296.
GPR[EPS]-1659881627889
GPR[ESUN]-1659881627889
GPR[SSUN]-1659881627889
-1328230856
GPR[SPVATF]-1659881628019
GPR[EPVATF]-1659881628026
GPR[SPS]-1659881628026
[20916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:292.
GPR[EPS]-1659881628737
GPR[ESUN]-1659881628738
GPR[SSUN]-1659881628738
-1328230856
GPR[SPVATF]-1659881628868
GPR[EPVATF]-1659881628876
GPR[SPS]-1659881628876
[21548] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:291.
GPR[EPS]-1659881629369
GPR[ESUN]-1659881629369
GPR[SSUN]-1659881629369
-1328230856
GPR[SPVATF]-1659881629494
GPR[EPVATF]-1659881629502
GPR[SPS]-1659881629502
[22195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:290.
GPR[EPS]-1659881630016
GPR[ESUN]-1659881630016
GPR[SSUN]-1659881630016
-1328230856
GPR[ESUN]-1659881630117
GPR[SSUN]-1659881630117
-1328230856
GPR[SPVATF]-1659881630217
GPR[EPVATF]-1659881630224
GPR[SPS]-1659881630224
[22542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:237.
GPR[EPS]-1659881630363
GPR[ESUN]-1659881630363
GPR[SSUN]-1659881630363
-1328230856
GPR[SPVATF]-1659881630466
GPR[EPVATF]-1659881630473
GPR[SPS]-1659881630473
[22795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:236.
GPR[EPS]-1659881630616
GPR[ESUN]-1659881630616
GPR[SSUN]-1659881630616
-1328230856
GPR[SPVATF]-1659881630721
GPR[EPVATF]-1659881630728
GPR[SPS]-1659881630728
[23044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:227.
GPR[EPS]-1659881630865
GPR[SPVATF]-1659881630866
GPR[EPVATF]-1659881630873
GPR[SPS]-1659881630873
[23194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:227.
GPR[EPS]-1659881631015
GPR[ESUN]-1659881631015
GPR[SSUN]-1659881631015
-1328230856
GPR[SPVATF]-1659881631121
GPR[EPVATF]-1659881631129
GPR[SPS]-1659881631129
[23451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:226.
GPR[EPS]-1659881631272
GPR[ESUN]-1659881631272
GPR[SSUN]-1659881631273
-1328230856
GPR[SPVATF]-1659881631387
GPR[EPVATF]-1659881631394
GPR[SPS]-1659881631394
[23732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:224.
GPR[EPS]-1659881631553
GPR[SPVATF]-1659881631553
GPR[EPVATF]-1659881631559
GPR[SPS]-1659881631559
[23870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:224.
GPR[EPS]-1659881631691
GPR[ESUN]-1659881631691
GPR[SSUN]-1659881631691
-1328230856
GPR[SPVATF]-1659881631791
GPR[EPVATF]-1659881631798
GPR[SPS]-1659881631798
[24108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:219.
GPR[EPS]-1659881631930
GPR[SPVATF]-1659881631930
GPR[EPVATF]-1659881631936
GPR[SPS]-1659881631936
[24250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:219.
GPR[EPS]-1659881632071
GPR[ESUN]-1659881632071
GPR[SSUN]-1659881632072
-1328230856
GPR[ESUN]-1659881632175
GPR[SSUN]-1659881632175
-1328230856
GPR[ESUN]-1659881632274
GPR[SSUN]-1659881632274
-1328230856
GPR[SPVATF]-1659881632377
GPR[EPVATF]-1659881632384
GPR[SPS]-1659881632384
[24702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:217.
GPR[EPS]-1659881632523
GPR[ESUN]-1659881632523
GPR[SSUN]-1659881632523
-1328230856
GPR[SPVATF]-1659881632628
GPR[EPVATF]-1659881632635
GPR[SPS]-1659881632635
GPR[EPS]-1659881635639
GPR[ESUN]-1659881635639
GPR[SSUN]-1659881635639
-1328230856
GPR[ESUN]-1659881635736
GPR[SSUN]-1659881635736
-1328230856
GPR[ESUN]-1659881635837
GPR[SSUN]-1659881635837
-1328230856
GPR[SPVATF]-1659881635939
GPR[EPVATF]-1659881635945
GPR[SPS]-1659881635945
[28254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:201.
GPR[EPS]-1659881636075
GPR[ESUN]-1659881636075
GPR[SSUN]-1659881636075
-1328230856
GPR[ESUN]-1659881636185
GPR[SSUN]-1659881636185
-1328230856
GPR[SPVATF]-1659881636299
GPR[EPVATF]-1659881636305
GPR[SPS]-1659881636305
[28612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState$1:206.
GPR[EPS]-1659881636433
GPR[ESUN]-1659881636433
GPR[SSUN]-1659881636433
-1328230856
GPR[ESUN]-1659881636537
GPR[SSUN]-1659881636537
-1328230856
GPR[SPVATF]-1659881636639
GPR[EPVATF]-1659881636645
GPR[SPS]-1659881636645
[29233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:288.
GPR[EPS]-1659881637054
GPR[SPVATF]-1659881637055
GPR[EPVATF]-1659881637061
GPR[SPS]-1659881637061
[29650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:288.
GPR[EPS]-1659881637471
GPR[ESUN]-1659881637471
GPR[SSUN]-1659881637471
-1328230856
GPR[SPVATF]-1659881637571
GPR[EPVATF]-1659881637578
GPR[SPS]-1659881637578
[30171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:286.
GPR[EPS]-1659881637992
GPR[ESUN]-1659881637992
GPR[SSUN]-1659881637992
-1328230856
GPR[SPVATF]-1659881638116
GPR[EPVATF]-1659881638122
GPR[SPS]-1659881638122
GPR[EPS]-1659881657892
GPR[ESUN]-1659881657892
GPR[SSUN]-1659881657893
-1328230856
GPR[SPVATF]-1659881658011
GPR[EPVATF]-1659881658017
GPR[SPS]-1659881658017
[50330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:188.
GPR[EPS]-1659881658151
GPR[SPVATF]-1659881658151
GPR[EPVATF]-1659881658157
GPR[SPS]-1659881658157
[50468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:188.
GPR[EPS]-1659881658289
GPR[ESUN]-1659881658289
GPR[SSUN]-1659881658289
-1328230856
GPR[ESUN]-1659881658393
GPR[SSUN]-1659881658393
-1328230856
GPR[SPVATF]-1659881658494
GPR[EPVATF]-1659881658500
GPR[SPS]-1659881658500
[50811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:184.
GPR[EPS]-1659881658632
GPR[ESUN]-1659881658632
GPR[SSUN]-1659881658632
-1328230856
GPR[SPVATF]-1659881658736
GPR[EPVATF]-1659881658742
GPR[SPS]-1659881658742
[51055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:183.
GPR[EPS]-1659881658876
GPR[ESUN]-1659881658876
GPR[SSUN]-1659881658876
-1328230856
GPR[SPVATF]-1659881658987
GPR[EPVATF]-1659881659008
GPR[SPS]-1659881659008
[51321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:180.
GPR[EPS]-1659881659142
GPR[ESUN]-1659881659142
GPR[SSUN]-1659881659142
-1328230856
GPR[ESUN]-1659881659245
GPR[SSUN]-1659881659245
-1328230856
GPR[ESUN]-1659881659533
GPR[SSUN]-1659881659533
-1328230856
GPR[ESUN]-1659881659636
GPR[SSUN]-1659881659636
-1328230856
GPR[ESUN]-1659881659731
GPR[SSUN]-1659881659731
-1328230856
GPR[ESUN]-1659881659825
GPR[SSUN]-1659881659825
-1328230856
GPR[ESUN]-1659881659922
GPR[SSUN]-1659881659922
-1328230856
GPR[SPVATF]-1659881660019
GPR[EPVATF]-1659881660026
GPR[SPS]-1659881660026
[52336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:172.
GPR[EPS]-1659881660157
GPR[ESUN]-1659881660157
GPR[SSUN]-1659881660157
-1328230856
GPR[ESUN]-1659881660254
GPR[SSUN]-1659881660254
-1328230856
GPR[SPVATF]-1659881660351
GPR[EPVATF]-1659881660357
GPR[SPS]-1659881660357
[52990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:153.
GPR[EPS]-1659881660811
GPR[ESUN]-1659881660811
GPR[SSUN]-1659881660811
-1328230856
GPR[SPVATF]-1659881660913
GPR[EPVATF]-1659881660918
GPR[SPS]-1659881660918
[53506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:152.
GPR[EPS]-1659881661327
GPR[ESUN]-1659881661327
GPR[SSUN]-1659881661327
-1328230856
GPR[SPVATF]-1659881661427
GPR[EPVATF]-1659881661434
GPR[SPS]-1659881661434
[54034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.events.EventState:151.
GPR[EPS]-1659881661855
GPR[ESUN]-1659881661855
GPR[SSUN]-1659881661855
-642797969
GPR[SPVATF]-1659881661953
GPR[EPVATF]-1659881661959
GPR[SPS]-1659881661959
[54272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:275.
GPR[EPS]-1659881662093
GPR[ESUN]-1659881662093
GPR[SSUN]-1659881662093
-642797969
GPR[SPVATF]-1659881662192
GPR[EPVATF]-1659881662199
GPR[SPS]-1659881662199
[54509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:295.
GPR[EPS]-1659881662330
GPR[SPVATF]-1659881662330
GPR[EPVATF]-1659881662336
GPR[SPS]-1659881662336
[54643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:295.
GPR[EPS]-1659881662464
GPR[ESUN]-1659881662464
GPR[SSUN]-1659881662464
-642797969
GPR[SPVATF]-1659881662564
GPR[EPVATF]-1659881662571
GPR[SPS]-1659881662571
[54877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:247.
GPR[EPS]-1659881662698
GPR[ESUN]-1659881662698
GPR[SSUN]-1659881662698
-642797969
GPR[SPVATF]-1659881662799
GPR[EPVATF]-1659881662804
GPR[SPS]-1659881662804
[55109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:246.
GPR[EPS]-1659881662930
GPR[ESUN]-1659881662930
GPR[SSUN]-1659881662930
34579990
GPR[ESUN]-1659881663030
GPR[SSUN]-1659881663030
66952180
GPR[ESUN]-1659881663120
GPR[SSUN]-1659881663120
66952180
GPR[SPVATF]-1659881663211
GPR[EPVATF]-1659881663217
GPR[SPS]-1659881663217
[55507] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ConvergingAlgorithmImpl:93.
GPR[EPS]-1659881663328
GPR[ESUN]-1659881663328
GPR[SSUN]-1659881663328
66952180
GPR[ESUN]-1659881663418
GPR[SSUN]-1659881663418
66952180
GPR[SPVATF]-1659881663511
GPR[EPVATF]-1659881663518
GPR[SPS]-1659881663518
GPR[EPS]-1659881672677
GPR[ESUN]-1659881672677
GPR[SSUN]-1659881672677
34579990
GPR[ESUN]-1659881672775
GPR[SSUN]-1659881672775
-642797969
GPR[SPVATF]-1659881672869
GPR[EPVATF]-1659881672876
GPR[SPS]-1659881672876
[65184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:273.
GPR[EPS]-1659881673005
GPR[ESUN]-1659881673005
GPR[SSUN]-1659881673005
-642797969
GPR[SPVATF]-1659881673102
GPR[EPVATF]-1659881673107
GPR[SPS]-1659881673107
[65433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:294.
GPR[EPS]-1659881673254
GPR[ESUN]-1659881673254
GPR[SSUN]-1659881673254
34579990
GPR[ESUN]-1659881673347
GPR[SSUN]-1659881673347
34579990
GPR[SPVATF]-1659881673461
GPR[EPVATF]-1659881673467
GPR[SPS]-1659881673467
[65773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:276.
GPR[EPS]-1659881673594
GPR[ESUN]-1659881673594
GPR[SSUN]-1659881673594
34579990
GPR[SPVATF]-1659881673697
GPR[EPVATF]-1659881673704
GPR[SPS]-1659881673704
[66013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:275.
GPR[EPS]-1659881673834
GPR[ESUN]-1659881673834
GPR[SSUN]-1659881673834
34579990
GPR[ESUN]-1659881673929
GPR[SSUN]-1659881673929
34579990
GPR[ESUN]-1659881674024
GPR[SSUN]-1659881674024
34579990
GPR[SPVATF]-1659881674122
GPR[EPVATF]-1659881674129
GPR[SPS]-1659881674129
[66461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:272.
GPR[EPS]-1659881674282
GPR[SPVATF]-1659881674283
GPR[EPVATF]-1659881674289
GPR[SPS]-1659881674289
[66593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:272.
GPR[EPS]-1659881674414
GPR[ESUN]-1659881674415
GPR[SSUN]-1659881674415
-642797969
GPR[SPVATF]-1659881674514
GPR[EPVATF]-1659881674530
GPR[SPS]-1659881674530
[66834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:305.
GPR[EPS]-1659881674655
GPR[ESUN]-1659881674655
GPR[SSUN]-1659881674655
-642797969
GPR[SPVATF]-1659881674751
GPR[EPVATF]-1659881674757
GPR[SPS]-1659881674757
[67058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:304.
GPR[EPS]-1659881674879
GPR[ESUN]-1659881674879
GPR[SSUN]-1659881674879
-642797969
GPR[SPVATF]-1659881674976
GPR[EPVATF]-1659881674982
GPR[SPS]-1659881674982
[67285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:303.
GPR[EPS]-1659881675106
GPR[ESUN]-1659881675106
GPR[SSUN]-1659881675106
-642797969
GPR[SPVATF]-1659881675204
GPR[EPVATF]-1659881675210
GPR[SPS]-1659881675210
[67513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:302.
GPR[EPS]-1659881675334
GPR[ESUN]-1659881675335
GPR[SSUN]-1659881675335
34579990
GPR[ESUN]-1659881675431
GPR[SSUN]-1659881675431
34579990
GPR[SPVATF]-1659881675529
GPR[EPVATF]-1659881675534
GPR[SPS]-1659881675534
[67847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:246.
GPR[EPS]-1659881675668
GPR[ESUN]-1659881675668
GPR[SSUN]-1659881675668
34579990
GPR[SPVATF]-1659881675765
GPR[EPVATF]-1659881675772
GPR[SPS]-1659881675772
[68072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:245.
GPR[EPS]-1659881675893
GPR[ESUN]-1659881675893
GPR[SSUN]-1659881675893
34579990
GPR[ESUN]-1659881675986
GPR[SSUN]-1659881675986
34579990
GPR[SPVATF]-1659881676078
GPR[EPVATF]-1659881676085
GPR[SPS]-1659881676085
[68381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:224.
GPR[EPS]-1659881676202
GPR[ESUN]-1659881676202
GPR[SSUN]-1659881676202
34579990
GPR[SPVATF]-1659881676298
GPR[EPVATF]-1659881676304
GPR[SPS]-1659881676304
[68602] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:221.
GPR[EPS]-1659881676423
GPR[ESUN]-1659881676424
GPR[SSUN]-1659881676424
34579990
GPR[SPVATF]-1659881676517
GPR[EPVATF]-1659881676523
GPR[SPS]-1659881676523
[68820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:220.
GPR[EPS]-1659881676641
GPR[ESUN]-1659881676642
GPR[SSUN]-1659881676642
34579990
GPR[SPVATF]-1659881676735
GPR[EPVATF]-1659881676741
GPR[SPS]-1659881676741
[69040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:219.
GPR[EPS]-1659881676861
GPR[ESUN]-1659881676861
GPR[SSUN]-1659881676861
34579990
GPR[ESUN]-1659881676988
GPR[SSUN]-1659881676988
34579990
GPR[SPVATF]-1659881677081
GPR[EPVATF]-1659881677087
GPR[SPS]-1659881677087
[69386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.ode.sampling.AbstractStepInterpolator:211.
GPR[EPS]-1659881677207
GPR[ESUN]-1659881677207
GPR[SSUN]-1659881677207
-642797969
GPR[SPVATF]-1659881677303
GPR[EPVATF]-1659881677309
GPR[SPS]-1659881677309
[69608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:233.
GPR[EPS]-1659881677429
GPR[ESUN]-1659881677429
GPR[SSUN]-1659881677429
-642797969
GPR[SPVATF]-1659881677523
GPR[EPVATF]-1659881677528
GPR[SPS]-1659881677528
[69829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:232.
GPR[EPS]-1659881677650
GPR[ESUN]-1659881677650
GPR[SSUN]-1659881677650
-642797969
GPR[SPVATF]-1659881677744
GPR[EPVATF]-1659881677751
GPR[SPS]-1659881677751
[70051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:231.
GPR[EPS]-1659881677872
GPR[ESUN]-1659881677872
GPR[SSUN]-1659881677872
-642797969
GPR[SPVATF]-1659881677968
GPR[EPVATF]-1659881677974
GPR[SPS]-1659881677974
[70274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:230.
GPR[EPS]-1659881678095
GPR[ESUN]-1659881678095
GPR[SSUN]-1659881678095
-642797969
GPR[SPVATF]-1659881678191
GPR[EPVATF]-1659881678198
GPR[SPS]-1659881678198
[70500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:229.
GPR[EPS]-1659881678321
GPR[ESUN]-1659881678321
GPR[SSUN]-1659881678321
-642797969
GPR[SPVATF]-1659881678421
GPR[EPVATF]-1659881678427
GPR[SPS]-1659881678427
[70738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:228.
GPR[EPS]-1659881678559
GPR[ESUN]-1659881678559
GPR[SSUN]-1659881678559
-642797969
GPR[SPVATF]-1659881678655
GPR[EPVATF]-1659881678662
GPR[SPS]-1659881678663
[71014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:286.
GPR[EPS]-1659881678836
GPR[ESUN]-1659881678836
GPR[SSUN]-1659881678836
-642797969
GPR[SPVATF]-1659881678931
GPR[EPVATF]-1659881678937
GPR[SPS]-1659881678937
[71247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:285.
GPR[EPS]-1659881679068
GPR[ESUN]-1659881679068
GPR[SSUN]-1659881679068
-642797969
GPR[SPVATF]-1659881679167
GPR[EPVATF]-1659881679173
GPR[SPS]-1659881679173
[71482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:277.
GPR[EPS]-1659881679303
GPR[SPVATF]-1659881679303
GPR[EPVATF]-1659881679309
GPR[SPS]-1659881679309
[1871486] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659883479309
GPR[SSUN]-1659883479309
-642797969
GPR[SPVATF]-1659883479457
GPR[EPVATF]-1659883479464
GPR[SPS]-1659883479464
[1871769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:272.
GPR[EPS]-1659883479590
GPR[SPVATF]-1659883479590
GPR[EPVATF]-1659883479619
GPR[SPS]-1659883479619
[1871928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:272.
GPR[EPS]-1659883479749
GPR[ESUN]-1659883479749
GPR[SSUN]-1659883479749
-642797969
GPR[SPVATF]-1659883479847
GPR[EPVATF]-1659883479853
GPR[SPS]-1659883479853
[1872159] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
    private static final long serialVersionUID = 7694577816772532779L;

    @java.lang.Deprecated
    public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
        super(f, 100, 1.0E-6);
    }

    public BrentSolver() {
        super(100, 1.0E-6);
    }

    @java.lang.Deprecated
    public double solve(double min, double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max);
    }

    @java.lang.Deprecated
    public double solve(double min, double max, double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max, initial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        double yInitial = f.value(initial);
        if (java.lang.Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        double yMin = f.value(min);
        if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        if ((yInitial * yMin) < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        double yMax = f.value(max);
        if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        if ((yInitial * yMax) < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifyInterval(min, max);
        double ret = java.lang.Double.NaN;
        double yMin = f.value(min);
        double yMax = f.value(max);
        double sign = yMin * yMax;
        if (sign > 0) {
            if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min, max, yMin, yMax);
            }
        } else if (sign < 0) {
            ret = solve(f, min, yMin, max, yMax, min, yMin);
        } else if (yMin == 0.0) {
            ret = min;
        } else {
            ret = max;
        }
        return ret;
    }

    private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        double delta = x1 - x0;
        double oldDelta = delta;
        int i = 0;
        while (i < maximalIterationCount) {
            if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {
                x0 = x1;
                x1 = x2;
                x2 = x0;
                y0 = y1;
                y1 = y2;
                y2 = y0;
            }
            if (java.lang.Math.abs(y1) <= functionValueAccuracy) {
                setResult(x1, i);
                return result;
            }
            double dx = x2 - x1;
            double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);
            if (java.lang.Math.abs(dx) <= tolerance) {
                setResult(x1, i);
                return result;
            }
            if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {
                delta = 0.5 * dx;
                oldDelta = delta;
            } else {
                double r3 = y1 / y0;
                double p;
                double p1;
                if (x0 == x2) {
                    p = dx * r3;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(76).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("r3",r3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("oldDelta",oldDelta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("f",f);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("dx",dx);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("y0",y0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("x0",x0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("y1",y1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("x1",x1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("y2",y2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("x2",x2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("tolerance",tolerance);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        p1 = 1.0 - r3;

                } else {
                    double r1 = y0 / y2;
                    double r2 = y1 / y2;
                    p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
                    p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
                }
                if (p > 0.0) {
                    p1 = -p1;
                } else {
                    p = -p;
                }
                if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {
                    delta = 0.5 * dx;
                    oldDelta = delta;
                } else {
                    oldDelta = delta;
                    delta = p / p1;
                }
            }
            x0 = x1;
            y0 = y1;
            if (java.lang.Math.abs(delta) > tolerance) {
                x1 = x1 + delta;
            } else if (dx > 0.0) {
                x1 = x1 + (0.5 * tolerance);
            } else if (dx <= 0.0) {
                x1 = x1 - (0.5 * tolerance);
            }
            y1 = f.value(x1);
            if ((y1 > 0) == (y2 > 0)) {
                x2 = x0;
                y2 = y0;
                delta = x1 - x0;
                oldDelta = delta;
            }
            i++;
        } 
        throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
    }
}
[1872159] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659883479980
GPR[SSUN]-1659883479980
-642797969
GPR[SPVATF]-1659883480077
GPR[EPVATF]-1659883480083
GPR[SPS]-1659883480083
[1872384] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
    private static final long serialVersionUID = 7694577816772532779L;

    @java.lang.Deprecated
    public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
        super(f, 100, 1.0E-6);
    }

    public BrentSolver() {
        super(100, 1.0E-6);
    }

    @java.lang.Deprecated
    public double solve(double min, double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max);
    }

    @java.lang.Deprecated
    public double solve(double min, double max, double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max, initial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        double yInitial = f.value(initial);
        if (java.lang.Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        double yMin = f.value(min);
        if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        if ((yInitial * yMin) < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        double yMax = f.value(max);
        if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        if ((yInitial * yMax) < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifyInterval(min, max);
        double ret = java.lang.Double.NaN;
        double yMin = f.value(min);
        double yMax = f.value(max);
        double sign = yMin * yMax;
        if (sign > 0) {
            if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min, max, yMin, yMax);
            }
        } else if (sign < 0) {
            ret = solve(f, min, yMin, max, yMax, min, yMin);
        } else if (yMin == 0.0) {
            ret = min;
        } else {
            ret = max;
        }
        return ret;
    }

    private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        double delta = x1 - x0;
        double oldDelta = delta;
        int i = 0;
        while (i < maximalIterationCount) {
            if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {
                x0 = x1;
                x1 = x2;
                x2 = x0;
                y0 = y1;
                y1 = y2;
                y2 = y0;
            }
            if (java.lang.Math.abs(y1) <= functionValueAccuracy) {
                setResult(x1, i);
                return result;
            }
            double dx = x2 - x1;
            double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);
            if (java.lang.Math.abs(dx) <= tolerance) {
                setResult(x1, i);
                return result;
            }
            if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {
                delta = 0.5 * dx;
                oldDelta = delta;
            } else {
                double r3 = y1 / y0;
                double p;
                double p1;
                if (x0 == x2) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(77).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("r3",r3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("oldDelta",oldDelta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("f",f);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("dx",dx);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("y0",y0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("x0",x0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("y1",y1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("x1",x1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("y2",y2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("x2",x2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("tolerance",tolerance);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        p = dx * r3;

                    p1 = 1.0 - r3;
                } else {
                    double r1 = y0 / y2;
                    double r2 = y1 / y2;
                    p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
                    p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
                }
                if (p > 0.0) {
                    p1 = -p1;
                } else {
                    p = -p;
                }
                if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {
                    delta = 0.5 * dx;
                    oldDelta = delta;
                } else {
                    oldDelta = delta;
                    delta = p / p1;
                }
            }
            x0 = x1;
            y0 = y1;
            if (java.lang.Math.abs(delta) > tolerance) {
                x1 = x1 + delta;
            } else if (dx > 0.0) {
                x1 = x1 + (0.5 * tolerance);
            } else if (dx <= 0.0) {
                x1 = x1 - (0.5 * tolerance);
            }
            y1 = f.value(x1);
            if ((y1 > 0) == (y2 > 0)) {
                x2 = x0;
                y2 = y0;
                delta = x1 - x0;
                oldDelta = delta;
            }
            i++;
        } 
        throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
    }
}
[1872385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659883480206
GPR[SSUN]-1659883480206
-642797969
GPR[SPVATF]-1659883480303
GPR[EPVATF]-1659883480309
GPR[SPS]-1659883480309
[1872611] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
    private static final long serialVersionUID = 7694577816772532779L;

    @java.lang.Deprecated
    public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
        super(f, 100, 1.0E-6);
    }

    public BrentSolver() {
        super(100, 1.0E-6);
    }

    @java.lang.Deprecated
    public double solve(double min, double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max);
    }

    @java.lang.Deprecated
    public double solve(double min, double max, double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        return solve(f, min, max, initial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifySequence(min, initial, max);
        double yInitial = f.value(initial);
        if (java.lang.Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }
        double yMin = f.value(min);
        if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }
        if ((yInitial * yMin) < 0) {
            return solve(f, min, yMin, initial, yInitial, min, yMin);
        }
        double yMax = f.value(max);
        if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }
        if ((yInitial * yMax) < 0) {
            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
        }
        return solve(f, min, yMin, max, yMax, initial, yInitial);
    }

    public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        clearResult();
        verifyInterval(min, max);
        double ret = java.lang.Double.NaN;
        double yMin = f.value(min);
        double yMax = f.value(max);
        double sign = yMin * yMax;
        if (sign > 0) {
            if (java.lang.Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (java.lang.Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min, max, yMin, yMax);
            }
        } else if (sign < 0) {
            ret = solve(f, min, yMin, max, yMax, min, yMin);
        } else if (yMin == 0.0) {
            ret = min;
        } else {
            ret = max;
        }
        return ret;
    }

    private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException {
        double delta = x1 - x0;
        double oldDelta = delta;
        int i = 0;
        while (i < maximalIterationCount) {
            if (java.lang.Math.abs(y2) < java.lang.Math.abs(y1)) {
                x0 = x1;
                x1 = x2;
                x2 = x0;
                y0 = y1;
                y1 = y2;
                y2 = y0;
            }
            if (java.lang.Math.abs(y1) <= functionValueAccuracy) {
                setResult(x1, i);
                return result;
            }
            double dx = x2 - x1;
            double tolerance = java.lang.Math.max(relativeAccuracy * java.lang.Math.abs(x1), absoluteAccuracy);
            if (java.lang.Math.abs(dx) <= tolerance) {
                setResult(x1, i);
                return result;
            }
            if ((java.lang.Math.abs(oldDelta) < tolerance) || (java.lang.Math.abs(y0) <= java.lang.Math.abs(y1))) {
                delta = 0.5 * dx;
                oldDelta = delta;
            } else {
                double r3 = y1 / y0;
                double p;
                double p1;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(78).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("r3",r3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("oldDelta",oldDelta);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("f",f);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("dx",dx);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("y0",y0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("x0",x0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("y1",y1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("x1",x1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("y2",y2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("x0 == x2",x0 == x2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("x2",x2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("tolerance",tolerance);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectionEnds();
                }
                if (runtimeAngelicValue) if (x0 == x2) {
                    p = dx * r3;
                    p1 = 1.0 - r3;
                } else {
                    double r1 = y0 / y2;
                    double r2 = y1 / y2;
                    p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
                    p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
                }
                if (p > 0.0) {
                    p1 = -p1;
                } else {
                    p = -p;
                }
                if (((2.0 * p) >= (((1.5 * dx) * p1) - java.lang.Math.abs(tolerance * p1))) || (p >= java.lang.Math.abs((0.5 * oldDelta) * p1))) {
                    delta = 0.5 * dx;
                    oldDelta = delta;
                } else {
                    oldDelta = delta;
                    delta = p / p1;
                }
            }
            x0 = x1;
            y0 = y1;
            if (java.lang.Math.abs(delta) > tolerance) {
                x1 = x1 + delta;
            } else if (dx > 0.0) {
                x1 = x1 + (0.5 * tolerance);
            } else if (dx <= 0.0) {
                x1 = x1 - (0.5 * tolerance);
            }
            y1 = f.value(x1);
            if ((y1 > 0) == (y2 > 0)) {
                x2 = x0;
                y2 = y0;
                delta = x1 - x0;
                oldDelta = delta;
            }
            i++;
        } 
        throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
    }
}
[1872611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659883480433
GPR[EPVATF]-1659883480438
GPR[SPS]-1659883480438
GPR[EPS]-1659883801749
GPR[SPVATR]-1659883801749
[2193928] INFO TestPatch - Applying patch: org.apache.commons.math.analysis.solvers.BrentSolver:261: CONDITIONAL (x0 == x2) || ((!(x0 <= 1)) && (y2 < dx))
[2194092] INFO TestPatch - Running test suite to check the patch "(x0 == x2) || ((!(x0 <= 1)) && (y2 < dx))" is working
GPR[EPVATR]-1659883802663
[2194842] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659883802663
[2194844] INFO NoPol - --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -260,3 +260,3 @@
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if ((x0 == x2) || ((!(x0 <= 1)) && (y2 < dx))) {
                     // Linear interpolation.

Saving patch at /experiment_home///results/Nopol/Math/78/seed_261/patch_2192157_2ts_1659883802665.diff
GPR[ESUN]-1659883802666
GPR[SSUN]-1659883802666
-642797969
GPR[ESUN]-1659883802766
GPR[SSUN]-1659883802766
-642797969
GPR[ESUN]-1659883802862
GPR[SSUN]-1659883802862
-642797969
GPR[SPVATF]-1659883802961
GPR[EPVATF]-1659883802968
GPR[SPS]-1659883802968
[2195268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:307.
GPR[EPS]-1659883803089
GPR[ESUN]-1659883803089
GPR[SSUN]-1659883803089
-642797969
GPR[SPVATF]-1659883803186
GPR[EPVATF]-1659883803193
GPR[SPS]-1659883803193
[2195502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:301.
GPR[EPS]-1659883803323
GPR[SPVATF]-1659883803323
GPR[EPVATF]-1659883803329
GPR[SPS]-1659883803329
[2195635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:301.
GPR[EPS]-1659883803456
GPR[ESUN]-1659883803456
GPR[SSUN]-1659883803456
-642797969
GPR[SPVATF]-1659883803554
GPR[EPVATF]-1659883803560
GPR[SPS]-1659883803560
[2195865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:300.
GPR[EPS]-1659883803686
GPR[ESUN]-1659883803686
GPR[SSUN]-1659883803686
-642797969
GPR[SPVATF]-1659883803783
GPR[EPVATF]-1659883803789
GPR[SPS]-1659883803789
[2196090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:293.
GPR[EPS]-1659883803911
GPR[SPVATF]-1659883803911
GPR[EPVATF]-1659883803917
GPR[SPS]-1659883803917
[3996090] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659885603912
GPR[SSUN]-1659885603912
-642797969
GPR[SPVATF]-1659885604061
GPR[EPVATF]-1659885604067
GPR[SPS]-1659885604067
[3996373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:291.
GPR[EPS]-1659885604194
GPR[ESUN]-1659885604195
GPR[SSUN]-1659885604195
-642797969
GPR[SPVATF]-1659885604295
GPR[EPVATF]-1659885604301
GPR[SPS]-1659885604301
[3996609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:290.
GPR[EPS]-1659885604430
GPR[ESUN]-1659885604430
GPR[SSUN]-1659885604430
-642797969
GPR[SPVATF]-1659885604531
GPR[EPVATF]-1659885604537
GPR[SPS]-1659885604537
[3996844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:249.
GPR[EPS]-1659885604665
GPR[SPVATF]-1659885604665
GPR[EPVATF]-1659885604671
GPR[SPS]-1659885604671
[3996978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:249.
GPR[EPS]-1659885604799
GPR[ESUN]-1659885604799
GPR[SSUN]-1659885604799
-642797969
GPR[SPVATF]-1659885604898
GPR[EPVATF]-1659885604904
GPR[SPS]-1659885604904
[3997222] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:245.
GPR[EPS]-1659885605044
GPR[SPVATF]-1659885605044
GPR[EPVATF]-1659885605049
GPR[SPS]-1659885605049
[3997352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:245.
GPR[EPS]-1659885605173
GPR[ESUN]-1659885605173
GPR[SSUN]-1659885605173
-642797969
GPR[ESUN]-1659885605271
GPR[SSUN]-1659885605271
-642797969
GPR[ESUN]-1659885605368
GPR[SSUN]-1659885605368
-642797969
GPR[SPVATF]-1659885605470
GPR[EPVATF]-1659885605476
GPR[SPS]-1659885605476
[3997779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:235.
GPR[EPS]-1659885605600
GPR[SPVATF]-1659885605601
GPR[EPVATF]-1659885605607
GPR[SPS]-1659885605607
[3997912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:235.
GPR[EPS]-1659885605733
GPR[ESUN]-1659885605733
GPR[SSUN]-1659885605733
-642797969
GPR[SPVATF]-1659885605833
GPR[EPVATF]-1659885605839
GPR[SPS]-1659885605839
[5798012] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[SPVATF]-1659887405833
GPR[EPVATF]-1659887405845
GPR[SPS]-1659887405845
[7598012] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659889205834
GPR[SSUN]-1659889205834
-642797969
GPR[SPVATF]-1659889205997
GPR[EPVATF]-1659889206003
GPR[SPS]-1659889206003
[7598316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:225.
GPR[EPS]-1659889206137
GPR[ESUN]-1659889206137
GPR[SSUN]-1659889206137
-642797969
GPR[ESUN]-1659889206240
GPR[SSUN]-1659889206240
-642797969
GPR[ESUN]-1659889206341
GPR[SSUN]-1659889206341
-642797969
GPR[ESUN]-1659889206442
GPR[SSUN]-1659889206442
-642797969
GPR[SPVATF]-1659889206543
GPR[EPVATF]-1659889206549
GPR[SPS]-1659889206549
[7598858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:185.
GPR[EPS]-1659889206679
GPR[ESUN]-1659889206679
GPR[SSUN]-1659889206679
-642797969
GPR[ESUN]-1659889206780
GPR[SSUN]-1659889206780
-642797969
GPR[SPVATF]-1659889206880
GPR[EPVATF]-1659889206886
GPR[SPS]-1659889206886
[7599195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:183.
GPR[EPS]-1659889207017
GPR[SPVATF]-1659889207017
GPR[EPVATF]-1659889207023
GPR[SPS]-1659889207023
[7599332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:183.
GPR[EPS]-1659889207153
GPR[ESUN]-1659889207153
GPR[SSUN]-1659889207153
-642797969
GPR[SPVATF]-1659889207257
GPR[EPVATF]-1659889207264
GPR[SPS]-1659889207264
[7599574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:168.
GPR[EPS]-1659889207395
GPR[SPVATF]-1659889207395
GPR[EPVATF]-1659889207401
GPR[SPS]-1659889207401
[7599709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:168.
GPR[EPS]-1659889207531
GPR[ESUN]-1659889207531
GPR[SSUN]-1659889207531
-642797969
GPR[ESUN]-1659889207636
GPR[SSUN]-1659889207636
-642797969
GPR[ESUN]-1659889207737
GPR[SSUN]-1659889207737
-642797969
GPR[ESUN]-1659889207837
GPR[SSUN]-1659889207837
-642797969
GPR[ESUN]-1659889207935
GPR[SSUN]-1659889207935
-642797969
GPR[SPVATF]-1659889208034
GPR[EPVATF]-1659889208041
GPR[SPS]-1659889208041
[7600348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:159.
GPR[EPS]-1659889208169
GPR[ESUN]-1659889208169
GPR[SSUN]-1659889208169
-642797969
GPR[SPVATF]-1659889208273
GPR[EPVATF]-1659889208279
GPR[SPS]-1659889208279
[7600587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.BrentSolver:158.
GPR[EPS]-1659889208408
GPR[ESUN]-1659889208408
GPR[SSUN]-1659889208408
1344347026
GPR[ESUN]-1659889208508
GPR[SSUN]-1659889208508
1344347026
GPR[SPVATF]-1659889208607
GPR[EPVATF]-1659889208613
GPR[SPS]-1659889208613
[7600921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:166.
GPR[EPS]-1659889208742
GPR[ESUN]-1659889208742
GPR[SSUN]-1659889208742
1344347026
GPR[SPVATF]-1659889208842
GPR[EPVATF]-1659889208848
GPR[SPS]-1659889208848
[7601169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:165.
GPR[EPS]-1659889208990
GPR[ESUN]-1659889208990
GPR[SSUN]-1659889208990
1344347026
GPR[ESUN]-1659889209091
GPR[SSUN]-1659889209091
1344347026
GPR[SPVATF]-1659889209191
GPR[EPVATF]-1659889209198
GPR[SPS]-1659889209198
[7601505] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:143.
GPR[EPS]-1659889209326
GPR[ESUN]-1659889209326
GPR[SSUN]-1659889209327
1344347026
GPR[SPVATF]-1659889209482
GPR[EPVATF]-1659889209489
GPR[SPS]-1659889209489
[7601798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:142.
GPR[EPS]-1659889209619
GPR[ESUN]-1659889209619
GPR[SSUN]-1659889209619
1344347026
GPR[SPVATF]-1659889209771
GPR[EPVATF]-1659889209778
GPR[SPS]-1659889209778
[7602084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:141.
GPR[EPS]-1659889209905
GPR[ESUN]-1659889209905
GPR[SSUN]-1659889209905
1344347026
GPR[ESUN]-1659889210057
GPR[SSUN]-1659889210057
1344347026
GPR[SPVATF]-1659889210207
GPR[EPVATF]-1659889210213
GPR[SPS]-1659889210213
[7602522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:208.
GPR[EPS]-1659889210343
GPR[SPVATF]-1659889210343
GPR[EPVATF]-1659889210350
GPR[SPS]-1659889210350
[7602659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:208.
GPR[EPS]-1659889210480
GPR[ESUN]-1659889210480
GPR[SSUN]-1659889210480
-1593974112
GPR[ESUN]-1659889210591
[7602775] INFO NoPol - ----INFORMATION----
[7602868] INFO NoPol - Nb classes : 393
[7602868] INFO NoPol - Nb methods : 2901
[7602868] INFO NoPol - Nb Statements Analyzed : 111
[7602868] INFO NoPol - Nb Statements with Angelic Value Found : 9
[7602868] INFO NoPol - Nb inputs in SMT : 632
[7602868] INFO NoPol - Nb SMT level: 5
[7602868] INFO NoPol - Nb SMT components: [11] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2, == of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2]
[7602868] INFO NoPol -                   class java.lang.Boolean: 11
[7602868] INFO NoPol - Nb variables in SMT : 20
[7602868] INFO NoPol - NoPol Execution time : 7602775ms
[7602868] INFO NoPol - 
[7602868] INFO NoPol - ----PATCH FOUND----
[7602868] INFO NoPol - -1 <= dx
[7602886] INFO NoPol - Nb test that executes the patch: 11
[7602886] INFO NoPol - org.apache.commons.math.analysis.solvers.BrentSolver:282: PRECONDITION
[7602888] INFO NoPol - --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -281,3 +281,5 @@
                     // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    if (-1 <= dx) {
+                        delta = 0.5 * dx;
+                    }
                     oldDelta = delta;

[7602889] INFO NoPol - (x0 == x2) || ((!(x0 <= 1)) && (y2 < dx))
[7602913] INFO NoPol - Nb test that executes the patch: 116
[7602913] INFO NoPol - org.apache.commons.math.analysis.solvers.BrentSolver:261: CONDITIONAL
[7602915] INFO NoPol - --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -260,3 +260,3 @@
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if ((x0 == x2) || ((!(x0 <= 1)) && (y2 < dx))) {
                     // Linear interpolation.

GPR[EFP]-1659889210785
PATCH
\n\nNode: host-68\n
\n\nDate: Sun 07 Aug 2022 09:20:11 AM PDT\n
End running Nopol Math/78 results at /experiment_home///results/Nopol/Math/78/seed_261/
Removing checked out dir script/workingdir/Nopol/Math_78
GPR[SSLE]-1659889211351
GPR[ESLE]-1659889271356
