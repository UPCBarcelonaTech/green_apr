--- script/workingdir/jGenProg/Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava
+++ script/workingdir/jGenProg/Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava
@@ -1544,75 +1544,75 @@
-						b2 = work[nn - 13] / work[nn - 15];
-						a2 = a2 + b2;
-						for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {
-							if (b2 == 0.0) {
-								break;
-							}
-							b1 = b2;
-							if (work[i4] > work[i4 - 2]) {
-								return;
-							}
-							b2 = b2 * (work[i4] / work[i4 - 2]);
-							a2 = a2 + b2;
-							if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) {
-								break;
-							}
-						}
-						a2 = cnst3 * a2;
-					}
-
-					if (a2 < cnst1) {
-						tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);
-					} else {
-						tau = s;
-					}
-
-				} else {
-
-					// case 6, no information to guide us.
-					if (tType == (-6)) {
-						g += 0.333 * (1 - g);
-					} else if (tType == (-18)) {
-						g = 0.25 * 0.333;
-					} else {
-						g = 0.25;
-					}
-					tau = g * dMin;
-					tType = -6;
-
-				}
-				break;
-
-			case 1 : 				// one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
-				if ((dMin1 == dN1) && (dMin2 == dN2)) {
-
-					// cases 7 and 8.
-					tType = -7;
-					double s = 0.333 * dMin1;
-					if (work[nn - 5] > work[nn - 7]) {
-						return;
-					}
-					double b1 = work[nn - 5] / work[nn - 7];
-					double b2 = b1;
-					if (b2 != 0.0) {
-						for (int i4 = ((4 * end) - 10) + pingPong; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) {
-							final double oldB1 = b1;
-							if (work[i4] > work[i4 - 2]) {
-								return;
-							}
-							b1 = b1 * (work[i4] / work[i4 - 2]);
-							b2 = b2 + b1;
-							if ((100 * java.lang.Math.max(b1, oldB1)) < b2) {
-								break;
-							}
-						}
-					}
-					b2 = java.lang.Math.sqrt(cnst3 * b2);
-					final double a2 = dMin1 / (1 + (b2 * b2));
-					final double gap2 = (0.5 * dMin2) - a2;
-					if ((gap2 > 0.0) && (gap2 > (b2 * a2))) {
-						tau = java.lang.Math.max(s, a2 * (1 - (((cnst2 * a2) * (b2 / gap2)) * b2)));
-					} else {
-						tau = java.lang.Math.max(s, a2 * (1 - (cnst2 * b2)));
-						tType = -8;
-					}
-				} else {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+						tType = -8; 						a2 = a2 + b2; 						for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) { 							if (b2 == 0.0) { 								break;} 							b1 = b2; 							if (work[i4] > work[i4 - 2]) { 								return;} 							b2 = b2 * (work[i4] / work[i4 - 2]); 							a2 = a2 + b2; 							if (((100 * java.lang.Math.max(b2, b1)) < a2) || (cnst1 < a2)) { 								break;}} 						a2 = cnst3 * a2;} 					if (a2 < cnst1) { 						tau = (gam * (1 - java.lang.Math.sqrt(a2))) / (1 + a2);} else { 						tau = s;}} else { 					// case 6, no information to guide us.
+					if (tType == (-6)) { 						g += 0.333 * (1 - g);} else if (tType == (-18)) { 						g = 0.25 * 0.333;} else { 						g = 0.25;} 					tau = g * dMin; 					tType = -6;} 				break; 			case 1 : 				// one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
+				if ((dMin1 == dN1) && (dMin2 == dN2)) { 					// cases 7 and 8. 					tType = -7; 					double s = 0.333 * dMin1; 					if (work[nn - 5] > work[nn - 7]) { 						return;} 					double b1 = work[nn - 5] / work[nn - 7]; 					double b2 = b1; 					if (b2 != 0.0) { 						for (int i4 = ((4 * end) - 10) + pingPong; i4 >= (((4 * start) + 2) + pingPong); i4 -= 4) { 							final double oldB1 = b1; 							if (work[i4] > work[i4 - 2]) { 								return;} 							b1 = b1 * (work[i4] / work[i4 - 2]); 							b2 = b2 + b1; 							if ((100 * java.lang.Math.max(b1, oldB1)) < b2) { 								break;}}} 					b2 = java.lang.Math.sqrt(cnst3 * b2); 					final double a2 = dMin1 / (1 + (b2 * b2)); 					final double gap2 = (0.5 * dMin2) - a2; 					if ((gap2 > 0.0) && (gap2 > (b2 * a2))) { 						tau = java.lang.Math.max(s, a2 * (1 - (((cnst2 * a2) * (b2 / gap2)) * b2)));} else { 						tau = java.lang.Math.max(s, a2 * (1 - (cnst2 * b2))); 						tType = -8;}} else {

