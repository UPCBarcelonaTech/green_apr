{
  "VARIANT_ID": "58",
  "VALIDATION": "|true|0|1304|[]|",
  "patchhunks": [
    {
      "LOCATION": "org.apache.commons.math.distribution.FDistributionImpl",
      "PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Math_95\\/src\\/java\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java",
      "INGREDIENT_SCOPE": "LOCAL",
      "SUSPICIOUNESS": "0.258",
      "INGREDIENT_PARENT": "return denominatorDegreesOfFreedom",
      "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl",
      "ORIGINAL_CODE": "return ret",
      "BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl",
      "OPERATOR": "ReplaceOp",
      "MODIFIED_FILE_PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Math_95\\/.\\/output_astor\\/AstorMain-Math95\\/\\/src\\/\\/variant-58\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java",
      "LINE": "148",
      "MP_RANKING": "5",
      "PATCH_HUNK_CODE": "return denominatorDegreesOfFreedom"
    }
  ],
  "TIME": "9",
  "GENERATION": "29",
  "FOLDER_SOLUTION_CODE": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Math_95\\/.\\/output_astor\\/AstorMain-Math95\\/\\/src\\/\\/variant-58",
  "PATCH_DIFF_ORIG": "--- \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Math_95\\/src\\/java\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpljava\\n+++ \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Math_95\\/src\\/java\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpljava\\n@@ -148,2 +147,0 @@\\n-\\t\\treturn ret;\\n-\\t}\\n@@ -151 +149,44 @@\\n-\\t\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn denominatorDegreesOfFreedom;} \\t\\/**\\n@@ -159,7 +200 @@\\n-\\t *\\/ \\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom \u003c\u003d 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\n-\\t\\t\\t\\\"degrees of freedom must be positive.\\\");\\n-\\t\\t}\\n-\\t\\tthis.numeratorDegreesOfFreedom \u003d degreesOfFreedom;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom \u003c\u003d 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"degrees of freedom must be positive.\\\");} \\t\\tthis.numeratorDegreesOfFreedom \u003d degreesOfFreedom;} \\t\\/**\\n@@ -169,5 +204 @@\\n-\\t *\\/ \\tpublic double getNumeratorDegreesOfFreedom() {\\n-\\t\\treturn numeratorDegreesOfFreedom;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic double getNumeratorDegreesOfFreedom() { \\t\\treturn numeratorDegreesOfFreedom;} \\t\\/**\\n@@ -181,7 +212 @@\\n-\\t *\\/ \\tpublic void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom \u003c\u003d 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\n-\\t\\t\\t\\\"degrees of freedom must be positive.\\\");\\n-\\t\\t}\\n-\\t\\tthis.denominatorDegreesOfFreedom \u003d degreesOfFreedom;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom \u003c\u003d 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"degrees of freedom must be positive.\\\");} \\t\\tthis.denominatorDegreesOfFreedom \u003d degreesOfFreedom;} \\t\\/**\\n@@ -191,3 +216 @@\\n-\\t *\\/ \\tpublic double getDenominatorDegreesOfFreedom() {\\n-\\t\\treturn denominatorDegreesOfFreedom;\\n-\\t}}\\n\\\\ No newline at end of file\\n+\\t *\\/ \\tpublic double getDenominatorDegreesOfFreedom() { \\t\\treturn denominatorDegreesOfFreedom;}}\\n\\\\ No newline at end of file\\n\\n"
}