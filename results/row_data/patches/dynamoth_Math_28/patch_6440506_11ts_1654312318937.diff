--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -112,8 +112,9 @@
 
-        if (minRatioPositions.size() == 0) {
-            return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
+        if (this.restrictToNonNegative() == minRatioPositions.contains((java.lang.Object) this)) {
+            if (minRatioPositions.size() == 0) {
+                return null;
+            } else if (minRatioPositions.size() > 1) {
+                // there's a degeneracy as indicated by a tie in the minimum ratio test
+                
+                // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
@@ -127,12 +128,12 @@
                 }
-
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+                
+                // 2. apply Bland's rule to prevent cycling:
+                //    take the row for which the corresponding basic variable has the smallest index
+                //
+                // see http://www.stanford.edu/class/msande310/blandrule.pdf
+                // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
+                //
+                // Additional heuristic: if we did not get a solution after half of maxIterations
+                //                       revert to the simple case of just returning the top-most row
+                // This heuristic is based on empirical data gathered while investigating MATH-828.
                 Integer minRow = null;
@@ -151,2 +152,3 @@
                 return minRow;
+            }
         }
