{
  "VARIANT_ID": "443",
  "VALIDATION": "|true|0|2104|[]|",
  "patchhunks": [
    {
      "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl",
      "PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jMutRepair\\/Math_80\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java",
      "ORIGINAL_CODE": "(range \u003c absoluteTolerance) || \\n(range \u003c (relativeTolerance * java.lang.Math.max(java.lang.Math.abs(left), java.lang.Math.abs(right))))",
      "BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl",
      "OPERATOR": "IfExpresionMutOp",
      "MODIFIED_FILE_PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jMutRepair\\/Math_80\\/.\\/output_astor\\/AstorMain-Math80\\/\\/src\\/\\/variant-443\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java",
      "LINE": "1203",
      "SUSPICIOUNESS": "0.243",
      "MP_RANKING": "45",
      "PATCH_HUNK_CODE": "(range \u003c absoluteTolerance) || (\\nrange \u003c (relativeTolerance % java.lang.Math.max(java.lang.Math.abs(left), java.lang.Math.abs(right))))",
      "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"
    }
  ],
  "TIME": "283",
  "GENERATION": "1",
  "FOLDER_SOLUTION_CODE": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jMutRepair\\/Math_80\\/.\\/output_astor\\/AstorMain-Math80\\/\\/src\\/\\/variant-443",
  "PATCH_DIFF_ORIG": "--- \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jMutRepair\\/Math_80\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpljava\\n+++ \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jMutRepair\\/Math_80\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpljava\\n@@ -1203,2 +1203,2 @@\\n-\\t\\t\\tif ((range \u003c absoluteTolerance) || \\n-\\t\\t\\t(range \u003c (relativeTolerance * java.lang.Math.max(java.lang.Math.abs(left), java.lang.Math.abs(right))))) {\\n+\\t\\t\\tif ((range \u003c absoluteTolerance) || (\\n+\\t\\t\\trange \u003c (relativeTolerance % java.lang.Math.max(java.lang.Math.abs(left), java.lang.Math.abs(right))))) {\\n\\n"
}