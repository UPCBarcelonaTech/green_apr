{"nbStatement":209,"executionTime":6650867,"date":"Fri Jun 03 21:27:06 EDT 2022","patch":[{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if ((this.getOriginalNumDecisionVariables() - 1) == 1) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if ((this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions()) == 1) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if ((this.getOriginalNumDecisionVariables() - this.getSlackVariableOffset()) == 1) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if ((this.getOriginalNumDecisionVariables() - this.getArtificialVariableOffset()) == 1) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - 1)) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions())) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getSlackVariableOffset())) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getArtificialVariableOffset())) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getSlackVariableOffset() == (this.getOriginalNumDecisionVariables() - 1)) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -260,5 +260,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (this.getSlackVariableOffset() == (this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions())) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":5,"patchLocation":{"line":261,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if ((this.getOriginalNumDecisionVariables() - 1) == 1) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if ((this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions()) == 1) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if ((this.getOriginalNumDecisionVariables() - this.getSlackVariableOffset()) == 1) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if ((this.getOriginalNumDecisionVariables() - this.getArtificialVariableOffset()) == 1) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - 1)) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions())) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getSlackVariableOffset())) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getNumObjectiveFunctions() == (this.getOriginalNumDecisionVariables() - this.getArtificialVariableOffset())) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getSlackVariableOffset() == (this.getOriginalNumDecisionVariables() - 1)) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}},{"patch":"--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -259,6 +259,8 @@\n     private LinearConstraint normalize(final LinearConstraint constraint) {\n-        if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+        if (this.getSlackVariableOffset() == (this.getOriginalNumDecisionVariables() - this.getNumObjectiveFunctions())) {\n+            if (constraint.getValue() < 0) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":28,"patchLocation":{"line":260,"class":"org.apache.commons.math3.optimization.linear.SimplexTableau"}}],"nb_methods":3747,"nb_classes":574,"nbAngelicValue":8}