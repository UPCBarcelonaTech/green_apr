{
  "VARIANT_ID": "28522",
  "VALIDATION": "|true|0|3243|[]|",
  "patchhunks": [
    {
      "LOCATION": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
      "PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java",
      "INGREDIENT_SCOPE": "PACKAGE",
      "SUSPICIOUNESS": "0.816",
      "INGREDIENT_PARENT": "return 1",
      "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl",
      "ORIGINAL_CODE": "return this.data.getColumnCount()",
      "BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl",
      "OPERATOR": "ReplaceOp",
      "MODIFIED_FILE_PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/.\\/output_astor\\/AstorMain-Chart25\\/\\/src\\/\\/variant-28522\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java",
      "LINE": "273",
      "MP_RANKING": "20",
      "PATCH_HUNK_CODE": "return 1"
    }
  ],
  "TIME": "11882",
  "GENERATION": "14261",
  "FOLDER_SOLUTION_CODE": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/.\\/output_astor\\/AstorMain-Chart25\\/\\/src\\/\\/variant-28522",
  "PATCH_DIFF_ORIG": "--- \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDatasetjava\\n+++ \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDatasetjava\\n@@ -273,2 +272,0 @@\\n-\\t\\treturn this.data.getColumnCount();\\n-\\t}\\n@@ -276 +274,145 @@\\n-\\t\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn 1;} \\t\\/**\\n@@ -287,3 +429 @@\\n-\\t *\\/ \\tpublic void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { \\t\\tadd(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { \\t\\tadd(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);} \\t\\/**\\n@@ -300,43 +440 @@\\n-\\t *\\/ \\tpublic void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { \\t\\torg.jfree.data.statistics.MeanAndStandardDeviation item \u003d new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);\\n-\\t\\tthis.data.addObject(item, rowKey, columnKey);\\n-\\t\\tdouble m \u003d 0.0;\\n-\\t\\tdouble sd \u003d 0.0;\\n-\\t\\tif (mean !\u003d null) {\\n-\\t\\t\\tm \u003d mean.doubleValue();\\n-\\t\\t}\\n-\\t\\tif (standardDeviation !\u003d null) {\\n-\\t\\t\\tsd \u003d standardDeviation.doubleValue();\\n-\\t\\t}\\n-\\n-\\t\\tif (!java.lang.Double.isNaN(m)) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(this.maximumRangeValue) || \\n-\\t\\t\\t(m \u003e this.maximumRangeValue)) {\\n-\\t\\t\\t\\tthis.maximumRangeValue \u003d m;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\n-\\t\\tif (!java.lang.Double.isNaN(m + sd)) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || \\n-\\t\\t\\t((m + sd) \u003e this.maximumRangeValueIncStdDev)) {\\n-\\t\\t\\t\\tthis.maximumRangeValueIncStdDev \u003d m + sd;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\n-\\t\\tif (!java.lang.Double.isNaN(m)) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(this.minimumRangeValue) || \\n-\\t\\t\\t(m \u003c this.minimumRangeValue)) {\\n-\\t\\t\\t\\tthis.minimumRangeValue \u003d m;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\n-\\t\\tif (!java.lang.Double.isNaN(m - sd)) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || \\n-\\t\\t\\t((m - sd) \u003c this.minimumRangeValueIncStdDev)) {\\n-\\t\\t\\t\\tthis.minimumRangeValueIncStdDev \u003d m - sd;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\n-\\t\\tfireDatasetChanged();\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { \\t\\torg.jfree.data.statistics.MeanAndStandardDeviation item \u003d new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation); \\t\\tthis.data.addObject(item, rowKey, columnKey); \\t\\tdouble m \u003d 0.0; \\t\\tdouble sd \u003d 0.0; \\t\\tif (mean !\u003d null) { \\t\\t\\tm \u003d mean.doubleValue();} \\t\\tif (standardDeviation !\u003d null) { \\t\\t\\tsd \u003d standardDeviation.doubleValue();} \\t\\tif (!java.lang.Double.isNaN(m)) { \\t\\t\\tif (java.lang.Double.isNaN(this.maximumRangeValue) || (m \u003e this.maximumRangeValue)) { \\t\\t\\t\\tthis.maximumRangeValue \u003d m;}} \\t\\tif (!java.lang.Double.isNaN(m + sd)) { \\t\\t\\tif (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) \u003e this.maximumRangeValueIncStdDev)) { \\t\\t\\t\\tthis.maximumRangeValueIncStdDev \u003d m + sd;}} \\t\\tif (!java.lang.Double.isNaN(m)) { \\t\\t\\tif (java.lang.Double.isNaN(this.minimumRangeValue) || (m \u003c this.minimumRangeValue)) { \\t\\t\\t\\tthis.minimumRangeValue \u003d m;}} \\t\\tif (!java.lang.Double.isNaN(m - sd)) { \\t\\t\\tif (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) \u003c this.minimumRangeValueIncStdDev)) { \\t\\t\\t\\tthis.minimumRangeValueIncStdDev \u003d m - sd;}} \\t\\tfireDatasetChanged();} \\t\\/**\\n@@ -350,6 +448 @@\\n-\\t *\\/\\n-\\tpublic double getRangeLowerBound(boolean includeInterval) {\\n-\\t\\treturn this.minimumRangeValue;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic double getRangeLowerBound(boolean includeInterval) { \\t\\treturn this.minimumRangeValue;} \\t\\/**\\n@@ -363,6 +456 @@\\n-\\t *\\/\\n-\\tpublic double getRangeUpperBound(boolean includeInterval) {\\n-\\t\\treturn this.maximumRangeValue;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic double getRangeUpperBound(boolean includeInterval) { \\t\\treturn this.maximumRangeValue;} \\t\\/**\\n@@ -375,18 +463 @@\\n-\\t *\\/\\n-\\tpublic org.jfree.data.Range getRangeBounds(boolean includeInterval) {\\n-\\t\\torg.jfree.data.Range result \u003d null;\\n-\\t\\tif (includeInterval) {\\n-\\t\\t\\tif ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) \u0026\u0026 \\n-\\t\\t\\t(!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) \\n-\\t\\t\\t{ \\t\\t\\t\\tresult \u003d new org.jfree.data.Range(this.minimumRangeValueIncStdDev, \\n-\\t\\t\\t\\tthis.maximumRangeValueIncStdDev);}\\n-\\t\\t} else \\n-\\n-\\t\\tif ((!java.lang.Double.isNaN(this.minimumRangeValue)) \u0026\u0026 \\n-\\t\\t(!java.lang.Double.isNaN(this.maximumRangeValue)))\\n-\\t\\t\\tresult \u003d new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);\\n-\\n-\\t\\treturn result;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.jfree.data.Range getRangeBounds(boolean includeInterval) { \\t\\torg.jfree.data.Range result \u003d null; \\t\\tif (includeInterval) { \\t\\t\\tif ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) \u0026\u0026 (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) { \\t\\t\\t\\tresult \u003d new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);}} else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) \u0026\u0026 (!java.lang.Double.isNaN(this.maximumRangeValue))) \\t\\t\\tresult \u003d new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue); \\t\\treturn result;} \\t\\/**\\n@@ -398,15 +469 @@\\n-\\t *\\/\\n-\\tpublic boolean equals(java.lang.Object obj) {\\n-\\t\\tif (obj \u003d\u003d this) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\torg.jfree.data.statistics.DefaultStatisticalCategoryDataset that \u003d \\n-\\t\\t((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));\\n-\\t\\tif (!this.data.equals(that.data)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}}\\n\\\\ No newline at end of file\\n+\\t *\\/ \\tpublic boolean equals(java.lang.Object obj) { \\t\\tif (obj \u003d\u003d this) { \\t\\t\\treturn true;} \\t\\tif (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) { \\t\\t\\treturn false;} \\t\\torg.jfree.data.statistics.DefaultStatisticalCategoryDataset that \u003d ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj)); \\t\\tif (!this.data.equals(that.data)) { \\t\\t\\treturn false;} \\t\\treturn true;}}\\n\\\\ No newline at end of file\\n\\n"
}