{"nbStatement":58,"executionTime":582456,"date":"Thu Aug 18 21:48:05 EDT 2022","patch":[{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.imaginary == this.real) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.imaginary == this.getReal()) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.real == this.imaginary) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.real == this.getImaginary()) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.getImaginary() == this.real) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.getImaginary() == this.getReal()) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.getReal() == this.imaginary) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.getReal() == this.getImaginary()) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.imaginary <= 1) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -259,3 +259,5 @@\n             // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+            if (this.getImaginary() <= 1) {\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":4,"patchLocation":{"line":260,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.imaginary == this.real) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.imaginary == this.getReal()) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.real == this.imaginary) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.real == this.getImaginary()) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.getImaginary() == this.real) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.getImaginary() == this.getReal()) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.getReal() == this.imaginary) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.getReal() == this.getImaginary()) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.imaginary <= this.real) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,5 +257,7 @@\n \n-        if (divisor.isZero) {\n-            // return isZero ? NaN : INF; // See MATH-657\n-            return isZero ? NaN : INF;\n+        if (this.imaginary <= this.getReal()) {\n+            if (divisor.isZero) {\n+                // return isZero ? NaN : INF; // See MATH-657\n+                return isZero ? NaN : INF;\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((this.imaginary == this.real) && (divisor.abs() == divisor.getArgument())) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((divisor.abs() == divisor.getArgument()) && (this.imaginary == this.real)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((this.imaginary == this.real) && (divisor.getReal() == divisor.getArgument())) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((divisor.getReal() == divisor.getArgument()) && (this.imaginary == this.real)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((this.imaginary == this.real) && (divisor.getArgument() == divisor.abs())) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((divisor.getArgument() == divisor.abs()) && (this.imaginary == this.real)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((this.imaginary == this.real) && (divisor.getArgument() == divisor.getReal())) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((divisor.getArgument() == divisor.getReal()) && (this.imaginary == this.real)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((this.imaginary == this.real) && (divisor.abs() <= 0)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}},{"patch":"--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -257,3 +257,3 @@\n \n-        if (divisor.isZero) {\n+        if ((divisor.abs() <= 0) && (this.imaginary == this.real)) {\n             // return isZero ? NaN : INF; // See MATH-657\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":15,"patchLocation":{"line":258,"class":"org.apache.commons.math.complex.Complex"}}],"nb_methods":3599,"nb_classes":571,"nbAngelicValue":4}