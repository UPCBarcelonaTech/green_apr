{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codet5_large_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688805436316,
      "ESLB": 1688805456337,
      "SPVS": 1688805456337,
      "SPVAP": 1688805456339,
      "EPVAP": 1688805456341,
      "SPVATF": 1688805456341,
      "EPVATF": 1688805459350,
      "SPVATR": 1688805459350,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1688805459352
    },
    {
      "rank": 1,
      "SSLB": 1688805459352,
      "ESLB": 1688805479372,
      "SPVS": 1688805479372,
      "SPVAP": 1688805479373,
      "EPVAP": 1688805479374,
      "SPVATF": 1688805479374,
      "EPVATF": 1688805481382,
      "SPVATR": 1688805481382,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(objType)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1688805481383
    },
    {
      "rank": 2,
      "SSLB": 1688805481383,
      "ESLB": 1688805501403,
      "SPVS": 1688805501403,
      "SPVAP": 1688805501406,
      "EPVAP": 1688805501407,
      "SPVATF": 1688805501407,
      "EPVATF": 1688805504418,
      "SPVATR": 1688805504418,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(type)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(type);\n        }\n        objType.defineInferredProperty(type, typeToInfer, null);\n",
      "EPVS": 1688805504420
    },
    {
      "rank": 3,
      "SSLB": 1688805504420,
      "ESLB": 1688805524440,
      "SPVS": 1688805524440,
      "SPVAP": 1688805524443,
      "EPVAP": 1688805524444,
      "SPVATF": 1688805524444,
      "EPVATF": 1688805526451,
      "SPVATR": 1688805526451,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1688805526451
    },
    {
      "rank": 4,
      "SSLB": 1688805526451,
      "ESLB": 1688805546472,
      "SPVS": 1688805546472,
      "SPVAP": 1688805546474,
      "EPVAP": 1688805546476,
      "SPVATF": 1688805546476,
      "EPVATF": 1688805549485,
      "SPVATR": 1688805549485,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1688805549486
    },
    {
      "rank": 5,
      "SSLB": 1688805549486,
      "ESLB": 1688805569506,
      "SPVS": 1688805569506,
      "SPVAP": 1688805569509,
      "EPVAP": 1688805569510,
      "SPVATF": 1688805569510,
      "EPVATF": 1688805571524,
      "SPVATR": 1688805571524,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        ObjectType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1688805571525
    },
    {
      "rank": 6,
      "SSLB": 1688805571525,
      "ESLB": 1688805591545,
      "SPVS": 1688805591545,
      "SPVAP": 1688805591547,
      "EPVAP": 1688805591548,
      "SPVATF": 1688805591548,
      "EPVATF": 1688805594556,
      "SPVATR": 1688805594556,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                break;\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1688805594558
    },
    {
      "rank": 7,
      "SSLB": 1688805594558,
      "ESLB": 1688805614578,
      "SPVS": 1688805614578,
      "SPVAP": 1688805614580,
      "EPVAP": 1688805614581,
      "SPVATF": 1688805614581,
      "EPVATF": 1688805617590,
      "SPVATR": 1688805617590,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null && objType.isRecordType()) {\n        objType.defineInferredProperty(objType, typeToInfer, null);\n",
      "EPVS": 1688805617591
    },
    {
      "rank": 8,
      "SSLB": 1688805617591,
      "ESLB": 1688805637611,
      "SPVS": 1688805637611,
      "SPVAP": 1688805637613,
      "EPVAP": 1688805637615,
      "SPVATF": 1688805637615,
      "EPVATF": 1688805640625,
      "SPVATR": 1688805640625,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1688805640627
    },
    {
      "rank": 9,
      "SSLB": 1688805640627,
      "ESLB": 1688805660647,
      "SPVS": 1688805660647,
      "SPVAP": 1688805660649,
      "EPVAP": 1688805660651,
      "SPVATF": 1688805660651,
      "EPVATF": 1688805662659,
      "SPVATR": 1688805662659,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n",
      "EPVS": 1688805662660
    }
  ],
  "SSLI": 1688801207594,
  "ESLI": 1688801237624,
  "hostname": "gros-69.nancy.grid5000.fr",
  "OAR_JOB_ID": "4222608"
}