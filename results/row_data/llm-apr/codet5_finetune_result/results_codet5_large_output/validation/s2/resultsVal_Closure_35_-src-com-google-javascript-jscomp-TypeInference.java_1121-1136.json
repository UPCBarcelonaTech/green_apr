{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codet5_large_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689712755809,
      "ESLB": 1689712775826,
      "SPVS": 1689712775826,
      "SPVAP": 1689712775829,
      "EPVAP": 1689712775830,
      "SPVATF": 1689712775830,
      "EPVATF": 1689712778843,
      "SPVATR": 1689712778843,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689712778845
    },
    {
      "rank": 1,
      "SSLB": 1689712778845,
      "ESLB": 1689712798865,
      "SPVS": 1689712798865,
      "SPVAP": 1689712798867,
      "EPVAP": 1689712798868,
      "SPVATF": 1689712798868,
      "EPVATF": 1689712801877,
      "SPVATR": 1689712801877,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(objType)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689712801879
    },
    {
      "rank": 2,
      "SSLB": 1689712801879,
      "ESLB": 1689712821899,
      "SPVS": 1689712821899,
      "SPVAP": 1689712821902,
      "EPVAP": 1689712821904,
      "SPVATF": 1689712821904,
      "EPVATF": 1689712824916,
      "SPVATR": 1689712824916,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(type)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(type);\n        }\n        objType.defineInferredProperty(type, typeToInfer, null);\n",
      "EPVS": 1689712824919
    },
    {
      "rank": 3,
      "SSLB": 1689712824919,
      "ESLB": 1689712844939,
      "SPVS": 1689712844939,
      "SPVAP": 1689712844942,
      "EPVAP": 1689712844943,
      "SPVATF": 1689712844943,
      "EPVATF": 1689712847952,
      "SPVATR": 1689712847952,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689712847953
    },
    {
      "rank": 4,
      "SSLB": 1689712847953,
      "ESLB": 1689712867973,
      "SPVS": 1689712867973,
      "SPVAP": 1689712867975,
      "EPVAP": 1689712867977,
      "SPVATF": 1689712867977,
      "EPVATF": 1689712870985,
      "SPVATR": 1689712870985,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689712870986
    },
    {
      "rank": 5,
      "SSLB": 1689712870986,
      "ESLB": 1689712891007,
      "SPVS": 1689712891007,
      "SPVAP": 1689712891013,
      "EPVAP": 1689712891015,
      "SPVATF": 1689712891015,
      "EPVATF": 1689712894026,
      "SPVATR": 1689712894026,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        ObjectType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689712894028
    },
    {
      "rank": 6,
      "SSLB": 1689712894028,
      "ESLB": 1689712914048,
      "SPVS": 1689712914048,
      "SPVAP": 1689712914055,
      "EPVAP": 1689712914057,
      "SPVATF": 1689712914057,
      "EPVATF": 1689712917080,
      "SPVATR": 1689712917080,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                break;\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689712917082
    },
    {
      "rank": 7,
      "SSLB": 1689712917082,
      "ESLB": 1689712937102,
      "SPVS": 1689712937102,
      "SPVAP": 1689712937104,
      "EPVAP": 1689712937106,
      "SPVATF": 1689712937106,
      "EPVATF": 1689712940115,
      "SPVATR": 1689712940115,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null && objType.isRecordType()) {\n        objType.defineInferredProperty(objType, typeToInfer, null);\n",
      "EPVS": 1689712940116
    },
    {
      "rank": 8,
      "SSLB": 1689712940116,
      "ESLB": 1689712960136,
      "SPVS": 1689712960136,
      "SPVAP": 1689712960141,
      "EPVAP": 1689712960143,
      "SPVATF": 1689712960143,
      "EPVATF": 1689712963153,
      "SPVATR": 1689712963153,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689712963155
    },
    {
      "rank": 9,
      "SSLB": 1689712963155,
      "ESLB": 1689712983175,
      "SPVS": 1689712983175,
      "SPVAP": 1689712983177,
      "EPVAP": 1689712983179,
      "SPVATF": 1689712983179,
      "EPVATF": 1689712986200,
      "SPVATR": 1689712986200,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n",
      "EPVS": 1689712986202
    }
  ],
  "SSLI": 1689705076175,
  "ESLI": 1689705106205,
  "hostname": "gros-44.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}