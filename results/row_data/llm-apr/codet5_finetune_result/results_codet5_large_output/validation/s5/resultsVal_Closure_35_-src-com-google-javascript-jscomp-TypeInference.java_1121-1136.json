{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codet5_large_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689894324355,
      "ESLB": 1689894344375,
      "SPVS": 1689894344375,
      "SPVAP": 1689894344377,
      "EPVAP": 1689894344378,
      "SPVATF": 1689894344378,
      "EPVATF": 1689894347391,
      "SPVATR": 1689894347391,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689894347392
    },
    {
      "rank": 1,
      "SSLB": 1689894347392,
      "ESLB": 1689894367412,
      "SPVS": 1689894367412,
      "SPVAP": 1689894367413,
      "EPVAP": 1689894367415,
      "SPVATF": 1689894367415,
      "EPVATF": 1689894370421,
      "SPVATR": 1689894370421,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(objType)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689894370422
    },
    {
      "rank": 2,
      "SSLB": 1689894370422,
      "ESLB": 1689894390443,
      "SPVS": 1689894390443,
      "SPVAP": 1689894390444,
      "EPVAP": 1689894390445,
      "SPVATF": 1689894390445,
      "EPVATF": 1689894392450,
      "SPVATR": 1689894392450,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(type)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(type);\n        }\n        objType.defineInferredProperty(type, typeToInfer, null);\n",
      "EPVS": 1689894392451
    },
    {
      "rank": 3,
      "SSLB": 1689894392451,
      "ESLB": 1689894412471,
      "SPVS": 1689894412471,
      "SPVAP": 1689894412473,
      "EPVAP": 1689894412474,
      "SPVATF": 1689894412474,
      "EPVATF": 1689894415482,
      "SPVATR": 1689894415482,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(type)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689894415483
    },
    {
      "rank": 4,
      "SSLB": 1689894415483,
      "ESLB": 1689894435503,
      "SPVS": 1689894435503,
      "SPVAP": 1689894435505,
      "EPVAP": 1689894435506,
      "SPVATF": 1689894435506,
      "EPVATF": 1689894437511,
      "SPVATR": 1689894437511,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n",
      "EPVS": 1689894437512
    },
    {
      "rank": 5,
      "SSLB": 1689894437512,
      "ESLB": 1689894457532,
      "SPVS": 1689894457532,
      "SPVAP": 1689894457533,
      "EPVAP": 1689894457534,
      "SPVATF": 1689894457534,
      "EPVATF": 1689894460541,
      "SPVATR": 1689894460541,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        ObjectType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689894460542
    },
    {
      "rank": 6,
      "SSLB": 1689894460542,
      "ESLB": 1689894480562,
      "SPVS": 1689894480562,
      "SPVAP": 1689894480563,
      "EPVAP": 1689894480564,
      "SPVATF": 1689894480564,
      "EPVATF": 1689894483572,
      "SPVATR": 1689894483572,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                break;\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689894483573
    },
    {
      "rank": 7,
      "SSLB": 1689894483573,
      "ESLB": 1689894503593,
      "SPVS": 1689894503593,
      "SPVAP": 1689894503595,
      "EPVAP": 1689894503596,
      "SPVATF": 1689894503596,
      "EPVATF": 1689894505601,
      "SPVATR": 1689894505601,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null && objType.isRecordType()) {\n        objType.defineInferredProperty(objType, typeToInfer, null);\n",
      "EPVS": 1689894505602
    },
    {
      "rank": 8,
      "SSLB": 1689894505602,
      "ESLB": 1689894525622,
      "SPVS": 1689894525622,
      "SPVAP": 1689894525624,
      "EPVAP": 1689894525625,
      "SPVATF": 1689894525625,
      "EPVATF": 1689894527631,
      "SPVATR": 1689894527631,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null &&!objType.isPropertyTypeDeclared(constraintObj)) {\n        JSType typeToInfer = objType;\n        if (!objType.hasProperty(constraintObj)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(constraintObj, typeToInfer, null);\n",
      "EPVS": 1689894527632
    },
    {
      "rank": 9,
      "SSLB": 1689894527632,
      "ESLB": 1689894547652,
      "SPVS": 1689894547652,
      "SPVAP": 1689894547653,
      "EPVAP": 1689894547654,
      "SPVATF": 1689894547654,
      "EPVATF": 1689894550662,
      "SPVATR": 1689894550662,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n",
      "EPVS": 1689894550663
    }
  ],
  "SSLI": 1689887030917,
  "ESLI": 1689887060947,
  "hostname": "gros-45.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}