{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689832393853,
      "ESLB": 1689832413873,
      "SPVS": 1689832413873,
      "SPVAP": 1689832413874,
      "EPVAP": 1689832413875,
      "SPVATF": 1689832413875,
      "EPVATF": 1689832415881,
      "SPVATR": 1689832415881,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689832415882
    },
    {
      "rank": 1,
      "SSLB": 1689832415882,
      "ESLB": 1689832435902,
      "SPVS": 1689832435902,
      "SPVAP": 1689832435905,
      "EPVAP": 1689832435906,
      "SPVATF": 1689832435906,
      "EPVATF": 1689832437912,
      "SPVATR": 1689832437912,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1689832437912
    },
    {
      "rank": 2,
      "SSLB": 1689832437912,
      "ESLB": 1689832457933,
      "SPVS": 1689832457933,
      "SPVAP": 1689832457934,
      "EPVAP": 1689832457934,
      "SPVATF": 1689832457934,
      "EPVATF": 1689832459953,
      "SPVATR": 1689832459953,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689832459954
    },
    {
      "rank": 3,
      "SSLB": 1689832459954,
      "ESLB": 1689832479974,
      "SPVS": 1689832479974,
      "SPVAP": 1689832479975,
      "EPVAP": 1689832479976,
      "SPVATF": 1689832479976,
      "EPVATF": 1689832481982,
      "SPVATR": 1689832481982,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689832481983
    },
    {
      "rank": 4,
      "SSLB": 1689832481983,
      "ESLB": 1689832502003,
      "SPVS": 1689832502003,
      "SPVAP": 1689832502005,
      "EPVAP": 1689832502006,
      "SPVATF": 1689832502006,
      "EPVATF": 1689832504011,
      "SPVATR": 1689832504011,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1689832504012
    },
    {
      "rank": 5,
      "SSLB": 1689832504012,
      "ESLB": 1689832524032,
      "SPVS": 1689832524032,
      "SPVAP": 1689832524036,
      "EPVAP": 1689832524036,
      "SPVATF": 1689832524036,
      "EPVATF": 1689832526050,
      "SPVATR": 1689832526050,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1689832526051
    },
    {
      "rank": 6,
      "SSLB": 1689832526051,
      "ESLB": 1689832546071,
      "SPVS": 1689832546071,
      "SPVAP": 1689832546072,
      "EPVAP": 1689832546073,
      "SPVATF": 1689832546073,
      "EPVATF": 1689832549079,
      "SPVATR": 1689832549079,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1689832549080
    },
    {
      "rank": 7,
      "SSLB": 1689832549080,
      "ESLB": 1689832569100,
      "SPVS": 1689832569100,
      "SPVAP": 1689832569101,
      "EPVAP": 1689832569102,
      "SPVATF": 1689832569102,
      "EPVATF": 1689832571107,
      "SPVATR": 1689832571107,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689832571108
    },
    {
      "rank": 8,
      "SSLB": 1689832571108,
      "ESLB": 1689832591128,
      "SPVS": 1689832591128,
      "SPVAP": 1689832591131,
      "EPVAP": 1689832591132,
      "SPVATF": 1689832591132,
      "EPVATF": 1689832593146,
      "SPVATR": 1689832593146,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689832593147
    },
    {
      "rank": 9,
      "SSLB": 1689832593147,
      "ESLB": 1689832613167,
      "SPVS": 1689832613167,
      "SPVAP": 1689832613168,
      "EPVAP": 1689832613168,
      "SPVATF": 1689832613168,
      "EPVATF": 1689832616175,
      "SPVATR": 1689832616175,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689832616176
    }
  ],
  "SSLI": 1689825879446,
  "ESLI": 1689825909476,
  "hostname": "gros-46.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}