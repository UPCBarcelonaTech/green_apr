{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688161608429,
      "ESLB": 1688161628449,
      "SPVS": 1688161628449,
      "SPVAP": 1688161628451,
      "EPVAP": 1688161628452,
      "SPVATF": 1688161628452,
      "EPVATF": 1688161630459,
      "SPVATR": 1688161630459,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1688161630460
    },
    {
      "rank": 1,
      "SSLB": 1688161630460,
      "ESLB": 1688161650480,
      "SPVS": 1688161650480,
      "SPVAP": 1688161650482,
      "EPVAP": 1688161650483,
      "SPVATF": 1688161650483,
      "EPVATF": 1688161653491,
      "SPVATR": 1688161653492,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1688161653493
    },
    {
      "rank": 2,
      "SSLB": 1688161653493,
      "ESLB": 1688161673513,
      "SPVS": 1688161673513,
      "SPVAP": 1688161673514,
      "EPVAP": 1688161673515,
      "SPVATF": 1688161673515,
      "EPVATF": 1688161675523,
      "SPVATR": 1688161675523,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1688161675524
    },
    {
      "rank": 3,
      "SSLB": 1688161675524,
      "ESLB": 1688161695544,
      "SPVS": 1688161695544,
      "SPVAP": 1688161695548,
      "EPVAP": 1688161695548,
      "SPVATF": 1688161695548,
      "EPVATF": 1688161698556,
      "SPVATR": 1688161698556,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1688161698557
    },
    {
      "rank": 4,
      "SSLB": 1688161698557,
      "ESLB": 1688161718578,
      "SPVS": 1688161718578,
      "SPVAP": 1688161718579,
      "EPVAP": 1688161718580,
      "SPVATF": 1688161718580,
      "EPVATF": 1688161720587,
      "SPVATR": 1688161720587,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1688161720588
    },
    {
      "rank": 5,
      "SSLB": 1688161720588,
      "ESLB": 1688161740608,
      "SPVS": 1688161740608,
      "SPVAP": 1688161740610,
      "EPVAP": 1688161740612,
      "SPVATF": 1688161740612,
      "EPVATF": 1688161743622,
      "SPVATR": 1688161743622,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1688161743623
    },
    {
      "rank": 6,
      "SSLB": 1688161743623,
      "ESLB": 1688161763643,
      "SPVS": 1688161763643,
      "SPVAP": 1688161763645,
      "EPVAP": 1688161763646,
      "SPVATF": 1688161763646,
      "EPVATF": 1688161766655,
      "SPVATR": 1688161766655,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1688161766657
    },
    {
      "rank": 7,
      "SSLB": 1688161766657,
      "ESLB": 1688161786677,
      "SPVS": 1688161786677,
      "SPVAP": 1688161786680,
      "EPVAP": 1688161786681,
      "SPVATF": 1688161786681,
      "EPVATF": 1688161789689,
      "SPVATR": 1688161789689,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1688161789690
    },
    {
      "rank": 8,
      "SSLB": 1688161789690,
      "ESLB": 1688161809710,
      "SPVS": 1688161809710,
      "SPVAP": 1688161809712,
      "EPVAP": 1688161809713,
      "SPVATF": 1688161809713,
      "EPVATF": 1688161811720,
      "SPVATR": 1688161811720,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1688161811721
    },
    {
      "rank": 9,
      "SSLB": 1688161811721,
      "ESLB": 1688161831741,
      "SPVS": 1688161831741,
      "SPVAP": 1688161831743,
      "EPVAP": 1688161831744,
      "SPVATF": 1688161831744,
      "EPVATF": 1688161833751,
      "SPVATR": 1688161833751,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1688161833752
    }
  ],
  "SSLI": 1688158226484,
  "ESLI": 1688158256514,
  "hostname": "gros-64.nancy.grid5000.fr",
  "OAR_JOB_ID": "4212950"
}