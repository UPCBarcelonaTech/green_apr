{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688064324627,
      "ESLB": 1688064344647,
      "SPVS": 1688064344647,
      "SPVAP": 1688064344650,
      "EPVAP": 1688064344651,
      "SPVATF": 1688064344651,
      "EPVATF": 1688064344651,
      "SPVATR": 1688064345658,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =",
      "EPVS": 1688064345660
    },
    {
      "rank": 1,
      "SSLB": 1688064345660,
      "ESLB": 1688064365680,
      "SPVS": 1688064365680,
      "SPVAP": 1688064365682,
      "EPVAP": 1688064365683,
      "SPVATF": 1688064365683,
      "EPVATF": 1688064365683,
      "SPVATR": 1688064366690,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {",
      "EPVS": 1688064366692
    },
    {
      "rank": 2,
      "SSLB": 1688064366692,
      "ESLB": 1688064386712,
      "SPVS": 1688064386712,
      "SPVAP": 1688064386714,
      "EPVAP": 1688064386716,
      "SPVATF": 1688064386716,
      "EPVATF": 1688064386716,
      "SPVATR": 1688064387722,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {",
      "EPVS": 1688064387723
    },
    {
      "rank": 3,
      "SSLB": 1688064387723,
      "ESLB": 1688064407743,
      "SPVS": 1688064407743,
      "SPVAP": 1688064407745,
      "EPVAP": 1688064407746,
      "SPVATF": 1688064407746,
      "EPVATF": 1688064407746,
      "SPVATR": 1688064408753,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =",
      "EPVS": 1688064408755
    },
    {
      "rank": 4,
      "SSLB": 1688064408755,
      "ESLB": 1688064428775,
      "SPVS": 1688064428775,
      "SPVAP": 1688064428778,
      "EPVAP": 1688064428779,
      "SPVATF": 1688064428779,
      "EPVATF": 1688064428779,
      "SPVATR": 1688064429786,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = objType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType",
      "EPVS": 1688064429788
    },
    {
      "rank": 5,
      "SSLB": 1688064429788,
      "ESLB": 1688064449808,
      "SPVS": 1688064449808,
      "SPVAP": 1688064449810,
      "EPVAP": 1688064449811,
      "SPVATF": 1688064449811,
      "EPVATF": 1688064449811,
      "SPVATR": 1688064450817,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = objType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(",
      "EPVS": 1688064450819
    },
    {
      "rank": 6,
      "SSLB": 1688064450819,
      "ESLB": 1688064470839,
      "SPVS": 1688064470839,
      "SPVAP": 1688064470841,
      "EPVAP": 1688064470842,
      "SPVATF": 1688064470842,
      "EPVATF": 1688064470842,
      "SPVATR": 1688064471848,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                objType.defineInferred",
      "EPVS": 1688064471849
    },
    {
      "rank": 7,
      "SSLB": 1688064471849,
      "ESLB": 1688064491869,
      "SPVS": 1688064491869,
      "SPVAP": 1688064491871,
      "EPVAP": 1688064491873,
      "SPVATF": 1688064491873,
      "EPVATF": 1688064491873,
      "SPVATR": 1688064492880,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(VOID_TYPE).getLeastSupertype(propType",
      "EPVS": 1688064492882
    },
    {
      "rank": 8,
      "SSLB": 1688064492882,
      "ESLB": 1688064512902,
      "SPVS": 1688064512902,
      "SPVAP": 1688064512904,
      "EPVAP": 1688064512906,
      "SPVATF": 1688064512906,
      "EPVATF": 1688064512906,
      "SPVATR": 1688064513911,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType",
      "EPVS": 1688064513913
    },
    {
      "rank": 9,
      "SSLB": 1688064513913,
      "ESLB": 1688064533933,
      "SPVS": 1688064533933,
      "SPVAP": 1688064533935,
      "EPVAP": 1688064533937,
      "SPVATF": 1688064533937,
      "EPVATF": 1688064533937,
      "SPVATR": 1688064534942,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(",
      "EPVS": 1688064534943
    }
  ],
  "SSLI": 1688059833488,
  "ESLI": 1688059863518,
  "hostname": "gros-69.nancy.grid5000.fr",
  "OAR_JOB_ID": "4214427"
}