{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689706015258,
      "ESLB": 1689706035278,
      "SPVS": 1689706035278,
      "SPVAP": 1689706035280,
      "EPVAP": 1689706035282,
      "SPVATF": 1689706035282,
      "EPVATF": 1689706038290,
      "SPVATR": 1689706038290,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689706038292
    },
    {
      "rank": 1,
      "SSLB": 1689706038292,
      "ESLB": 1689706058312,
      "SPVS": 1689706058312,
      "SPVAP": 1689706058316,
      "EPVAP": 1689706058317,
      "SPVATF": 1689706058318,
      "EPVATF": 1689706060325,
      "SPVATR": 1689706060325,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1689706060326
    },
    {
      "rank": 2,
      "SSLB": 1689706060326,
      "ESLB": 1689706080346,
      "SPVS": 1689706080346,
      "SPVAP": 1689706080350,
      "EPVAP": 1689706080351,
      "SPVATF": 1689706080351,
      "EPVATF": 1689706082365,
      "SPVATR": 1689706082365,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689706082366
    },
    {
      "rank": 3,
      "SSLB": 1689706082366,
      "ESLB": 1689706102386,
      "SPVS": 1689706102386,
      "SPVAP": 1689706102394,
      "EPVAP": 1689706102398,
      "SPVATF": 1689706102398,
      "EPVATF": 1689706104407,
      "SPVATR": 1689706104407,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689706104408
    },
    {
      "rank": 4,
      "SSLB": 1689706104408,
      "ESLB": 1689706124429,
      "SPVS": 1689706124429,
      "SPVAP": 1689706124434,
      "EPVAP": 1689706124435,
      "SPVATF": 1689706124435,
      "EPVATF": 1689706126443,
      "SPVATR": 1689706126443,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1689706126444
    },
    {
      "rank": 5,
      "SSLB": 1689706126444,
      "ESLB": 1689706146464,
      "SPVS": 1689706146464,
      "SPVAP": 1689706146467,
      "EPVAP": 1689706146468,
      "SPVATF": 1689706146468,
      "EPVATF": 1689706149485,
      "SPVATR": 1689706149485,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1689706149487
    },
    {
      "rank": 6,
      "SSLB": 1689706149487,
      "ESLB": 1689706169507,
      "SPVS": 1689706169507,
      "SPVAP": 1689706169511,
      "EPVAP": 1689706169512,
      "SPVATF": 1689706169512,
      "EPVATF": 1689706172521,
      "SPVATR": 1689706172521,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1689706172522
    },
    {
      "rank": 7,
      "SSLB": 1689706172522,
      "ESLB": 1689706192543,
      "SPVS": 1689706192543,
      "SPVAP": 1689706192548,
      "EPVAP": 1689706192549,
      "SPVATF": 1689706192549,
      "EPVATF": 1689706195558,
      "SPVATR": 1689706195558,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689706195559
    },
    {
      "rank": 8,
      "SSLB": 1689706195559,
      "ESLB": 1689706215579,
      "SPVS": 1689706215579,
      "SPVAP": 1689706215584,
      "EPVAP": 1689706215585,
      "SPVATF": 1689706215585,
      "EPVATF": 1689706217600,
      "SPVATR": 1689706217600,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689706217601
    },
    {
      "rank": 9,
      "SSLB": 1689706217601,
      "ESLB": 1689706237621,
      "SPVS": 1689706237621,
      "SPVAP": 1689706237625,
      "EPVAP": 1689706237626,
      "SPVATF": 1689706237626,
      "EPVATF": 1689706239634,
      "SPVATR": 1689706239634,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689706239635
    }
  ],
  "SSLI": 1689700428830,
  "ESLI": 1689700458860,
  "hostname": "gros-46.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}