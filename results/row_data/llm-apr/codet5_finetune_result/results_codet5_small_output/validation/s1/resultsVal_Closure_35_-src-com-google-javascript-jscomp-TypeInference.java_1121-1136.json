{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688804568251,
      "ESLB": 1688804588271,
      "SPVS": 1688804588271,
      "SPVAP": 1688804588274,
      "EPVAP": 1688804588276,
      "SPVATF": 1688804588276,
      "EPVATF": 1688804588276,
      "SPVATR": 1688804589282,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =",
      "EPVS": 1688804589284
    },
    {
      "rank": 1,
      "SSLB": 1688804589284,
      "ESLB": 1688804609304,
      "SPVS": 1688804609304,
      "SPVAP": 1688804609307,
      "EPVAP": 1688804609308,
      "SPVATF": 1688804609308,
      "EPVATF": 1688804609308,
      "SPVATR": 1688804610316,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {",
      "EPVS": 1688804610318
    },
    {
      "rank": 2,
      "SSLB": 1688804610318,
      "ESLB": 1688804630338,
      "SPVS": 1688804630338,
      "SPVAP": 1688804630340,
      "EPVAP": 1688804630342,
      "SPVATF": 1688804630342,
      "EPVATF": 1688804630342,
      "SPVATR": 1688804631348,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {",
      "EPVS": 1688804631349
    },
    {
      "rank": 3,
      "SSLB": 1688804631349,
      "ESLB": 1688804651370,
      "SPVS": 1688804651370,
      "SPVAP": 1688804651371,
      "EPVAP": 1688804651373,
      "SPVATF": 1688804651373,
      "EPVATF": 1688804651373,
      "SPVATR": 1688804652379,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =",
      "EPVS": 1688804652381
    },
    {
      "rank": 4,
      "SSLB": 1688804652381,
      "ESLB": 1688804672401,
      "SPVS": 1688804672401,
      "SPVAP": 1688804672403,
      "EPVAP": 1688804672404,
      "SPVATF": 1688804672404,
      "EPVATF": 1688804672404,
      "SPVATR": 1688804673411,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = objType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType",
      "EPVS": 1688804673412
    },
    {
      "rank": 5,
      "SSLB": 1688804673412,
      "ESLB": 1688804693432,
      "SPVS": 1688804693432,
      "SPVAP": 1688804693435,
      "EPVAP": 1688804693437,
      "SPVATF": 1688804693437,
      "EPVATF": 1688804693437,
      "SPVATR": 1688804694443,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = objType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(",
      "EPVS": 1688804694444
    },
    {
      "rank": 6,
      "SSLB": 1688804694444,
      "ESLB": 1688804714464,
      "SPVS": 1688804714464,
      "SPVAP": 1688804714471,
      "EPVAP": 1688804714472,
      "SPVATF": 1688804714472,
      "EPVATF": 1688804714472,
      "SPVATR": 1688804715478,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                objType.defineInferred",
      "EPVS": 1688804715480
    },
    {
      "rank": 7,
      "SSLB": 1688804715480,
      "ESLB": 1688804735501,
      "SPVS": 1688804735501,
      "SPVAP": 1688804735503,
      "EPVAP": 1688804735504,
      "SPVATF": 1688804735504,
      "EPVATF": 1688804735504,
      "SPVATR": 1688804736511,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(VOID_TYPE).getLeastSupertype(propType",
      "EPVS": 1688804736513
    },
    {
      "rank": 8,
      "SSLB": 1688804736513,
      "ESLB": 1688804756533,
      "SPVS": 1688804756533,
      "SPVAP": 1688804756536,
      "EPVAP": 1688804756537,
      "SPVATF": 1688804756537,
      "EPVATF": 1688804756537,
      "SPVATR": 1688804757544,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType",
      "EPVS": 1688804757545
    },
    {
      "rank": 9,
      "SSLB": 1688804757545,
      "ESLB": 1688804777566,
      "SPVS": 1688804777566,
      "SPVAP": 1688804777568,
      "EPVAP": 1688804777569,
      "SPVATF": 1688804777569,
      "EPVATF": 1688804777569,
      "SPVATR": 1688804778575,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer =\n                        getNativeType(",
      "EPVS": 1688804778576
    }
  ],
  "SSLI": 1688801276182,
  "ESLI": 1688801306212,
  "hostname": "gros-71.nancy.grid5000.fr",
  "OAR_JOB_ID": "4222608"
}