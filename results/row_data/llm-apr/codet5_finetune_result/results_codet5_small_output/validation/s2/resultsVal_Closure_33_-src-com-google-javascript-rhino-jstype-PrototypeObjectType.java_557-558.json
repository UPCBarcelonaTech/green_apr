{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689722655607,
      "ESLB": 1689722675627,
      "SPVS": 1689722675627,
      "SPVAP": 1689722675632,
      "EPVAP": 1689722675633,
      "SPVATF": 1689722675633,
      "EPVATF": 1689722678641,
      "SPVATR": 1689722678641,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689722678642
    },
    {
      "rank": 1,
      "SSLB": 1689722678642,
      "ESLB": 1689722698662,
      "SPVS": 1689722698662,
      "SPVAP": 1689722698664,
      "EPVAP": 1689722698665,
      "SPVATF": 1689722698665,
      "EPVATF": 1689722700672,
      "SPVATR": 1689722700672,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1689722700672
    },
    {
      "rank": 2,
      "SSLB": 1689722700672,
      "ESLB": 1689722720693,
      "SPVS": 1689722720693,
      "SPVAP": 1689722720694,
      "EPVAP": 1689722720696,
      "SPVATF": 1689722720696,
      "EPVATF": 1689722723721,
      "SPVATR": 1689722723721,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689722723722
    },
    {
      "rank": 3,
      "SSLB": 1689722723722,
      "ESLB": 1689722743742,
      "SPVS": 1689722743742,
      "SPVAP": 1689722743744,
      "EPVAP": 1689722743745,
      "SPVATF": 1689722743745,
      "EPVATF": 1689722745752,
      "SPVATR": 1689722745752,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689722745753
    },
    {
      "rank": 4,
      "SSLB": 1689722745753,
      "ESLB": 1689722765773,
      "SPVS": 1689722765773,
      "SPVAP": 1689722765775,
      "EPVAP": 1689722765775,
      "SPVATF": 1689722765776,
      "EPVATF": 1689722767783,
      "SPVATR": 1689722767783,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1689722767784
    },
    {
      "rank": 5,
      "SSLB": 1689722767784,
      "ESLB": 1689722787805,
      "SPVS": 1689722787805,
      "SPVAP": 1689722787806,
      "EPVAP": 1689722787807,
      "SPVATF": 1689722787807,
      "EPVATF": 1689722789816,
      "SPVATR": 1689722789816,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1689722789818
    },
    {
      "rank": 6,
      "SSLB": 1689722789818,
      "ESLB": 1689722809838,
      "SPVS": 1689722809838,
      "SPVAP": 1689722809839,
      "EPVAP": 1689722809840,
      "SPVATF": 1689722809840,
      "EPVATF": 1689722812849,
      "SPVATR": 1689722812849,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1689722812850
    },
    {
      "rank": 7,
      "SSLB": 1689722812850,
      "ESLB": 1689722832870,
      "SPVS": 1689722832870,
      "SPVAP": 1689722832871,
      "EPVAP": 1689722832872,
      "SPVATF": 1689722832872,
      "EPVATF": 1689722834880,
      "SPVATR": 1689722834880,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689722834881
    },
    {
      "rank": 8,
      "SSLB": 1689722834881,
      "ESLB": 1689722854901,
      "SPVS": 1689722854901,
      "SPVAP": 1689722854902,
      "EPVAP": 1689722854903,
      "SPVATF": 1689722854903,
      "EPVATF": 1689722856912,
      "SPVATR": 1689722856912,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689722856913
    },
    {
      "rank": 9,
      "SSLB": 1689722856913,
      "ESLB": 1689722876933,
      "SPVS": 1689722876933,
      "SPVAP": 1689722876934,
      "EPVAP": 1689722876935,
      "SPVATF": 1689722876935,
      "EPVATF": 1689722878942,
      "SPVATR": 1689722878942,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689722878943
    }
  ],
  "SSLI": 1689716131355,
  "ESLI": 1689716161385,
  "hostname": "gros-46.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}