{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689800352581,
      "ESLB": 1689800372601,
      "SPVS": 1689800372601,
      "SPVAP": 1689800372603,
      "EPVAP": 1689800372604,
      "SPVATF": 1689800372604,
      "EPVATF": 1689800375612,
      "SPVATR": 1689800375612,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689800375613
    },
    {
      "rank": 1,
      "SSLB": 1689800375613,
      "ESLB": 1689800395633,
      "SPVS": 1689800395633,
      "SPVAP": 1689800395635,
      "EPVAP": 1689800395636,
      "SPVATF": 1689800395636,
      "EPVATF": 1689800397642,
      "SPVATR": 1689800397642,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1689800397643
    },
    {
      "rank": 2,
      "SSLB": 1689800397643,
      "ESLB": 1689800417663,
      "SPVS": 1689800417663,
      "SPVAP": 1689800417665,
      "EPVAP": 1689800417666,
      "SPVATF": 1689800417666,
      "EPVATF": 1689800419675,
      "SPVATR": 1689800419675,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689800419676
    },
    {
      "rank": 3,
      "SSLB": 1689800419676,
      "ESLB": 1689800439696,
      "SPVS": 1689800439696,
      "SPVAP": 1689800439700,
      "EPVAP": 1689800439702,
      "SPVATF": 1689800439702,
      "EPVATF": 1689800441708,
      "SPVATR": 1689800441708,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689800441709
    },
    {
      "rank": 4,
      "SSLB": 1689800441709,
      "ESLB": 1689800461729,
      "SPVS": 1689800461729,
      "SPVAP": 1689800461731,
      "EPVAP": 1689800461732,
      "SPVATF": 1689800461732,
      "EPVATF": 1689800463738,
      "SPVATR": 1689800463738,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1689800463739
    },
    {
      "rank": 5,
      "SSLB": 1689800463739,
      "ESLB": 1689800483759,
      "SPVS": 1689800483759,
      "SPVAP": 1689800483763,
      "EPVAP": 1689800483764,
      "SPVATF": 1689800483764,
      "EPVATF": 1689800486778,
      "SPVATR": 1689800486778,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1689800486779
    },
    {
      "rank": 6,
      "SSLB": 1689800486779,
      "ESLB": 1689800506799,
      "SPVS": 1689800506799,
      "SPVAP": 1689800506801,
      "EPVAP": 1689800506801,
      "SPVATF": 1689800506801,
      "EPVATF": 1689800508808,
      "SPVATR": 1689800508808,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1689800508809
    },
    {
      "rank": 7,
      "SSLB": 1689800508809,
      "ESLB": 1689800528829,
      "SPVS": 1689800528829,
      "SPVAP": 1689800528830,
      "EPVAP": 1689800528831,
      "SPVATF": 1689800528831,
      "EPVATF": 1689800530837,
      "SPVATR": 1689800530837,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689800530838
    },
    {
      "rank": 8,
      "SSLB": 1689800530838,
      "ESLB": 1689800550858,
      "SPVS": 1689800550858,
      "SPVAP": 1689800550860,
      "EPVAP": 1689800550861,
      "SPVATF": 1689800550861,
      "EPVATF": 1689800552868,
      "SPVATR": 1689800552868,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689800552869
    },
    {
      "rank": 9,
      "SSLB": 1689800552870,
      "ESLB": 1689800572889,
      "SPVS": 1689800572889,
      "SPVAP": 1689800572890,
      "EPVAP": 1689800572891,
      "SPVATF": 1689800572891,
      "EPVATF": 1689800575899,
      "SPVATR": 1689800575899,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689800575900
    }
  ],
  "SSLI": 1689794899686,
  "ESLI": 1689794929716,
  "hostname": "gros-46.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}