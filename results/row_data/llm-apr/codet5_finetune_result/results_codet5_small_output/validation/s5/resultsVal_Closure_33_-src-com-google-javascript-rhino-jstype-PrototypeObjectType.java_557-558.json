{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_small_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689901607587,
      "ESLB": 1689901627607,
      "SPVS": 1689901627607,
      "SPVAP": 1689901627608,
      "EPVAP": 1689901627609,
      "SPVATF": 1689901627609,
      "EPVATF": 1689901629614,
      "SPVATR": 1689901629614,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689901629615
    },
    {
      "rank": 1,
      "SSLB": 1689901629615,
      "ESLB": 1689901649635,
      "SPVS": 1689901649635,
      "SPVAP": 1689901649636,
      "EPVAP": 1689901649637,
      "SPVATF": 1689901649637,
      "EPVATF": 1689901651643,
      "SPVATR": 1689901651643,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer,",
      "EPVS": 1689901651643
    },
    {
      "rank": 2,
      "SSLB": 1689901651643,
      "ESLB": 1689901671664,
      "SPVS": 1689901671664,
      "SPVAP": 1689901671665,
      "EPVAP": 1689901671665,
      "SPVATF": 1689901671665,
      "EPVATF": 1689901674674,
      "SPVATR": 1689901674674,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689901674675
    },
    {
      "rank": 3,
      "SSLB": 1689901674675,
      "ESLB": 1689901694695,
      "SPVS": 1689901694695,
      "SPVAP": 1689901694695,
      "EPVAP": 1689901694696,
      "SPVATF": 1689901694696,
      "EPVATF": 1689901697703,
      "SPVATR": 1689901697703,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689901697704
    },
    {
      "rank": 4,
      "SSLB": 1689901697704,
      "ESLB": 1689901717724,
      "SPVS": 1689901717724,
      "SPVAP": 1689901717725,
      "EPVAP": 1689901717725,
      "SPVATF": 1689901717725,
      "EPVATF": 1689901719731,
      "SPVATR": 1689901719731,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType",
      "EPVS": 1689901719732
    },
    {
      "rank": 5,
      "SSLB": 1689901719732,
      "ESLB": 1689901739752,
      "SPVS": 1689901739752,
      "SPVAP": 1689901739752,
      "EPVAP": 1689901739753,
      "SPVATF": 1689901739753,
      "EPVATF": 1689901742761,
      "SPVATR": 1689901742761,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if",
      "EPVS": 1689901742762
    },
    {
      "rank": 6,
      "SSLB": 1689901742762,
      "ESLB": 1689901762782,
      "SPVS": 1689901762782,
      "SPVAP": 1689901762783,
      "EPVAP": 1689901762784,
      "SPVATF": 1689901762784,
      "EPVATF": 1689901764789,
      "SPVATR": 1689901764789,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n   ",
      "EPVS": 1689901764790
    },
    {
      "rank": 7,
      "SSLB": 1689901764790,
      "ESLB": 1689901784810,
      "SPVS": 1689901784810,
      "SPVAP": 1689901784811,
      "EPVAP": 1689901784812,
      "SPVATF": 1689901784812,
      "EPVATF": 1689901787819,
      "SPVATR": 1689901787819,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer",
      "EPVS": 1689901787820
    },
    {
      "rank": 8,
      "SSLB": 1689901787820,
      "ESLB": 1689901807840,
      "SPVS": 1689901807840,
      "SPVAP": 1689901807841,
      "EPVAP": 1689901807841,
      "SPVATF": 1689901807841,
      "EPVATF": 1689901809849,
      "SPVATR": 1689901809849,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689901809849
    },
    {
      "rank": 9,
      "SSLB": 1689901809849,
      "ESLB": 1689901829869,
      "SPVS": 1689901829869,
      "SPVAP": 1689901829870,
      "EPVAP": 1689901829871,
      "SPVATF": 1689901829871,
      "EPVATF": 1689901831877,
      "SPVATR": 1689901831877,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType typeToInfer = null;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                   .getLeastSupertype(propType);\n                }\n                defineIn",
      "EPVS": 1689901831878
    }
  ],
  "SSLI": 1689895109414,
  "ESLI": 1689895139444,
  "hostname": "gros-47.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}