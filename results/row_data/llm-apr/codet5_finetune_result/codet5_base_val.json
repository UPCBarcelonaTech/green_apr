{
  "config": "finetune",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n</s>    boolean removed = markers.remove(marker);\n</s>    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n",
      "output": [
        {
          "patch": "    boolean removed = markers.remove(marker.getMarkerIndex());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(new Integer(index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean removed = markers.remove(marker.getId());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = (markers == null)? false : markers.remove(marker);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    boolean removed = markers.remove(new IndexableMarker(marker, index));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(new Integer(marker.getIndex()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(new Integer(marker.getMarkerIndex()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker, index);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(new Date(marker.getTime()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(new DomainMarker(marker, index));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n</s>      JsName name = getName(ns.name, false);\n</s>      if (name != null) {\n      refNodes.add(new ClassDefiningFunctionNode(\n          name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}\n",
      "output": [
        {
          "patch": "      JsName name = getName(ns.name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.name, false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.name, true);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      JsName name = getName(ns.name, false, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "recognized JsName name = getName(ns.name, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.name, false, parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": " rfind JsName name = getName(ns.name, false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.getString(), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            JsName name = getName(ns.name, false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": " sized JsName name = getName(ns.name, false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override\npublic JSType getLeastSupertype(JSType that) {\n</s>  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n</s>  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}\n",
      "output": [
        {
          "patch": "    JSType other = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkArgument(that.isRecordType(), \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Assert.isNotNull(that, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final JSType other = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkState(that.isRecordType(), \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JSType result = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final JSType otherRecordType = that.toMaybeRecordType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    JSType otherRecordType = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkNotNull(that, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    that = that.toMaybeRecordType();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n</s>        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n</s>        wasWhite= false;\n        switch(c) {\n        case '\\'':\n            if(unquote) {\n                if(++i==value.length()) {\n                    return regex;\n                }\n                c= value.charAt(i);\n            }\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    return regex;\n}\n",
      "output": [
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            regex.append(\"String_Node_Str\");\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isWhitespace(c) || c == '\\'') {\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isWhitespace(c))\n            continue;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isWhitespace(c) || c == '\\'' || c == '\"') {\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            regex.append(\"\\\\s*\" + c);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c))\n            regex.append(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            regex.append('\\\\s*');\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (!Character.isWhitespace(c))\n            continue;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            regex.append(\"\\\\s* +\");\n        }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n</s>        calendar = (Calendar) calendar.clone();\n</s>        calendar.setTimeZone(mTimeZone);\n    }\n    return applyRules(calendar, buf);\n}\n",
      "output": [
        {
          "patch": "        calendar = (Calendar) calendar.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(timeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = new Calendar((Calendar) calendar.clone());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final Calendar calendar = (Calendar) calendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(mTimeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(Locale.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(getTimeZone());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Calendar calendar = (Calendar) calendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = calendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = new Calendar(calendar.getTimeZone());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n</s>        chiSquare += residual * residual / residualsWeights[i];\n</s>    }\n    return chiSquare;\n}\n",
      "output": [
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i][1];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (residual!= 0)\n            chiSquare += residual * residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (residual!= 0.0)\n            chiSquare += residual * residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i < rows) {\n            chiSquare += residual * residual / residualsWeights[i];\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        final int n = residualsWeights[i];\n        chiSquare += residual * residual / n;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (residual > 0.0)\n            chiSquare += residual * residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (rescaled) {\n            chiSquare += residual * residual / residualsWeights[i];\n        }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) {\n</s>  int sum = 0;\n</s>  for (int i = 0; i < p1.length; i++) {\n      final int dp = p1[i] - p2[i];\n      sum += dp * dp;\n  }\n  return Math.sqrt(sum);\n}\n",
      "output": [
        {
          "patch": "  long sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\n  long sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                int sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "<s>  long sum = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                double sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "   long sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  int sum = 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": " watermarks = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "FileShare final double sum = 0;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length != this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n</s>    final BigDecimal[] out = new BigDecimal[v.length];\n</s>    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = ZERO;\n        for (int i = 0; i < nCols; i++) {\n            sum = sum.add(data[row][i].multiply(v[i]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}\n",
      "output": [
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nRows];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[Math.min(v.length, nRows)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.getColumnDimension];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.columnDimension];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nCols];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    BigDecimal[] out = new BigDecimal[nRows];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int length = v.length;\n    final BigDecimal[] out = new BigDecimal[length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.getColumnDimension()];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nRows];\n    int i = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.numColumns];\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n</s>    if (dataset != null) {\n</s>        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    if (dataset == null) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null || dataset.getRowCount() == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount()!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() == 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset!= null &&!isSeriesVisibleInLegend(index)) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset == null || dataset.getRowCount() == 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() > 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset!= null && dataset.getCount() > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n</s>    copy.data = new java.util.ArrayList();\n</s>    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}\n",
      "output": [
        {
          "patch": "    copy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.LinkedList();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = new ArrayList<TimeSeriesDataItem>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new ArrayList<TimeSeriesDataItem>(this.data.size());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = this.data.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList(this.data.size());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList(this.data);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList<>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.java.util.ArrayList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList<TimeSeriesDataItem>(2);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n</s>    return super.equals(obj);\n</s>\n}\n",
      "output": [
        {
          "patch": "    return super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    return super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    try {\n        return super.equals(obj);\n    } catch (Exception e) {\n        return false;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(obj) && Objects.equals(shape, ((ShapeList) obj).shape);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return super.equals(o);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (obj!= null) {\n        return super.equals(obj);\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(obj) && Objects.equals(obj.getClass(), obj.getClass());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (obj == null) {\n        return false;\n    }\n    return super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(obj) && Objects.equals(name, ((ShapeList) obj).getName());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return super.equals(obj) && (obj!= null && obj instanceof ShapeList);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) {\n</s>    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n</s>}\n",
      "output": [
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone, Locale.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, TimeZone.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone!= null? TimeZone.getDefault() : null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone!= null? Locale.getDefault() : null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getTimeZone());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, (TimeZone) null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone == null? Locale.getDefault() : timeZone);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n</s>    if (endIndex < 0) {\n</s>        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n}\n",
      "output": [
        {
          "patch": "    if (endIndex == -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex < 0 || endIndex == this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == -(endIndex + 1)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex < 0 || endIndex >= this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == endIndex) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) {\n</s>    return \" title=\\\"\" + toolTipText\n</s>        + \"\\\" alt=\\\"\\\"\";\n}\n",
      "output": [
        {
          "patch": "    return \"String_Node_Str\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText + \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText + \"String_Node_Str\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText + '\"';\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toolTipText == null? \"String_Node_Str\" : \"title=\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText + \"String_Node_Str\" + toolTipText + \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (toolTipText == null) {\n        return null;\n    }\n    return \"String_Node_Str\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText + \"String_Node_Str\" + \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (toolTipText == null)\n        return \"String_Node_Str\";\n    else\n        return \"title=\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toolTipText.startsWith(\"String_Node_Str\")? \"String_Node_Str\" : \"title=\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}