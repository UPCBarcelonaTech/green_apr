{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689712341803,
      "ESLB": 1689712361824,
      "SPVS": 1689712361824,
      "SPVAP": 1689712361829,
      "EPVAP": 1689712361831,
      "SPVATF": 1689712361831,
      "EPVATF": 1689712364839,
      "SPVATR": 1689712364839,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689712364840
    },
    {
      "rank": 1,
      "SSLB": 1689712364840,
      "ESLB": 1689712384861,
      "SPVS": 1689712384861,
      "SPVAP": 1689712384863,
      "EPVAP": 1689712384864,
      "SPVATF": 1689712384864,
      "EPVATF": 1689712387873,
      "SPVATR": 1689712387873,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1689712387874
    },
    {
      "rank": 2,
      "SSLB": 1689712387874,
      "ESLB": 1689712407894,
      "SPVS": 1689712407894,
      "SPVAP": 1689712407896,
      "EPVAP": 1689712407897,
      "SPVATF": 1689712407897,
      "EPVATF": 1689712409916,
      "SPVATR": 1689712409916,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689712409918
    },
    {
      "rank": 3,
      "SSLB": 1689712409918,
      "ESLB": 1689712429938,
      "SPVS": 1689712429938,
      "SPVAP": 1689712429942,
      "EPVAP": 1689712429944,
      "SPVATF": 1689712429944,
      "EPVATF": 1689712431950,
      "SPVATR": 1689712431950,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1689712431952
    },
    {
      "rank": 4,
      "SSLB": 1689712431952,
      "ESLB": 1689712451973,
      "SPVS": 1689712451973,
      "SPVAP": 1689712451976,
      "EPVAP": 1689712451977,
      "SPVATF": 1689712451977,
      "EPVATF": 1689712453985,
      "SPVATR": 1689712453985,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1689712453986
    },
    {
      "rank": 5,
      "SSLB": 1689712453986,
      "ESLB": 1689712474006,
      "SPVS": 1689712474006,
      "SPVAP": 1689712474009,
      "EPVAP": 1689712474011,
      "SPVATF": 1689712474011,
      "EPVATF": 1689712476026,
      "SPVATR": 1689712476026,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1689712476028
    },
    {
      "rank": 6,
      "SSLB": 1689712476028,
      "ESLB": 1689712496048,
      "SPVS": 1689712496048,
      "SPVAP": 1689712496049,
      "EPVAP": 1689712496051,
      "SPVATF": 1689712496051,
      "EPVATF": 1689712499060,
      "SPVATR": 1689712499060,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1689712499062
    },
    {
      "rank": 7,
      "SSLB": 1689712499062,
      "ESLB": 1689712519082,
      "SPVS": 1689712519082,
      "SPVAP": 1689712519084,
      "EPVAP": 1689712519086,
      "SPVATF": 1689712519086,
      "EPVATF": 1689712522094,
      "SPVATR": 1689712522094,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1689712522095
    },
    {
      "rank": 8,
      "SSLB": 1689712522095,
      "ESLB": 1689712542116,
      "SPVS": 1689712542116,
      "SPVAP": 1689712542120,
      "EPVAP": 1689712542121,
      "SPVATF": 1689712542121,
      "EPVATF": 1689712547140,
      "SPVATR": 1689712609210,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1689712609212
    },
    {
      "rank": 9,
      "SSLB": 1689712609212,
      "ESLB": 1689712629232,
      "SPVS": 1689712629232,
      "SPVAP": 1689712629239,
      "EPVAP": 1689712629240,
      "SPVATF": 1689712629240,
      "EPVATF": 1689712632318,
      "SPVATR": 1689712632318,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689712632320
    }
  ],
  "SSLI": 1689704955058,
  "ESLI": 1689704985088,
  "hostname": "gros-45.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}