{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689822526333,
      "ESLB": 1689822546353,
      "SPVS": 1689822546353,
      "SPVAP": 1689822546354,
      "EPVAP": 1689822546355,
      "SPVATF": 1689822546355,
      "EPVATF": 1689822549362,
      "SPVATR": 1689822549362,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689822549363
    },
    {
      "rank": 1,
      "SSLB": 1689822549363,
      "ESLB": 1689822569384,
      "SPVS": 1689822569384,
      "SPVAP": 1689822569384,
      "EPVAP": 1689822569385,
      "SPVATF": 1689822569385,
      "EPVATF": 1689822572391,
      "SPVATR": 1689822572391,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1689822572392
    },
    {
      "rank": 2,
      "SSLB": 1689822572392,
      "ESLB": 1689822592412,
      "SPVS": 1689822592412,
      "SPVAP": 1689822592413,
      "EPVAP": 1689822592414,
      "SPVATF": 1689822592414,
      "EPVATF": 1689822594420,
      "SPVATR": 1689822594420,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689822594421
    },
    {
      "rank": 3,
      "SSLB": 1689822594421,
      "ESLB": 1689822614441,
      "SPVS": 1689822614441,
      "SPVAP": 1689822614442,
      "EPVAP": 1689822614442,
      "SPVATF": 1689822614442,
      "EPVATF": 1689822616448,
      "SPVATR": 1689822616448,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1689822616449
    },
    {
      "rank": 4,
      "SSLB": 1689822616449,
      "ESLB": 1689822636469,
      "SPVS": 1689822636469,
      "SPVAP": 1689822636472,
      "EPVAP": 1689822636473,
      "SPVATF": 1689822636473,
      "EPVATF": 1689822638478,
      "SPVATR": 1689822638478,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1689822638479
    },
    {
      "rank": 5,
      "SSLB": 1689822638479,
      "ESLB": 1689822658499,
      "SPVS": 1689822658499,
      "SPVAP": 1689822658503,
      "EPVAP": 1689822658504,
      "SPVATF": 1689822658504,
      "EPVATF": 1689822661518,
      "SPVATR": 1689822661518,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1689822661519
    },
    {
      "rank": 6,
      "SSLB": 1689822661519,
      "ESLB": 1689822681539,
      "SPVS": 1689822681539,
      "SPVAP": 1689822681542,
      "EPVAP": 1689822681543,
      "SPVATF": 1689822681543,
      "EPVATF": 1689822684550,
      "SPVATR": 1689822684550,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1689822684551
    },
    {
      "rank": 7,
      "SSLB": 1689822684551,
      "ESLB": 1689822704571,
      "SPVS": 1689822704571,
      "SPVAP": 1689822704572,
      "EPVAP": 1689822704572,
      "SPVATF": 1689822704572,
      "EPVATF": 1689822706578,
      "SPVATR": 1689822706578,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1689822706579
    },
    {
      "rank": 8,
      "SSLB": 1689822706579,
      "ESLB": 1689822726599,
      "SPVS": 1689822726599,
      "SPVAP": 1689822726600,
      "EPVAP": 1689822726601,
      "SPVATF": 1689822726601,
      "EPVATF": 1689822731615,
      "SPVATR": 1689822787677,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1689822787677
    },
    {
      "rank": 9,
      "SSLB": 1689822787677,
      "ESLB": 1689822807697,
      "SPVS": 1689822807697,
      "SPVAP": 1689822807699,
      "EPVAP": 1689822807699,
      "SPVATF": 1689822807699,
      "EPVATF": 1689822809755,
      "SPVATR": 1689822809755,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689822809756
    }
  ],
  "SSLI": 1689815510877,
  "ESLI": 1689815540908,
  "hostname": "gros-45.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}