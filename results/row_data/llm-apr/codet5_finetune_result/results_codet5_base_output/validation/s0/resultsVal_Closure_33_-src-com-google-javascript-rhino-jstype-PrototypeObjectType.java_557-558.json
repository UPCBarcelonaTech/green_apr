{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688063702624,
      "ESLB": 1688063722644,
      "SPVS": 1688063722644,
      "SPVAP": 1688063722647,
      "EPVAP": 1688063722647,
      "SPVATF": 1688063722647,
      "EPVATF": 1688063724655,
      "SPVATR": 1688063724655,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1688063724656
    },
    {
      "rank": 1,
      "SSLB": 1688063724656,
      "ESLB": 1688063744676,
      "SPVS": 1688063744676,
      "SPVAP": 1688063744680,
      "EPVAP": 1688063744681,
      "SPVATF": 1688063744681,
      "EPVATF": 1688063746688,
      "SPVATR": 1688063746688,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1688063746689
    },
    {
      "rank": 2,
      "SSLB": 1688063746689,
      "ESLB": 1688063766709,
      "SPVS": 1688063766709,
      "SPVAP": 1688063766711,
      "EPVAP": 1688063766712,
      "SPVATF": 1688063766712,
      "EPVATF": 1688063768733,
      "SPVATR": 1688063768733,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1688063768734
    },
    {
      "rank": 3,
      "SSLB": 1688063768734,
      "ESLB": 1688063788754,
      "SPVS": 1688063788754,
      "SPVAP": 1688063788756,
      "EPVAP": 1688063788757,
      "SPVATF": 1688063788757,
      "EPVATF": 1688063790764,
      "SPVATR": 1688063790764,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1688063790765
    },
    {
      "rank": 4,
      "SSLB": 1688063790765,
      "ESLB": 1688063810785,
      "SPVS": 1688063810785,
      "SPVAP": 1688063810786,
      "EPVAP": 1688063810787,
      "SPVATF": 1688063810787,
      "EPVATF": 1688063812795,
      "SPVATR": 1688063812795,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1688063812799
    },
    {
      "rank": 5,
      "SSLB": 1688063812799,
      "ESLB": 1688063832819,
      "SPVS": 1688063832819,
      "SPVAP": 1688063832821,
      "EPVAP": 1688063832822,
      "SPVATF": 1688063832822,
      "EPVATF": 1688063834831,
      "SPVATR": 1688063834831,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1688063834832
    },
    {
      "rank": 6,
      "SSLB": 1688063834832,
      "ESLB": 1688063854852,
      "SPVS": 1688063854852,
      "SPVAP": 1688063854854,
      "EPVAP": 1688063854855,
      "SPVATF": 1688063854855,
      "EPVATF": 1688063856863,
      "SPVATR": 1688063856863,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1688063856864
    },
    {
      "rank": 7,
      "SSLB": 1688063856864,
      "ESLB": 1688063876884,
      "SPVS": 1688063876884,
      "SPVAP": 1688063876886,
      "EPVAP": 1688063876887,
      "SPVATF": 1688063876887,
      "EPVATF": 1688063878893,
      "SPVATR": 1688063878894,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1688063878894
    },
    {
      "rank": 8,
      "SSLB": 1688063878894,
      "ESLB": 1688063898914,
      "SPVS": 1688063898914,
      "SPVAP": 1688063898916,
      "EPVAP": 1688063898917,
      "SPVATF": 1688063898917,
      "EPVATF": 1688063903930,
      "SPVATR": 1688063903930,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1688063903932
    },
    {
      "rank": 9,
      "SSLB": 1688063903932,
      "ESLB": 1688063923952,
      "SPVS": 1688063923952,
      "SPVAP": 1688063923953,
      "EPVAP": 1688063923954,
      "SPVATF": 1688063923954,
      "EPVATF": 1688063925961,
      "SPVATR": 1688063925961,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1688063925962
    }
  ],
  "SSLI": 1688059810339,
  "ESLI": 1688059840369,
  "hostname": "gros-68.nancy.grid5000.fr",
  "OAR_JOB_ID": "4214427"
}