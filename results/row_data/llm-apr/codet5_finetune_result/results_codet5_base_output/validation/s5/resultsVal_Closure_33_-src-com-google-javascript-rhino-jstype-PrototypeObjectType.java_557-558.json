{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689892134049,
      "ESLB": 1689892154069,
      "SPVS": 1689892154069,
      "SPVAP": 1689892154070,
      "EPVAP": 1689892154071,
      "SPVATF": 1689892154071,
      "EPVATF": 1689892156077,
      "SPVATR": 1689892156077,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689892156078
    },
    {
      "rank": 1,
      "SSLB": 1689892156078,
      "ESLB": 1689892176098,
      "SPVS": 1689892176098,
      "SPVAP": 1689892176099,
      "EPVAP": 1689892176099,
      "SPVATF": 1689892176099,
      "EPVATF": 1689892179106,
      "SPVATR": 1689892179106,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1689892179177
    },
    {
      "rank": 2,
      "SSLB": 1689892179177,
      "ESLB": 1689892199197,
      "SPVS": 1689892199197,
      "SPVAP": 1689892199198,
      "EPVAP": 1689892199198,
      "SPVATF": 1689892199198,
      "EPVATF": 1689892202206,
      "SPVATR": 1689892202206,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689892202207
    },
    {
      "rank": 3,
      "SSLB": 1689892202207,
      "ESLB": 1689892222227,
      "SPVS": 1689892222227,
      "SPVAP": 1689892222228,
      "EPVAP": 1689892222228,
      "SPVATF": 1689892222228,
      "EPVATF": 1689892224235,
      "SPVATR": 1689892224235,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1689892224236
    },
    {
      "rank": 4,
      "SSLB": 1689892224236,
      "ESLB": 1689892244256,
      "SPVS": 1689892244256,
      "SPVAP": 1689892244257,
      "EPVAP": 1689892244258,
      "SPVATF": 1689892244258,
      "EPVATF": 1689892247265,
      "SPVATR": 1689892247265,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1689892247266
    },
    {
      "rank": 5,
      "SSLB": 1689892247266,
      "ESLB": 1689892267286,
      "SPVS": 1689892267286,
      "SPVAP": 1689892267287,
      "EPVAP": 1689892267288,
      "SPVATF": 1689892267288,
      "EPVATF": 1689892269295,
      "SPVATR": 1689892269295,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1689892269296
    },
    {
      "rank": 6,
      "SSLB": 1689892269296,
      "ESLB": 1689892289316,
      "SPVS": 1689892289316,
      "SPVAP": 1689892289317,
      "EPVAP": 1689892289318,
      "SPVATF": 1689892289318,
      "EPVATF": 1689892291324,
      "SPVATR": 1689892291324,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1689892291325
    },
    {
      "rank": 7,
      "SSLB": 1689892291325,
      "ESLB": 1689892311346,
      "SPVS": 1689892311346,
      "SPVAP": 1689892311346,
      "EPVAP": 1689892311347,
      "SPVATF": 1689892311347,
      "EPVATF": 1689892313353,
      "SPVATR": 1689892313353,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1689892313354
    },
    {
      "rank": 8,
      "SSLB": 1689892313354,
      "ESLB": 1689892333374,
      "SPVS": 1689892333374,
      "SPVAP": 1689892333375,
      "EPVAP": 1689892333376,
      "SPVATF": 1689892333376,
      "EPVATF": 1689892338385,
      "SPVATR": 1689892395445,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1689892395447
    },
    {
      "rank": 9,
      "SSLB": 1689892395447,
      "ESLB": 1689892415467,
      "SPVS": 1689892415467,
      "SPVAP": 1689892415468,
      "EPVAP": 1689892415469,
      "SPVATF": 1689892415469,
      "EPVATF": 1689892418522,
      "SPVATR": 1689892418522,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689892418523
    }
  ],
  "SSLI": 1689885111119,
  "ESLI": 1689885141149,
  "hostname": "gros-46.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}