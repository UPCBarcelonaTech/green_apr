{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688807361786,
      "ESLB": 1688807381806,
      "SPVS": 1688807381806,
      "SPVAP": 1688807381808,
      "EPVAP": 1688807381809,
      "SPVATF": 1688807381809,
      "EPVATF": 1688807383816,
      "SPVATR": 1688807383816,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1688807383817
    },
    {
      "rank": 1,
      "SSLB": 1688807383817,
      "ESLB": 1688807403837,
      "SPVS": 1688807403837,
      "SPVAP": 1688807403839,
      "EPVAP": 1688807403840,
      "SPVATF": 1688807403840,
      "EPVATF": 1688807405847,
      "SPVATR": 1688807405847,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1688807405848
    },
    {
      "rank": 2,
      "SSLB": 1688807405848,
      "ESLB": 1688807425868,
      "SPVS": 1688807425868,
      "SPVAP": 1688807425870,
      "EPVAP": 1688807425871,
      "SPVATF": 1688807425871,
      "EPVATF": 1688807427878,
      "SPVATR": 1688807427878,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1688807427879
    },
    {
      "rank": 3,
      "SSLB": 1688807427879,
      "ESLB": 1688807447899,
      "SPVS": 1688807447899,
      "SPVAP": 1688807447901,
      "EPVAP": 1688807447902,
      "SPVATF": 1688807447902,
      "EPVATF": 1688807449910,
      "SPVATR": 1688807449910,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1688807449911
    },
    {
      "rank": 4,
      "SSLB": 1688807449911,
      "ESLB": 1688807469931,
      "SPVS": 1688807469931,
      "SPVAP": 1688807469933,
      "EPVAP": 1688807469934,
      "SPVATF": 1688807469934,
      "EPVATF": 1688807471942,
      "SPVATR": 1688807471942,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1688807471943
    },
    {
      "rank": 5,
      "SSLB": 1688807471943,
      "ESLB": 1688807491964,
      "SPVS": 1688807491964,
      "SPVAP": 1688807491965,
      "EPVAP": 1688807491967,
      "SPVATF": 1688807491967,
      "EPVATF": 1688807493974,
      "SPVATR": 1688807493974,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1688807493975
    },
    {
      "rank": 6,
      "SSLB": 1688807493975,
      "ESLB": 1688807513995,
      "SPVS": 1688807513995,
      "SPVAP": 1688807513997,
      "EPVAP": 1688807513998,
      "SPVATF": 1688807513998,
      "EPVATF": 1688807516007,
      "SPVATR": 1688807516007,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1688807516008
    },
    {
      "rank": 7,
      "SSLB": 1688807516008,
      "ESLB": 1688807536028,
      "SPVS": 1688807536028,
      "SPVAP": 1688807536029,
      "EPVAP": 1688807536030,
      "SPVATF": 1688807536030,
      "EPVATF": 1688807538036,
      "SPVATR": 1688807538036,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1688807538037
    },
    {
      "rank": 8,
      "SSLB": 1688807538037,
      "ESLB": 1688807558057,
      "SPVS": 1688807558057,
      "SPVAP": 1688807558059,
      "EPVAP": 1688807558060,
      "SPVATF": 1688807558060,
      "EPVATF": 1688807563070,
      "SPVATR": 1688807617130,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1688807617131
    },
    {
      "rank": 9,
      "SSLB": 1688807617131,
      "ESLB": 1688807637151,
      "SPVS": 1688807637151,
      "SPVAP": 1688807637153,
      "EPVAP": 1688807637154,
      "SPVATF": 1688807637154,
      "EPVATF": 1688807639209,
      "SPVATR": 1688807639209,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1688807639210
    }
  ],
  "SSLI": 1688801247168,
  "ESLI": 1688801277195,
  "hostname": "gros-70.nancy.grid5000.fr",
  "OAR_JOB_ID": "4222608"
}