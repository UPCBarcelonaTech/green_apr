{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codet5_base_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689744683324,
      "ESLB": 1689744703338,
      "SPVS": 1689744703338,
      "SPVAP": 1689744703341,
      "EPVAP": 1689744703342,
      "SPVATF": 1689744703342,
      "EPVATF": 1689744705349,
      "SPVATR": 1689744705349,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689744705350
    },
    {
      "rank": 1,
      "SSLB": 1689744705350,
      "ESLB": 1689744725370,
      "SPVS": 1689744725370,
      "SPVAP": 1689744725373,
      "EPVAP": 1689744725373,
      "SPVATF": 1689744725373,
      "EPVATF": 1689744728380,
      "SPVATR": 1689744728380,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else {\n",
      "EPVS": 1689744728381
    },
    {
      "rank": 2,
      "SSLB": 1689744728381,
      "ESLB": 1689744748401,
      "SPVS": 1689744748401,
      "SPVAP": 1689744748403,
      "EPVAP": 1689744748403,
      "SPVATF": 1689744748403,
      "EPVATF": 1689744750416,
      "SPVATR": 1689744750416,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        return;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n       ",
      "EPVS": 1689744750416
    },
    {
      "rank": 3,
      "SSLB": 1689744750416,
      "ESLB": 1689744770437,
      "SPVS": 1689744770437,
      "SPVAP": 1689744770438,
      "EPVAP": 1689744770438,
      "SPVATF": 1689744770438,
      "EPVATF": 1689744773446,
      "SPVATR": 1689744773446,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    boolean isRecordType = constraintObj.isRecordType();\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }",
      "EPVS": 1689744773447
    },
    {
      "rank": 4,
      "SSLB": 1689744773447,
      "ESLB": 1689744793467,
      "SPVS": 1689744793467,
      "SPVAP": 1689744793468,
      "EPVAP": 1689744793468,
      "SPVATF": 1689744793468,
      "EPVATF": 1689744795475,
      "SPVATR": 1689744795475,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }",
      "EPVS": 1689744795475
    },
    {
      "rank": 5,
      "SSLB": 1689744795475,
      "ESLB": 1689744815496,
      "SPVS": 1689744815496,
      "SPVAP": 1689744815497,
      "EPVAP": 1689744815498,
      "SPVATF": 1689744815498,
      "EPVATF": 1689744818506,
      "SPVATR": 1689744818506,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                               .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n       ",
      "EPVS": 1689744818507
    },
    {
      "rank": 6,
      "SSLB": 1689744818507,
      "ESLB": 1689744838527,
      "SPVS": 1689744838527,
      "SPVAP": 1689744838528,
      "EPVAP": 1689744838528,
      "SPVATF": 1689744838528,
      "EPVATF": 1689744841536,
      "SPVATR": 1689744841536,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    } else {\n",
      "EPVS": 1689744841537
    },
    {
      "rank": 7,
      "SSLB": 1689744841537,
      "ESLB": 1689744861557,
      "SPVS": 1689744861557,
      "SPVAP": 1689744861558,
      "EPVAP": 1689744861559,
      "SPVATF": 1689744861559,
      "EPVATF": 1689744864567,
      "SPVATR": 1689744864567,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType recordType;\n    if (constraintObj.isRecordType()) {\n        recordType = constraintObj.getRecordType();\n    } else {\n        recordType = constraintObj.getRecordType();\n    }\n    for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_",
      "EPVS": 1689744864568
    },
    {
      "rank": 8,
      "SSLB": 1689744864568,
      "ESLB": 1689744884588,
      "SPVS": 1689744884588,
      "SPVAP": 1689744884589,
      "EPVAP": 1689744884590,
      "SPVATF": 1689744884590,
      "EPVATF": 1689744889599,
      "SPVATR": 1689744945658,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "    if (constraintObj.isRecordType()) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            return;\n        }\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n    }",
      "EPVS": 1689744945659
    },
    {
      "rank": 9,
      "SSLB": 1689744945659,
      "ESLB": 1689744965679,
      "SPVS": 1689744965679,
      "SPVAP": 1689744965681,
      "EPVAP": 1689744965682,
      "SPVATF": 1689744965682,
      "EPVATF": 1689744967735,
      "SPVATR": 1689744967735,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    matchRecordType(constraintObj, false);\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689744967736
    }
  ],
  "SSLI": 1689737649644,
  "ESLI": 1689737679674,
  "hostname": "gros-45.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}