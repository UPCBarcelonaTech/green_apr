{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1687988430629",
  "GPR[ESLB]": "1687988450649",
  "file": "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184",
  "input": {
    "loc": "183-184",
    "input": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n</s>    return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n</s>        FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n        getExponentTerm(vals);\n}\n"
  },
  "nvidea": "measures-nvidea-Math_11_-src-main-java-org-apache-commons-math3-distribution-MultivariateNormalDistribution.java_183-184.txt",
  "OAR_JOB_ID": "1548579",
  "GPR[SSLI]": "1687986534036",
  "GPR[ESLI]": "1687986564066",
  "GPR[SPS]": "1687988450691",
  "nrTokens": 102,
  "status": "ok",
  "GPR[EPS]": "1687988453728",
  "time": 3037,
  "tokentime": 3,
  "inferencetime": 3034,
  "output": [
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2);\n</s></s></s></s></s></s></s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0);\n</s></s></s></s>",
    "<pad><s>    return FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0);\n</s></s></s></s></s></s></s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0, -dim / 2) * FastMath.pow(2.0, -dim / 2);\n</s></s>",
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0, dim);\n</s>",
    "<pad><s>    return FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2.0) * FastMath.pow(2.0 * FastMath.PI, -dim / 2);\n</s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2);\n</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI);\n</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0 * FastMath.PI, -dim / 2) * FastMath.pow(2.0, -dim / 2);\n</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>",
    "<pad><s>    return FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(2 * FastMath.PI, -dim / 2);\n</s></s></s></s></s></s></s></s></s></s></s></s></s></s>"
  ]
}