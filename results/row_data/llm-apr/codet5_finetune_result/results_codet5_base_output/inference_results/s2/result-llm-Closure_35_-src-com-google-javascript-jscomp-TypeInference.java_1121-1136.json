{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689923715841",
  "GPR[ESLB]": "1689923735861",
  "file": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "input": {
    "loc": "1121-1136",
    "input": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n</s>  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n</s>  }\n}\n"
  },
  "nvidea": "measures-nvidea-Closure_35_-src-com-google-javascript-jscomp-TypeInference.java_1121-1136.txt",
  "OAR_JOB_ID": "1561662",
  "GPR[SSLI]": "1689922943068",
  "GPR[ESLI]": "1689922973098",
  "GPR[SPS]": "1689923735901",
  "nrTokens": 233,
  "status": "ok",
  "GPR[EPS]": "1689923740207",
  "time": 4306,
  "tokentime": 4,
  "inferencetime": 4302,
  "output": [
    "<pad><s>    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        JSType typeToInfer = propType;\n                        if (!objType",
    "<pad><s>    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.isPropertyTypeDeclared(prop)) {\n                        objType.defineInferredProperty(prop, typeToInfer,",
    "<pad><s>    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.isPropertyTypeDeclared(prop)) {\n                        objType = getNativeType(VOID_TYPE).getLeastSupertype",
    "<pad><s>    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                objType.defineInferredProperty(",
    "<pad><s>    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                objType.defineInferredProperty",
    "<pad><s>    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                        if (!objType.hasProperty(prop)) {\n                        JSType typeToInfer = propType;\n                        if (!objType",
    "<pad><s>    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
    "<pad><s>    if (constraintObj!= null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                    if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                        if (!objType.hasProperty(prop)) {\n                        JSType typeToInfer = propType;\n                        if (!objType",
    "<pad><s>    if (constraintObj!= null) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType!= null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                        if (!objType.hasProperty(prop)) {\n                        JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
    "<pad><s>    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                typeToInfer = propType;\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                objType.defineInferredProperty"
  ]
}