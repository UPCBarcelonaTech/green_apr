{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689888789496",
  "GPR[ESLB]": "1689888809517",
  "file": "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92",
  "input": {
    "loc": "91-92",
    "input": "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error != null) {\n        throw error;\n    }\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        finally {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (ArgumentsAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (ArgumentsAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (ArgumentAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (ArgumentAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (MockitoAssertionError e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.VerificationError e) {\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.VerificationException e) {\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (org.mockito.exceptions.verification.VerificationError e) {\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.ArgumentsAreDifferent e) {\n<|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Mockito_5_-src-org-mockito-internal-verification-VerificationOverTimeImpl.java_91-92.txt",
  "OAR_JOB_ID": "1560717",
  "GPR[SSLI]": "1689885956553",
  "GPR[ESLI]": "1689885986584",
  "GPR[SPS]": "1689888809565",
  "nrTokens": 125,
  "status": "ok",
  "GPR[EPS]": "1689888811727",
  "time": 2162,
  "tokentime": 3,
  "inferencetime": 2159,
  "output": [
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        finally {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (ArgumentsAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (ArgumentsAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (ArgumentAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (ArgumentAreDifferent e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (MockitoAssertionError e) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.VerificationError e) {\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.VerificationException e) {\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        catch (org.mockito.exceptions.verification.VerificationError e) {\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n// fixed lines:\n        } catch (org.mockito.exceptions.verification.ArgumentsAreDifferent e) {\n<|endofmask|>"
  ]
}