{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688167929525",
  "GPR[ESLB]": "1688167949545",
  "file": "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172",
  "input": {
    "loc": "171-172",
    "input": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.probability(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = (1 - tDistribution.cumulativeProbability(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 1 - tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 1 - 2 * tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - Math.exp(-t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.p(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t) / t);\n<|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Math_69_-src-main-java-org-apache-commons-math-stat-correlation-PearsonsCorrelation.java_171-172.txt",
  "OAR_JOB_ID": "1550236",
  "GPR[SSLI]": "1688165397952",
  "GPR[ESLI]": "1688165427982",
  "GPR[SPS]": "1688167949595",
  "nrTokens": 157,
  "status": "ok",
  "GPR[EPS]": "1688167952390",
  "time": 2795,
  "tokentime": 3,
  "inferencetime": 2792,
  "output": [
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.probability(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = (1 - tDistribution.cumulativeProbability(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 1 - tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 1 - 2 * tDistribution.cumulativeProbability(t);\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - Math.exp(-t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.p(t));\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t) / t);\n<|endofmask|>"
  ]
}