{
  "config": "finetune",
  "data": {
    "Chart_4_source/org/jfree/chart/plot/XYPlot.java_4493-4493": {
      "loc": "4493-4493",
      "input": "public Range getDataRange(ValueAxis axis) {\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n    int rangeIndex = getRangeAxisIndex(axis);\n    if (rangeIndex >= 0) {\n        isDomainAxis = false;\n        mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                new Integer(rangeIndex)));\n        if (rangeIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    result = Range.combine(result, r.findDomainBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findDomainBounds(d));\n                }\n            }\n            else {\n                if (r != null) {\n                    result = Range.combine(result, r.findRangeBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findRangeBounds(d));\n                }\n            }\n// buggy lines start:\n                Collection c = r.getAnnotations();\n// buggy lines end:\n                Iterator i = c.iterator();\n                while (i.hasNext()) {\n                    XYAnnotation a = (XYAnnotation) i.next();\n                    if (a instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(a);\n                    }\n                }\n        }\n    }\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                result = Range.combine(result, xyabi.getXRange());\n            }\n            else {\n                result = Range.combine(result, xyabi.getYRange());\n            }\n        }\n    }\n    return result;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                Iterator c = r.getAnnotations();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                List c = r.getAnnotations();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                List<XYAnnotation> c = r.getAnnotations();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations(axis);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Iterator i = r.getAnnotations();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations(false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations(true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                Collection c = r.getAnnotations(d);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy lines start:\n    boolean removed = markers.remove(marker);\n// buggy lines end:\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    boolean removed = markers.remove(marker);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean removed = markers.remove(marker, notify);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(markerID);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(markerIndex, marker);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(markerIndex);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(index);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(markerToRemove);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker)!= null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker, notify);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker, false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n// buggy lines start:\n      JsName name = getName(ns.name, false);\n// buggy lines end:\n      if (name != null) {\n      refNodes.add(new ClassDefiningFunctionNode(\n          name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      JsName name = getName(ns.name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.name, false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "      JsName name = getName(ns.name, true);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      JsName name = getName(ns.name, false, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.name, true, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      JsName name = getName(ns.name, false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      String name = getName(ns.name, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      JsName name = getName(ns.getName(), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        JsName name = getName(ns.name, false);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy lines start:\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n// buggy lines end:\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return super.getLeastSupertype(that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  JSType result = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  RecordTypeBuilder builder = new RecordTypeBuilder(this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  JSType supertype = super.getLeastSupertype(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (that.isRecordType()) {\n    return that;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "  if (that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  } else {\n    return null;\n  }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  if (that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy lines start:\n      case '\\r': sb.append(\"\\\\r\"); break;\n// buggy lines end:\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c <= 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      case '\\\\': sb.append(backslashEscape); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\r': sb.append(\"\\\\\\\\r\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\r': sb.append(\"\\\\\\\\r\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\r': sb.append('\\\\');\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\f': sb.append(\"\\\\f\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\r':\n        sb.append(\"\\\\r\");\n        break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\r':\n        sb.append(\"\\\\r\");\n        break;\n      case '\\n':\n        sb.append(\"\\\\n\");\n        break;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_119_src/com/google/javascript/jscomp/GlobalNamespace.java_366-366": {
      "loc": "366-366",
      "input": "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent != null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy lines start:\n          case Token.INC:\n// buggy lines end:\n          case Token.DEC:\n            isSet = true;\n            type = Name.Type.OTHER;\n            break;\n          default:\n            if (NodeUtil.isAssignmentOp(parent) &&\n                parent.getFirstChild() == n) {\n              isSet = true;\n              type = Name.Type.OTHER;\n            }\n        }\n      }\n      name = n.getString();\n      break;\n    case Token.GETPROP:\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n              isPropAssign = true;\n            }\n            break;\n          case Token.INC:\n          case Token.DEC:\n            isSet = true;\n            type = Name.Type.OTHER;\n            break;\n          case Token.GETPROP:\n            return;\n          default:\n            if (NodeUtil.isAssignmentOp(parent) &&\n                parent.getFirstChild() == n) {\n              isSet = true;\n              type = Name.Type.OTHER;\n            }\n        }\n      }\n      name = n.getQualifiedName();\n      if (name == null) {\n        return;\n      }\n      break;\n    default:\n      return;\n  }\n  if (!isGlobalNameReference(name, scope)) {\n    return;\n  }\n  if (isSet) {\n    if (isGlobalScope(scope)) {\n      handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n    } else {\n      handleSetFromLocal(module, scope, n, parent, name);\n    }\n  } else {\n    handleGet(module, scope, n, parent, name);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "          case Token.INC:\n",
          "correctness": "wrong"
        },
        {
          "patch": "        case Token.INC:\n",
          "correctness": "wrong"
        },
        {
          "patch": "          case Token.DEC:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            case Token.INC:\n",
          "correctness": "wrong"
        },
        {
          "patch": "          case Token.ADD:\n",
          "correctness": "wrong"
        },
        {
          "patch": "        default:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "          case Token.ASSIGN:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "          case Token.SUB:\n",
          "correctness": "wrong"
        },
        {
          "patch": "          case Token.ACCESS:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy lines start:\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n// buggy lines end:\n        wasWhite= false;\n        switch(c) {\n        case '\\'':\n            if(unquote) {\n                if(++i==value.length()) {\n                    return regex;\n                }\n                c= value.charAt(i);\n            }\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    return regex;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        wasWhite= false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isWhitespace(c)) {\n            wasWhite = true;\n            regex.append(\"\\\\s*+\");\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            wasWhite= true;\n            regex.append(\"\\\\s*+\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append(\"String_Node_Str\");\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append(\"String_Node_Str\");\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            wasWhite= false;\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n            regex.append(\"String_Node_Str\");\n            break;\n        case '\\\\':\n            regex.append(\"String_Node_Str\");\n            break;\n        default:\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_24_src/main/java/org/apache/commons/lang3/math/NumberUtils.java_1413-1414": {
      "loc": "1413-1414",
      "input": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    int start = (chars[0] == '-') ? 1 : 0;\n    if (sz > start + 1) {\n        if (chars[start] == '0' && chars[start + 1] == 'x') {\n            int i = start + 2;\n            if (i == sz) {\n                return false; \n            }\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--; \n    int i = start;\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            hasDecPoint = true;\n        } else if (chars[i] == 'e' || chars[i] == 'E') {\n            if (hasExp) {\n                return false;\n            }\n            if (!foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n        } else if (chars[i] == '+' || chars[i] == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            allowSigns = false;\n            foundDigit = false; \n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (i < chars.length) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            return true;\n        }\n        if (chars[i] == 'e' || chars[i] == 'E') {\n            return false;\n        }\n        if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            return foundDigit;\n        }\n        if (!allowSigns\n            && (chars[i] == 'd'\n                || chars[i] == 'D'\n                || chars[i] == 'f'\n                || chars[i] == 'F')) {\n            return foundDigit;\n        }\n        if (chars[i] == 'l'\n            || chars[i] == 'L') {\n// buggy lines start:\n            return foundDigit && !hasExp;\n// buggy lines end:\n        }\n        return false;\n    }\n    return !allowSigns && foundDigit;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            return foundDigit;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return!foundDigit;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return foundDigit && hasExp;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return hasExp;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return!foundDigit &&!hasExp;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return foundDigit || hasExp;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return hasExp &&!foundDigit;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return!foundDigit && hasExp;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy lines start:\n        calendar = (Calendar) calendar.clone();\n// buggy lines end:\n        calendar.setTimeZone(mTimeZone);\n    }\n    return applyRules(calendar, buf);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        calendar = calendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar.setTimeZone(mTimeZone);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar = cloneCalendar(calendar);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.deepCopy();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) mCalendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) mTimeZone.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar = new Calendar(calendar);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy lines start:\n        chiSquare += residual * residual / residualsWeights[i];\n// buggy lines end:\n    }\n    return chiSquare;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        chiSquare += residual * residual;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual * residualsWeights[i];\n",
          "correctness": "plausible"
        },
        {
          "patch": "        chiSquare += residual * residual / weights[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        chiSquare += residual * residual / (double) residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residualsWeights[i] / residual;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / getResidualsWeight(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i];\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) {\n// buggy lines start:\n  int sum = 0;\n// buggy lines end:\n  for (int i = 0; i < p1.length; i++) {\n      final int dp = p1[i] - p2[i];\n      sum += dp * dp;\n  }\n  return Math.sqrt(sum);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  double sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double sum = 0.0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  final int sum = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  long sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double distance = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  final double sum = 0.0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  final double sum = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  float sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double sum = 0.;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double d = 0;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length != this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy lines start:\n    final BigDecimal[] out = new BigDecimal[v.length];\n// buggy lines end:\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = ZERO;\n        for (int i = 0; i < nCols; i++) {\n            sum = sum.add(data[row][i].multiply(v[i]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nRows];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    BigDecimal[] out = new BigDecimal[v.length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.getRowDimension()];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    BigDecimal[] out = new BigDecimal[nRows];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[this.getColumnDimension()];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nCols];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nRows * nCols];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length * nRows];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length + nRows];\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy lines start:\n    if (dataset != null) {\n// buggy lines end:\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && index >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (plot!= null && dataset!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null &&!dataset.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (dataset!= null && index!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && index < dataset.getRowCount()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getColumnCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset instanceof CategoryDataset) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.isVisible()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount()!= 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy lines start:\n    copy.data = new java.util.ArrayList();\n// buggy lines end:\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    copy.data = new ArrayList<TimeSeriesDataItem>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new ArrayList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new ArrayList<>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new LinkedList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new LinkedList<TimeSeriesDataItem>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = this.data.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList(this.data);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList(this.data.size());\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy lines start:\n    return super.equals(obj);\n// buggy lines end:\n\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ShapeList that = (ShapeList) obj;\n    return super.equals(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final ShapeList that = (ShapeList) obj;\n    return super.equals(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    return super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final ShapeList other = (ShapeList) obj;\n    return super.equals(other);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ShapeList shapeList = (ShapeList) obj;\n    return super.equals(shapeList);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final ShapeList shapeList = (ShapeList) obj;\n    return super.equals(shapeList);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    ShapeList that = (ShapeList) obj;\n    return super.equals(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    final ShapeList that = (ShapeList) obj;\n    return super.equals(that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    if (!super.equals(obj)) {\n        return false;\n    }\n    ShapeList shapeList = (ShapeList) obj;\n    if (shapeList.size()!= this.size()) {\n        return false;\n    }\n    for (int i = 0; i < size; i++) {\n        if (!super.equals(shapeList.get(i))) {\n            return false;\n        }\n    }\n    return true;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) {\n// buggy lines start:\n    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    this(time, DEFAULT_TIME_ZONE, Locale.getDefault());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, TimeZone.getDefault(), Locale.getDefault());\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this(time, zone, Locale.getDefault());\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, DEFAULT_TIME_ZONE, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, time, Locale.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, null, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.time = time;\n    this.zone = zone;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.time = time;\n    this.timeZone = zone;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy lines start:\n    if (endIndex < 0) {\n// buggy lines end:\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (endIndex >= this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (startIndex < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex < 0 || startIndex < 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) {\n// buggy lines start:\n    return \" title=\\\"\" + toolTipText\n// buggy lines end:\n        + \"\\\" alt=\\\"\\\"\";\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return \" title=\\\"\" + toolTipText + \"\\\"\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title=\\\"\" + toolTipText\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return String.format(\"String_Node_Str\", toolTipText);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + \" title=\\\"\" + toolTipText\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\" + \" title=\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy lines start:\n    PathIterator iterator2 = p1.getPathIterator(null);\n// buggy lines end:\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    PathIterator iterator2 = p2.getPathIterator(null);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    PathIterator iterator1 = p2.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final PathIterator iterator2 = p1.getPathIterator(null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    PathIterator iterator2 = p2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Iterator<GeneralPath> iterator2 = p1.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator1 = p1.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Iterator<GeneralPath> iterator1 = p1.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator1 = p1.getPathIterator(true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator1 = p1.getPathIterator(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Iterator<GeneralPath> iterator2 = p1.getPathIterator();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy lines start:\n    this.dataset = dataset;\n// buggy lines end:\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    this.dataSet = dataset;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.data = dataset;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    setDataset(dataset);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this.setDataset(dataset);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this.dataset = dataset.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = dataset;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this.dataset = new CategoryDataset(dataset);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.pieChart = new PiePlot(dataset);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.pieChart = new PiePlot(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.pieChart = (PiePlot) dataset;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_13_/source/org/jfree/chart/block/BorderArrangement.java_455-456": {
      "loc": "455-456",
      "input": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy lines start:\n                new Range(0.0, constraint.getWidth() - w[2]),\n// buggy lines end:\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[4]),\n",
          "correctness": "plausible"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[2] + w[4]),\n",
          "correctness": "wrong"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[3] - w[2]),\n",
          "correctness": "wrong"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[2] + w[3]),\n",
          "correctness": "wrong"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[3]), w[4],\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                new Range(constraint.getWidth() - w[2], constraint.getWidth() - w[3]),\n",
          "correctness": "plausible"
        },
        {
          "patch": "                new Range(constraint.getWidth() - w[2], constraint.getWidth() - w[2]),\n",
          "correctness": "plausible"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[3] - w[2]), h[2],\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[3] - w[2]), w[4],\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                new Range(0.0, constraint.getWidth() - w[3] - w[2]), h[4],\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "public Object clone() throws CloneNotSupportedException {\n// buggy lines start:\n    Object clone = createCopy(0, getItemCount() - 1);\n// buggy lines end:\n    return clone;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    Object clone = createCopy(0, getItemCount() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, getItemCount());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(1, getItemCount() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, getCount() - 1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(0, getCount());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(0, getSize() - 1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(0, getItemCount() - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, 0, getItemCount() - 1);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy lines start:\n    super(paint, stroke, paint, stroke, alpha);\n// buggy lines end:\n    this.value = value;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    super();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(value, paint, stroke, paint, stroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.value = value;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(paint, stroke, paint, stroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(paint, stroke, paint, stroke, alpha, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(paint);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super();\n    this.value = value;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(paint, stroke, paint, stroke, alpha, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(paint, stroke, paint, stroke, alpha, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super.init(paint, stroke, paint, stroke, alpha);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy lines start:\n    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// buggy lines end:\n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound \n",
          "correctness": "plausible"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - \n",
          "correctness": "plausible"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) (value / (this.upperBound - this.lowerBound));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) ((value - this.lowerBound) / (this.upperBound - \n",
          "correctness": "wrong"
        },
        {
          "patch": "    int g = (int) ((this.value - this.lowerBound) / (this.upperBound \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) (value / (this.upperBound - this.lowerBound) * 255.0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) Math.floor((value - this.lowerBound) / (this.upperBound \n",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy lines start:\n        StringBuffer buff = new StringBuffer();\n// buggy lines end:\n\n        while (iter.hasNext())\n        {\n            buff.append(iter.next());\n        }\n        throw new MissingOptionException(buff.toString());\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        StringBuilder buff = new StringBuilder();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        List<String> buff = new ArrayList<String>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        StringBuffer buff = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ArrayList<String> buff = new ArrayList<String>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final StringBuffer buff = new StringBuffer();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        StringBuffer buff = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        final StringBuilder buff = new StringBuilder();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        StringBuffer buff = new StringBuffer();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        String buff = null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        StringBuffer buff = new StringBuffer(requiredOptions.size());\n",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy lines start:\n        pos = findWrapPos(text, width, nextLineTabStop);\n// buggy lines end:\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        pos = findWrapPos(text, width);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, nextLineTabStop);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, tabStop);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, tabWidth);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, width);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        pos = findWrapPos(text, width, tabSize);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, maxWidth);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, lineTabStop);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, nextLineTabStop, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        pos = findWrapPos(text, width, tabStopWidth);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt() != null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy lines start:\n    if (option.hasArg() && (option.getArgName() != null))\n// buggy lines end:\n    {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (option.hasArg() && option.getArgName()!= null)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (option.hasArg())\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= null))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (option.getArgName()!= null)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName() == null))\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= null) && (option.getArgValue()!= null))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= \"String_Node_Str\"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= null) && (option.getArgType()!= null))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= null) && option.getArgValue()!= null)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (option.hasArg() && (option.getArgName()!= null && option.getArgName().length() > 0))\n",
          "correctness": "plausible"
        }
      ]
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy lines start:\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n                                        \"- no room for the description\");\n// buggy lines end:\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return sb;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is \" + width + \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is greater than the width of the argument and indent \" + \n                                        \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new RuntimeException(\"Total width is less than the width of the argument and indent \" + \n                                    \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is less than indent \" + \n                                        \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is less than \" + width + \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is \" + width + \"px and indent \" + \n                                        \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"Total width is \" + width + \n                                        \"- no room for the description\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        return sb;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy lines start:\n        nextLineTabStop = width - 1;\n// buggy lines end:\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        nextLineTabStop = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        nextLineTabStop = width - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        nextLineTabStop = width;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        nextLineTabStop = width - 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        nextLineTabStop = width - text.length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        nextLineTabStop = width - pos;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        nextLineTabStop = width - pos - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        nextLineTabStop = width + 1;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        nextLineTabStop = text.length();\n",
          "correctness": "timeout"
        },
        {
          "patch": "        nextLineTabStop = width - text.length();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy lines start:\n                break;\n// buggy lines end:\n            }\n            cmd.addOption(opt);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                continue;\n",
          "correctness": "plausible"
        },
        {
          "patch": "                cmd.addOption(opt);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                opt.addValueForProcessing(value);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                throw new RuntimeException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "                cmd.addOption(option);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                cmd.addOption(opt);\n                break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                cmd.addOption(opt);\n                continue;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy lines start:\n    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n           && (c != '\\n') && (c != '\\r'))\n    {\n        ++pos;\n    }        \n// buggy lines end:\n    return pos == text.length() ? -1 : pos;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    while ((pos <= text.length()) && (c!='') && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos <= text.length()) && ((c = text.charAt(pos))!=''))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos <= text.length()) && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while (pos < text.length()) && ((c = text.charAt(pos))!='')\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos <= width) && ((c = text.charAt(pos))!='')\n           && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos < text.length()) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos < text.length()) && ((c = text.charAt(pos))!=''))\n    {\n        ++pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos < text.length()) && ((c = text.charAt(pos))!='')\n           && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos < text.length()) && ((c = text.charAt(pos))!='')\n           && (c!= '\\n') && (c!= '\\r'))\n    {\n        pos++;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    while ((pos <= text.length()) && (c!='') && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }        \n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy lines start:\n        return null;\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        throw new ParseException(\"String_Node_Str\");\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalArgumentException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new ParseException(\"String_Node_Str\" + str);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return defaultValue;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        throw new RuntimeException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new ParseException();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        throw new IllegalArgumentException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new RuntimeException(\"String_Node_Str\" + str);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n// buggy lines start:\n\n// buggy lines end:\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  removeUnreferencedFunctionArgs(fnScope, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  callSiteOptimizer.optimize(fnScope, referenced);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  removeUnreferencedFunctionArgs(fnScope, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getRootNode()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "  removeUnreferencedFunctionArgs(fnScope.getRootNode());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  callSiteOptimizer.removeUnreferencedFunctionArgs(fnScope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  Node fnNode = fnScope.getRootNode();\n  Preconditions.checkState(fnNode.isFunction());\n",
          "correctness": "wrong"
        },
        {
          "patch": "  Node function = fnScope.getRootNode().getParent();\n  Preconditions.checkState(function.isFunction());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n// buggy lines start:\n\n// buggy lines end:\n      \n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (!isVarOrAssignExprLhs(name)) {\n       return false;\n    }\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n    if (!val.isObjectLit()) {\n      return false;\n    }\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() ||\n          child.isSetterDef()) {\n        return false;\n      }\n      validProperties.add(child.getString());\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    ret = true;\n  }\n  return ret;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (gramps.isCall()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (!isVarOrAssignExprLhs(name)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (gramps.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    if (gramps.isCall()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (!isVarOrAssignExprLhs(parent)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy lines start:\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n// buggy lines end:\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return mayBeStringHelper(n, MAY_BE_STRING_PREDICATE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return mayBeStringPredicate(n, MAY_BE_STRING_PREDICATE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return mayBeStringHelper(n, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return mayBeStringHelper(n, recurse);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy lines start:\n  } else if (n.getJSType() != null && parent.isAssign()) {\n    return;\n// buggy lines end:\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n  ensureTyped(t, n);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  } else if (!parent.isAssign()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  } else if (!parent.isAssign()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  } else if (!n.isGetProp()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n",
          "correctness": "plausible"
        },
        {
          "patch": "  } else if (!parent.isAssign()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"object\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  } else if (!parent.isAssign()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"obj\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (validator.expectNotNullOrUndefined(t, n, childType, \"String_Node_Str\", \"String_Node_Str\")) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (validator.expectNotNullOrUndefined(t, n, childType, \"String_Node_Str\")) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  } else if (!validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\")) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  } else if (!parent.isAssign()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    return;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(parent.getLastChild());\n        } else { \n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (NodeUtil.getCatchBlock(parent) == node){\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getLastChild() == node){\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n// buggy lines start:\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n// buggy lines end:\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(parent, Branch.UNCOND, finallyNode);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.COND, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(from, Branch.UNCOND, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(Branch.UNCOND, fromNode, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(node, Branch.UNCOND, finallyNode);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.CONTINUE, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, Branch.UNCOND);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n// buggy lines start:\n\n// buggy lines end:\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  Node c = n.getFirstChild();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  Node c = n.getFirstChild();\n  do {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n    c = c.getNext();\n  } while (c!= null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  Node c = n.getFirstChild();\n  do {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n    c = c.getNext();\n  } while (c!= n);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_18_/src/com/google/javascript/jscomp/Compiler.java_1288-1289": {
      "loc": "1288-1289",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy lines start:\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n// buggy lines end:\n      for (CompilerInput input : inputs) {\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n        staleInputs = true;\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    hoistNoCompileFiles();\n    if (staleInputs) {\n      repartitionInputs();\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n      jsRoot.addChildToBack(n);\n    }\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (options.closurePass) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.dependencyOptions.needsManagement()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (options.dependencyOptions.needsManagement() &&!options.closurePass) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.closurePass && options.dependencyOptions.needsManagement()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.dependencyOptions.needsManagement() || options.closurePass) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (options.closurePass &&!options.dependencyOptions.needsManagement()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.closurePass || options.dependencyOptions.needsManagement()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (options.needsManagement() && options.closurePass) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!options.closurePass) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.closurePass && (options.dependencyOptions.needsManagement())) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy lines start:\n    if (value != null) {\n// buggy lines end:\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (value!= null &&!value.isEmpty()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.isName()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.isName()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.isCall()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.isString()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.isString()) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_31_/src/com/google/javascript/jscomp/Compiler.java_1285-1286": {
      "loc": "1285-1286",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy lines start:\n        !options.skipAllPasses &&\n// buggy lines end:\n        options.closurePass) {\n      for (CompilerInput input : inputs) {\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n        staleInputs = true;\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (n.getJSDocInfo() != null) {\n        JSDocInfo info = n.getJSDocInfo();\n        if (info.isExterns()) {\n          externsRoot.addChildToBack(n);\n          input.setIsExtern(true);\n          input.getModule().remove(input);\n          externs.add(input);\n          staleInputs = true;\n        } else if (info.isNoCompile()) {\n          input.getModule().remove(input);\n          staleInputs = true;\n        }\n      }\n    }\n    if (staleInputs) {\n      fillEmptyModules(modules);\n      rebuildInputsFromModules();\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n      jsRoot.addChildToBack(n);\n    }\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "       !options.skipAllPasses &&!options.closurePass &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "       !options.skipAllPasses &&!options.closurePass) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "       !options.skipAllPasses &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "        options.skipAllPasses &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "       !options.skipAllPasses && options.closurePass) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "       !options.skipAllPasses &&!options.closurePass ) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "       !options.skipAllPasses && options.closurePass) {\n        for (CompilerInput input : inputs) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "       !options.skipAllPasses &&\n        options.closurePass &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "       !options.skipAllPasses &&!options.closurePass) {\n        for (CompilerInput input : inputs) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "       !options.skipAllPasses &&!options.closurePass &&\n        options.closurePass) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n// buggy lines start:\n\n// buggy lines end:\n  \n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "  \n",
          "correctness": "wrong"
        },
        {
          "patch": "    \n",
          "correctness": "wrong"
        },
        {
          "patch": "  \n  JSType typeToInfer = null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  JSType constraintType = constraintObj.getType();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  JSType propType = constraintObj.getPropertyType();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getPropertyNames()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  JSType typeToInfer = constraintObj.getType();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  \n  if (constraintObj.isRecordType()) {\n    for (JSType propType : constraintObj.getPropertyTypes()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy lines start:\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n// buggy lines end:\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n// buggy lines start:\n    }\n// buggy lines end:\n  }\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n      return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n      return false;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n      return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (relationship!= null) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n      return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (relationship!= null) {\n    }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy lines start:\n  if (x < 0 && prev == '-') {\n// buggy lines end:\n    add(\" \");\n  }\n  if ((long) x == x && !negativeZero) {\n    long value = (long) x;\n    long mantissa = value;\n    int exp = 0;\n    if (Math.abs(x) >= 100) {\n      while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n        mantissa /= 10;\n        exp++;\n      }\n    }\n    if (exp > 2) {\n      add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n    } else {\n      add(Long.toString(value));\n    }\n  } else {\n    add(String.valueOf(x));\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (x < 0 && isNegativeZero(prev)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if ((long) x < 0 && prev == '-') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 || prev == '-') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-' && negativeZero) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-' &&!negativeZero) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 &&!negativeZero) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-' || prev == '+') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-' && isNegativeZero(x)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-' || prev == '0') {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy lines start:\n  return len > 0;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return len == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return len == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (len > 0) {\n    return true;\n  }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return len!= 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (len > 0)\n    return true;\n  else\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (len > 0) {\n    return false;\n  }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (len > 0) {\n    return true;\n  }\n  return false;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy lines start:\n  return NodeUtil.isFunctionExpression(n);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  return NodeUtil.isReduceableFunctionExpression(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return NodeUtil.isFunctionExpression(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return NodeUtil.isFunctionExpression(n, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return n.isFunctionExpression();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return NodeUtil.isFunctionExpression(n, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (NodeUtil.isFunctionExpression(n))\n    return true;\n  else\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  } else {\n    return false;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  if (NodeUtil.isArrowFunctionExpression(n)) {\n    return true;\n  }\n  return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  Node parent = n.getParent();\n  if (parent!= null && NodeUtil.isFunctionExpression(parent)) {\n    return true;\n  }\n  return false;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy lines start:\n        if (target != null) {\n// buggy lines end:\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (target!= null && target.getType() == Token.STRING) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.STRING) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (target!= null && target.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null &&!target.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.isName()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && NodeUtil.isExprCall(target)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.NAME) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.ID) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.ASSIGN) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.NAME) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy lines start:\n  if (options.checkGlobalThisLevel.isOn()) {\n// buggy lines end:\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n    options.setWarningLevel(\n        DiagnosticGroups.ES5_STRICT,\n        CheckLevel.ERROR);\n  }\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(\n      new SuppressDocWarningsGuard(\n          getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n  ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n  if (!options.checkSymbols &&\n      !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n  this.warningsGuard = composedGuards;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (options.checkGlobalThisLevel!= null &&!options.checkGlobalThisLevel.isOn()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThis.isOn()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel!= null &&!options.checkGlobalThisLevel.isOff()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel!= null && options.checkGlobalThisLevel.isOn()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel.isOn() || options.checkGlobalThisLevel.isOff()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel!= null &&!options.checkGlobalThisLevel.isEmpty()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null ? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName != null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy lines start:\n        && 0 <= charno && charno < sourceExcerpt.length()) {\n// buggy lines end:\n      for (int i = 0; i < charno; i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (Character.isWhitespace(c)) {\n          b.append(c);\n        } else {\n          b.append(' ');\n        }\n      }\n      b.append(\"^\\n\");\n    }\n  }\n  return b.toString();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        && 0 <= charno && charno <= sourceExcerpt.length()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        && charno < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && charno <= sourceExcerpt.length()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        && 0 <= charno && charno < sourceExcerpt.length() - 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && charno >= 0 && charno < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && 0 <= charno) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        && 0 <= charno && charno < sourceExcerpt.length() && charno >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && 0 <= charno && charno < sourceExcerpt.length() && charno!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && 0 <= charno && charno < sourceExcerpt.length() && charno < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        && 0 <= charno && charno < sourceExcerpt.length() && sourceExcerpt.length() > charno) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy lines start:\n      case '\\0': sb.append(\"\\\\0\"); break;\n// buggy lines end:\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c < 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      case '\\\\': sb.append(backslashEscape); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\\\': sb.append(\"\\\\\\\\\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      case '\\\\': sb.append('\\\\'); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\\\':\n        sb.append(\"\\\\\\\\\");\n        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '<':\n        sb.append(\"String_Node_Str",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-')) {\n            sb.append(\"",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '<':\n        final String END_SCRIPT",
          "correctness": "uncompilable"
        },
        {
          "patch": "      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':\n        if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        ) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "      )\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        && n.getFirstChild().getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        && n.getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    && n.getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    && n.getFirstChild().getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        || n.getFirstChild().getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        && n.getLastChild().getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        || n.getType() == Token.GETPROP\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, functionNode,\n// buggy lines start:\n              jsDocParameter.getJSType(), true);\n// buggy lines end:\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "              jsDocParameter.getJSType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "              jsDocParameter.getJSType(), null, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            jsDocParameter.getJSType(), true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "              jsDocParameter.getJSType(), false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "              jsDocParameter.getJSType(), true, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "              jsDocParameter.getJSType(), true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "              null, true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "              jsDocParameter.getJSType(), true, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "              jsDocParameter.getJSType(), false, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "              jsDocParameter.getJSType(), true, null);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_71_/src/com/google/javascript/jscomp/CheckAccessControls.java_416-417": {
      "loc": "416-417",
      "input": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType != null) {\n// buggy lines start:\n    boolean isOverride = t.inGlobalScope() &&\n// buggy lines end:\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n    if (objectType == null) {\n      return;\n    }\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n    if (isOverride) {\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n          overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n          (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    boolean isOverride = t.inGlobalScope() &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean isOverride =\n",
          "correctness": "plausible"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN;\n    if (isOverride) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN;\n    if (isOverride) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && (parent.getType() == Token.ASSIGN);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && (parent.getType() == Token.ASSIGN);\n    if (isOverride) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && (parent!= null &&\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && (parent!= null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean isOverride = t.inGlobalScope() && (parent.getType() == Token.ASSIGN? true : false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n// buggy lines start:\n          if (c > 0x1f && c <= 0x7f) {\n// buggy lines end:\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            if (c > 0x1f && c <= 0x7f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if (c > 0x7f && c <= 0x9f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if (c > 0x7f && c <= 0xff) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if (c > 0x7f && c <= 0x7f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c >= 0x30 && c <= 0x39) || (c >= 0x41 && c <= 0x5A)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c >= 0x30 && c <= 0x39) || (c >= 0x41 && c <= 0x5a)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c > 0x1f && c <= 0x7f) || c == '\\\\') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c >= 0x30 && c <= 0x39) || (c >= 0x41 && c <= 0x46)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "          if ((c >= 0x20 && c <= 0x7E) || (c >= 0x80 && c <= 0xFF)) {\n",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "public final boolean isEmptyType() {\n// buggy lines start:\n  return isNoType() || isNoObjectType() || isNoResolvedType();\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  return isNoType() || isNoObjectType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoType() || isNoObjectType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoType() || isNoObjectType() || isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "}\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return isNoType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return isNoType() || isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return!isNoType() &&!isNoObjectType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return!isNoType() &&!isNoObjectType();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy lines start:\n  String param = params.getParameter(0);\n// buggy lines end:\n\n  if (param == null) {\n    setter.addValue(true);\n    return 0;\n  } else {\n    String lowerParam = param.toLowerCase();\n    if (TRUES.contains(lowerParam)) {\n      setter.addValue(true);\n    } else if (FALSES.contains(lowerParam)) {\n      setter.addValue(false);\n    } else {\n      setter.addValue(true);\n      return 0;\n    }\n    return 1;\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  String param = params.getParameter(1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameter(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameters().get(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  String param = params.getParameterAsString(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  String arg = params.getParameter(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  final String param = params.getParameter(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameterValue(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  String param = (String) params.getParameter(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameters()[0];\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy lines start:\n      return true;\n// buggy lines end:\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "      return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return locals.apply(value);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      throw new IllegalStateException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return NodeUtil.isImmutableValue(value.getLastChild());\n",
          "correctness": "plausible"
        },
        {
          "patch": "      return isImmutableValue(value) || locals.apply(value);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      return evaluatesToLocalValue(value.getFirstChild(), locals);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      return NodeUtil.isImmutableValue(value.getFirstChild());\n",
          "correctness": "plausible"
        },
        {
          "patch": "      return isImmutableValue(value);\n",
          "correctness": "plausible"
        },
        {
          "patch": "      throw new IllegalStateException(\"String_Node_Str\" + value);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy lines start:\n      int indexOfDot = namespace.indexOf('.');\n// buggy lines end:\n      if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      int indexOfDot = namespace.length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "      int indexOfDot = namespace.length() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      int indexOfDot;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      int indexOfDot = namespace.indexOf('[');\n",
          "correctness": "plausible"
        },
        {
          "patch": "      int indexOfDot = namespace.indexOf('.')\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        int indexOfDot = namespace.lastIndexOf('.');\n",
          "correctness": "plausible"
        },
        {
          "patch": "      int indexOfDot = namespace.indexOf('.')-1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      int indexOfDot = namespace.indexOf('.');\n",
          "correctness": "wrong"
        },
        {
          "patch": "      int indexOfDot = namespace.indexOf(':');\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy lines start:\n        result = lvalInt >>> rvalInt;\n// buggy lines end:\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        result = lvalInt >> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lval >>> rval;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 0xFF;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt | 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 0xFFFFFFFF;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 0xffffffff;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 0xFFFFFFFFL;\n",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy lines start:\n  if (result != null) {\n// buggy lines end:\n    return result;\n  } else if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (result == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null &&!result.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result!= null && that.isObject()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null &&!result.isNull()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result!= null && that.isSubtype(result)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null && result.isSubtype(this)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null && this.isObject()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null && this.isObject() && that.isObject()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.OBJECT);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (this.isObject() && that.isObject()) {\n    return JSTypeNative.NO_OBJECT_TYPE;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy lines start:\n        return parseTypeName(token);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return parseTypeExpression(token);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return parseContextTypeName(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseContextType(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseTypeName(token, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseTypeReference(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseTypeName(token, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseType(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return parseContextTypeName(token, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseContextTypeName(token, true);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy lines start:\n  return topType;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  return super.caseTopType(topType);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  throw new UnsupportedOperationException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  throw new UnsupportedOperationException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  throw new UnsupportedOperationException(\"String_Node_Str\" + topType + \"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  throw new UnsupportedOperationException(\"String_Node_Str\" + topType);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  switch(topType) {\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    }\n    return topType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  switch(topType) {\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    }\n    return topType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  switch(topType) {\n    case \"String_Node_Str\":\n    case \"String_Node_Str\":\n    }\n    return topType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  throw new UnsupportedOperationException(\"String_Node_Str\" + topType + \"String_Node_Str\" + this);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy lines start:\n    if (provided != null) {\n// buggy lines end:\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (arg!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (providedName!= null) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (n.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided.getName()!= null) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (provided!= null &&!n.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (arg!= null &&!arg.isEmpty()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null &&!arg.isEmpty()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null &&!arg.isFirstChild()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (provided!= null &&!n.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null &&!providedNames.containsKey(ns)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy lines start:\n    } else {\n// buggy lines end:\n      \n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    } else if (parent.isFor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.getFirstChild().getNext()!= n) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (NodeUtil.isForIn(parent)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (!parent.isFor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (!NodeUtil.isForIn(parent)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.getFirstChild().getNext() == n) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (parent.isFor()) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n// buggy lines start:\n\n// buggy lines end:\n    \n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    \n",
          "correctness": "wrong"
        },
        {
          "patch": "    \n    String name = child.getStringValue();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    handleObjectLit(t, child);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    \n    Property prop = getProperty(child.getString());\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, null, null))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    String name = child.getStringValue();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    String name = child.getQualifiedName();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    String name = child.getStringValue();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    Property prop = getProperty(child.getString());\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, null, null))) {\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    Property prop = getProperty(child.getString());\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, null))) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy lines start:\n      break;\n// buggy lines end:\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n  return true;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n      return false;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    if (block.isLoop) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (block.isIf) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n      return true;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    if (block.isFunction) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "private void handleBlockComment(Comment comment) {\n// buggy lines start:\n  if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n// buggy lines end:\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (comment.getValue().indexOf(\"String_Node_Str\")!= -1 || comment.getValue().indexOf(\"String_Node_Str\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"String_Node_Str\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"@\")!= -1 || comment.getValue().indexOf(\"\\n@\")!= -1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (comment.getValue()!= null && comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String value = comment.getValue();\n  if (value.indexOf(\"/* @\")!= -1 || value.indexOf(\"\\n * @\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().contains(\"String_Node_Str\") || comment.getValue().contains(\"String_Node_Str\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"@\")!= -1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (comment.getValue().startsWith(\"String_Node_Str\") || comment.getValue().startsWith(\"String_Node_Str\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().startsWith(\"String_Node_Str\") || comment.getValue().indexOf(\"String_Node_Str\")!= -1) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy lines start:\n    if (fnType != null) {\n// buggy lines end:\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (fnType == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null && fnType.isConstructor()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isConstructor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType.isConstructor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null && type.isConstructor()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isUnknownType()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null && fnType.getInstanceType()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isEmptyType()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isVoid()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_126_/src/com/google/javascript/jscomp/MinimizeExitPoints.java_141-145": {
      "loc": "141-145",
      "input": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy lines start:\n    if (NodeUtil.hasFinally(n)) {\n      Node finallyBlock = n.getLastChild();\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n// buggy lines end:\n  }\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n  }\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock, falseBlock;\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock,\n          ifTree, exitType, labelName);\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock,\n            ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    Node finallyBlock = n.getLastChild();\n    tryMinimizeExits(finallyBlock, exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    tryMinimizeExits(n.getLastChild(), exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    tryMinimizeExits(n, exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!NodeUtil.hasFinally(n)) {\n      return;\n    }\n    Node finallyBlock = n.getLastChild();\n    tryMinimizeExits(finallyBlock, exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (Node c : n.children()) {\n      tryMinimizeExits(c, exitType, labelName);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Node finallyBlock = n.getLastChild();\n    if (NodeUtil.hasFinally(finallyBlock)) {\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Node finallyBlock = NodeUtil.getFinallyBlock(n);\n    if (finallyBlock!= null) {\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Node finallyBlock = NodeUtil.getFinallyBlock(n);\n    tryMinimizeExits(finallyBlock, exitType, labelName);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (NodeUtil.hasFinally(n, true)) {\n      Node finallyBlock = n.getLastChild();\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Node finallyBlock = n.getLastChild();\n    tryMinimizeExits(finallyBlock, exitType, labelName);\n    if (finallyBlock!= null) {\n      return;\n    }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n// buggy lines start:\n\n// buggy lines end:\n  if (!NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n  if (first.isName() &&\n      \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "  n.putBooleanProp(Node.FREE_CALL, true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  Preconditions.checkState(NodeUtil.isGet(first));\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    n.putBooleanProp(Node.DIRECT_EVAL, true);\n    return;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    if (first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    if (first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n    return;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    if (first.isName() && (\"eval\".equals(first.getString()))) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    if (first.isName() && (\"eval\".equals(first.getString()))) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n    return;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    n.putBooleanProp(Node.DIRECT_EVAL, true);\n    if (first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n    return;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n    n.putBooleanProp(Node.DIRECT_EVAL, true);\n    if (first.isName() && (\"eval\".equals(first.getString()))) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n  }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy lines start:\n    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy lines end:\n        name.aliasingGets > 0) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (name.globalSets == 0 && name.localSets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 1 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 1 && name.aliasingGets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 &&\n        name.aliasingGets > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && (name.type == Name.Type.OBJECTLIT ||\n        name.type == Name.Type.FUNCTION)) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy lines start:\n  return result;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  return result.trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null)\n    return result;\n  else\n    return \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result == null) {\n    return \"String_Node_Str\";\n  } else {\n    return result;\n  }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null) {\n    return result;\n  } else {\n    return \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result == null) {\n    return \"String_Node_Str\";\n  }\n  return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null) {\n    return result;\n  }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result == null) {\n    return \"String_Node_Str\";\n    } else {\n    return result;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result!= null)\n    return result;\n  else\n    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result == null) {\n    return \"String_Node_Str\";\n  } else {\n    return result;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "      return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return new TypePair(this, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return this.typeA;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return this;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return new TypePair(this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return this.typeB;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return new TypePair(null, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return new TypePair(this, that);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy lines start:\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "}\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  attachLiteralTypes(parent, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  attachLiteralTypes(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  handleFunctionInputs(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  attachTypes(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  handleFunctionInputs(parent);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  defineFunction(n, parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  attachLiteralTypes(t, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    attachLiteralTypes(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy lines start:\n  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n// buggy lines end:\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n  return super.resolveInternal(t, scope);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  typeOfThis = safeResolve(typeOfThis, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  typeOfThis = typeOfThis.resolve(t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, null);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n// buggy lines start:\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n// buggy lines end:\n    }\n  }\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  {\n    if (node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n        findCalledFunctions(c, changed);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (node!= null) {\n    if (node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      while (child!= null) {\n        if (child.getType() == Token.NAME) {\n          changed.add(child.getString());\n        }\n        child = child.getNext();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  {\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n        return;\n      }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      while (child!= null) {\n        if (child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n        child = child.getNext();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  {\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n        return true;\n      }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (t.getScopeDepth() <= 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() > 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() >= 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() < 2) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() == 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 1 && n.getFirstChild()!= null) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 1 && n.isName()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 1 || n.getFirstChild()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 1 || n.isName()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 1 || n.getFirstChild() == null) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy lines start:\n        if (lineLength > 0) {\n// buggy lines end:\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) { b += 256; }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && lineLength <= currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (lineLength > 0 && pos < buf.length) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength > 0 && pos < encodeSize) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineSeparator!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength > 0 || lineSeparator!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength > 0 && lineLength <= pos) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lineLength > 0 && pos > 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (lineLength > 0 && pos!= 0) {\n",
          "correctness": "plausible"
        }
      ]
    },
    "Codec_3_/src/java/org/apache/commons/codec/language/DoubleMetaphone.java_455-456": {
      "loc": "455-456",
      "input": "private int handleG(String value, \n                    DoubleMetaphoneResult result, \n                    int index, \n                    boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        index = handleGH(value, result, index);\n    } else if (charAt(value, index + 1) == 'N') {\n        if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n            result.append(\"KN\", \"N\");\n        } else if (!contains(value, index + 2, 2, \"EY\") && \n                   charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n            result.append(\"N\", \"KN\");\n        } else {\n            result.append(\"KN\");\n        }\n        index = index + 2;\n    } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n        result.append(\"KL\", \"L\");\n        index += 2;\n    } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n        result.append('K', 'J');\n        index += 2;\n    } else if ((contains(value, index + 1, 2, \"ER\") || \n                charAt(value, index + 1) == 'Y') &&\n               !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n               !contains(value, index - 1, 1, \"E\", \"I\") && \n               !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n        result.append('K', 'J');\n        index += 2;\n    } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n               contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n        if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n            result.append('K');\n// buggy lines start:\n        } else if (contains(value, index + 1, 4, \"IER\")) {\n// buggy lines end:\n            result.append('J');\n        } else {\n            result.append('J', 'K');\n        }\n        index += 2;\n    } else if (charAt(value, index + 1) == 'G') {\n        index += 2;\n        result.append('K');\n    } else {\n        index++;\n        result.append('K');\n    }\n    return index;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        } else if (contains(value, index + 1, 4, \"ER\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 5, \"ER\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 2, \"ER\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 3, \"ER\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 4, \"IE\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 4, \"I\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (contains(value, index + 1, 4, \"IER\") &&!slavoGermanic) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (index == 0 && contains(value, index + 1, 4, \"IER\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (index == 0 && contains(value, index + 1, 4, \"ER\")) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "public Base64() {\n// buggy lines start:\n    this(false);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    this(true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    super();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(null, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(null, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(true, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(true, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(true, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(null, true);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "public static String encodeBase64String(byte[] binaryData) {\n// buggy lines start:\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return StringUtils.newStringUtf8(encodeBase64(binaryData));\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return encodeBase64(binaryData, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return StringUtils.newStringUtf8(encodeBase64(binaryData, null));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return StringUtils.newStringUtf8(encodeBase64(binaryData), true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return encodeBase64(binaryData, true).toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Base64.encodeBase64String(binaryData);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return encodeBase64(binaryData);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return encodeBase64String(binaryData, true);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy lines start:\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n// buggy lines end:\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    long len = getEncodeLength(binaryData, maxResultSize, CHUNK_SEPARATOR);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, maxResultSize);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, binaryData.length, CHUNK_SEPARATOR);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, mimeChunkSize, CHUNK_SEPARATOR);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, maxResultSize, MIME_CHUNK_SIZE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long len = binaryData.length;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_10_/src/java/org/apache/commons/codec/language/Caverphone.java_76-77": {
      "loc": "76-77",
      "input": "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy lines start:\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy lines end:\n\n    txt = txt.replaceAll(\"cq\", \"2q\");\n    txt = txt.replaceAll(\"ci\", \"si\");\n    txt = txt.replaceAll(\"ce\", \"se\");\n    txt = txt.replaceAll(\"cy\", \"sy\");\n    txt = txt.replaceAll(\"tch\", \"2ch\");\n    txt = txt.replaceAll(\"c\", \"k\");\n    txt = txt.replaceAll(\"q\", \"k\");\n    txt = txt.replaceAll(\"x\", \"k\");\n    txt = txt.replaceAll(\"v\", \"f\");\n    txt = txt.replaceAll(\"dg\", \"2g\");\n    txt = txt.replaceAll(\"tio\", \"sio\");\n    txt = txt.replaceAll(\"tia\", \"sia\");\n    txt = txt.replaceAll(\"d\", \"t\");\n    txt = txt.replaceAll(\"ph\", \"fh\");\n    txt = txt.replaceAll(\"b\", \"p\");\n    txt = txt.replaceAll(\"sh\", \"s2\");\n    txt = txt.replaceAll(\"z\", \"s\");\n    txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n    txt = txt.replaceAll(\"[aeiou]\", \"3\");\n    txt = txt.replaceAll(\"j\", \"y\");        \n    txt = txt.replaceAll(\"^y3\", \"Y3\");     \n    txt = txt.replaceAll(\"^y\", \"A\");       \n    txt = txt.replaceAll(\"y\", \"3\");        \n    txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n    txt = txt.replaceAll(\"gh\", \"22\");\n    txt = txt.replaceAll(\"g\", \"k\");\n    txt = txt.replaceAll(\"s+\", \"S\");\n    txt = txt.replaceAll(\"t+\", \"T\");\n    txt = txt.replaceAll(\"p+\", \"P\");\n    txt = txt.replaceAll(\"k+\", \"K\");\n    txt = txt.replaceAll(\"f+\", \"F\");\n    txt = txt.replaceAll(\"m+\", \"M\");\n    txt = txt.replaceAll(\"n+\", \"N\");\n    txt = txt.replaceAll(\"w3\", \"W3\");\n    txt = txt.replaceAll(\"wh3\", \"Wh3\");\n    txt = txt.replaceAll(\"w$\", \"3\");       \n    txt = txt.replaceAll(\"w\", \"2\");\n    txt = txt.replaceAll(\"^h\", \"A\");\n    txt = txt.replaceAll(\"h\", \"2\");\n    txt = txt.replaceAll(\"r3\", \"R3\");\n    txt = txt.replaceAll(\"r$\", \"3\");       \n    txt = txt.replaceAll(\"r\", \"2\");\n    txt = txt.replaceAll(\"l3\", \"L3\");\n    txt = txt.replaceAll(\"l$\", \"3\");       \n    txt = txt.replaceAll(\"l\", \"2\");\n    txt = txt.replaceAll(\"2\", \"\");\n    txt = txt.replaceAll(\"3$\", \"A\");       \n    txt = txt.replaceAll(\"3\", \"\");\n    txt = txt + \"111111\" + \"1111\";        \n    return txt.substring(0, 10);          \n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    txt = txt.replaceAll(\"^m\", \"m2\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^mb\", \"m\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"mb\", \"m2\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^mb\", \"m2\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^m\", \"2\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^mb\", \"M\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^mb\", \"2m\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^m\", \"m\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"^mb\", \"2\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    txt = txt.replaceAll(\"cq\", \"2q\");\n",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy lines start:\n    return new String(bytes, Charsets.ISO_8859_1);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return new String(bytes, Charsets.UTF_8);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new String(bytes, Charsets.ISO_8859_1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new String(bytes, StandardCharsets.ISO_8859_1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new String(bytes, Charsets.ISO_8859_1, StandardCharsets.UTF_8);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new String(bytes, Charsets.US_ASCII);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new String(bytes, ISO_8859_1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new String(bytes, Charsets.ISO_8859_1, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new String(bytes, Charsets.ISO_8859_1.name());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return String.valueOf(bytes, Charsets.ISO_8859_1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new String(bytes, Charset.forName(\"String_Node_Str\"));\n",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy lines start:\n    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, cs1.length(), cs2.length());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs2.length());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, cs1.length(), cs2, 0, cs2.length());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cs1.equals(cs2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return CharSequenceUtils.regionMatches(cs1, false, cs1.length(), cs2.length(), cs1.length());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "\n// buggy lines start:\nprivate Object readResolve() {\n// buggy lines end:\n    calculateHashCode(keys);\n    return this;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (keys!= null) {\n        calculateHashCode(keys);\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return this;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    calculateHashCode();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Object readResolve() {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    synchronized (this) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    calculateHashCode();\n    return this;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (keys == null) {\n        calculateHashCode(keys);\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    calculateHashCode(keys, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (keys == null) {\n        return null;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    calculateHashCode(keys, false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n                ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy lines start:\n        if (read == 0 && inf.finished()) {\n            return -1;\n// buggy lines end:\n        }\n        crc.update(buffer, start, read);\n        return read;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (read == 0) {\n            return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (inf.finished()) {\n            return -1;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        if (read >= 0 && inf.finished()) {\n            return -1;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        if (read == -1 && inf.finished()) {\n            return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read == 0) {\n            if (inf.finished()) {\n                return -1;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read > 0) {\n            crc.update(buffer, start, read);\n            return read;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read == 0 && inf.needsInput()) {\n            fill();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read > 0) {\n            crc.update(buffer, start, read);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read == 0 && inf.needsInput()) {\n            return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (read == 0 && inf.finished() || read == -1) {\n            return -1;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy lines start:\n    currEntry = new TarArchiveEntry(headerBuf);\n// buggy lines end:\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    if (currEntry.isGNULongNameEntry()) {\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length = 0;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        getNextEntry();\n        if (currEntry == null) {\n            return null;\n        }\n        if (longName.length() > 0\n            && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n    }\n    if (currEntry.isPaxHeader()){ \n        paxHeaders();\n    }\n    if (currEntry.isGNUSparse()){ \n        readGNUSparse();\n    }\n    entrySize = currEntry.getSize();\n    return currEntry;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    currEntry = new TarArchiveEntry(headerBuf, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    currEntry = new TarArchiveEntry(headerBuf, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    currentEntry = new TarArchiveEntry(headerBuf);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    currEntry = new TarArchiveEntry(headerBuf, entryOffset);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    entry = new TarArchiveEntry(headerBuf);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    currEntry = new TarArchiveEntry(buf, headerBuf);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    currEntry = new TarArchiveEntry(headerBuf, entryOffset, entrySize);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    entryOffset = 0;\n    entrySize = headerBuf.length;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    entryOffset = 0;\n    entrySize = currEntry.getSize();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    currEntry = new TarArchiveEntry(headerBuf, entrySize, entryOffset);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy lines start:\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i] != 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n// buggy lines end:\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer;\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    final boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (buffer[start] == '\\0') {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (buffer[start] == '\\0'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (!allNUL) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start < end && buffer[start] == 0){\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final boolean allNUL = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i]!= 0) {\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean allNull = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i] == 0){\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL){\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean allNUL = false;\n    for (int i = start; i < end; i++){\n        if (buffer[i] == 0){\n            allNUL = true;\n            break;\n        }\n    }\n    if (allNUL) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i] == 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = (hasUncompressedSize ? DWORD : 0)\n            + (hasCompressedSize ? DWORD : 0)\n            + (hasRelativeHeaderOffset ? DWORD : 0)\n            + (hasDiskStart ? WORD : 0);\n// buggy lines start:\n        if (rawCentralDirectoryData.length != expectedLength) {\n// buggy lines end:\n            throw new ZipException(\"central directory zip64 extended\"\n                                   + \" information extra field's length\"\n                                   + \" doesn't match central directory\"\n                                   + \" data.  Expected length \"\n                                   + expectedLength + \" but is \"\n                                   + rawCentralDirectoryData.length);\n        }\n        int offset = 0;\n        if (hasUncompressedSize) {\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasCompressedSize) {\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                     offset);\n            offset += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            relativeHeaderOffset =\n                new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasDiskStart) {\n            diskStart = new ZipLong(rawCentralDirectoryData, offset);\n            offset += WORD;\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (rawCentralDirectoryData.length > expectedLength) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (expectedLength!= rawCentralDirectoryData.length) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length < expectedLength) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength + DWORD) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength + extraFieldLength) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (length!= expectedLength) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength\n            || rawCentralDirectoryData[0] & 0x80) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength\n            && rawCentralDirectoryData.length!= expectedLength * 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (rawCentralDirectoryData.length!= expectedLength || (hasUncompressedSize && rawCentralDirectoryData.length!= 0)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy lines start:\n        dictSize |= (coder.properties[i + 1] << (8 * i));\n// buggy lines end:\n    }\n    if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n        throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n    }\n    return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        dictSize |= coder.properties[i + 1] << (8 * i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i] << (8 * i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 3] << (8 * i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 2] << (8 * i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] << (8 * (i + 1)));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] << (8 * (i - 1)));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] << (8 * i) - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] << (8 * i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        dictSize |= (coder.properties[i + 1] << (8 * i)) & 0xff;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy lines start:\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n// buggy lines end:\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, trailer));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start >= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (start!= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (start > end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n",
          "correctness": "plausible"
        },
        {
          "patch": "    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, trailer));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start!= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, end));\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, end));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start >= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, end));\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start > end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, end));\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (start!= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, end));\n    }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy lines start:\n        if (currentByte == 0) {\n            break;\n        }\n// buggy lines end:\n        \n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (currentByte < 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (currentByte == '0') {\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (currentByte =='') {\n            break;\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (currentByte == 0 || currentByte =='') {\n            break;\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (currentByte >= '0' && currentByte <= '7'){\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (currentByte == 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (currentByte >= '0' && currentByte <= '7'){\n            result = (result << 3) + (currentByte - '0');\n        }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "@Override\npublic boolean isDirectory() {\n    if (file != null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy lines start:\n    if (getName().endsWith(\"/\")) {\n// buggy lines end:\n        return true;\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (getName().endsWith(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (name.endsWith(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (getName().endsWith(File.separator)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!getName().endsWith(\"String_Node_Str\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (getName().contains(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (getName().equals(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (getName().endsWith('/')) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = getName();\n    if (name.endsWith(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (getName().startsWith(\"String_Node_Str\")) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (name.endsWith(\"/\")) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "private static ZipLong unixTimeToZipLong(long l) {\n// buggy lines start:\n    final long TWO_TO_32 = 0x100000000L;\n    if (l >= TWO_TO_32) {\n// buggy lines end:\n        throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l);\n    }\n    return new ZipLong(l);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (l >= 0x100000000L) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (l < 0x100000000L) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (l >= Integer.MAX_VALUE) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (l < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (l > 0x100000000L) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (l >= Long.MAX_VALUE) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (l < TWO_TO_32) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (l >= 0x100000000) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final long TWO_TO_32 = 0x10000000L;\n    if (l >= TWO_TO_32) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final long TWO_TO_64 = 0x10000000000L;\n    if (l >= TWO_TO_64) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy lines start:\n    if (current == '\\n') {\n// buggy lines end:\n        lineCounter++;\n    }\n    lastChar = current;\n    return lastChar;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (current == '\\r') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' && lineCounter > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' && lineCounter == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' || current == '\\r') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' && lineCounter!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' || current == '\\r') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\n' && lastChar == '\\n') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\r' || current == '\\n') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (current == '\\r' && lineCounter > 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "public Map<String, Integer> getHeaderMap() {\n// buggy lines start:\n    return new LinkedHashMap<String, Integer>(this.headerMap);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return this.headerMap;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return headerMap;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return Collections.unmodifiableMap(this.headerMap);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new HashMap<String, Integer>(this.headerMap);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new LinkedHashMap<String, Integer>(headerMap);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new LinkedHashMap<>(headerMap);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new LinkedHashMap<>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new LinkedHashMap<>(this.headerMap);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new LinkedHashMap<String, Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy lines start:\n                final boolean emptyHeader = header.trim().isEmpty();\n// buggy lines end:\n                if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                            \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n                hdrMap.put(header, Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                final boolean emptyHeader = header.isEmpty();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader =!header.trim().isEmpty();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header.trim().length() == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                boolean emptyHeader = header.trim().isEmpty();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header == null || header.trim().isEmpty();\n",
          "correctness": "plausible"
        },
        {
          "patch": "                final boolean emptyHeader = (header.trim().isEmpty());\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header.trim().isEmpty() && containsHeader;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header.trim().isEmpty() || this.format.getIgnoreEmptyHeaders();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header.trim().isEmpty() &&!containsHeader;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                final boolean emptyHeader = header.trim().isEmpty() || header.trim().length() == 0;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy lines start:\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n// buggy lines end:\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            if (newRecord && (c < '0' || c > '9' || c < 'A' || c > 'Z' || c < 'a' || c > 'z')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < '0' || c > '9')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < '0' || c > '9' && c < 'a' || c > 'z')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < '0' || c > '9' && c < 'A')) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z')) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy lines start:\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n// buggy lines end:\n                \n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            if (c <= COMMENT) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if (newRecord) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c <= SP) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if (newRecord) {\n                quote = true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord) {\n                quote = true;\n            } else if (c <= COMMENT) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && c <= COMMENT) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < 0x20 || c > 0x7E)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c <= SP)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x7E)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (newRecord && (c < 0x20 || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy lines start:\n  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n// buggy lines end:\n  t.write(writer, fieldValue);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n",
          "correctness": "wrong"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n",
          "correctness": "wrong"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, field.getType());\n",
          "correctness": "wrong"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, type);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType, fieldValue);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(typeAdapter, fieldType.getType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldValue.getClass());\n",
          "correctness": "wrong"
        },
        {
          "patch": "  TypeAdapter t = typeAdapter.adapt(fieldType.getType());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Gson_13_/gson/src/main/java/com/google/gson/stream/JsonReader.java_731-732": {
      "loc": "731-732",
      "input": "private int peekNumber() throws IOException {\n  char[] buffer = this.buffer;\n  int p = pos;\n  int l = limit;\n  long value = 0; \n  boolean negative = false;\n  boolean fitsInLong = true;\n  int last = NUMBER_CHAR_NONE;\n  int i = 0;\n  charactersOfNumber:\n  for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p = pos;\n      l = limit;\n    }\n    char c = buffer[p + i];\n    switch (c) {\n    case '-':\n      if (last == NUMBER_CHAR_NONE) {\n        negative = true;\n        last = NUMBER_CHAR_SIGN;\n        continue;\n      } else if (last == NUMBER_CHAR_EXP_E) {\n        last = NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n      return PEEKED_NONE;\n    case '+':\n      if (last == NUMBER_CHAR_EXP_E) {\n        last = NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n      return PEEKED_NONE;\n    case 'e':\n    case 'E':\n      if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n        last = NUMBER_CHAR_EXP_E;\n        continue;\n      }\n      return PEEKED_NONE;\n    case '.':\n      if (last == NUMBER_CHAR_DIGIT) {\n        last = NUMBER_CHAR_DECIMAL;\n        continue;\n      }\n      return PEEKED_NONE;\n    default:\n      if (c < '0' || c > '9') {\n        if (!isLiteral(c)) {\n          break charactersOfNumber;\n        }\n        return PEEKED_NONE;\n      }\n      if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n        value = -(c - '0');\n        last = NUMBER_CHAR_DIGIT;\n      } else if (last == NUMBER_CHAR_DIGIT) {\n        if (value == 0) {\n          return PEEKED_NONE; \n        }\n        long newValue = value * 10 - (c - '0');\n        fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n            || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n        value = newValue;\n      } else if (last == NUMBER_CHAR_DECIMAL) {\n        last = NUMBER_CHAR_FRACTION_DIGIT;\n      } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n        last = NUMBER_CHAR_EXP_DIGIT;\n      }\n    }\n  }\n// buggy lines start:\n  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n// buggy lines end:\n    peekedLong = negative ? value : -value;\n    pos += i;\n    return peeked = PEEKED_LONG;\n  } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n      || last == NUMBER_CHAR_EXP_DIGIT) {\n    peekedNumberLength = i;\n    return peeked = PEEKED_NUMBER;\n  } else {\n    return PEEKED_NONE;\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && value!= Long.MIN_VALUE) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value == Long.MIN_VALUE || negative)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE &&!negative)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE || negative)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE && negative)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE ||!negative)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!= Long.MIN_VALUE || negative || value < 0)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy lines start:\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n// buggy lines end:\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (Double.isNaN(value)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isInfinite(value) || Double.isNegative(value)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isInfinite(value)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (Double.isNaN(value)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (Double.isNaN(value) || Double.isInfinite(value)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isInfinite(value) || value < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  beforeValue();\n  out.append(Double.toString(value));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isInfinite(value)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isNegative(value)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (Double.isNaN(value) || Double.isInfinite(value) || value == 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy lines start:\n  if (in.peek() != JsonToken.STRING) {\n    throw new JsonParseException(\"The date should be a string value\");\n// buggy lines end:\n  }\n  Date date = deserializeToDate(in.nextString());\n  if (dateType == Date.class) {\n    return date;\n  } else if (dateType == Timestamp.class) {\n    return new Timestamp(date.getTime());\n  } else if (dateType == java.sql.Date.class) {\n    return new java.sql.Date(date.getTime());\n  } else {\n    throw new AssertionError();\n  }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "  if (in.peek()!= JsonToken.START_OBJECT) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (in.peek()!= JsonToken.STRING) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  JsonToken token = in.peek();\n  if (token!= JsonToken.STRING) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  {\n    if (in.peek()!= JsonToken.STRING) {\n      throw new JsonParseException(\"String_Node_Str\");\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (in.peek()!= JsonToken.STRING && in.peek()!= JsonToken.NULL) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (in.peek()!= JsonToken.STRING && in.peek()!= JsonToken.NUMBER) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (in.peek()!= JsonToken.STRING && in.peek()!= JsonToken.START_OBJECT) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  String date = in.nextString();\n  if (date == null) {\n    throw new JsonParseException(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (in.peek() == JsonToken.STRING) {\n    in.nextString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  JsonToken token = in.peek();\n  if (token == JsonToken.STRING) {\n    return deserializeToDate(in.nextString());\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy lines start:\n        char c = str.charAt(i++);\n// buggy lines end:\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        char c = str.charAt(i);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int c = str.charAt(i++);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        final char c = str.charAt(i++);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = str.charAt(i++);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        char c = str.charAt(i++);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char c = (char) str.charAt(i++);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char c = str.charAt(i) - '0';\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        char c = str.charAt(i + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char c = str.charAt(i++) - '0';\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final char c = str.charAt(i);\n",
          "correctness": "plausible"
        }
      ]
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy lines start:\n    for (int i = 0; i < len; ++i) {\n        char c = str.charAt(i);\n// buggy lines end:\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < len - 1; ++i) {\n        char c = str.charAt(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < 10; ++i) {\n        char c = str.charAt(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < len; i++) {\n        char c = str.charAt(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (char c : str.toCharArray()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= len; ++i) {\n        char c = str.charAt(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < len && c!= '\\0'; ++i) {\n        c = str.charAt(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < len - 1; ++i) {\n        char c = str.charAt(i + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < len; ++i) {\n        char c = str.charAt(i) - '0';\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < len && i < 10; ++i) {\n        char c = str.charAt(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < len; ++i) {\n        char c = str.charAt(i) - 48;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray != null)  return _resultArray;\n    if (_resultString != null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy lines start:\n    if (!_hasSegments)  return _currentSegment;\n// buggy lines end:\n    \n    return contentsAsArray();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return _currentSegment;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (_hasSegments)\n        return _currentSegment;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (_hasSegments) return _currentSegment;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (_hasSegments)    return _currentSegment;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!_hasSegments) return _currentSegment;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!_hasSegments) return _currentSegment.toCharArray();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (_hasSegments)\n        return _currentSegment.toCharArray();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!_hasSegments)\n        return _currentSegment;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (_currentSegment!= null)\n        return _currentSegment;\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy lines start:\n    throw new JsonGenerationException(\"No native support for writing embedded objects\",\n// buggy lines end:\n            this);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", object);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", new Object[] { object });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", this, object);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", \"String_Node_Str\", object);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(this, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\"String_Node_Str\", \"String_Node_Str\", this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(this, \"String_Node_Str\", object);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new JsonGenerationException(\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy lines start:\n        if (i <= maxCode) {\n// buggy lines end:\n            if (codes[i] != 0) {\n                break;\n            }\n        } else if (!Character.isJavaIdentifierPart(c)) {\n            break;\n        }\n        ++_inputPtr;\n        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n        outBuf[outPtr++] = c;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    {\n        TextBuffer tb = _textBuffer;\n        char[] buf = tb.getTextBuffer();\n        int start = tb.getTextOffset();\n        int len = tb.size();\n        return _symbols.findSymbol(buf, start, len, hash);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (i < maxCode) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (i >= maxCode) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i <= maxCode && codes[i]!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i <= maxCode) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i > maxCode) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (i == maxCode) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i <= maxCode && c!= '\\0') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i <= maxCode && i < codes.length) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (i <= maxCode && codes[i] == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i <= maxCode && codes[i] > 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "@Override\npublic boolean isCachable() {\n// buggy lines start:\n    return (_valueTypeDeserializer == null)\n// buggy lines end:\n            && (_ignorableProperties == null);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return (_valueTypeDeserializer!= null)\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return (_valueTypeDeserializer == null)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (_valueTypeSerializer == null)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _valueTypeDeserializer == null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (_valueTypeDeserializer == null)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (_valueTypeDeserializer == null || _cachable)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (_valueTypeDeserializer == null) || _cachable;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _cachable;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy lines start:\n    return (previous != null) && previous.equals(ann);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return previous!= null && previous.equals(ann);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (previous!= null) && (previous.equals(ann));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (previous!= null && previous.equals(ann));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (previous!= null) &&!previous.equals(ann);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (previous!= null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((previous!= null) && previous.equals(ann));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return previous!= null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return previous == null || previous.equals(ann);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return (previous!= null) && previous.equals(ann) && ann!= null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (previous!= null) && previous.equals(ann) && ann!= this;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy lines start:\n                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n// buggy lines end:\n\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n    default:\n        return (t.getRawClass() == Object.class);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                || (TreeNode.class.isAssignableFrom(t.getRawClass())));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || TreeNode.class.isAssignableFrom(t));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                ||!TreeNode.class.isAssignableFrom(t.getRawClass())));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || t.isAssignableFrom(t.getRawClass()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                || t.getRawClass() == Object.class));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                || t.getRawClass().equals(TreeNode.class));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || TreeNode.class.isAssignableFrom(t.getRawClass()) &&!t.isFinal());\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || TreeNode.class.isAssignableFrom(t.getRawClass()) &&!t.isFinal()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                || TreeNode.class.isAssignableFrom(t.getRawClass()) &&!t.isAbstract()));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_27_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java_794-795": {
      "loc": "794-795",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy lines start:\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n// buggy lines end:\n                ;\n            } else {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; \n                    }\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n            }\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; \n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, tokens, buffer)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, tokens)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, props, buffer)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (!ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, creatorProp, buffer)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, null, buffer)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, buffer, _beanType)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, creatorProp.getProperty(), buffer)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (ext.handlePropertyValue(p, ctxt, propName, buffer, _beanProperties)) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy lines start:\n                || _hasAnnotation(a, JsonRawValue.class)) {\n// buggy lines end:\n            name = \"\";\n        } else {\n            return null;\n        }\n    }\n    return PropertyName.construct(name);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonSerialize.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonValue.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class, JsonSerialize.class)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonSerialize.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonRawValue.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonValue.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonNullValue.class)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonProperty.class)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                || _hasAnnotation(a, JsonRawValue.class) || _hasAnnotation(a, JsonNull.class)) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy lines start:\n            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n// buggy lines end:\n        } else {\n             visitor.expectNumberFormat(typeHint);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitor.expectNumberFormat(typeHint);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n",
          "correctness": "plausible"
        },
        {
          "patch": "            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_FLOAT);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitDecimalFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.DECIMAL);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            visitor.expectFloatFormat(typeHint);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            visitor.expectNumberFormat(typeHint);\n        } else if (h == BigInteger.class) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy lines start:\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n// buggy lines end:\n            _valueHandler, _typeHandler, _asStatic);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler,\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superInterfaces,\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superInterfaces);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _valueHandler, _typeHandler, _asStatic);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _typeHandler);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new SimpleType(subclass, _bindings, _superClass, superInterfaces,\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy lines start:\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n// buggy lines end:\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            if (shape.isString()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (shape.getShape() == JsonFormat.Shape.STRING) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (shape.getType() == JsonFormat.Shape.STRING) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (format.getShape()!= JsonFormat.Shape.STRING) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (format.getShape().equals(JsonFormat.Shape.STRING)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (shape.isNumeric()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (shape!= JsonFormat.Shape.STRING) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (format.getShape().isString()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (format.getShape().isNumeric()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (shape!= null && shape.isNumeric()) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy lines start:\n    sb.append(';');\n// buggy lines end:\n    return sb;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    sb.append('>');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(')');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(']');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (sb.length() > 0)\n        sb.append(';');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (_referencedType!= null)\n        sb.append(';');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(':');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(' ');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb = _referencedType.getGenericSignature(sb);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sb.append(\"String_Node_Str\").append(sb);\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy lines start:\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n// buggy lines end:\n            true));\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return _bindAndReadValues(_parserFactory.createParser(src), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n",
          "correctness": "wrong"
        },
        {
          "patch": "    return _bindAndReadValues(_parserFactory.createParser(src), true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, true), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, false), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, null), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _detectBindAndReadValues(_parserFactory.createParser(src), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, true)), \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return _bindAndReadValues();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy lines start:\n            found = key.equals(prop.getName());\n// buggy lines end:\n            if (found) {\n                _propsInOrder[_findFromOrdered(prop)] = null;\n                continue;\n            }\n        }\n        props.add(prop);\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    init(props);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            found = key.equals(prop.getKey());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            found = key.equals(prop.getName());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            found = key.equals(prop.getPropertyName());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            found = key.equalsIgnoreCase(prop.getName());\n",
          "correctness": "plausible"
        },
        {
          "patch": "            found = (key.equals(prop.getName()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            found =!key.equals(prop.getName());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            found = key.equals(prop.getName().toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (key.equals(prop.getName())) {\n                found = true;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            found = key.equals(prop.getName()) || key.equals(prop.getName());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            found = key.equals(prop.getName()) || key.equals(prop.getKey());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy lines start:\n    if (raw == String.class || raw == Object.class) {\n// buggy lines end:\n        return StringKD.forType(raw);\n    } else if (raw == UUID.class) {\n        kind = TYPE_UUID;\n    } else if (raw == Integer.class) {\n        kind = TYPE_INT;\n    } else if (raw == Long.class) {\n        kind = TYPE_LONG;\n    } else if (raw == Date.class) {\n        kind = TYPE_DATE;\n    } else if (raw == Calendar.class) {\n        kind = TYPE_CALENDAR;\n    } else if (raw == Boolean.class) {\n        kind = TYPE_BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = TYPE_BYTE;\n    } else if (raw == Character.class) {\n        kind = TYPE_CHAR;\n    } else if (raw == Short.class) {\n        kind = TYPE_SHORT;\n    } else if (raw == Float.class) {\n        kind = TYPE_FLOAT;\n    } else if (raw == Double.class) {\n        kind = TYPE_DOUBLE;\n    } else if (raw == URI.class) {\n        kind = TYPE_URI;\n    } else if (raw == URL.class) {\n        kind = TYPE_URL;\n    } else if (raw == Class.class) {\n        kind = TYPE_CLASS;\n    } else if (raw == Locale.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n        return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n    } else if (raw == Currency.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);\n        return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\n    } else {\n        return null;\n    }\n    return new StdKeyDeserializer(kind, raw);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (raw == String.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == Object.class || raw == UUID.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == Object.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == UUID.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == Object.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == Date.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw instanceof String) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (raw == String.class || raw == Object.class || raw == Date.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == Object.class) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (raw == String.class || raw == Object.class || raw == String.class) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-604": {
      "loc": "583-604",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n\t\tDeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy lines start:\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                while (t == JsonToken.FIELD_NAME) {\n                    p.nextToken();\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n// buggy lines end:\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            return buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n",
          "correctness": "plausible"
        },
        {
          "patch": "            buffer.bufferProperty(creatorProp, creatorProp.deserialize(p, ctxt));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n            t = p.nextToken();\n",
          "correctness": "wrong"
        },
        {
          "patch": "            t = p.nextToken();\n            Object bean;\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            Object bean;\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                continue;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            Object bean;\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            Object bean;\n            try {\n                bean = creatorProp.deserialize(p, ctxt);\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            t = p.nextToken();\n            Object bean;\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt);\n            }\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_82_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java_495-496": {
      "loc": "495-496",
      "input": "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals != null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy lines start:\n        ignored = ignorals.getIgnored();\n// buggy lines end:\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    } else {\n        ignored = Collections.emptySet();\n    }\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = null;\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    }\n    else {\n    \tanySetterField = beanDesc.findAnySetterField();\n    \tif(anySetterField != null) {\n    \t\tbuilder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n    \t}\n    }\n    if (anySetterMethod == null && anySetterField == null) {\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        if (propDef.hasSetter()) {\n            JavaType propertyType = propDef.getSetter().getParameterType(0);\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            JavaType propertyType = propDef.getField().getType();\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            AnnotatedMethod getter = propDef.getGetter();\n            Class<?> rawPropertyType = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType)\n                    || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (hasCreatorProps && propDef.hasConstructorParameter()) {\n            final String name = propDef.getName();\n            CreatorProperty cprop = null;\n            if (creatorProps != null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                        cprop = (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop == null) {\n                List<String> n = new ArrayList<>();\n                for (SettableBeanProperty cp : creatorProps) {\n                    n.add(cp.getName());\n                }\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                        \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                        name, n);\n                continue;\n            }\n            if (prop != null) {\n                cprop.setFallbackSetter(prop);\n            }\n            prop = cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n        if (prop != null) {\n            Class<?>[] views = propDef.findViews();\n            if (views == null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views = NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        ignored = Collections.unmodifiableSet(ignorals.getIgnored());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        ignored = ignorals.getIgnoredProperties();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ignored = new HashSet<>(ignorals.getIgnored());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        ignored = ignorals.getIgnored();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        ignored = ignorals.getIgnoredPropertyNames();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ignored = ignorals.getIgnored(beanDesc);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ignored = new HashSet<String>(ignorals.getIgnored());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        Set<String> ignored = ignorals.getIgnored();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ignored = ignorals.getIgnoredProperties(beanDesc);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        ignored = ignorals.getIgnored(beanDesc.getBeanClass());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy lines start:\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n// buggy lines end:\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (full.startsWith(\"String_Node_Str\")) {\n            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (full!= null && full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (\"String_Node_Str\".equals(full)) {\n            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (full.startsWith(PREFIX_STRING) || \"String_Node_Str\".equals(full)) {\n            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            if (name.startsWith(PREFIX_STRING)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n            if (\"String_Node_Str\".equals(cls.getSimpleName())) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n            if (\"String_Node_Str\".equals(cls.getName())) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            if (\"String_Node_Str\".equals(name) || \"String_Node_Str\".equals(name)) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1 != candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName != null) || (injectId != null);\n    if (!useProps && (paramDef != null)) {\n// buggy lines start:\n        paramName = candidate.findImplicitParamName(0);\n// buggy lines end:\n        useProps = (paramName != null) && paramDef.couldSerialize();\n    }\n    if (useProps) {\n        SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)\n        };\n        creators.addPropertyCreator(candidate.creator(), true, properties);\n        return;\n    }\n    _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n    if (paramDef != null) {\n        ((POJOPropertyBuilder) paramDef).removeConstructors();\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        paramName = candidate.findImplicitParamName(paramDef);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findExplicitParamName(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(beanDesc);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(candidate.paramCount());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(ctxt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(param);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        paramName = candidate.findImplicitParamName(candidate.propertyCount());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy lines start:\n        gen.writeObject(_value);\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        gen.writeNull();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        gen.writeObject(_value.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        gen.writeObject(_value, ctxt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        gen.writeObject(_value, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        gen.writeObject(_value);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        gen.writeStartObject();\n        gen.writeObject(_value);\n        gen.writeEndObject();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        gen.writeObject(_value.getClass());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        gen.writeObject(new JsonSerializable(_value));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        gen.writeStartObject();\n        gen.writeStringField(\"String_Node_Str\", _value);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        gen.writeStartObject();\n        gen.writeObject(_value, true);\n        gen.writeEndObject();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy lines start:\n                buffer.assignParameter(typeProp, typeId);\n// buggy lines end:\n            }\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                buffer.assignParameter(typeProp, values[i]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                buffer.assignParameter(typeId, typeProp);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                buffer.assignParameter(prop, values[i]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, prop);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, typeId, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, typeId, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, prop.getValue());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, prop.getTypeId());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                buffer.assignParameter(typeProp, prop.getType());\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy lines start:\n    if (property == null) {\n        return this;\n    }\n// buggy lines end:\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = (shape == JsonFormat.Shape.STRING);\n    if (!hasLocale && !hasTZ && !asString) {\n        return this;\n    }\n    DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof StdDateFormat) {\n        StdDateFormat std = (StdDateFormat) df0;\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof SimpleDateFormat)) {\n        serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n    }\n    SimpleDateFormat df = (SimpleDateFormat) df0;\n    if (hasLocale) {\n        df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = (SimpleDateFormat) df.clone();\n    }\n    TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(Boolean.FALSE, df);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, property);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat.Value format = super.createContextual(serializers, property);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat format = findFormatOverrides(serializers, property, handledType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!(property instanceof BeanProperty)) {\n        return this;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType(), null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, handledType(), property);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType(), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType(), true);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy lines start:\n                    return null;\n// buggy lines end:\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new IllegalArgumentException(\"String_Node_Str\" + typeId);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    deser = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new RuntimeException(\"String_Node_Str\" + typeId);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new IOException(\"String_Node_Str\" + typeId);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    deser = _findDefaultImplDeserializer(ctxt);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new RuntimeException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new IOException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new IllegalStateException(\"String_Node_Str\" + typeId);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    throw new IllegalArgumentException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy lines start:\n    _rootNameLookup = src._rootNameLookup;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    setRootNameLookup(src.getRootNameLookup());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    _rootNameLookup = src.getRootNameLookup();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    setRootNameLookup(src.setRootNameLookup);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    setRootNameLookup(src._rootNameLookup);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    _rootNameLookup = src._rootNameLookup;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    _rootNameLookup = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    super._rootNameLookup = src._rootNameLookup;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    rootNameLookup = src.rootNameLookup;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.rootNameLookup = src.rootNameLookup;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    _rootNameLookup = src._rootNameLookup? src._rootNameLookup : null;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy lines start:\n        body().appendChild(new TextNode(\" \", \"\"));\n        body().appendChild(node);\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        body().appendChild(node);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        element.appendChild(new TextNode(\" \", \"\"));\n        element.appendChild(node);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        body.appendChild(new TextNode(\" \", \"\"));\n        body.appendChild(node);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        body.appendChild(node);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        element.appendChild(node);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        node.normalize();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        node.appendChild(new TextNode(\" \", \"\"));\n        node.appendChild(node);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        node.appendChild(new TextNode(\" \", \"\"));\n        node.appendChild(element);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        node.appendChild(new TextNode(\" \", \"\"));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        node.appendChild(new TextNode(\" \", \"\"));\n        node.appendChild(body());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy lines start:\n        r.advance();\n// buggy lines end:\n        return;\n    }\n    if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        r.advance(1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (!r.isEmpty()) {\n            r.advance();\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        r.next();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        t.advance();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        r.consume();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        r.advance();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        while (!r.isEmpty()) {\n            r.advance();\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (r.advance()) {\n            r.advance();\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (r.advance()) {\n            return;\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (t.isAppropriateEndTagToken())\n            r.advance();\n",
          "correctness": "plausible"
        }
      ]
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar != input[offset])\n            while(++offset < length && startChar != input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy lines start:\n        if (offset < length) {\n// buggy lines end:\n            for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n            if (i == last) \n                return offset - pos;\n        }\n    }\n    return -1;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (offset <= length) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset >= length) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < length) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < length && i < last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i < last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < last)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (offset < length - 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < length && i < last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (offset < length && offset < last) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy lines start:\n    return accum.toString().trim();\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return accum.toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return accum;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return accum.toString().trim().toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return accum.toString().trim() + \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return accum.toString().trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\" + accum.toString().trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return accum.trim();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return accum.toString().trim().replace(' ', '_');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return accum.toString().trim().replace('\\n','');\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"String_Node_Str\" + accum.toString();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy lines start:\n    Validate.notEmpty(name);\n// buggy lines end:\n    attr(\"name\", name);\n    attr(\"publicId\", publicId);\n    attr(\"systemId\", systemId);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    Validate.notNull(name);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    Validate.notNull(name, \"String_Node_Str\");\n",
          "correctness": "plausible"
        },
        {
          "patch": "    Validate.notEmpty(name, \"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Validate.notNullOrEmpty(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Validate.notBlank(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Validate.notEmpty(publicId);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Validate.notEmpty(name);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Validate.notBlank(name, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Validate.notEmptyOrWhitespace(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Validate.notEmptyOrNull(name);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy lines start:\n    return this == o;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return true;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return getName().equals(element.getName());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return element == this;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return element.equals(this);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return element == o;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return getId().equals(element.getId());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return element.getName().equals(name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return element.getName().equals(getName());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return element == null? false : element.equals(this);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (element == null) {\n        return false;\n    }\n    return element.getName().equals(name);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy lines start:\n        if (element.equals(search))\n// buggy lines end:\n            return i;\n    }\n    return null;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (element.equals(search)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (element == search)\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (element!= null && element.equals(search))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (search.equals(element))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (element == search) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Objects.equals(element, search))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!element.equals(search))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (element!= null && element.equals(search)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (element.getName().equals(search))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Objects.equals(element, search)) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy lines start:\n        } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {\n// buggy lines end:\n            transition(HtmlTreeBuilderState.InCell);\n            break;\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n            break;\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n            break;\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n            break;\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n            break; \n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n            break;\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break;\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n            break; \n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            break; \n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        } else if ((\"td\".equals(name) || \"td\".equals(name)) &&!last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if ((\"td\".equals(name) || \"td\".equals(name))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (\"td\".equals(name) &&!last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (name.equals(\"td\") || name.equals(\"td\") &&!last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else if (\"td\".equals(name) &&!last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (name.equals(\"td\") || name.equals(\"td\") &&!last) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (\"td\".equals(name)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if ((\"td\".equals(name) || \"td\".equals(name) && last)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy lines start:\n                        accum.append(c);\n// buggy lines end:\n                    break;\n                case '<':\n                    if (!inAttribute)\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                        accum.append(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append('&').append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append('&');\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(\"String_Node_Str\").append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(String.valueOf(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(Character.toString(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(Character.toLowerCase(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(c).append(';');\n",
          "correctness": "wrong"
        },
        {
          "patch": "                        accum.append(\"String_Node_Str\" + c);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy lines start:\n                    if (!inAttribute)\n// buggy lines end:\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                    if (!inAttribute) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    if (inAttribute)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    if (!inAttribute)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    if (inAttribute) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    if (escapeMode!= EscapeMode.xhtml)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    if (!inAttribute && escapeMode!= EscapeMode.xhtml)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    if (!inAttribute && escapeMode!= EscapeMode.xhtml) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    if (!inAttribute && c!= '<')\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    if (!inAttribute && c!= '&')\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy lines start:\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (c >= 'A' && c <= 'Z');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z';\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '_';\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return c >= 'A' && c <= 'Z';\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (c >= 'A' && c <= 'z') || (c >= 'a' && c <= 'z');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Character.isLetter(c);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return isLetter(c);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy lines start:\n            attributes.remove(attrKey);\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            attributes.remove(attrKey.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            it.remove();\n",
          "correctness": "plausible"
        },
        {
          "patch": "            attributes.remove(attrKey.toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            attributes.remove(key);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            attributes.remove(attrKey);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            attributes.remove(attrKey.trim());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            attributes.put(attrKey, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            it = attributes.remove(attrKey);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            attributes.remove(attrKey).clear();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            break;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "public boolean hasClass(String className) {\n// buggy lines start:\n    final String classAttr = attributes.get(\"class\");\n// buggy lines end:\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    final String classAttr = attributes.get(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String classAttr = attributes.get(\"class\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String classAttr = getAttribute(\"class\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final String classAttr = getAttributes().get(\"class\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final String classAttr = (String) attributes.get(\"class\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String[] classAttr = attributes.get(\"class\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final String classAttr = getClass().getName();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String classAttr = classAttributes.get(\"class\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final String classAttr = getClass().getSimpleName();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String classAttr = attributes.get(ATTR_CLASS);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy lines start:\n    int bottom = stack.size() -1;\n    if (bottom > MaxScopeSearchDepth) {\n        bottom = MaxScopeSearchDepth;\n    }\n// buggy lines end:\n    final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n    for (int pos = bottom; pos >= top; pos--) {\n        final String elName = stack.get(pos).nodeName();\n        if (inSorted(elName, targetNames))\n            return true;\n        if (inSorted(elName, baseTypes))\n            return false;\n        if (extraTypes != null && inSorted(elName, extraTypes))\n            return false;\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    int top = stack.size() - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int bottom = stack.size() - 1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int top = stack.size() -1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int bottom = stack.size() - 1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final int top = MaxScopeSearchDepth;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int bottom = stack.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final int top = stack.size() -1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int top = stack.size() - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int top = MaxScopeSearchDepth - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int top = MaxScopeSearchDepth > 0? MaxScopeSearchDepth : 0;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy lines start:\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy lines end:\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) || Attribute.isBooleanAttribute(key)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) &&!Attribute.isBooleanAttribute(key)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(val)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && Attribute.isBooleanAttribute(key))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (!(out.syntax() == Document.OutputSettings.Syntax.html)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "private void popStackToClose(Token.EndTag endTag) {\n// buggy lines start:\n    String elName = endTag.name();\n// buggy lines end:\n    Element firstFound = null;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; \n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next == firstFound)\n            break;\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    String elName = endTag.getName();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final String elName = endTag.name();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String elName = endTag.localName();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String elName = endTag.getLocalName();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String tagName = endTag.name();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String elName = endTag.name().toLowerCase();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    String elName = endTag.tagName();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String elementName = endTag.name();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String elName = endTag.toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String elName = endTag.nodeName();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy lines start:\n    if (doc.childNodeSize() > 0) {\n// buggy lines end:\n        Element el = doc.child(0);\n        decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n        decl.attributes().addAll(el.attributes());\n    }\n    return decl;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (doc.children().size() > 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (doc!= null && doc.childNodeSize() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (doc.childNodes().size() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (doc!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (doc.childNodes() > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (doc.hasChildNodes()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (doc.childNodes()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (doc.childNodes().length > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (doc.childNodeSize() >= 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (doc.childNodeSize() >= 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "public String getValue() {\n// buggy lines start:\n    return val;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return value;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return this.val;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return val;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return val == null? null : val.toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return mValue;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return val.toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return val == null? null : val.trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\" + val;\n",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy lines start:\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n// buggy lines end:\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return -1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return p1.parent.compareChildNodePointers(p1, p2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return 1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        throw new JXPathException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return p1.compareChildNodePointers(p2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return 0;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        throw new JXPathException(\n                String.format(\"String_Node_Str\", p1, p2));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new JXPathException(\"String_Node_Str\" + p1 + \"String_Node_Str\" + p2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new JXPathException(\n                \"String_Node_Str\" + \"String_Node_Str\" + \"String_Node_Str\");\n",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "public final Object computeValue(EvalContext context) {\n// buggy lines start:\n    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n// buggy lines end:\n            ? Boolean.TRUE : Boolean.FALSE;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context), args[2]) \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context), args[2]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context)).booleanValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n",
          "correctness": "wrong"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[2].computeValue(context)) \n",
          "correctness": "wrong"
        },
        {
          "patch": "    return compute(args[0], args[1]) \n",
          "correctness": "wrong"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context), context) \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return compute(args[0].computeValue(context), args[1].computeValue(context)).booleanValue() \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (Boolean) compute(args[0].computeValue(context), args[1].computeValue(context)) \n",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                    .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy lines start:\n            return equalStrings(namespaceURI, nodeNS);\n// buggy lines end:\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE :\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT :\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT :\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI :\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            return namespaceURI.equals(nodeNS);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return nodeNS.equals(namespaceURI);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return equalStrings(nodeNS, namespaceURI);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return equalStrings(namespace, nodeNS);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return equalStrings(namespaceURI, nodeNS, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return equalStrings(namespaceURI, nodeNS, testPrefix);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (namespaceURI.equals(nodeNS)) {\n                return true;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return equalStrings(namespaceURI, nodeNS.trim());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return equalStrings(namespaceURI, nodeNS.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return equalStrings(namespaceURI, nodeNS, testName);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "public int getLength() {\n// buggy lines start:\n    return ValueUtils.getLength(getBaseValue());\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return getBaseValue().getLength();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getBaseValue().length();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return ValueUtils.getLength(getValue());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return baseValue.getLength();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return length;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return ValueUtils.getLength(baseValue);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return value.getLength();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getValue().getLength();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getBaseValue().length;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy lines start:\n            pos += Character.charCount(Character.codePointAt(input, pos));\n// buggy lines end:\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            pos += Character.charCount(input.charAt(pos));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(Character.codePointAt(input, pos)) + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(Character.codePointAt(input, pos + pt));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += consumed;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(Character.codePointAt(input, pos)) - 1;\n",
          "correctness": "timeout"
        },
        {
          "patch": "            pos++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            out.write(Character.charCount(Character.codePointAt(input, pos)));\n",
          "correctness": "timeout"
        },
        {
          "patch": "            pos += Character.charCount(Character.charAt(input, pos));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            pos += Character.charCount(Character.codePointAt(input, pos++));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(c);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_16_/src/main/java/org/apache/commons/lang3/math/NumberUtils.java_458-459": {
      "loc": "458-459",
      "input": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy lines start:\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy lines end:\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) { \n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { \n                }\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { \n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) { \n                }\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) { \n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) { \n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) { \n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) { \n            }\n            return createBigDecimal(str);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"0x\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"0x\") || str.startsWith('-0x')) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"String_Node_Str\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (isHex(str)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (str.startsWith(\"0\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"0X\") || str.startsWith(\"0X\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.startsWith(\"-0x\")) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy lines start:\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n// buggy lines end:\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n            cal1.getClass() == cal2.getClass());\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));\n    }\n    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n",
          "correctness": "plausible"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && \n",
          "correctness": "plausible"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR) <= cal2.get(Calendar.HOUR));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR) < cal2.get(Calendar.HOUR));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "           !cal1.get(Calendar.HOUR).equals(cal2.get(Calendar.HOUR)) &&\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "public String format(Date date) {\n// buggy lines start:\n    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy lines end:\n    c.setTime(date);\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    Calendar c = Calendar.getInstance(mTimeZone);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = new Calendar(mTimeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = new DateCalendar(mTimeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(timeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = Calendar.getInstance(TimeZone.getDefault());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = Calendar.getInstance(timeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = GregorianCalendar.getInstance(mTimeZone);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(TimeZone.getDefault());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = Calendar.getInstance(TimeZone.getTimeZone(mTimeZone));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = Calendar.getInstance(TimeZone.getDefault(), mTimeZone);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "\n// buggy lines start:\nstatic float toJavaVersionInt(String version) {\n// buggy lines end:\n    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, 0, JAVA_VERSION_TRIM_SIZE));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_SIZE));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version.trim(), JAVA_VERSION_TRIM_SIZE));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE, true));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE), true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE, false));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE).trim());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(JAVA_VERSION_TRIM_SIZE, version));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy lines start:\n        classes[i] = array[i].getClass();\n// buggy lines end:\n    }\n    return classes;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        classes[i] = array[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = toClass(array[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = array[i].getClass();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = array[i] == null? null : array[i].getClass();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        classes[i] = (Class<?>) array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = (Class<?>) array[i].getClass();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = array[i].getClass().getComponentType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = array[i]!= null? array[i].getClass() : null;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        classes[i] = Class.forName(array[i].getClass().toString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = array[i].getClass().getSuperclass();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_39_/src/java/org/apache/commons/lang3/StringUtils.java_3676-3677": {
      "loc": "3676-3677",
      "input": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy lines start:\n        int greater = replacementList[i].length() - searchList[i].length();\n// buggy lines end:\n        if (greater > 0) {\n            increase += 3 * greater; \n        }\n    }\n    increase = Math.min(increase, text.length() / 5);\n    StringBuilder buf = new StringBuilder(text.length() + increase);\n    while (textIndex != -1) {\n        for (int i = start; i < textIndex; i++) {\n            buf.append(text.charAt(i));\n        }\n        buf.append(replacementList[replaceIndex]);\n        start = textIndex + searchList[replaceIndex].length();\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n    }\n    int textLength = text.length();\n    for (int i = start; i < textLength; i++) {\n        buf.append(text.charAt(i));\n    }\n    String result = buf.toString();\n    if (!repeat) {\n        return result;\n    }\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        int greater = replacementList[i].length() - searchList[i].length() + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = replacementList[i].length() - searchList[i].length() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = searchList[i].length() - replacementList[i].length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = replacementList[i].length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = replacementList[i].length() - searchList[i].length() - 3;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = replacementList[i] == null? 0 : replacementList[i].length() - searchList[i].length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int greater = replacementList[i].length() - searchList[i].length() - 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = replaceList[i].length() - searchList[i].length();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        int greater = replacementList[i].length() + searchList[i].length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int greater = 0;\n",
          "correctness": "plausible"
        }
      ]
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy lines start:\n    return contains(str.toUpperCase(), searchStr.toUpperCase());\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return containsIgnoreCase(str.toUpperCase(), searchStr.toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toLowerCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toUpperCase()) || contains(str.toLowerCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return str.toUpperCase().contains(searchStr.toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toUpperCase()) || contains(searchStr.toUpperCase(), str.toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return str.equalsIgnoreCase(searchStr);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return containsIgnoreCase(str.toLowerCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toUpperCase(Locale.ENGLISH));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str, searchStr.toUpperCase());\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_43_/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java_422-423": {
      "loc": "422-423",
      "input": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy lines start:\n        return appendTo == null ? null : appendTo.append(QUOTE);\n// buggy lines end:\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                    QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n        case QUOTE:\n            next(pos);\n            return appendTo == null ? null : appendTo.append(c, lastHold,\n                    pos.getIndex() - lastHold);\n        default:\n            next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return appendTo;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        return appendTo == null? null : appendTo.append(ESCAPED_QUOTE);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return null;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        return appendTo == null? null : appendTo.append(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return appendTo == null? new StringBuffer() : appendTo.append(QUOTE);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return appendTo == null? null : appendTo.append('\"');\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return appendTo == null? null : appendTo.append('\\\\');\n",
          "correctness": "wrong"
        },
        {
          "patch": "        appendTo.append(QUOTE);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return appendTo.toString();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        appendTo.append(QUOTE);\n        return appendTo;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_51_/src/java/org/apache/commons/lang/BooleanUtils.java_682-683": {
      "loc": "682-683",
      "input": "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) == 's' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n            }\n// buggy lines start:\n        }\n// buggy lines end:\n        case 4: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n                    (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n                    (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n            }\n        }\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        default:\n            return false;\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        default:\n            return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } \n",
          "correctness": "wrong"
        },
        {
          "patch": "        case 1: {\n            return true;\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case 5: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U');\n            }\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case 4: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U');\n            }\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case 5: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r');\n            }\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case 5: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r');\n            }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_57_/src/java/org/apache/commons/lang/LocaleUtils.java_223-224": {
      "loc": "223-224",
      "input": "public static boolean isAvailableLocale(Locale locale) {\n// buggy lines start:\n    return cAvailableLocaleSet.contains(locale);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return availableLocaleSet.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return availableLocalesSet.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cAvailableLocales.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cAvailableLocalesSet.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cAvailableLocaleSet.contains(locale.getLanguage());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return availableLocales.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return availableLocales.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cAvailableLocaleSet.containsKey(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return cAvailableLocales.contains(locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return availableLocaleList.contains(locale);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_58_/src/java/org/apache/commons/lang/math/NumberUtils.java_454-456": {
      "loc": "454-456",
      "input": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n// buggy lines start:\n                    && isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n// buggy lines end:\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                }\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigDecimal(str);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "                    && (isDigits(numeric.substring(1))\n                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    && isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    &&!isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    && isDigits(numeric.substring(1))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    && isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || isDigit(numeric.charAt(0)))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    && (numeric.charAt(0) == '-' || isDigits(numeric.charAt(0)))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    && isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "                    && (isDigits(numeric.substring(1))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                    && isDigits(numeric.charAt(0))\n                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885": {
      "loc": "884-885",
      "input": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            str.getChars(0, width, buffer, size);\n",
          "correctness": "plausible"
        },
        {
          "patch": "            str.getChars(0, width - strLen, buffer, size);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getChars(0, strLen, buffer, size + strLen);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getChars(0, strLen, buffer, size - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getChars(0, strLen, buffer, size + width);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            System.arraycopy(str, 0, buffer, size, strLen);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getBytes(0, strLen, buffer, size);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            str.getChars(0, strLen, buffer, size - strLen);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getChars(0, strLen, buffer, size + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            str.getChars(0, strLen - 1, buffer, size);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777": {
      "loc": "1776-1777",
      "input": "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j) != thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    int len = thisBuf.length - startIndex;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = size - startIndex;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = thisBuf.length - strLen + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = size - strLen;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = strLen;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = thisBuf.length - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = thisBuf.length - strLen - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = thisBuf.length;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int len = thisBuf.length() - strLen;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269": {
      "loc": "268-269",
      "input": "public double getNumericalMean() {\n// buggy lines start:\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return (double) (getPopulationSize() * getNumberOfSuccesses()) / (double) getSampleSize();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses()) / getPopulationSize();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses() / getPopulationSize());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) (getPopulationSize());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getSuccesses()) / (double) getPopulationSize();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses()) / ((double) getPopulationSize());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize() * 100;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return numericalMean;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return ((double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize()) * 100;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize() * getMean();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_5_/src/main/java/org/apache/commons/math3/complex/Complex.java_305-306": {
      "loc": "305-306",
      "input": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy lines start:\n        return NaN;\n// buggy lines end:\n    }\n    if (isInfinite) {\n        return ZERO;\n    }\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return ZERO;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return new NaN();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return new Complex(0, 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return new Complex(0., 0.0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return new Complex(NaN, NaN);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return new ComplexNaN();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return new Complex(0.0, 0.0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return new Complex(NaN);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return createComplex(0.0, 0.0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalArgumentException();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_9_/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java_87-88": {
      "loc": "87-88",
      "input": "public Line revert() {\n// buggy lines start:\n    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy lines end:\n    return reverted;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    final Line reverted = new Line(zero, zero);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero, direction.multiply(zero));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final Line reverted = new Line(zero, direction.subtract(zero));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero, zero.add(direction));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero, direction);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero.subtract(direction), zero);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero, zero.minus(direction));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final Line reverted = new Line(zero, one.subtract(direction));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final Line reverted = new Line(zero, zero.subtract(direction).negate());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final Line reverted = new Line(zero, zero.subtract(direction).multiply(-1));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184": {
      "loc": "183-184",
      "input": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy lines start:\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n// buggy lines end:\n        FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n        getExponentTerm(vals);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return FastMath.pow(FastMath.PI, -dim / 2) *\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, dim / 2) *\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2) * getExponentTerm(vals);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return FastMath.pow(2, -dim / 2) *\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2) /\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2) * covarianceMatrixDeterminant *\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return FastMath.pow(2 * FastMath.PI, -dim / 2) * covarianceMatrixDeterminant;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_20_/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java_921-922": {
      "loc": "921-922",
      "input": "public double[] repairAndDecode(final double[] x) {\n// buggy lines start:\n    return\n// buggy lines end:\n        decode(x);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return decode(x);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    decode(x);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    decode(x);\n    return x;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return repairAndDecode(x);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new double[] { decode(x[0]), decode(x[1]) };\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return repairAndDecode(x, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double[] y = decode(x);\n    return y;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new double[] { decode(x[0]) };\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    decode(x);\n    return decoded;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final double[] y = decode(x);\n    return y;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_27_/src/main/java/org/apache/commons/math3/fraction/Fraction.java_597-598": {
      "loc": "597-598",
      "input": "public double percentageValue() {\n// buggy lines start:\n    return multiply(100).doubleValue();\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return multiply(100.0).doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return percentage;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return multiply(100D).doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return multiply(100L).doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return multiply(100);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return multiply(100d).doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return 100;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return multiply(100d);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return multiply(100).doubleValue() / 100;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174": {
      "loc": "173-174",
      "input": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    final int n1n2prod = n1 * n2 + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final double n1n2prod = n1 * n2;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final int n1n2prod = n1 + n2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final int n1n2prod = n1 * n2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final int n1n2 = n1 * n2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int n1n2prod = (n1 + n2) / 2.0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final int n1n2prod = n1 * n2 - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final int n1n2prod = n1 * n2 + n2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final int n1n2prod = n1 * n2 + n1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final double n1n2prod = n1 * n2 + 1;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_32_/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java_136-137": {
      "loc": "136-137",
      "input": "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy lines start:\n        if ((Boolean) tree.getAttribute()) {\n// buggy lines end:\n            \n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(0);\n            setBarycenter(new Vector2D(0, 0));\n        }\n    } else if (v[0][0] == null) {\n        setSize(Double.POSITIVE_INFINITY);\n        setBarycenter(Vector2D.NaN);\n    } else {\n        double sum  = 0;\n        double sumX = 0;\n        double sumY = 0;\n        for (Vector2D[] loop : v) {\n            double x1 = loop[loop.length - 1].getX();\n            double y1 = loop[loop.length - 1].getY();\n            for (final Vector2D point : loop) {\n                final double x0 = x1;\n                final double y0 = y1;\n                x1 = point.getX();\n                y1 = point.getY();\n                final double factor = x0 * y1 - y0 * x1;\n                sum  += factor;\n                sumX += factor * (x0 + x1);\n                sumY += factor * (y0 + y1);\n            }\n        }\n        if (sum < 0) {\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(sum / 2);\n            setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (Boolean.valueOf(tree.getAttribute())) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (tree.getAttribute()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if ((Boolean) getAttribute()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if ((Boolean) tree.getAttribute(true)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Boolean.TRUE.equals(tree.getAttribute())) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (!(Boolean) tree.getAttribute()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if ((Boolean) tree.getAttribute(false)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if ((Boolean) getTree().getAttribute()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (tree!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if ((Boolean) tree.getAttribute() &&!tree.isEmpty()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_33_/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java_338-339": {
      "loc": "338-339",
      "input": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy lines start:\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n// buggy lines end:\n            columnsToDrop.add(i);\n        }\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n      int col = i + getArtificialVariableOffset();\n      if (getBasicRow(col) == null) {\n        columnsToDrop.add(col);\n      }\n    }\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n      int col = 0;\n      for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n          matrix[i - 1][col++] = tableau.getEntry(i, j);\n        }\n      }\n    }\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n      columnLabels.remove((int) columnsToDrop.get(i));\n    }\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (Precision.compare(entry, 0d, maxUlps) > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Precision.compareTo(entry, maxUlps) > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0, maxUlps) > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d, maxUlps) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d) > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d, maxUlps) >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d, maxUlps) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0.0d, maxUlps) > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d, maxUlps) <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_34_/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java_209-210": {
      "loc": "209-210",
      "input": "public Iterator<Chromosome> iterator() {\n// buggy lines start:\n    return chromosomes.iterator();\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return this.chromosomes.iterator();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return chromosomes.iterator().iterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return chromosomes.iterator();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return chromosomes.iterator().reversed();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return chromosomes.values().iterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new UnsupportedOperationException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new ChromosomeIterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return chromosomes.descendingIterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return chromosomes;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return chromosomes.iterator().reverse();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_41_/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java_520-521": {
      "loc": "520-521",
      "input": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy lines start:\n            for (int i = 0; i < weights.length; i++) {\n// buggy lines end:\n                sumWts += weights[i];\n            }\n            if (isBiasCorrected) {\n                var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n            } else {\n                var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n            }\n        }\n    }\n    return var;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            for (int i = begin; i < begin + length; i++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            for (int i = begin + 1; i < begin + length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 0; i < weights.length - 1; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 0; i < length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = begin; i < begin + length - 1; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 0; i < values.length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 1; i < weights.length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 0; i < length; ++i) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = 0; i <= weights.length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int i = begin; i < begin + length; ++i) {\n",
          "correctness": "plausible"
        }
      ]
    },
    "Math_48_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_189-190": {
      "loc": "189-190",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy lines start:\n                break;\n// buggy lines end:\n            default:\n                throw new MathInternalError();\n            }\n        }\n        x1 = x;\n        f1 = fx;\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                 atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                return x1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                return x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                continue;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return x0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                throw new MathInternalError();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return inverted;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                return inverted? x : x0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                inverted =!inverted;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_50_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_187-191": {
      "loc": "187-191",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy lines start:\n                if (x == x1) {\n                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                    f0 = computeObjectiveValue(x0);\n                }\n// buggy lines end:\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        x1 = x;\n        f1 = fx;\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                 atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                f0 = computeObjectiveValue(x0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                inverted =!inverted;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 *= 0.5;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 = x1;\n                f0 = f1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                f0 *= f1 / (f1 + fx);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 *= 0.5f;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                fx = computeObjectiveValue(x0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                f0 = f1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                x0 = x1;\n                f0 = computeObjectiveValue(x0);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_53_/src/main/java/org/apache/commons/math/complex/Complex.java_153-154": {
      "loc": "153-154",
      "input": "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy lines start:\n    return createComplex(real + rhs.getReal(),\n// buggy lines end:\n        imaginary + rhs.getImaginary());\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.getReal(), imaginary);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.real, imaginary + rhs.imaginary);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.real,\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return createComplex(real.add(rhs.getReal()), imaginary.add(rhs.getImaginary()));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real, imaginary + rhs.getImaginary());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.getReal(), imaginary - rhs.getImaginary());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return createComplex(real + rhs.getReal(), imaginary + rhs.getImag());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_56_/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java_237-244": {
      "loc": "237-244",
      "input": "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy lines start:\n    int idx = 1;\n    while (count < index) {\n        count += idx;\n        ++idx;\n    }\n    --idx;\n    indices[last] = idx;\n// buggy lines end:\n\n    return indices;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    indices[last] = count;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    indices[last] = index;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    indices[dimension - 1] = count;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    indices[last] = last;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    indices[last] = count;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int idx = 0;\n    while (count < index) {\n        count += idx;\n        ++idx;\n    }\n    indices[last] = idx;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int idx = 0;\n    while (count <= index) {\n        count += idx;\n        ++idx;\n    }\n    indices[last] = idx;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int idx = 0;\n    while (count < index) {\n        count += idx;\n        ++idx;\n    }\n    indices[last] = count;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int idx = 0;\n    while (count < index) {\n        indices[last] = idx;\n        ++idx;\n    }\n",
          "correctness": "timeout"
        },
        {
          "patch": "    int idx = 0;\n    while (count <= index) {\n        count += idx;\n        ++idx;\n    }\n    indices[last] = count;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_57_/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java_175-176": {
      "loc": "175-176",
      "input": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy lines start:\n        int sum = 0;\n// buggy lines end:\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        double sum = 0;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        final double sum = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        double sum = 0.0;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        final int sum = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final double sum = 0.0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        int sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        double sum;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final double sum = 0.;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final double sumOfDistances = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        final double sumOfDistances = 0.0;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_58_/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java_121-122": {
      "loc": "121-122",
      "input": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy lines start:\n    return fit(new Gaussian.Parametric(), guess);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return fit(new Gaussian(), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(getObservations()), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(true), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return predict(new Gaussian.Parametric(), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian, guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(), parameters, guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(), guess, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian(getObservations()), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(1), guess);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return fit(new Gaussian.Parametric(), guess, getParameters());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_59_/src/main/java/org/apache/commons/math/util/FastMath.java_3482-3483": {
      "loc": "3482-3483",
      "input": "public static float max(final float a, final float b) {\n// buggy lines start:\n    return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a < b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a > b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a <= b)? b : Float.NaN;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a <= b)? b : Float.POSITIVE_INFINITY;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a <= b)? b : a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a <= b)? b : Float.isNaN(a + b)? Float.NaN : b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Float.isNaN(a + b)? Float.NaN : b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Float.isNaN(a + b)? Float.NaN : (a <= b)? b : a;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : a);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_63_/src/main/java/org/apache/commons/math/util/MathUtils.java_417-418": {
      "loc": "417-418",
      "input": "public static boolean equals(double x, double y) {\n// buggy lines start:\n    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return (Double.isNaN(x) || Double.isNaN(y)) || x == y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Double.isNaN(x) && Double.isNaN(y) || x == y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Double.isNaN(x) || Double.isNaN(y) || x == y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x == y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (Double.isNaN(x) && Double.isNaN(y)) || Double.isNaN(x) && Double.isNaN(y);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (Double.isNaN(x) && Double.isNaN(y)) || (x == y);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x == y || Double.isNaN(x) && Double.isNaN(y);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (Double.isNaN(x) && Double.isNaN(y)) || Double.compare(x, y) == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (Double.isNaN(x) || Double.isNaN(y)) {\n        return false;\n    }\n    return x == y;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return (Double.isNaN(x) && Double.isNaN(y)) || Double.isNaN(x) || Double.isNaN(y);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172": {
      "loc": "171-172",
      "input": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                out[i][j] = tDistribution.cumulativeProbability(t);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 1 - tDistribution.cumulativeProbability(t);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = (1 - tDistribution.cumulativeProbability(t));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 2 * (1 - tDistribution.probability(t));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(1 - t));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 2 * 1 - tDistribution.cumulativeProbability(t);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 2 * t;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t) * t);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                out[i][j] = tDistribution.probability(t);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_70_/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java_72-73": {
      "loc": "72-73",
      "input": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy lines start:\n    return solve(min, max);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return solve(min, max, initial);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return solve(f, min, max);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return solve(f, min, max, initial);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    throw new MaxIterationsExceededException();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new UnsupportedOperationException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    throw new UnsupportedOperationException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return solve(f);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.solve(min, max);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return solve(min);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new MaxIterationsExceededException(f);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_73_/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java_136-137": {
      "loc": "136-137",
      "input": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n// buggy lines start:\n\n// buggy lines end:\n    \n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    throw new MaxIterationsExceededException();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, yMax, initial, yInitial);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return solve(f, min, yMin, max, yMax, initial, yInitial);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, max, yMax, yInitial, min, yMin);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return solve(f, min, yMin, max, yMax, initial, yInitial, min, yMin);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return solve(f, min, yMin, max, yMax, initial, yInitial, yInitial);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, max, yMax, initial, yInitial, yInitial);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, max, yMax, initial, yInitial, min, yMin);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    \n    return solve(f, min, yMin, max, yMax, initial, yInitial, min);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_75_/src/main/java/org/apache/commons/math/stat/Frequency.java_303-304": {
      "loc": "303-304",
      "input": "@Deprecated\npublic double getPct(Object v) {\n// buggy lines start:\n    return getCumPct((Comparable<?>) v);\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return getCumPct(v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getPct((Comparable<?>) v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct((Comparable) v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct((Comparable<?>) v, false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct((Number) v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct(v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct((Comparable<?>) v, true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct((Comparable<?>) v, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getCumPct((Double) v);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return getCumPct(((Comparable<?>) v));\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136": {
      "loc": "1135-1136",
      "input": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        int j = 4 * (n - 1);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int j = n - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = 4 * n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = 4 * n - 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = pingPong;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int j = 2 * n - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = 4 * n - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = 4;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int j = 4 * (n - 1);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int j = 4 * (n - 1) - 1;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83": {
      "loc": "82-83",
      "input": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (MathUtils.compare(entry, 0, epsilon) >= 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (MathUtils.compareTo(entry, epsilon) >= 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (MathUtils.compareTo(entry, 0, epsilon) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (MathUtils.compareTo(entry, 0, epsilon) <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (entry >= 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (Math.abs(entry) >= epsilon) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (MathUtils.compare(entry, 0, epsilon) < 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (MathUtils.isClose(entry, 0, epsilon)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (MathUtils.compareTo(entry, 0, epsilon) >= 0 && entry > 0) {\n",
          "correctness": "plausible"
        }
      ]
    },
    "Math_85_/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java_198-199": {
      "loc": "198-199",
      "input": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy lines start:\n    if (fa * fb >= 0.0 ) {\n// buggy lines end:\n        throw new ConvergenceException(\n                  \"number of iterations={0}, maximum iterations={1}, \" +\n                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n                  numIterations, maximumIterations, initial,\n                  lowerBound, upperBound, a, b, fa, fb);\n    }\n    return new double[]{a, b};\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (fa * fb >= 0.0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fa * fb > 0.0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fa * fb <= 0.0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fa * fb <= 0.0 ) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fa * fb > 0.0 ) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (numIterations < maximumIterations) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (numIterations >= maximumIterations) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fa * fb >= 0.0 && numIterations < maximumIterations) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((fa * fb >= 0.0) && (numIterations < maximumIterations)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((fa * fb >= 0.0) || (numIterations < maximumIterations)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_91_/src/java/org/apache/commons/math/fraction/Fraction.java_259-261": {
      "loc": "259-261",
      "input": "public int compareTo(Fraction object) {\n// buggy lines start:\n    double nOd = doubleValue();\n    double dOn = object.doubleValue();\n// buggy lines end:\n    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    double nOd = this.doubleValue();\n    double dOn = object.doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double nOd = object.doubleValue();\n    double dOn = doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double nOd = getDoubleValue();\n    double dOn = object.getDoubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double nOd = object.doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int nOd = doubleValue();\n    int dOn = object.doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double dOn = object.doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double dOn = object.doubleValue();\n    double nOd = doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double nOd = object.getDoubleValue();\n    double dOn = doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double nOd = object.getDoubleValue();\n    double dOn = object.doubleValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double nOd = doubleValue();\n    double dOn = object.doubleValue();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_94_/src/java/org/apache/commons/math/util/MathUtils.java_412-413": {
      "loc": "412-413",
      "input": "public static int gcd(int u, int v) {\n// buggy lines start:\n    if (u * v == 0) {\n// buggy lines end:\n        return (Math.abs(u) + Math.abs(v));\n    }\n    if (u > 0) {\n        u = -u;\n    } \n    if (v > 0) {\n        v = -v;\n    } \n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n        u /= 2;\n        v /= 2;\n        k++; \n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) { \n            t /= 2; \n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    return -u * (1 << k); \n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (u == 0 || v == 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (u == 0 && v == 0) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "    if (u == 0) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "    if (u * v == 0)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (v == 0) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "    if (v * u == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (Math.abs(u) * Math.abs(v) == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (u * v == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (u * v < 0) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "    if (Math.abs(u * v) == 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_96_/src/java/org/apache/commons/math/complex/Complex.java_258-259": {
      "loc": "258-259",
      "input": "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy lines start:\n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n// buggy lines end:\n            }\n        } catch (ClassCastException ex) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "                ret = Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == rhs.getImaginary());\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == rhs.getImaginary()); \n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToLongBits(real) == Double.doubleToLongBits(rhs.getReal())) && (Double.doubleToLongBits(imaginary) == Double.doubleToLongBits(rhs.getImaginary()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToLongBits(real) == Double.doubleToLongBits(rhs.getReal())) && (Double.doubleToLongBits(imaginary) == Double.doubleToLongBits(rhs.getImaginary())); \n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(real));\n",
          "correctness": "wrong"
        },
        {
          "patch": "                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == rhs.getImaginary());\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_101_/src/java/org/apache/commons/math/complex/ComplexFormat.java_377-378": {
      "loc": "377-378",
      "input": "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy lines start:\n    if (\n// buggy lines end:\n        source.substring(startIndex, endIndex).compareTo(\n        getImaginaryCharacter()) != 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), im.doubleValue() * sign);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (source.substring(startIndex, endIndex).compareTo(getImaginaryCharacter())!= 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (endIndex < source.length() && (\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (endIndex < source.length()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (source.substring(startIndex, endIndex).compareTo(\n        getImaginaryCharacter())!= 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (source.substring(startIndex, endIndex).compareTo(getImaginaryCharacter()) == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!source.substring(startIndex, endIndex).equals(getImaginaryCharacter())) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (getImaginaryCharacter().length() > 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (source.substring(startIndex, endIndex).compareTo(\n        getImaginaryCharacter()) == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (getImaginaryCharacter().length() == 0) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_105_/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_264-265": {
      "loc": "264-265",
      "input": "public double getSumSquaredErrors() {\n// buggy lines start:\n    return sumYY - sumXY * sumXY / sumXX;\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return Math.sqrt(sumYY - sumXY * sumXY / sumXX);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumXY * sumXY / sumXX;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Math.abs(sumYY - sumXY * sumXY / sumXX);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY * sumXY / sumXX;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY / (double) sumXX;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumXY - sumXX * sumXY / sumYY;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY - sumXX * sumXY / sumXX;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY * sumXY / sumXX * sumXX;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return sumYY - sumXY * sumXY - sumXX * sumXY / sumXY;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124": {
      "loc": "123-124",
      "input": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        throw new UnsupportedOperationException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new IllegalStateException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new UnsupportedOperationException(invocation.getMethod());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        throw new UnsupportedOperationException(invocation);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        throw new IllegalStateException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        throw new UnsupportedOperationException();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        throw new RuntimeException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92": {
      "loc": "91-92",
      "input": "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy lines start:\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n// buggy lines end:\n            error = handleVerifyException(e);\n        }\n    }\n    if (error != null) {\n        throw error;\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        catch (MockitoAssertionError e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        catch (ArgumentsAreDifferent e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (MockitoAssertionError e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (ArgumentsAreDifferent e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        finally {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (org.mockito.exceptions.verification.junit.VerificationError e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        catch (org.mockito.exceptions.verification.junit.VerificationError e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (org.mockito.exceptions.verification.junit.VerificationException e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_7_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_379-380": {
      "loc": "379-380",
      "input": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy lines start:\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    registerTypeVariablesOn(typeVariable);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable, true));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(type);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable, false));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(actualTypeArgumentFor(typeVariable));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(actualTypeArgument);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariableOn(getActualTypeArgumentFor(typeVariable));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable), true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    registerTypeVariablesOn(getActualTypeArgumentFor(type));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_8_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_79-80": {
      "loc": "79-80",
      "input": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy lines start:\n        } else {\n// buggy lines end:\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        } else if (actualTypeArgument instanceof WildcardType) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof TypeVariable) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (actualTypeArgument!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof ParameterizedType) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof TypeVariableType) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof ClassType) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof PrimitiveType) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof ArrayType) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        } else if (actualTypeArgument instanceof TypeVariableImpl) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_22_/src/org/mockito/internal/matchers/Equality.java_13-14": {
      "loc": "13-14",
      "input": "public static boolean areEqual(Object o1, Object o2) {\n// buggy lines start:\n    if (o1 == null || o2 == null) {\n// buggy lines end:\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    if (o1 == null || o2 == null ||!o1.equals(o2)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null && o2 == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null || o2 == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null || o2 == null || o1.equals(o2)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == o2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null) {\n        return o2 == null;\n    } else if (o2 == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null || o2 == null || getClass()!= o1.getClass()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (o1 == null || o2 == null || o1.getClass().isArray()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (o1 == null || o2 == null || o1.getClass()!= o2.getClass())\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_24_/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java_76-77": {
      "loc": "76-77",
      "input": "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy lines start:\n        return 1;\n// buggy lines end:\n    }\n    Class<?> returnType = invocation.getMethod().getReturnType();\n    return returnValueFor(returnType);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return invocation.getArguments()[0];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return invocation;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return invocation.getArguments().length;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_27_/src/org/mockito/internal/util/MockUtil.java_64-66": {
      "loc": "64-66",
      "input": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy lines start:\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n// buggy lines end:\n    ((Factory) mock).setCallback(0, newFilter);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    final MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, mock);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = createMockHandler(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(mock);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mock);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS), mock);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94": {
      "loc": "93-94",
      "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        when(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenInject();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        mockCandidateFilter.filterCandidate(mocks, field).thenInject();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        filterCandidate(mocks, field, fieldInstance);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Throwable t) {\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalArgumentException e) {\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_29_/src/org/mockito/internal/matchers/Same.java_29-30": {
      "loc": "29-30",
      "input": "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy lines start:\n    description.appendText(wanted.toString());\n// buggy lines end:\n    appendQuoting(description);\n    description.appendText(\")\");\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    description.appendText(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    description.appendText(\"String_Node_Str\" + wanted.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    description.appendText(this.wanted.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    description.appendText(wanted);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    description.appendText(getWanted().toString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    appendQuoting(description, wanted);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    description.appendText(getWanted());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    description.appendValue(wanted);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    description.appendText(\"String_Node_Str\", wanted.toString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    description.appendText(getWantedValue());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_34_/src/org/mockito/internal/invocation/InvocationMatcher.java_106-107": {
      "loc": "106-107",
      "input": "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy lines start:\n        if (m instanceof CapturesArguments) {\n// buggy lines end:\n            ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n        }\n        k++;\n    }\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        if (m instanceof CapturesArguments) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (m instanceof CaptureArguments) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (m.matches()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (m instanceof CapturesArguments && k > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (m instanceof CapturesArgumentsImpl) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (m.find()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (m instanceof CapturesArguments && k >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (m instanceof CapturesArguments && k!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (m instanceof CapturesArguments || m instanceof CaptureArguments) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (m instanceof CapturesArguments || m instanceof CapturedArguments) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_38_/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java_48-49": {
      "loc": "48-49",
      "input": "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy lines start:\n    return StringDescription.toString(m).equals(arg.toString());\n// buggy lines end:\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    return m.toString().equals(arg.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return StringDescription.toString(m).equals(arg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return StringDescription.toString(arg).equals(StringDescription.toString(m));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return StringDescription.toString(m).equalsIgnoreCase(arg.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return m.toString().equals(arg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return m.matches(arg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return StringDescription.toString(arg).equals(m.toString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return arg!= null && StringDescription.toString(m).equals(arg.toString());\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return StringDescription.toString(m).equals(StringDescription.toString(arg));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return m.toString().equalsIgnoreCase(arg.toString());\n",
          "correctness": "wrong"
        }
      ]
    },
    "Time_4_/src/main/java/org/joda/time/Partial.java_464-465": {
      "loc": "464-465",
      "input": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy lines start:\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n// buggy lines end:\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newValues);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newTypes, newValues, value);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, iTypes, iValues);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newTypes);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newTypes, newValues, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newTypes, newValues, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        newPartial = new Partial(iChronology, newTypes, newValues);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Partial newPartial = new Partial(iChronology, newTypes, iValues);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        Partial newPartial = new Partial(newTypes, newValues);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        Partial newPartial = new Partial(fieldType, newTypes, newValues);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139": {
      "loc": "138-139",
      "input": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2 != val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "            return Long.MIN_VALUE;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -Long.MIN_VALUE;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return val1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -Long.MAX_VALUE;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return Long.MAX_VALUE;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return (long) -val1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -1L;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -(long) val1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return -val1 * -1;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Time_16_/src/main/java/org/joda/time/format/DateTimeFormatter.java_709-710": {
      "loc": "709-710",
      "input": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy lines start:\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n// buggy lines end:\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "        instantLocal, chrono, iLocale, iDefaultYear, iPivotYear);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        instantLocal, chrono);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        instantLocal, chrono, locale, iPivotYear, iDefaultYear);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        instantLocal, chrono, iLocale);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        instantLocal, iLocale, iPivotYear, iDefaultYear);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        instantLocal, chrono, iLocale, iDefaultYear, iOffsetParsed);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        instantLocal, chrono, iLocale, iDefaultYear);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        instantLocal, chrono, iLocale, iPivotYear);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        instantLocal, chrono, iLocale, iDefaultYear, iYearOffset);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Time_19_/src/main/java/org/joda/time/DateTimeZone.java_900-901": {
      "loc": "900-901",
      "input": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy lines start:\n    } else if (offsetLocal > 0) {\n// buggy lines end:\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n// fixed lines:\n",
      "output": [
        {
          "patch": "    } else if (offsetLocal >= 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    } else {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    } else if (offsetLocal <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (offsetLocal < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (offsetLocal > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (offsetLocal < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (offsetLocal < 0L) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (offsetLocal > 0 && offsetAdjusted > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if ((offsetLocal - offsetAdjusted) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if ((offsetLocal - offsetAdjusted) > 0) {\n",
          "correctness": "wrong"
        }
      ]
    }
  }
}