{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688164446571",
  "GPR[ESLB]": "1688164466591",
  "file": "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174",
  "input": {
    "loc": "173-174",
    "input": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + 1;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final double n1n2prod = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 + n2;\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2 = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = (n1 + n2) / 2.0;\n<|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 - 1;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + n2;\n<|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + n1;\n<|endofmask|>",
      "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final double n1n2prod = n1 * n2 + 1;\n<|endofmask|><|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Math_30_-src-main-java-org-apache-commons-math3-stat-inference-MannWhitneyUTest.java_173-174.txt",
  "OAR_JOB_ID": "1550236",
  "GPR[SSLI]": "1688163069959",
  "GPR[ESLI]": "1688163099989",
  "GPR[SPS]": "1688164466635",
  "nrTokens": 146,
  "status": "ok",
  "GPR[EPS]": "1688164467277",
  "time": 642,
  "tokentime": 3,
  "inferencetime": 639,
  "output": [
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + 1;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final double n1n2prod = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 + n2;\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2 = n1 * n2;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = (n1 + n2) / 2.0;\n<|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 - 1;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + n2;\n<|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final int n1n2prod = n1 * n2 + n1;\n<|endofmask|>",
    "<|endoftext|>private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy lines start:\n    final int n1n2prod = n1 * n2;\n// buggy lines end:\n\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}\n// fixed lines:\n    final double n1n2prod = n1 * n2 + 1;\n<|endofmask|><|endofmask|>"
  ]
}