{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688165224542",
  "GPR[ESLB]": "1688165244562",
  "file": "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139",
  "input": {
    "loc": "138-139",
    "input": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2 != val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return Long.MIN_VALUE;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -Long.MIN_VALUE;\n<|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return val1;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -Long.MAX_VALUE;\n<|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return Long.MAX_VALUE;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return (long) -val1;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -1;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -1L;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -(long) val1;\n<|endofmask|><|endofmask|>",
      "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -val1 * -1;\n<|endofmask|><|endofmask|><|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Time_15_-src-main-java-org-joda-time-field-FieldUtils.java_138-139.txt",
  "OAR_JOB_ID": "1550236",
  "GPR[SSLI]": "1688163069959",
  "GPR[ESLI]": "1688163099989",
  "GPR[SPS]": "1688165244607",
  "nrTokens": 103,
  "status": "ok",
  "GPR[EPS]": "1688165245036",
  "time": 429,
  "tokentime": 3,
  "inferencetime": 426,
  "output": [
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return Long.MIN_VALUE;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -Long.MIN_VALUE;\n<|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return val1;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -Long.MAX_VALUE;\n<|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return Long.MAX_VALUE;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return (long) -val1;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -1;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -1L;\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -(long) val1;\n<|endofmask|><|endofmask|>",
    "<|endoftext|>public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines:\n            return -val1 * -1;\n<|endofmask|><|endofmask|><|endofmask|>"
  ]
}