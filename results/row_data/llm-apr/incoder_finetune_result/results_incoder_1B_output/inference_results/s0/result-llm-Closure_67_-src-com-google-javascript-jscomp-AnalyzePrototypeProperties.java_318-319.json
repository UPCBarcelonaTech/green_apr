{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688163430706",
  "GPR[ESLB]": "1688163450726",
  "file": "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319",
  "input": {
    "loc": "318-319",
    "input": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        ) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    ) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n      )\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    && n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    && n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        || n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getLastChild().getType() == Token.GETPROP\n<|endofmask|>",
      "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        || n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Closure_67_-src-com-google-javascript-jscomp-AnalyzePrototypeProperties.java_318-319.txt",
  "OAR_JOB_ID": "1550236",
  "GPR[SSLI]": "1688163069959",
  "GPR[ESLI]": "1688163099989",
  "GPR[SPS]": "1688163450773",
  "nrTokens": 147,
  "status": "ok",
  "GPR[EPS]": "1688163451404",
  "time": 631,
  "tokentime": 3,
  "inferencetime": 628,
  "output": [
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        ) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    ) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n      )\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    && n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n    && n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        || n.getFirstChild().getType() == Token.GETPROP\n<|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        && n.getLastChild().getType() == Token.GETPROP\n<|endofmask|>",
    "<|endoftext|>private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines:\n        || n.getType() == Token.GETPROP\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>"
  ]
}