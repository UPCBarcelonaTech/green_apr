{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1689922490627",
  "GPR[ESLB]": "1689922510648",
  "file": "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94",
  "input": {
    "loc": "93-94",
    "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        when(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenInject();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        mockCandidateFilter.filterCandidate(mocks, field).thenInject();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        filterCandidate(mocks, field, fieldInstance);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Throwable t) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalArgumentException e) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n        }\n<|endofmask|>",
      "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n<|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Mockito_28_-src-org-mockito-internal-configuration-DefaultInjectionEngine.java_93-94.txt",
  "OAR_JOB_ID": "1561661",
  "GPR[SSLI]": "1689919809076",
  "GPR[ESLI]": "1689919839106",
  "GPR[SPS]": "1689922510693",
  "nrTokens": 85,
  "status": "ok",
  "GPR[EPS]": "1689922511668",
  "time": 975,
  "tokentime": 2,
  "inferencetime": 973,
  "output": [
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        when(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenInject();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        mockCandidateFilter.filterCandidate(mocks, field).thenInject();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        filterCandidate(mocks, field, fieldInstance);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (Throwable t) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalArgumentException e) {\n        }\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n        }\n<|endofmask|>",
    "<|endoftext|>private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines:\n        try {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n<|endofmask|>"
  ]
}