{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1689922196719",
  "GPR[ESLB]": "1689922216739",
  "file": "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83",
  "input": {
    "loc": "82-83",
    "input": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n",
    "output": [
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compare(entry, 0, epsilon) >= 0) {\n<|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, epsilon) >= 0) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) < 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) <= 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (entry >= 0) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (Math.abs(entry) >= epsilon) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compare(entry, 0, epsilon) < 0) {\n<|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.isClose(entry, 0, epsilon)) {\n<|endofmask|><|endofmask|><|endofmask|>",
      "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0 && entry > 0) {\n<|endofmask|>"
    ]
  },
  "nvidea": "measures-nvidea-Math_82_-src-main-java-org-apache-commons-math-optimization-linear-SimplexSolver.java_82-83.txt",
  "OAR_JOB_ID": "1561661",
  "GPR[SSLI]": "1689919809076",
  "GPR[ESLI]": "1689919839106",
  "GPR[SPS]": "1689922216783",
  "nrTokens": 157,
  "status": "ok",
  "GPR[EPS]": "1689922217421",
  "time": 638,
  "tokentime": 3,
  "inferencetime": 635,
  "output": [
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compare(entry, 0, epsilon) >= 0) {\n<|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, epsilon) >= 0) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) < 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) <= 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (entry >= 0) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (Math.abs(entry) >= epsilon) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compare(entry, 0, epsilon) < 0) {\n<|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.isClose(entry, 0, epsilon)) {\n<|endofmask|><|endofmask|><|endofmask|>",
    "<|endoftext|>private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy lines start:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n// buggy lines end:\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}\n// fixed lines:\n        if (MathUtils.compareTo(entry, 0, epsilon) >= 0 && entry > 0) {\n<|endofmask|>"
  ]
}