{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689918875749,
      "ESLB": 1689918895769,
      "SPVS": 1689918895769,
      "SPVAP": 1689918895771,
      "EPVAP": 1689918895772,
      "SPVATF": 1689918895772,
      "EPVATF": 1689918900782,
      "SPVATR": 1689918900782,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689918900783
    },
    {
      "rank": 1,
      "SSLB": 1689918900783,
      "ESLB": 1689918920803,
      "SPVS": 1689918920803,
      "SPVAP": 1689918920804,
      "EPVAP": 1689918920805,
      "SPVATF": 1689918920805,
      "EPVATF": 1689918926816,
      "SPVATR": 1689918926816,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689918926817
    },
    {
      "rank": 2,
      "SSLB": 1689918926817,
      "ESLB": 1689918946837,
      "SPVS": 1689918946837,
      "SPVAP": 1689918946838,
      "EPVAP": 1689918946840,
      "SPVATF": 1689918946840,
      "EPVATF": 1689918949848,
      "SPVATR": 1689918949848,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1689918949849
    },
    {
      "rank": 3,
      "SSLB": 1689918949849,
      "ESLB": 1689918969863,
      "SPVS": 1689918969863,
      "SPVAP": 1689918969864,
      "EPVAP": 1689918969865,
      "SPVATF": 1689918969865,
      "EPVATF": 1689918974876,
      "SPVATR": 1689918974876,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689918974877
    },
    {
      "rank": 4,
      "SSLB": 1689918974877,
      "ESLB": 1689918994897,
      "SPVS": 1689918994897,
      "SPVAP": 1689918994898,
      "EPVAP": 1689918994899,
      "SPVATF": 1689918994899,
      "EPVATF": 1689918999909,
      "SPVATR": 1689918999909,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1689918999910
    },
    {
      "rank": 5,
      "SSLB": 1689918999910,
      "ESLB": 1689919019930,
      "SPVS": 1689919019930,
      "SPVAP": 1689919019931,
      "EPVAP": 1689919019932,
      "SPVATF": 1689919019932,
      "EPVATF": 1689919024942,
      "SPVATR": 1689919024942,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1689919024943
    },
    {
      "rank": 6,
      "SSLB": 1689919024943,
      "ESLB": 1689919044963,
      "SPVS": 1689919044963,
      "SPVAP": 1689919044965,
      "EPVAP": 1689919044966,
      "SPVATF": 1689919044966,
      "EPVATF": 1689919046974,
      "SPVATR": 1689919046974,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689919046975
    },
    {
      "rank": 7,
      "SSLB": 1689919046975,
      "ESLB": 1689919066995,
      "SPVS": 1689919066995,
      "SPVAP": 1689919066996,
      "EPVAP": 1689919066997,
      "SPVATF": 1689919066997,
      "EPVATF": 1689919072006,
      "SPVATR": 1689919072006,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689919072007
    },
    {
      "rank": 8,
      "SSLB": 1689919072007,
      "ESLB": 1689919092027,
      "SPVS": 1689919092027,
      "SPVAP": 1689919092028,
      "EPVAP": 1689919092030,
      "SPVATF": 1689919092030,
      "EPVATF": 1689919097039,
      "SPVATR": 1689919097039,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689919097040
    },
    {
      "rank": 9,
      "SSLB": 1689919097040,
      "ESLB": 1689919117060,
      "SPVS": 1689919117060,
      "SPVAP": 1689919117062,
      "EPVAP": 1689919117063,
      "SPVATF": 1689919117063,
      "EPVATF": 1689919119071,
      "SPVATR": 1689919119071,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1689919119072
    }
  ],
  "SSLI": 1689909142027,
  "ESLI": 1689909172055,
  "hostname": "gros-48.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}