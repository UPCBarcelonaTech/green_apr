{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689878973434,
      "ESLB": 1689878993454,
      "SPVS": 1689878993454,
      "SPVAP": 1689878993458,
      "EPVAP": 1689878993460,
      "SPVATF": 1689878993460,
      "EPVATF": 1689878998475,
      "SPVATR": 1689878998475,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689878998476
    },
    {
      "rank": 1,
      "SSLB": 1689878998476,
      "ESLB": 1689879018497,
      "SPVS": 1689879018497,
      "SPVAP": 1689879018498,
      "EPVAP": 1689879018499,
      "SPVATF": 1689879018499,
      "EPVATF": 1689879023511,
      "SPVATR": 1689879023511,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689879023512
    },
    {
      "rank": 2,
      "SSLB": 1689879023512,
      "ESLB": 1689879043533,
      "SPVS": 1689879043533,
      "SPVAP": 1689879043534,
      "EPVAP": 1689879043535,
      "SPVATF": 1689879043535,
      "EPVATF": 1689879046544,
      "SPVATR": 1689879046544,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1689879046546
    },
    {
      "rank": 3,
      "SSLB": 1689879046546,
      "ESLB": 1689879066566,
      "SPVS": 1689879066566,
      "SPVAP": 1689879066567,
      "EPVAP": 1689879066569,
      "SPVATF": 1689879066569,
      "EPVATF": 1689879071594,
      "SPVATR": 1689879071594,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689879071595
    },
    {
      "rank": 4,
      "SSLB": 1689879071595,
      "ESLB": 1689879091616,
      "SPVS": 1689879091616,
      "SPVAP": 1689879091617,
      "EPVAP": 1689879091618,
      "SPVATF": 1689879091618,
      "EPVATF": 1689879096628,
      "SPVATR": 1689879096628,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1689879096629
    },
    {
      "rank": 5,
      "SSLB": 1689879096629,
      "ESLB": 1689879116649,
      "SPVS": 1689879116649,
      "SPVAP": 1689879116650,
      "EPVAP": 1689879116652,
      "SPVATF": 1689879116652,
      "EPVATF": 1689879121662,
      "SPVATR": 1689879121662,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1689879121664
    },
    {
      "rank": 6,
      "SSLB": 1689879121664,
      "ESLB": 1689879141684,
      "SPVS": 1689879141684,
      "SPVAP": 1689879141685,
      "EPVAP": 1689879141686,
      "SPVATF": 1689879141686,
      "EPVATF": 1689879143694,
      "SPVATR": 1689879143694,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689879143695
    },
    {
      "rank": 7,
      "SSLB": 1689879143695,
      "ESLB": 1689879163715,
      "SPVS": 1689879163715,
      "SPVAP": 1689879163718,
      "EPVAP": 1689879163720,
      "SPVATF": 1689879163720,
      "EPVATF": 1689879168730,
      "SPVATR": 1689879168730,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689879168732
    },
    {
      "rank": 8,
      "SSLB": 1689879168732,
      "ESLB": 1689879188752,
      "SPVS": 1689879188752,
      "SPVAP": 1689879188754,
      "EPVAP": 1689879188755,
      "SPVATF": 1689879188755,
      "EPVATF": 1689879193765,
      "SPVATR": 1689879193765,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689879193766
    },
    {
      "rank": 9,
      "SSLB": 1689879193766,
      "ESLB": 1689879213786,
      "SPVS": 1689879213787,
      "SPVAP": 1689879213789,
      "EPVAP": 1689879213791,
      "SPVATF": 1689879213791,
      "EPVATF": 1689879215808,
      "SPVATR": 1689879215808,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1689879215809
    }
  ],
  "SSLI": 1689872982079,
  "ESLI": 1689873012110,
  "hostname": "gros-48.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}