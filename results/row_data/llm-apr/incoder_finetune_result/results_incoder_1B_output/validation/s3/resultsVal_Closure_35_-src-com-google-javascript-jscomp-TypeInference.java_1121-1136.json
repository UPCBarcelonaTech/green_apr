{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689801906606,
      "ESLB": 1689801926626,
      "SPVS": 1689801926626,
      "SPVAP": 1689801926628,
      "EPVAP": 1689801926629,
      "SPVATF": 1689801926629,
      "EPVATF": 1689801931649,
      "SPVATR": 1689801931649,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689801931650
    },
    {
      "rank": 1,
      "SSLB": 1689801931650,
      "ESLB": 1689801951670,
      "SPVS": 1689801951670,
      "SPVAP": 1689801951674,
      "EPVAP": 1689801951675,
      "SPVATF": 1689801951675,
      "EPVATF": 1689801956687,
      "SPVATR": 1689801956687,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689801956688
    },
    {
      "rank": 2,
      "SSLB": 1689801956688,
      "ESLB": 1689801976708,
      "SPVS": 1689801976708,
      "SPVAP": 1689801976714,
      "EPVAP": 1689801976716,
      "SPVATF": 1689801976716,
      "EPVATF": 1689801978724,
      "SPVATR": 1689801978724,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1689801978725
    },
    {
      "rank": 3,
      "SSLB": 1689801978725,
      "ESLB": 1689801998745,
      "SPVS": 1689801998745,
      "SPVAP": 1689801998746,
      "EPVAP": 1689801998748,
      "SPVATF": 1689801998748,
      "EPVATF": 1689802003773,
      "SPVATR": 1689802003773,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689802003774
    },
    {
      "rank": 4,
      "SSLB": 1689802003774,
      "ESLB": 1689802023794,
      "SPVS": 1689802023794,
      "SPVAP": 1689802023796,
      "EPVAP": 1689802023797,
      "SPVATF": 1689802023797,
      "EPVATF": 1689802028809,
      "SPVATR": 1689802028809,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1689802028811
    },
    {
      "rank": 5,
      "SSLB": 1689802028811,
      "ESLB": 1689802048831,
      "SPVS": 1689802048831,
      "SPVAP": 1689802048833,
      "EPVAP": 1689802048835,
      "SPVATF": 1689802048835,
      "EPVATF": 1689802053845,
      "SPVATR": 1689802053845,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1689802053846
    },
    {
      "rank": 6,
      "SSLB": 1689802053846,
      "ESLB": 1689802073867,
      "SPVS": 1689802073867,
      "SPVAP": 1689802073872,
      "EPVAP": 1689802073873,
      "SPVATF": 1689802073873,
      "EPVATF": 1689802075893,
      "SPVATR": 1689802075893,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689802075895
    },
    {
      "rank": 7,
      "SSLB": 1689802075895,
      "ESLB": 1689802095915,
      "SPVS": 1689802095915,
      "SPVAP": 1689802095916,
      "EPVAP": 1689802095918,
      "SPVATF": 1689802095918,
      "EPVATF": 1689802100930,
      "SPVATR": 1689802100930,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689802100931
    },
    {
      "rank": 8,
      "SSLB": 1689802100931,
      "ESLB": 1689802120951,
      "SPVS": 1689802120951,
      "SPVAP": 1689802120953,
      "EPVAP": 1689802120954,
      "SPVATF": 1689802120954,
      "EPVATF": 1689802125964,
      "SPVATR": 1689802125964,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689802125965
    },
    {
      "rank": 9,
      "SSLB": 1689802125965,
      "ESLB": 1689802145986,
      "SPVS": 1689802145986,
      "SPVAP": 1689802145987,
      "EPVAP": 1689802145988,
      "SPVATF": 1689802145988,
      "EPVATF": 1689802148997,
      "SPVATR": 1689802148997,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1689802148998
    }
  ],
  "SSLI": 1689794941518,
  "ESLI": 1689794971548,
  "hostname": "gros-47.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}