{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689716510472,
      "ESLB": 1689716530492,
      "SPVS": 1689716530492,
      "SPVAP": 1689716530499,
      "EPVAP": 1689716530501,
      "SPVATF": 1689716530501,
      "EPVATF": 1689716535527,
      "SPVATR": 1689716535527,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689716535528
    },
    {
      "rank": 1,
      "SSLB": 1689716535528,
      "ESLB": 1689716555548,
      "SPVS": 1689716555548,
      "SPVAP": 1689716555550,
      "EPVAP": 1689716555551,
      "SPVATF": 1689716555551,
      "EPVATF": 1689716560562,
      "SPVATR": 1689716560562,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689716560564
    },
    {
      "rank": 2,
      "SSLB": 1689716560564,
      "ESLB": 1689716580584,
      "SPVS": 1689716580584,
      "SPVAP": 1689716580586,
      "EPVAP": 1689716580588,
      "SPVATF": 1689716580588,
      "EPVATF": 1689716582596,
      "SPVATR": 1689716582596,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1689716582597
    },
    {
      "rank": 3,
      "SSLB": 1689716582597,
      "ESLB": 1689716602617,
      "SPVS": 1689716602617,
      "SPVAP": 1689716602619,
      "EPVAP": 1689716602621,
      "SPVATF": 1689716602621,
      "EPVATF": 1689716607633,
      "SPVATR": 1689716607633,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689716607634
    },
    {
      "rank": 4,
      "SSLB": 1689716607634,
      "ESLB": 1689716627654,
      "SPVS": 1689716627654,
      "SPVAP": 1689716627656,
      "EPVAP": 1689716627658,
      "SPVATF": 1689716627658,
      "EPVATF": 1689716632667,
      "SPVATR": 1689716632667,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1689716632669
    },
    {
      "rank": 5,
      "SSLB": 1689716632669,
      "ESLB": 1689716652689,
      "SPVS": 1689716652689,
      "SPVAP": 1689716652691,
      "EPVAP": 1689716652692,
      "SPVATF": 1689716652692,
      "EPVATF": 1689716657703,
      "SPVATR": 1689716657703,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1689716657704
    },
    {
      "rank": 6,
      "SSLB": 1689716657704,
      "ESLB": 1689716677724,
      "SPVS": 1689716677724,
      "SPVAP": 1689716677726,
      "EPVAP": 1689716677728,
      "SPVATF": 1689716677728,
      "EPVATF": 1689716679737,
      "SPVATR": 1689716679737,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689716679739
    },
    {
      "rank": 7,
      "SSLB": 1689716679739,
      "ESLB": 1689716699759,
      "SPVS": 1689716699759,
      "SPVAP": 1689716699762,
      "EPVAP": 1689716699764,
      "SPVATF": 1689716699764,
      "EPVATF": 1689716704775,
      "SPVATR": 1689716704775,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689716704777
    },
    {
      "rank": 8,
      "SSLB": 1689716704777,
      "ESLB": 1689716724797,
      "SPVS": 1689716724797,
      "SPVAP": 1689716724798,
      "EPVAP": 1689716724800,
      "SPVATF": 1689716724800,
      "EPVATF": 1689716729810,
      "SPVATR": 1689716729810,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689716729811
    },
    {
      "rank": 9,
      "SSLB": 1689716729811,
      "ESLB": 1689716749831,
      "SPVS": 1689716749831,
      "SPVAP": 1689716749835,
      "EPVAP": 1689716749837,
      "SPVATF": 1689716749837,
      "EPVATF": 1689716752854,
      "SPVATR": 1689716752854,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1689716752858
    }
  ],
  "SSLI": 1689706587399,
  "ESLI": 1689706617429,
  "hostname": "gros-47.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}