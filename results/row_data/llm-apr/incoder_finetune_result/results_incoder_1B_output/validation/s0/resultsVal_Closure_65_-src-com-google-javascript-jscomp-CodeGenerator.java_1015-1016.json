{
  "key": "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016",
  "proj": "Closure",
  "bug_id": "65",
  "loc": "1015-1016",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/CodeGenerator.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688067791438,
      "ESLB": 1688067811458,
      "SPVS": 1688067811458,
      "SPVAP": 1688067811463,
      "EPVAP": 1688067811464,
      "SPVATF": 1688067811464,
      "EPVATF": 1688067813472,
      "SPVATR": 1688067813472,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\\\': sb.append(backslashEscape); break;\n",
      "EPVS": 1688067813473
    },
    {
      "rank": 1,
      "SSLB": 1688067813473,
      "ESLB": 1688067833493,
      "SPVS": 1688067833493,
      "SPVAP": 1688067833495,
      "EPVAP": 1688067833496,
      "SPVATF": 1688067833496,
      "EPVATF": 1688067835504,
      "SPVATR": 1688067835504,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\\\': sb.append(\"\\\\\\\\\");\n",
      "EPVS": 1688067835505
    },
    {
      "rank": 2,
      "SSLB": 1688067835505,
      "ESLB": 1688067855525,
      "SPVS": 1688067855525,
      "SPVAP": 1688067855532,
      "EPVAP": 1688067855535,
      "SPVATF": 1688067855535,
      "EPVATF": 1688067859559,
      "SPVATR": 1688067859559,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n",
      "EPVS": 1688067859560
    },
    {
      "rank": 3,
      "SSLB": 1688067859560,
      "ESLB": 1688067879580,
      "SPVS": 1688067879580,
      "SPVAP": 1688067879586,
      "EPVAP": 1688067879588,
      "SPVATF": 1688067879588,
      "EPVATF": 1688067881596,
      "SPVATR": 1688067881596,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\\\': sb.append('\\\\'); break;\n",
      "EPVS": 1688067881598
    },
    {
      "rank": 4,
      "SSLB": 1688067881598,
      "ESLB": 1688067901614,
      "SPVS": 1688067901614,
      "SPVAP": 1688067901616,
      "EPVAP": 1688067901617,
      "SPVATF": 1688067901617,
      "EPVATF": 1688067903624,
      "SPVATR": 1688067903624,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n",
      "EPVS": 1688067903625
    },
    {
      "rank": 5,
      "SSLB": 1688067903626,
      "ESLB": 1688067923646,
      "SPVS": 1688067923646,
      "SPVAP": 1688067923649,
      "EPVAP": 1688067923652,
      "SPVATF": 1688067923652,
      "EPVATF": 1688067925667,
      "SPVATR": 1688067925667,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\\\':\n        sb.append(\"\\\\\\\\\");\n        break;\n",
      "EPVS": 1688067925668
    },
    {
      "rank": 6,
      "SSLB": 1688067925668,
      "ESLB": 1688067945689,
      "SPVS": 1688067945689,
      "SPVAP": 1688067945692,
      "EPVAP": 1688067945694,
      "SPVATF": 1688067945694,
      "EPVATF": 1688067947702,
      "SPVATR": 1688067947702,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '<':\n        sb.append(\"String_Node_Str",
      "EPVS": 1688067947703
    },
    {
      "rank": 7,
      "SSLB": 1688067947703,
      "ESLB": 1688067967724,
      "SPVS": 1688067967724,
      "SPVAP": 1688067967727,
      "EPVAP": 1688067967729,
      "SPVATF": 1688067967729,
      "EPVATF": 1688067969736,
      "SPVATR": 1688067969736,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-')) {\n            sb.append(\"",
      "EPVS": 1688067969737
    },
    {
      "rank": 8,
      "SSLB": 1688067969737,
      "ESLB": 1688067989757,
      "SPVS": 1688067989758,
      "SPVAP": 1688067989759,
      "EPVAP": 1688067989761,
      "SPVATF": 1688067989761,
      "EPVATF": 1688067991784,
      "SPVATR": 1688067991784,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\n':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\r':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\t':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '\\\\':\n        sb.append(backslashEscape);\n        break;\n      case '\\\"':\n        sb.append(doublequoteEscape);\n        break;\n      case '\\'':\n        sb.append(singlequoteEscape);\n        break;\n      case '>':\n        sb.append(\"String_Node_Str\");\n        break;\n      case '<':\n        final String END_SCRIPT",
      "EPVS": 1688067991785
    },
    {
      "rank": 9,
      "SSLB": 1688067991785,
      "ESLB": 1688068011802,
      "SPVS": 1688068011802,
      "SPVAP": 1688068011804,
      "EPVAP": 1688068011805,
      "SPVATF": 1688068011805,
      "EPVATF": 1688068013812,
      "SPVATR": 1688068013812,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':\n        if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {",
      "EPVS": 1688068013813
    }
  ],
  "SSLI": 1688059870774,
  "ESLI": 1688059900804,
  "hostname": "gros-70.nancy.grid5000.fr",
  "OAR_JOB_ID": "4214427"
}