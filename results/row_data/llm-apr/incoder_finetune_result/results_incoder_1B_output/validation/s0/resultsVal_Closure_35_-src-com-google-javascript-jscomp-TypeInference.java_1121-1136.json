{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688064976604,
      "ESLB": 1688064996624,
      "SPVS": 1688064996624,
      "SPVAP": 1688064996626,
      "EPVAP": 1688064996627,
      "SPVATF": 1688064996627,
      "EPVATF": 1688065001651,
      "SPVATR": 1688065001651,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1688065001652
    },
    {
      "rank": 1,
      "SSLB": 1688065001652,
      "ESLB": 1688065021672,
      "SPVS": 1688065021672,
      "SPVAP": 1688065021674,
      "EPVAP": 1688065021676,
      "SPVATF": 1688065021676,
      "EPVATF": 1688065026686,
      "SPVATR": 1688065026686,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1688065026687
    },
    {
      "rank": 2,
      "SSLB": 1688065026687,
      "ESLB": 1688065046707,
      "SPVS": 1688065046707,
      "SPVAP": 1688065046713,
      "EPVAP": 1688065046714,
      "SPVATF": 1688065046714,
      "EPVATF": 1688065048720,
      "SPVATR": 1688065048720,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1688065048721
    },
    {
      "rank": 3,
      "SSLB": 1688065048721,
      "ESLB": 1688065068741,
      "SPVS": 1688065068741,
      "SPVAP": 1688065068746,
      "EPVAP": 1688065068747,
      "SPVATF": 1688065068747,
      "EPVATF": 1688065073764,
      "SPVATR": 1688065073764,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1688065073765
    },
    {
      "rank": 4,
      "SSLB": 1688065073765,
      "ESLB": 1688065093785,
      "SPVS": 1688065093785,
      "SPVAP": 1688065093787,
      "EPVAP": 1688065093788,
      "SPVATF": 1688065093788,
      "EPVATF": 1688065098799,
      "SPVATR": 1688065098799,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1688065098801
    },
    {
      "rank": 5,
      "SSLB": 1688065098801,
      "ESLB": 1688065118821,
      "SPVS": 1688065118821,
      "SPVAP": 1688065118822,
      "EPVAP": 1688065118824,
      "SPVATF": 1688065118824,
      "EPVATF": 1688065123834,
      "SPVATR": 1688065123834,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1688065123835
    },
    {
      "rank": 6,
      "SSLB": 1688065123835,
      "ESLB": 1688065143856,
      "SPVS": 1688065143856,
      "SPVAP": 1688065143859,
      "EPVAP": 1688065143860,
      "SPVATF": 1688065143860,
      "EPVATF": 1688065145874,
      "SPVATR": 1688065145874,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1688065145875
    },
    {
      "rank": 7,
      "SSLB": 1688065145875,
      "ESLB": 1688065165895,
      "SPVS": 1688065165895,
      "SPVAP": 1688065165899,
      "EPVAP": 1688065165901,
      "SPVATF": 1688065165901,
      "EPVATF": 1688065170911,
      "SPVATR": 1688065170911,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1688065170912
    },
    {
      "rank": 8,
      "SSLB": 1688065170912,
      "ESLB": 1688065190933,
      "SPVS": 1688065190933,
      "SPVAP": 1688065190936,
      "EPVAP": 1688065190938,
      "SPVATF": 1688065190938,
      "EPVATF": 1688065195947,
      "SPVATR": 1688065195947,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1688065195949
    },
    {
      "rank": 9,
      "SSLB": 1688065195949,
      "ESLB": 1688065215969,
      "SPVS": 1688065215969,
      "SPVAP": 1688065215971,
      "EPVAP": 1688065215972,
      "SPVATF": 1688065215972,
      "EPVATF": 1688065218989,
      "SPVATR": 1688065218989,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1688065218991
    }
  ],
  "SSLI": 1688059870774,
  "ESLI": 1688059900804,
  "hostname": "gros-70.nancy.grid5000.fr",
  "OAR_JOB_ID": "4214427"
}