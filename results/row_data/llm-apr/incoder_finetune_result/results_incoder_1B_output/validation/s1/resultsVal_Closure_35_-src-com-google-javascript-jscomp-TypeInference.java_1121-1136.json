{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "incoder_1B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689701233243,
      "ESLB": 1689701253263,
      "SPVS": 1689701253263,
      "SPVAP": 1689701253271,
      "EPVAP": 1689701253276,
      "SPVATF": 1689701253276,
      "EPVATF": 1689701259287,
      "SPVATR": 1689701259287,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689701259288
    },
    {
      "rank": 1,
      "SSLB": 1689701259288,
      "ESLB": 1689701279308,
      "SPVS": 1689701279308,
      "SPVAP": 1689701279313,
      "EPVAP": 1689701279315,
      "SPVATF": 1689701279315,
      "EPVATF": 1689701285327,
      "SPVATR": 1689701285327,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689701285329
    },
    {
      "rank": 2,
      "SSLB": 1689701285329,
      "ESLB": 1689701305349,
      "SPVS": 1689701305349,
      "SPVAP": 1689701305373,
      "EPVAP": 1689701305381,
      "SPVATF": 1689701305381,
      "EPVATF": 1689701308417,
      "SPVATR": 1689701308417,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  inferPropertyTypesToMatchConstraint(type, constraintObj);\n",
      "EPVS": 1689701308423
    },
    {
      "rank": 3,
      "SSLB": 1689701308423,
      "ESLB": 1689701328443,
      "SPVS": 1689701328443,
      "SPVAP": 1689701328450,
      "EPVAP": 1689701328453,
      "SPVATF": 1689701328453,
      "EPVATF": 1689701336466,
      "SPVATR": 1689701336466,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n",
      "EPVS": 1689701336468
    },
    {
      "rank": 4,
      "SSLB": 1689701336468,
      "ESLB": 1689701356488,
      "SPVS": 1689701356488,
      "SPVAP": 1689701356492,
      "EPVAP": 1689701356494,
      "SPVATF": 1689701356494,
      "EPVATF": 1689701362507,
      "SPVATR": 1689701362507,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n",
      "EPVS": 1689701362509
    },
    {
      "rank": 5,
      "SSLB": 1689701362509,
      "ESLB": 1689701382529,
      "SPVS": 1689701382529,
      "SPVAP": 1689701382532,
      "EPVAP": 1689701382534,
      "SPVATF": 1689701382534,
      "EPVATF": 1689701388551,
      "SPVATR": 1689701388551,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      objType.defineInferredProperty(prop, propType, null);\n    }\n",
      "EPVS": 1689701388556
    },
    {
      "rank": 6,
      "SSLB": 1689701388556,
      "ESLB": 1689701408576,
      "SPVS": 1689701408576,
      "SPVAP": 1689701408578,
      "EPVAP": 1689701408579,
      "SPVATF": 1689701408579,
      "EPVATF": 1689701411588,
      "SPVATR": 1689701411588,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689701411590
    },
    {
      "rank": 7,
      "SSLB": 1689701411590,
      "ESLB": 1689701431610,
      "SPVS": 1689701431610,
      "SPVAP": 1689701431614,
      "EPVAP": 1689701431616,
      "SPVATF": 1689701431616,
      "EPVATF": 1689701437629,
      "SPVATR": 1689701437629,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689701437631
    },
    {
      "rank": 8,
      "SSLB": 1689701437631,
      "ESLB": 1689701457651,
      "SPVS": 1689701457651,
      "SPVAP": 1689701457658,
      "EPVAP": 1689701457665,
      "SPVATF": 1689701457665,
      "EPVATF": 1689701463693,
      "SPVATR": 1689701463693,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "  if (constraintObj!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n    }\n",
      "EPVS": 1689701463695
    },
    {
      "rank": 9,
      "SSLB": 1689701463695,
      "ESLB": 1689701483715,
      "SPVS": 1689701483715,
      "SPVAP": 1689701483718,
      "EPVAP": 1689701483719,
      "SPVATF": 1689701483719,
      "EPVATF": 1689701486728,
      "SPVATR": 1689701486728,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType!= null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n",
      "EPVS": 1689701486730
    }
  ],
  "SSLI": 1689700447767,
  "ESLI": 1689700477797,
  "hostname": "gros-47.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}