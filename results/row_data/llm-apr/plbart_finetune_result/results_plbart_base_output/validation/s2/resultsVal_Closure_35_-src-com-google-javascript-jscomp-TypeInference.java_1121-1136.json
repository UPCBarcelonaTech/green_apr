{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689712483978,
      "ESLB": 1689712503999,
      "SPVS": 1689712503999,
      "SPVAP": 1689712504001,
      "EPVAP": 1689712504002,
      "SPVATF": 1689712504002,
      "EPVATF": 1689712506009,
      "SPVATR": 1689712506009,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689712506011
    },
    {
      "rank": 1,
      "SSLB": 1689712506011,
      "ESLB": 1689712526031,
      "SPVS": 1689712526031,
      "SPVAP": 1689712526034,
      "EPVAP": 1689712526036,
      "SPVATF": 1689712526036,
      "EPVATF": 1689712529045,
      "SPVATR": 1689712529045,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689712529047
    },
    {
      "rank": 2,
      "SSLB": 1689712529047,
      "ESLB": 1689712549060,
      "SPVS": 1689712549060,
      "SPVAP": 1689712549067,
      "EPVAP": 1689712549069,
      "SPVATF": 1689712549069,
      "EPVATF": 1689712551093,
      "SPVATR": 1689712551093,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689712551094
    },
    {
      "rank": 3,
      "SSLB": 1689712551094,
      "ESLB": 1689712571104,
      "SPVS": 1689712571104,
      "SPVAP": 1689712571110,
      "EPVAP": 1689712571112,
      "SPVATF": 1689712571112,
      "EPVATF": 1689712574121,
      "SPVATR": 1689712574121,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689712574123
    },
    {
      "rank": 4,
      "SSLB": 1689712574123,
      "ESLB": 1689712594143,
      "SPVS": 1689712594143,
      "SPVAP": 1689712594149,
      "EPVAP": 1689712594151,
      "SPVATF": 1689712594151,
      "EPVATF": 1689712596159,
      "SPVATR": 1689712596159,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689712596160
    },
    {
      "rank": 5,
      "SSLB": 1689712596160,
      "ESLB": 1689712616180,
      "SPVS": 1689712616180,
      "SPVAP": 1689712616184,
      "EPVAP": 1689712616185,
      "SPVATF": 1689712616185,
      "EPVATF": 1689712618202,
      "SPVATR": 1689712618202,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689712618203
    },
    {
      "rank": 6,
      "SSLB": 1689712618203,
      "ESLB": 1689712638223,
      "SPVS": 1689712638223,
      "SPVAP": 1689712638225,
      "EPVAP": 1689712638227,
      "SPVATF": 1689712638227,
      "EPVATF": 1689712641235,
      "SPVATR": 1689712641235,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689712641237
    },
    {
      "rank": 7,
      "SSLB": 1689712641237,
      "ESLB": 1689712661257,
      "SPVS": 1689712661257,
      "SPVAP": 1689712661260,
      "EPVAP": 1689712661263,
      "SPVATF": 1689712661263,
      "EPVATF": 1689712667274,
      "SPVATR": 1689712667274,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689712667275
    },
    {
      "rank": 8,
      "SSLB": 1689712667275,
      "ESLB": 1689712687296,
      "SPVS": 1689712687296,
      "SPVAP": 1689712687297,
      "EPVAP": 1689712687300,
      "SPVATF": 1689712687300,
      "EPVATF": 1689712690310,
      "SPVATR": 1689712690310,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689712690312
    },
    {
      "rank": 9,
      "SSLB": 1689712690312,
      "ESLB": 1689712710332,
      "SPVS": 1689712710332,
      "SPVAP": 1689712710335,
      "EPVAP": 1689712710336,
      "SPVATF": 1689712710336,
      "EPVATF": 1689712716348,
      "SPVATR": 1689712716348,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1689712716349
    }
  ],
  "SSLI": 1689704319312,
  "ESLI": 1689704349342,
  "hostname": "gros-42.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}