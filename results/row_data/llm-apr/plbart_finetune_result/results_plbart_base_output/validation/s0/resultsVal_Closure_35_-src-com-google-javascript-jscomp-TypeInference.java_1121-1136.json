{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688067389096,
      "ESLB": 1688067409116,
      "SPVS": 1688067409116,
      "SPVAP": 1688067409118,
      "EPVAP": 1688067409120,
      "SPVATF": 1688067409120,
      "EPVATF": 1688067412136,
      "SPVATR": 1688067412136,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1688067412138
    },
    {
      "rank": 1,
      "SSLB": 1688067412138,
      "ESLB": 1688067432158,
      "SPVS": 1688067432158,
      "SPVAP": 1688067432160,
      "EPVAP": 1688067432161,
      "SPVATF": 1688067432161,
      "EPVATF": 1688067434169,
      "SPVATR": 1688067434169,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1688067434170
    },
    {
      "rank": 2,
      "SSLB": 1688067434170,
      "ESLB": 1688067454175,
      "SPVS": 1688067454175,
      "SPVAP": 1688067454176,
      "EPVAP": 1688067454178,
      "SPVATF": 1688067454178,
      "EPVATF": 1688067457185,
      "SPVATR": 1688067457185,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1688067457186
    },
    {
      "rank": 3,
      "SSLB": 1688067457186,
      "ESLB": 1688067477206,
      "SPVS": 1688067477206,
      "SPVAP": 1688067477209,
      "EPVAP": 1688067477211,
      "SPVATF": 1688067477211,
      "EPVATF": 1688067479222,
      "SPVATR": 1688067479222,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1688067479224
    },
    {
      "rank": 4,
      "SSLB": 1688067479224,
      "ESLB": 1688067499244,
      "SPVS": 1688067499244,
      "SPVAP": 1688067499245,
      "EPVAP": 1688067499246,
      "SPVATF": 1688067499246,
      "EPVATF": 1688067501252,
      "SPVATR": 1688067501252,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1688067501253
    },
    {
      "rank": 5,
      "SSLB": 1688067501253,
      "ESLB": 1688067521273,
      "SPVS": 1688067521273,
      "SPVAP": 1688067521275,
      "EPVAP": 1688067521277,
      "SPVATF": 1688067521277,
      "EPVATF": 1688067523284,
      "SPVATR": 1688067523284,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1688067523285
    },
    {
      "rank": 6,
      "SSLB": 1688067523285,
      "ESLB": 1688067543305,
      "SPVS": 1688067543305,
      "SPVAP": 1688067543306,
      "EPVAP": 1688067543308,
      "SPVATF": 1688067543308,
      "EPVATF": 1688067545315,
      "SPVATR": 1688067545315,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1688067545317
    },
    {
      "rank": 7,
      "SSLB": 1688067545317,
      "ESLB": 1688067565337,
      "SPVS": 1688067565337,
      "SPVAP": 1688067565338,
      "EPVAP": 1688067565340,
      "SPVATF": 1688067565340,
      "EPVATF": 1688067570350,
      "SPVATR": 1688067570350,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1688067570352
    },
    {
      "rank": 8,
      "SSLB": 1688067570352,
      "ESLB": 1688067590372,
      "SPVS": 1688067590372,
      "SPVAP": 1688067590374,
      "EPVAP": 1688067590376,
      "SPVATF": 1688067590376,
      "EPVATF": 1688067592383,
      "SPVATR": 1688067592383,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1688067592385
    },
    {
      "rank": 9,
      "SSLB": 1688067592385,
      "ESLB": 1688067612405,
      "SPVS": 1688067612405,
      "SPVAP": 1688067612407,
      "EPVAP": 1688067612408,
      "SPVATF": 1688067612408,
      "EPVATF": 1688067617419,
      "SPVATR": 1688067617419,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1688067617420
    }
  ],
  "SSLI": 1688059709800,
  "ESLI": 1688059739830,
  "hostname": "gros-65.nancy.grid5000.fr",
  "OAR_JOB_ID": "4214427"
}