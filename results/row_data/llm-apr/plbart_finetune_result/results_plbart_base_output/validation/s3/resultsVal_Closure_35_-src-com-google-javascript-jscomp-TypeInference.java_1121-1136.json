{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689747682405,
      "ESLB": 1689747702414,
      "SPVS": 1689747702414,
      "SPVAP": 1689747702416,
      "EPVAP": 1689747702417,
      "SPVATF": 1689747702417,
      "EPVATF": 1689747705426,
      "SPVATR": 1689747705426,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689747705427
    },
    {
      "rank": 1,
      "SSLB": 1689747705427,
      "ESLB": 1689747725447,
      "SPVS": 1689747725447,
      "SPVAP": 1689747725448,
      "EPVAP": 1689747725450,
      "SPVATF": 1689747725450,
      "EPVATF": 1689747727457,
      "SPVATR": 1689747727457,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689747727458
    },
    {
      "rank": 2,
      "SSLB": 1689747727458,
      "ESLB": 1689747747473,
      "SPVS": 1689747747473,
      "SPVAP": 1689747747474,
      "EPVAP": 1689747747475,
      "SPVATF": 1689747747475,
      "EPVATF": 1689747750482,
      "SPVATR": 1689747750482,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689747750484
    },
    {
      "rank": 3,
      "SSLB": 1689747750484,
      "ESLB": 1689747770500,
      "SPVS": 1689747770500,
      "SPVAP": 1689747770502,
      "EPVAP": 1689747770503,
      "SPVATF": 1689747770503,
      "EPVATF": 1689747773513,
      "SPVATR": 1689747773513,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689747773514
    },
    {
      "rank": 4,
      "SSLB": 1689747773514,
      "ESLB": 1689747793532,
      "SPVS": 1689747793532,
      "SPVAP": 1689747793533,
      "EPVAP": 1689747793534,
      "SPVATF": 1689747793534,
      "EPVATF": 1689747796542,
      "SPVATR": 1689747796542,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689747796543
    },
    {
      "rank": 5,
      "SSLB": 1689747796544,
      "ESLB": 1689747816564,
      "SPVS": 1689747816564,
      "SPVAP": 1689747816565,
      "EPVAP": 1689747816566,
      "SPVATF": 1689747816566,
      "EPVATF": 1689747818573,
      "SPVATR": 1689747818573,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689747818574
    },
    {
      "rank": 6,
      "SSLB": 1689747818574,
      "ESLB": 1689747838595,
      "SPVS": 1689747838595,
      "SPVAP": 1689747838596,
      "EPVAP": 1689747838597,
      "SPVATF": 1689747838597,
      "EPVATF": 1689747840605,
      "SPVATR": 1689747840605,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689747840607
    },
    {
      "rank": 7,
      "SSLB": 1689747840607,
      "ESLB": 1689747860624,
      "SPVS": 1689747860624,
      "SPVAP": 1689747860625,
      "EPVAP": 1689747860626,
      "SPVATF": 1689747860626,
      "EPVATF": 1689747865637,
      "SPVATR": 1689747865637,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689747865638
    },
    {
      "rank": 8,
      "SSLB": 1689747865638,
      "ESLB": 1689747885658,
      "SPVS": 1689747885658,
      "SPVAP": 1689747885659,
      "EPVAP": 1689747885661,
      "SPVATF": 1689747885661,
      "EPVATF": 1689747888669,
      "SPVATR": 1689747888669,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689747888670
    },
    {
      "rank": 9,
      "SSLB": 1689747888670,
      "ESLB": 1689747908690,
      "SPVS": 1689747908690,
      "SPVAP": 1689747908692,
      "EPVAP": 1689747908693,
      "SPVATF": 1689747908693,
      "EPVATF": 1689747913705,
      "SPVATR": 1689747913705,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1689747913706
    }
  ],
  "SSLI": 1689739773085,
  "ESLI": 1689739803115,
  "hostname": "gros-42.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}