{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689015587243,
      "ESLB": 1689015607263,
      "SPVS": 1689015607263,
      "SPVAP": 1689015607265,
      "EPVAP": 1689015607267,
      "SPVATF": 1689015607267,
      "EPVATF": 1689015609277,
      "SPVATR": 1689015609277,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689015609278
    },
    {
      "rank": 1,
      "SSLB": 1689015609278,
      "ESLB": 1689015629298,
      "SPVS": 1689015629298,
      "SPVAP": 1689015629302,
      "EPVAP": 1689015629303,
      "SPVATF": 1689015629303,
      "EPVATF": 1689015632311,
      "SPVATR": 1689015632311,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689015632313
    },
    {
      "rank": 2,
      "SSLB": 1689015632313,
      "ESLB": 1689015652333,
      "SPVS": 1689015652333,
      "SPVAP": 1689015652334,
      "EPVAP": 1689015652336,
      "SPVATF": 1689015652336,
      "EPVATF": 1689015655344,
      "SPVATR": 1689015655344,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689015655346
    },
    {
      "rank": 3,
      "SSLB": 1689015655346,
      "ESLB": 1689015675366,
      "SPVS": 1689015675366,
      "SPVAP": 1689015675368,
      "EPVAP": 1689015675369,
      "SPVATF": 1689015675369,
      "EPVATF": 1689015677391,
      "SPVATR": 1689015677391,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689015677392
    },
    {
      "rank": 4,
      "SSLB": 1689015677392,
      "ESLB": 1689015697413,
      "SPVS": 1689015697413,
      "SPVAP": 1689015697417,
      "EPVAP": 1689015697418,
      "SPVATF": 1689015697418,
      "EPVATF": 1689015699425,
      "SPVATR": 1689015699425,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689015699426
    },
    {
      "rank": 5,
      "SSLB": 1689015699426,
      "ESLB": 1689015719446,
      "SPVS": 1689015719446,
      "SPVAP": 1689015719448,
      "EPVAP": 1689015719449,
      "SPVATF": 1689015719449,
      "EPVATF": 1689015722456,
      "SPVATR": 1689015722456,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689015722458
    },
    {
      "rank": 6,
      "SSLB": 1689015722458,
      "ESLB": 1689015742478,
      "SPVS": 1689015742478,
      "SPVAP": 1689015742479,
      "EPVAP": 1689015742481,
      "SPVATF": 1689015742481,
      "EPVATF": 1689015745498,
      "SPVATR": 1689015745498,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689015745500
    },
    {
      "rank": 7,
      "SSLB": 1689015745500,
      "ESLB": 1689015765520,
      "SPVS": 1689015765520,
      "SPVAP": 1689015765521,
      "EPVAP": 1689015765522,
      "SPVATF": 1689015765522,
      "EPVATF": 1689015770533,
      "SPVATR": 1689015770533,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689015770534
    },
    {
      "rank": 8,
      "SSLB": 1689015770534,
      "ESLB": 1689015790554,
      "SPVS": 1689015790554,
      "SPVAP": 1689015790555,
      "EPVAP": 1689015790557,
      "SPVATF": 1689015790557,
      "EPVATF": 1689015793565,
      "SPVATR": 1689015793565,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689015793566
    },
    {
      "rank": 9,
      "SSLB": 1689015793566,
      "ESLB": 1689015813586,
      "SPVS": 1689015813587,
      "SPVAP": 1689015813588,
      "EPVAP": 1689015813590,
      "SPVATF": 1689015813590,
      "EPVATF": 1689015818601,
      "SPVATR": 1689015818601,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1689015818602
    }
  ],
  "SSLI": 1689010150669,
  "ESLI": 1689010180699,
  "hostname": "gros-51.nancy.grid5000.fr",
  "OAR_JOB_ID": "4228857"
}