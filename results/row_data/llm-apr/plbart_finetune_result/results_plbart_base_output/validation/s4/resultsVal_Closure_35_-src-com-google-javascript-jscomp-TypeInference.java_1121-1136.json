{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689828459986,
      "ESLB": 1689828480006,
      "SPVS": 1689828480006,
      "SPVAP": 1689828480011,
      "EPVAP": 1689828480012,
      "SPVATF": 1689828480012,
      "EPVATF": 1689828483026,
      "SPVATR": 1689828483026,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689828483027
    },
    {
      "rank": 1,
      "SSLB": 1689828483027,
      "ESLB": 1689828503046,
      "SPVS": 1689828503046,
      "SPVAP": 1689828503048,
      "EPVAP": 1689828503049,
      "SPVATF": 1689828503049,
      "EPVATF": 1689828506057,
      "SPVATR": 1689828506057,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689828506058
    },
    {
      "rank": 2,
      "SSLB": 1689828506058,
      "ESLB": 1689828526078,
      "SPVS": 1689828526078,
      "SPVAP": 1689828526080,
      "EPVAP": 1689828526081,
      "SPVATF": 1689828526081,
      "EPVATF": 1689828529089,
      "SPVATR": 1689828529089,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689828529090
    },
    {
      "rank": 3,
      "SSLB": 1689828529090,
      "ESLB": 1689828549106,
      "SPVS": 1689828549106,
      "SPVAP": 1689828549113,
      "EPVAP": 1689828549114,
      "SPVATF": 1689828549114,
      "EPVATF": 1689828551139,
      "SPVATR": 1689828551139,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689828551139
    },
    {
      "rank": 4,
      "SSLB": 1689828551139,
      "ESLB": 1689828571160,
      "SPVS": 1689828571160,
      "SPVAP": 1689828571162,
      "EPVAP": 1689828571163,
      "SPVATF": 1689828571163,
      "EPVATF": 1689828573170,
      "SPVATR": 1689828573170,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689828573171
    },
    {
      "rank": 5,
      "SSLB": 1689828573171,
      "ESLB": 1689828593192,
      "SPVS": 1689828593192,
      "SPVAP": 1689828593193,
      "EPVAP": 1689828593194,
      "SPVATF": 1689828593194,
      "EPVATF": 1689828595201,
      "SPVATR": 1689828595201,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689828595202
    },
    {
      "rank": 6,
      "SSLB": 1689828595202,
      "ESLB": 1689828615218,
      "SPVS": 1689828615218,
      "SPVAP": 1689828615220,
      "EPVAP": 1689828615221,
      "SPVATF": 1689828615221,
      "EPVATF": 1689828617244,
      "SPVATR": 1689828617244,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689828617245
    },
    {
      "rank": 7,
      "SSLB": 1689828617245,
      "ESLB": 1689828637265,
      "SPVS": 1689828637265,
      "SPVAP": 1689828637266,
      "EPVAP": 1689828637267,
      "SPVATF": 1689828637267,
      "EPVATF": 1689828642277,
      "SPVATR": 1689828642277,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689828642278
    },
    {
      "rank": 8,
      "SSLB": 1689828642278,
      "ESLB": 1689828662298,
      "SPVS": 1689828662298,
      "SPVAP": 1689828662299,
      "EPVAP": 1689828662300,
      "SPVATF": 1689828662300,
      "EPVATF": 1689828665308,
      "SPVATR": 1689828665308,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689828665309
    },
    {
      "rank": 9,
      "SSLB": 1689828665309,
      "ESLB": 1689828685329,
      "SPVS": 1689828685329,
      "SPVAP": 1689828685330,
      "EPVAP": 1689828685331,
      "SPVATF": 1689828685331,
      "EPVATF": 1689828690342,
      "SPVATR": 1689828690342,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1689828690343
    }
  ],
  "SSLI": 1689820550202,
  "ESLI": 1689820580232,
  "hostname": "gros-42.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}