{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "plbart_base_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689900995417,
      "ESLB": 1689901015437,
      "SPVS": 1689901015437,
      "SPVAP": 1689901015439,
      "EPVAP": 1689901015440,
      "SPVATF": 1689901015440,
      "EPVATF": 1689901018448,
      "SPVATR": 1689901018448,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689901018449
    },
    {
      "rank": 1,
      "SSLB": 1689901018449,
      "ESLB": 1689901038453,
      "SPVS": 1689901038453,
      "SPVAP": 1689901038454,
      "EPVAP": 1689901038455,
      "SPVATF": 1689901038455,
      "EPVATF": 1689901040461,
      "SPVATR": 1689901040461,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689901040462
    },
    {
      "rank": 2,
      "SSLB": 1689901040462,
      "ESLB": 1689901060482,
      "SPVS": 1689901060483,
      "SPVAP": 1689901060484,
      "EPVAP": 1689901060485,
      "SPVATF": 1689901060485,
      "EPVATF": 1689901062490,
      "SPVATR": 1689901062490,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689901062491
    },
    {
      "rank": 3,
      "SSLB": 1689901062491,
      "ESLB": 1689901082511,
      "SPVS": 1689901082511,
      "SPVAP": 1689901082513,
      "EPVAP": 1689901082514,
      "SPVATF": 1689901082514,
      "EPVATF": 1689901085522,
      "SPVATR": 1689901085522,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType typeToInfer = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689901085523
    },
    {
      "rank": 4,
      "SSLB": 1689901085523,
      "ESLB": 1689901105543,
      "SPVS": 1689901105543,
      "SPVAP": 1689901105545,
      "EPVAP": 1689901105546,
      "SPVATF": 1689901105546,
      "EPVATF": 1689901107552,
      "SPVATR": 1689901107552,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null);",
      "EPVS": 1689901107553
    },
    {
      "rank": 5,
      "SSLB": 1689901107553,
      "ESLB": 1689901127573,
      "SPVS": 1689901127573,
      "SPVAP": 1689901127574,
      "EPVAP": 1689901127575,
      "SPVATF": 1689901127575,
      "EPVATF": 1689901130583,
      "SPVATR": 1689901130583,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "if (constraintObj!= null) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689901130584
    },
    {
      "rank": 6,
      "SSLB": 1689901130584,
      "ESLB": 1689901150604,
      "SPVS": 1689901150604,
      "SPVAP": 1689901150605,
      "EPVAP": 1689901150606,
      "SPVATF": 1689901150606,
      "EPVATF": 1689901153615,
      "SPVATR": 1689901153615,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType constraintObjType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (constraintObj!= null && constraintObjType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "EPVS": 1689901153616
    },
    {
      "rank": 7,
      "SSLB": 1689901153616,
      "ESLB": 1689901173636,
      "SPVS": 1689901173636,
      "SPVAP": 1689901173637,
      "EPVAP": 1689901173638,
      "SPVATF": 1689901173638,
      "EPVATF": 1689901178647,
      "SPVATR": 1689901178647,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689901178648
    },
    {
      "rank": 8,
      "SSLB": 1689901178648,
      "ESLB": 1689901198665,
      "SPVS": 1689901198665,
      "SPVAP": 1689901198666,
      "EPVAP": 1689901198667,
      "SPVATF": 1689901198667,
      "EPVATF": 1689901201674,
      "SPVATR": 1689901201674,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objectType!= null) { for (String prop : objectType.getOwnPropertyNames()) { JSType typeToInfer = objectType; if (!objType.isPropertyTypeDeclared(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); }",
      "EPVS": 1689901201675
    },
    {
      "rank": 9,
      "SSLB": 1689901201675,
      "ESLB": 1689901221693,
      "SPVS": 1689901221693,
      "SPVAP": 1689901221694,
      "EPVAP": 1689901221695,
      "SPVATF": 1689901221695,
      "EPVATF": 1689901226704,
      "SPVATR": 1689901226704,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "if (constraintObj == null) { return;",
      "EPVS": 1689901226705
    }
  ],
  "SSLI": 1689893086872,
  "ESLI": 1689893116902,
  "hostname": "gros-43.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}