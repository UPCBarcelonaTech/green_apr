{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689798004344",
  "GPR[ESLB]": "1689798024364",
  "file": "Lang_39_/src/java/org/apache/commons/lang3/StringUtils.java_3676-3677",
  "input": {
    "loc": "3676-3677",
    "input": "<s> private static String replaceEach(String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive) { if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) { return text; } if (timeToLive < 0) { throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text); } int searchLength = searchList.length; int replacementLength = replacementList.length; if (searchLength != replacementLength) { throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \" + replacementLength); } boolean[] noMoreMatchesForReplIndex = new boolean[searchLength]; int textIndex = -1; int replaceIndex = -1; int tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i]); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } if (textIndex == -1) { return text; } int start = 0; int increase = 0; for (int i = 0; i < searchList.length; i++) { </s> int greater = replacementList[i].length() - searchList[i].length(); </s> if (greater > 0) { increase += 3 * greater; } } increase = Math.min(increase, text.length() / 5); StringBuilder buf = new StringBuilder(text.length() + increase); while (textIndex != -1) { for (int i = start; i < textIndex; i++) { buf.append(text.charAt(i)); } buf.append(replacementList[replaceIndex]); start = textIndex + searchList[replaceIndex].length(); textIndex = -1; replaceIndex = -1; tempIndex = -1; for (int i = 0; i < searchLength; i++) { if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) { continue; } tempIndex = text.indexOf(searchList[i], start); if (tempIndex == -1) { noMoreMatchesForReplIndex[i] = true; } else { if (textIndex == -1 || tempIndex < textIndex) { textIndex = tempIndex; replaceIndex = i; } } } } int textLength = text.length(); for (int i = start; i < textLength; i++) { buf.append(text.charAt(i)); } String result = buf.toString(); if (!repeat) { return result; } return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1); } </s> java",
    "output": []
  },
  "nvidea": "measures-nvidea-Lang_39_-src-java-org-apache-commons-lang3-StringUtils.java_3676-3677.txt",
  "OAR_JOB_ID": "1560165",
  "GPR[SSLI]": "1689796363570",
  "GPR[ESLI]": "1689796393600",
  "GPR[SPS]": "1689798024407",
  "nrTokens": 669,
  "status": "error",
  "message": "input too long:669skip",
  "GPR[EPS]": "1689798024412",
  "time": 5,
  "tokentime": 5,
  "inferencetime": 0,
  "output": []
}