{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689797109239",
  "GPR[ESLB]": "1689797129260",
  "file": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "input": {
    "loc": "557-558",
    "input": "<s> @Override public void matchConstraint(ObjectType constraintObj) { </s>  </s> if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } } </s> java",
    "output": [
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);",
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); defineInferredProperty(prop, typeToInfer, null); }",
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);",
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null);",
      "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null);",
      "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null, null);",
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop);",
      "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null, null); }",
      "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop);",
      "if (constraintObj.isRecordType()) {"
    ]
  },
  "nvidea": "measures-nvidea-Closure_33_-src-com-google-javascript-rhino-jstype-PrototypeObjectType.java_557-558.txt",
  "OAR_JOB_ID": "1560165",
  "GPR[SSLI]": "1689796363570",
  "GPR[ESLI]": "1689796393600",
  "GPR[SPS]": "1689797129299",
  "nrTokens": 127,
  "status": "ok",
  "GPR[EPS]": "1689797130118",
  "time": 819,
  "tokentime": 2,
  "inferencetime": 817,
  "output": [
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);",
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); defineInferredProperty(prop, typeToInfer, null); }",
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);",
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null);",
    "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null);",
    "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null, null);",
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop);",
    "JSType propType = constraintObj.getPropertyType(constraintObj.getPropertyName()); if (!isPropertyTypeDeclared(propType)) { defineInferredProperty(propType, null, null); }",
    "if (constraintObj.isRecordType()) { for (String prop : constraintObj.getPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop);",
    "if (constraintObj.isRecordType()) {"
  ]
}