{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689847642718",
  "GPR[ESLB]": "1689847662739",
  "file": "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94",
  "input": {
    "loc": "93-94",
    "input": "<s> private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { </s> mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); </s> } } </s> java",
    "output": [
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mocks);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(fieldInstance);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(true);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mocks, field);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInjectAll();",
      "if (mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenReturn(mocks);",
      "mockCandidateFilter.filterCandidate(mocks, field);"
    ]
  },
  "nvidea": "measures-nvidea-Mockito_28_-src-org-mockito-internal-configuration-DefaultInjectionEngine.java_93-94.txt",
  "OAR_JOB_ID": "1561512",
  "GPR[SSLI]": "1689845065326",
  "GPR[ESLI]": "1689845095356",
  "GPR[SPS]": "1689847662779",
  "nrTokens": 67,
  "status": "ok",
  "GPR[EPS]": "1689847662997",
  "time": 218,
  "tokentime": 2,
  "inferencetime": 216,
  "output": [
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mocks);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(fieldInstance);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(true);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mocks, field);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInjectAll();",
    "if (mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenReturn(mocks);",
    "mockCandidateFilter.filterCandidate(mocks, field);"
  ]
}