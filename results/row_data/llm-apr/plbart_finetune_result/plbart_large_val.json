{
  "config": "finetune",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "<s> public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } </s> boolean removed = markers.remove(marker); </s> if (removed && notify) { fireChangeEvent(); } return removed; } </s> java",
      "output": [
        {
          "patch": "boolean removed = markers.remove(index);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.markers.remove(marker);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.backgroundDomainMarkers.remove(new Integer(index));",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.backgroundDomainMarkers.remove(marker);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.domainMarkers.remove(Integer.valueOf(index));",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.domainMarkers.remove(marker);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = markers.remove(new Marker(index, marker, layer));",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.markers.remove(index);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.domainMarkers.remove(index, marker);",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean removed = this.backgroundDomainMarkers.remove(index, marker);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns != null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null && ns.onlyAffectsClassDef) { </s> JsName name = getName(ns.name, false); </s> if (name != null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } } </s> java",
      "output": [
        {
          "patch": "JsName name = getName(ns.name);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JsName name = getExternalName(ns.name, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JsName name = getName(ns.name, true);",
          "correctness": "plausible"
        },
        {
          "patch": "String name = getName(ns.name, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "jsName = getName(ns.name, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JsName name = getExternalName(ns.name);",
          "correctness": "uncompilable"
        },
        {
          "patch": "xPathName = getName(ns.name, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "data JsName name = getName(ns.name);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JsName name = ns.name;",
          "correctness": "uncompilable"
        },
        {
          "patch": "name = getName(ns.name, false));",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "<s> @Override public JSType getLeastSupertype(JSType that) { </s> if (!that.isRecordType()) { return super.getLeastSupertype(that); } </s> RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); } </s> java",
      "output": [
        {
          "patch": "return super.getLeastSupertype(that);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Preconditions.checkState(that.isRecordType(), \"String_Node_Str\", that);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return that.isRecordType()? super.getLeastSupertype(that) : null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Preconditions.checkState(!that.isRecordType(), \"String_Node_Str\", that);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return that.isRecordType()? super.getLeastSupertype(that) : that.toMaybeRecordType();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return that.isRecordType()? super.getLeastSupertype(that) : that;",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType thatType = that.toMaybeRecordType(); if (!thatType.isRecordType()) { return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "return that.toMaybeRecordType().getLeastSupertype(this);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return that.toMaybeRecordType().getLeastSupertype(registry);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType other = that.toMaybeRecordType();",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; </s> case '\\r': sb.append(\"\\\\r\"); break; </s> case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "output": [
        {
          "patch": "case '\\n': sb.append('\\n'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append('/'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append(\"String_Node_Str\"); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append('/'); break; case '\\r': sb.append('/');",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append(\"\\\\n\"); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append('\\\\'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': case '\\r': sb.append(\"\\\\r'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append(\\\\n); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append(\"\\\\n'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append((\"\\\\n\"); break;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "<s> private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); </s> if(Character.isWhitespace(c)) { if(!wasWhite) { wasWhite= true; regex.append(\"\\\\s*+\"); } continue; } </s> wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; } </s> java",
      "output": [
        {
          "patch": "if (!Character.isWhitespace(c)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean wasWhite =!Character.isWhitespace(c);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!Character.isWhitespace(c)) continue;",
          "correctness": "wrong"
        },
        {
          "patch": "if (!wasWhite && c!= '\\'') {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!Character.isWhitespace(c)) { continue; }",
          "correctness": "wrong"
        },
        {
          "patch": "if (c == '\\'') { continue; }",
          "correctness": "wrong"
        },
        {
          "patch": "if (!wasWhite && c!= '\\'') continue;",
          "correctness": "wrong"
        },
        {
          "patch": "c = Character.toLowerCase(c);",
          "correctness": "wrong"
        },
        {
          "patch": "if (!Character.isWhitespace(c))",
          "correctness": "plausible"
        },
        {
          "patch": "c = Character.isWhitespace(c);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "<s> public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { </s> calendar = (Calendar) calendar.clone(); </s> calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); } </s> java",
      "output": [
        {
          "patch": "calendar = (Calendar) calendar.clone(getTimeZone());",
          "correctness": "uncompilable"
        },
        {
          "patch": "Calendar calendar = (Calendar) calendar.clone();",
          "correctness": "uncompilable"
        },
        {
          "patch": "calendar = calendar.clone();",
          "correctness": "uncompilable"
        },
        {
          "patch": "calendar = (Calendar) calendar.clone(getLocale());",
          "correctness": "uncompilable"
        },
        {
          "patch": "calendar = (Calendar) mCalendar.clone();",
          "correctness": "uncompilable"
        },
        {
          "patch": "calendar = (Calendar) calendar.clone(getZone());",
          "correctness": "uncompilable"
        },
        {
          "patch": "x.Calendar calendar = (Calendar) calendar.clone();",
          "correctness": "uncompilable"
        },
        {
          "patch": "calendar = (Calendar) calendar.clone(mTimeZone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Calendar calendarCopy = (Calendar) calendar.clone();",
          "correctness": "wrong"
        },
        {
          "patch": "(Calendar) calendar.clone();",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "<s> public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; </s> chiSquare += residual * residual / residualsWeights[i]; </s> } return chiSquare; } </s> java",
      "output": [
        {
          "patch": "chiSquare += residual * residual / residualWeights[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualWeights[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualsWeights[i];",
          "correctness": "wrong"
        },
        {
          "patch": "chiSquare += residual * residual / rowWeights[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualsWeight[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualWeight[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / weight[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualsWeights[i][0];",
          "correctness": "uncompilable"
        },
        {
          "patch": "chiSquare += residual * residual / residualsWeights[i];",
          "correctness": "wrong"
        },
        {
          "patch": "chiSquare += residual * residual / getResidue(i);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "<s> public static double distance(int[] p1, int[] p2) { </s> int sum = 0; </s> for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); } </s> java",
      "output": [
        {
          "patch": "double sum = 0;",
          "correctness": "wrong"
        },
        {
          "patch": "double sum = 0d;",
          "correctness": "wrong"
        },
        {
          "patch": "float sum = 0f;",
          "correctness": "wrong"
        },
        {
          "patch": "double sum = 0.0;",
          "correctness": "wrong"
        },
        {
          "patch": "float sum = 0;",
          "correctness": "wrong"
        },
        {
          "patch": "int sum = 1;",
          "correctness": "wrong"
        },
        {
          "patch": "double sum = 0D;",
          "correctness": "wrong"
        },
        {
          "patch": "float sum = 0F;",
          "correctness": "wrong"
        },
        {
          "patch": "int sum = 0;",
          "correctness": "wrong"
        },
        {
          "patch": "double sum = 0l;",
          "correctness": "wrong"
        }
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "<s> public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); </s> final BigDecimal[] out = new BigDecimal[v.length]; </s> for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } </s> java",
      "output": [
        {
          "patch": "final BigDecimal[] out = new BigDecimal[nRows];",
          "correctness": "plausible"
        },
        {
          "patch": "BigDecimal[] out = new BigDecimal[v.length];",
          "correctness": "wrong"
        },
        {
          "patch": "final int[] out = new int[v.length];",
          "correctness": "uncompilable"
        },
        {
          "patch": "x.Decimal[] out = new BigDecimal[v.length];",
          "correctness": "uncompilable"
        },
        {
          "patch": "final BigDecimal[] out = new BigDecimal[nCols];",
          "correctness": "wrong"
        },
        {
          "patch": "this.out = new BigDecimal[v.length];",
          "correctness": "uncompilable"
        },
        {
          "patch": "final BigDecimal[] out = new BigDecimal[nColumns];",
          "correctness": "uncompilable"
        },
        {
          "patch": "BigDecimal[] out = new BigDecimal[nRows];",
          "correctness": "plausible"
        },
        {
          "patch": "x = new BigDecimal(v.length);",
          "correctness": "uncompilable"
        },
        {
          "patch": "x = new BigDecimal[v.length];",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "<s> public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); </s> if (dataset != null) { </s> return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } return result; } </s> java",
      "output": [
        {
          "patch": "if (dataset == null) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (dataset == null || dataset.getRowCount() <= 0) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (dataset == null || dataset.getRowCount() == 0) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (dataset == null || dataset.getRowCount() <= 1) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (dataset!= null && dataset.getRowCount() > 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (dataset!= null && dataset.getRowCount() == 0) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (dataset == null || index >= dataset.getRowCount()) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (dataset!= null && dataset.getRowCount()!= 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (dataset!= null &&!dataset.isVisible()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (dataset!= null &&!dataset.isCategory()) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "<s> public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone(); </s> copy.data = new java.util.ArrayList(); </s> if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; } </s> java",
      "output": [
        {
          "patch": "copy.data = new ArrayList();",
          "correctness": "uncompilable"
        },
        {
          "patch": "copy.data = new ArrayList<TimeSeriesDataItem>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "x.util.ArrayList copy.data = new.util.ArrayList();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(TimeSeries) copy.data = new.util.ArrayList();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(TimeSeries) clone).data = new.util.ArrayList();",
          "correctness": "uncompilable"
        },
        {
          "patch": "copy.data = new.util.List<TimeSeriesDataItem>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "copy.data = new ArrayList(new.util.ArrayList());",
          "correctness": "uncompilable"
        },
        {
          "patch": "this.data = new.util.ArrayList();",
          "correctness": "uncompilable"
        },
        {
          "patch": "copy.data = new.util.List(new ArrayList());",
          "correctness": "uncompilable"
        },
        {
          "patch": "copy.data = new ArrayList(new.util.UUIDs());",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "<s> public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } </s> return super.equals(obj); </s> } </s> java",
      "output": [
        {
          "patch": "return this.getClass() == obj.getClass() && super.equals(obj);",
          "correctness": "wrong"
        },
        {
          "patch": "return super.equals(obj) && getClass()!= obj.getClass();",
          "correctness": "wrong"
        },
        {
          "patch": "return obj!= null && super.equals(obj);",
          "correctness": "wrong"
        },
        {
          "patch": "return super.equals(obj) && obj.getClass()!= getClass();",
          "correctness": "wrong"
        },
        {
          "patch": "return super.equals(obj) && obj.getClass() == getClass();",
          "correctness": "wrong"
        },
        {
          "patch": "return obj == this || super.equals(obj);",
          "correctness": "wrong"
        },
        {
          "patch": "return super.equals(o);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return obj == this;",
          "correctness": "wrong"
        },
        {
          "patch": "return true;",
          "correctness": "wrong"
        },
        {
          "patch": "return false;",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "<s> public Week(Date time, TimeZone zone) { </s> this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()); </s> } </s> java",
      "output": [
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, timeZone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, null);",
          "correctness": "wrong"
        },
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, defaultTimeZone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, locale);",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getTime());",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, TimeZone.getDefault(), Locale.getDefault());",
          "correctness": "plausible"
        },
        {
          "patch": "this(time, zone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, TimeZone.getDefault());",
          "correctness": "uncompilable"
        },
        {
          "patch": "this(time, time.getTimeZone());",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "<s> public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null 'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; } </s> if (endIndex < 0) { </s> emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } } </s> java",
      "output": [
        {
          "patch": "if (endIndex < 0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (endIndex <= 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex < 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex < startIndex) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (endIndex < 0 || endIndex - startIndex < 0) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (endIndex < endIndex) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex < 0 || endIndex - startIndex < 1) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex < -1) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex >= 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (endIndex > 0) {",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "<s> public String generateToolTipFragment(String toolTipText) { </s> return \" title=\\\"\" + toolTipText </s> + \"\\\" alt=\\\"\\\"\"; } </s> java",
      "output": [
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\\''\\\" alt=\\\"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\\'' + \"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"title=\\\"\" + toolTipText + '\\''\\\" alt=\\\"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"title=\\\"\" + toolTipText + '\"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\\''';",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\\''\\\"\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \" title=\\\"\" + toolTipText + '\\''');",
          "correctness": "uncompilable"
        },
        {
          "patch": "return toolTipText;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "<s> public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); </s> PathIterator iterator2 = p1.getPathIterator(null); </s> double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } </s> java",
      "output": [
        {
          "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
          "correctness": "plausible"
        },
        {
          "patch": "PathIterator iterator2 = p1.getPathIterator(p2.getPathLength());",
          "correctness": "uncompilable"
        },
        {
          "patch": "GeneralPathIterator iterator2 = p1.getPathIterator(null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "GeneralPathIterator iterator2 = p2.getPathIterator(null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "PathIterator iterator2 = p1.getPathIterator(null, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "PathIterator iterator2 = p1.getPathIterator(null, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "PathIterator iterator2 = p1.getPathIterator(p2.getRoot());",
          "correctness": "uncompilable"
        },
        {
          "patch": "PathIterator<GeneralPath> iterator2 = p1.getPathIterator(null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "PathIterator iterator2 = p1.getPathIterator(p2.getPathDirection());",
          "correctness": "uncompilable"
        },
        {
          "patch": "data PathIterator iterator2 = p2.getPathIterator(null);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "<s> public MultiplePiePlot(CategoryDataset dataset) { super(); </s> this.dataset = dataset; </s> PiePlot piePlot = new PiePlot(null); this.pieChart = new JFreeChart(piePlot); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_COLUMN; this.pieChart.setBackgroundPaint(null); TextTitle seriesTitle = new TextTitle(\"Series Title\", new Font(\"SansSerif\", Font.BOLD, 12)); seriesTitle.setPosition(RectangleEdge.BOTTOM); this.pieChart.setTitle(seriesTitle); this.aggregatedItemsKey = \"Other\"; this.aggregatedItemsPaint = Color.lightGray; this.sectionPaints = new HashMap(); } </s> java",
      "output": [
        {
          "patch": "this.dataset = dataset == null? null : dataset;",
          "correctness": "wrong"
        },
        {
          "patch": "this.dataset = (MultiplePiePlot) dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "this.dataset = (MultiplePieDataset) dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (dataset!= null) this.dataset = dataset;",
          "correctness": "wrong"
        },
        {
          "patch": "this.dataset = dataset == null? dataset : dataset;",
          "correctness": "wrong"
        },
        {
          "patch": "this.dataProvider = dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "this.data = dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "this.dataSet = dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "this.multiplePiePlot.dataset = dataset;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(MultiplePiePlot) dataset).setShowOnDraw(true);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "<s> public Object clone() throws CloneNotSupportedException { </s> Object clone = createCopy(0, getItemCount() - 1); </s> return clone; } </s> java",
      "output": [
        {
          "patch": "Object clone = createCopy(0, getItemCount());",
          "correctness": "wrong"
        },
        {
          "patch": "final Object clone = createCopy(0, getItemCount() - 1);",
          "correctness": "wrong"
        },
        {
          "patch": "Object clone = createCopy(0, getItemCount() - 1);",
          "correctness": "wrong"
        },
        {
          "patch": "Object clone = createCopy(0, super.get getItemCount() - 1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Object clone = createCopy(0, super.getCount() - 1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int length = getItemCount(); Object clone = createCopy(0, length);",
          "correctness": "wrong"
        },
        {
          "patch": "Object clone = super.clone();",
          "correctness": "wrong"
        },
        {
          "patch": "Object clone = createCopy(0, getItemCount() - 1L);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Object clone = createCopy(0, super.getCount());",
          "correctness": "uncompilable"
        },
        {
          "patch": "Object clone = createCopy(0, length);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "<s> public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { </s> super(paint, stroke, paint, stroke, alpha); </s> this.value = value; } </s> java",
      "output": [
        {
          "patch": "super.init(paint, stroke, paint, stroke, alpha);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, fillAlpha);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super.set(paint, stroke, paint, stroke, alpha);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, scale);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha);",
          "correctness": "wrong"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, outlinePaint);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, composite);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, joinStyle);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, translation * 1000);",
          "correctness": "uncompilable"
        },
        {
          "patch": "super(paint, stroke, paint, stroke, alpha, fillPaint);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "<s> public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); </s> int g = (int) ((value - this.lowerBound) / (this.upperBound </s> - this.lowerBound) * 255.0); return new Color(g, g, g); } </s> java",
      "output": [
        {
          "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) Math.ceil((value - this.lowerBound) / (this.upperBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) Math.floor((value - this.lowerBound) / (this.upperBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound - v));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) Math.round((value - this.lowerBound) / (this.upperBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) ((value - this.lowerBound) / (this.upperBound - v));",
          "correctness": "uncompilable"
        },
        {
          "patch": "float g = (float) ((value - this.lowerBound) / (this.upperBound - this.lowerBound));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int g = (int) ((value - this.lowerBound) / this.upperBound);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "<s> private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); </s> StringBuffer buff = new StringBuffer(); </s> while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } } </s> java",
      "output": []
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); </s> pos = findWrapPos(text, width, nextLineTabStop); </s> if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "output": []
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "<s> private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } </s> if (option.hasArg() && (option.getArgName() != null)) </s> { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } } </s> java",
      "output": []
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { </s> throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\"); </s> } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "output": []
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { </s> nextLineTabStop = width - 1; </s> } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "output": []
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "<s> protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { </s> break; </s> } cmd.addOption(opt); } } } </s> java",
      "output": []
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "<s> protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width; </s> while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } </s> return pos == text.length() ? -1 : pos; } </s> java",
      "output": []
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "<s> @SuppressWarnings(\"unchecked\") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { </s> return null; </s> } } </s> java",
      "output": []
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "<s> private void removeUnreferencedFunctionArgs(Scope fnScope) { </s>  </s> Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } </s> java",
      "output": [
        {
          "patch": "removeUnreferencedArgs(fnScope, referenced);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnusedArgs(fnScope, referenced);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnreferencedArguments(fnScope, referenced);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnreferencedFunctionArgs(fnScope);",
          "correctness": "wrong"
        },
        {
          "patch": "removeUnreferencedFunctions(fnScope, referenced);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnusedArgs(fnScope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "collectReferences(fnScope, referenced);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnreferencedArguments(fnScope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnusedUnreferencedArgs(fnScope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "removeUnreferencedArgs(fnScope);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "<s> private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } </s>  </s> String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; } </s> java",
      "output": [
        {
          "patch": "Node val = ref.getAssignedValue(); if (val == null) { continue; } for (Node child : val.getFirstChild()) { if (child.isGetterDef() || child.isSetterDef()) { return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Node val = ref.getAssignedValue(); if (val == null) { continue; } for (Node child : val.getFirstChild()) { if (child.isGetterDef() || child.isSetterDef()) { return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (parent.getLastChild().isGetterDef() || parent.getLastChild().isSetterDef()) { validProperties.add(parent.getLastChild().getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "Node prop = parent.getLastChild(); if (NodeUtil.isVarOrExprLhs(prop, gramps)) { validProperties.add(prop.getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!NodeUtil.isVarOrExprLitKey(parent)) { validProperties.add(parent.getLastChild().getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "propNames.add(parent.getLastChild().getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!NodeUtil.isVarOrExprLitKey(parent)) { validProperties.add(parent.getLastChild().getString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (NodeUtil.isVarOrExprLitKey(parent, gramps)) { validProperties.add(parent.getLastChild().getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!NodeUtil.isVarOrExprLitKey(parent) &&!NodeUtil.isObjectLitKey(parent)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!NodeUtil.isVarOrExprLitKey(parent)) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "<s> static boolean mayBeString(Node n, boolean recurse) { if (recurse) { </s> return allResultsMatch(n, MAY_BE_STRING_PREDICATE); </s> } else { return mayBeStringHelper(n); } } </s> java",
      "output": [
        {
          "patch": "return allResultsMatch(n, mayBeStringPreDICATE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, STRING_PREDICATE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return recurse(n, MAY_BE_STRING_PREDICATE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, MatchType.STRING_PREDICATE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, mayBeStringPredicate);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, MAY_BE_STRING_MATCH);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, mayBeStringPredicates);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return mayBeStringHelper(n);",
          "correctness": "plausible"
        },
        {
          "patch": "return allResultsMatch(n, MAY_BE_STRING);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return allResultsMatch(n, MatchType.STRING);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "<s> private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\"); </s> } else if (n.getJSType() != null && parent.isAssign()) { return; </s> } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); } </s> java",
      "output": [
        {
          "patch": "} else if (n.getJSType()!= null) { JSType jsType = getJSType(n.getFirstChild()); if (jsType!= null && parent.isAssign()) { return; }",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (n.getJSType()!= null) { JSType jsType = getJSType(n); if (jsType == null ||!jsType.isAssign()) { return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (n.getJSType()!= null) { JSType jsType = getJSType(n); if (jsType!= null && parent.isAssign()) { return; }",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (n.getJSType()!= null) { if (parent.isAssign()) { return; }",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (n.getJSType() == null || parent.isAssign()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"String_Node_Str\");",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (n.getJSType()!= null && parent.isAssignOrProperty()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (n.getJSType()!= null && n.getJSType().isAssign()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} if (n.getJSType()!= null && parent.isAssign()) {",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (n.getJSType()!= null && parent.isAssign() &&!n.isGetProp()) { return;",
          "correctness": "plausible"
        },
        {
          "patch": "} else {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "<s> private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext() != null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { </s> cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); </s> } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling != null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } } </s> java",
      "output": [
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, catchChain, finallyNode);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, catchedNode);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());",
          "correctness": "wrong"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getParent());",
          "correctness": "wrong"
        },
        {
          "patch": "return cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, catchNode);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cfa.createEdge(fromNode, Branch.UNCOND, catchBlock, finallyNode);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "<s> @Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; } </s>  </s> for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; } </s> java",
      "output": [
        {
          "patch": "ControlFlowGraph.markNodeForCreation(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.checkNode(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.propagate(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.checkForDeadCode(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.invalidateNode(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.markStart(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.propagate(n, this);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ControlFlowGraph.checkNode(n, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return apply(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "<s> private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext(); </s> if (value != null) { </s> Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n; } </s> java",
      "output": [
        {
          "patch": "if (value!= null &&!value.isStringKey()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null && value.isStringKey()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.getString().equals(\"String_Node_Str\")) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.isGetProp()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.isName()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null && value.getParent()!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.isString()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.isQualifiedName()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value!= null &&!value.getString().equals(\"String\")) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (value.isStringKey()) {",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "<s> @Override public void matchConstraint(ObjectType constraintObj) { </s>  </s> if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } } </s> java",
      "output": [
        {
          "patch": "JSType propertyType = getPropertyType(constraintObj); if (propertyType == null) { propertyType = getNativeType(JSTypeNative.VOID_TYPE); } defineInferredProperty(constraintObj, propertyType, null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType propType = constraintObj.getPropertyType(JSTypeNative.VOID_TYPE); if (propType == null) { propType = getNativeType(JSTypeNative.VOID_TYPE); } defineInferredProperty(propType, null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType propType = constraintObj.getPropertyType(JSTypeNative.VOID_TYPE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(getRecordType(constraintObj));",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType typeToInfer = JSType.VOID_TYPE;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (constraintObj.isRecordType() || constraintObj.isEnumType()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (isRecordType(constraintObj)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType propertyType = getPropertyType(constraintObj);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType propertyType = propertyTypeFromType(constraintObj);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (constraintObj!= null) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "<s> private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); </s> if (constraintObj != null && constraintObj.isRecordType()) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType != null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); } } } </s> } } </s> java",
      "output": [
        {
          "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null) { for (String prop : constraintObj.getPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType!= null && constraintObj!= null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType == null) { return;",
          "correctness": "wrong"
        },
        {
          "patch": "if (constraintObj == null || constraintObj.isRecordType()) { return;",
          "correctness": "wrong"
        },
        {
          "patch": "if (type == null || constraintObj == null) { return;",
          "correctness": "wrong"
        },
        {
          "patch": "if (constraintObj == null) { return;",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "<s> private boolean canInline( Reference declaration, Reference initialization, Reference reference) { if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; } if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false; } if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; } </s> } </s> } return canMoveAggressively(value) || canMoveModerately(initialization, reference); } </s> java",
      "output": [
        {
          "patch": "} else { return canMoveAggressively(value) || canMoveModerately(initialization, reference); }",
          "correctness": "wrong"
        },
        {
          "patch": "} else { return canMoveAggressively(value) || canMoveModerately(initialization, reference);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}; return canMoveAggressively(value) || canMoveModerately(initialization, reference);",
          "correctness": "wrong"
        },
        {
          "patch": "} else { return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "}; return canMoveAggressively(value) || canMoveModerately(initialization, reference); } else { return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (declaration.getBasicBlock()!= initialization.getBasicBlock()) { return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "} else { return canMoveAggressively(value); }",
          "correctness": "wrong"
        },
        {
          "patch": "} else { return canMoveAggressively(value);",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else return false;",
          "correctness": "wrong"
        },
        {
          "patch": "});",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "<s> void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); </s> if (x < 0 && prev == '-') { </s> add(\" \"); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } } </s> java",
      "output": [
        {
          "patch": "if (x < 0 && prev == PLUS_SIGN) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (x < 0 && prev == PLUS) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (x < 0 || prev == '-') {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x < 0 && prev == '+' || prev == '-') {",
          "correctness": "plausible"
        },
        {
          "patch": "if (x < 0 && prev == '+') {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x < 0 && prev == '-' &&!NegativeZero) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (x < 0 && prev == '-' &&!negativeZero) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x < 0 && prev == '-') {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x < 0 && prev == '-' && sign!= PLUS) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (x < 0 && prev == '-')",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "<s> static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } </s> return len > 0; </s> } </s> java",
      "output": [
        {
          "patch": "return len >= 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len > 0 && s.length() > 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len > 0 &&!isBlank(s);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return len > 0 &&!isDecimal(s);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return len > 0 && len < 2;",
          "correctness": "wrong"
        },
        {
          "patch": "return len < 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len == 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len <= 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len > 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return len!= 0;",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "<s> private static boolean isReduceableFunctionExpression(Node n) { </s> return NodeUtil.isFunctionExpression(n); </s> } </s> java",
      "output": [
        {
          "patch": "return NodeUtil.isFunctionExpression(n, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isFunctionExpression(n, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isReduceableFunctionExpression(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isFunctionExpression(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isFunctionExpression(n, false, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "data return NodeUtil.isFunctionExpression(n, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isFunctionExpression(n.getParent());",
          "correctness": "wrong"
        },
        {
          "patch": "return NodeUtil.isFunctionExpression(n, false, false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isFunctionCallExpression(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.isFunctionStatement(n);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "<s> private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); </s> if (target != null) { </s> className = target.getString(); } } } } return className; } </s> java",
      "output": [
        {
          "patch": "if (target!= null && target.isStringKey()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (target!= null && target.isName()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (target!= null && target.isGetProp()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (target!= null && target.hasChildren()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (target!= null && target.getParent()!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (target!= null && target.getString()!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (target!= null && target.isQualifiedName()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (target!= null && target.isString()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (target.isStringKey()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (target.isName()) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "<s> public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); } </s> if (options.checkGlobalThisLevel.isOn()) { </s> options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); } if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) { options.setWarningLevel( DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR); } List<WarningsGuard> guards = Lists.newArrayList(); guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups())); guards.add(options.getWarningsGuard()); ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards); if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) { composedGuards.addGuard(new DiagnosticGroupWarningsGuard( DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF)); } this.warningsGuard = composedGuards; } </s> java",
      "output": [
        {
          "patch": "if (options.checkGlobalThisLevel!= null && options.checkGlobalThisLevel.isOn()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() && options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() && options.getLanguageIn()!= LanguageMode.ECMASCRIPT5_STRICT) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() && options.getLanguageIn() == LanguageMode.ECMASCRIPT5) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (!options.checkGlobalThisLevel.isOn()) {",
          "correctness": "wrong"
        },
        {
          "patch": "data if (options.checkGlobalThisLevel!= null && options.checkGlobalThisLevel.isOn()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": ". if (options.checkGlobalThisLevel!= null && options.checkGlobalThisLevel.isOn()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() && options.checkGlobalThisLevel!= CheckLevel.OFF) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (options.checkGlobalThisLevel.isOn() && options.getLanguageIn()!= LanguageMode.ECMASCRIPT5) {",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "<s> private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) </s> && 0 <= charno && charno < sourceExcerpt.length()) { </s> for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); } </s> java",
      "output": [
        {
          "patch": "if (charno < sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno <= 0 && charno < sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno >= 0 && charno < sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno > 0 && charno < sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno < 0 || charno > sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno < 0 || charno >= sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (charno < sourceExcerpt.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno < 0) { b.append(\"String_Node_Str\"); } else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno < 0) { b.append(' '); } else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (charno < 0) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { </s> case '\\0': sb.append(\"\\\\0\"); break; </s> case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "output": [
        {
          "patch": "case '\\t': sb.append(backslashEscape); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append('\\n'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\t': sb.append('\\t'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\t': sb.append(\\\\t); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\''': sb.append('\\'''); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\'': sb.append('/'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\b': sb.append('\\b'); break;",
          "correctness": "wrong"
        },
        {
          "patch": "case '\\''': sb.append('/'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "case '\\n': sb.append('/'); break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "x1f;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "<s> private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP </s> ) { </s> boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; } </s> java",
      "output": [
        {
          "patch": "boolean isChainedProperty = n.getFirstChild().getType() == Token.PROP; if (isChainedProperty) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isChainedProperty = n.getFirstChild().getType() == Token.PROP; if (!isChainedProperty) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (!isChainedProperty) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n.isGetProp()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Node parent = n.getFirstChild(); if (parent!= null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n.getFirstChild().getType() == Token.NEW) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n.getFirstChild().isGetProp()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Node parent = n.getParent(); if (parent!= null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!n.isGetProp()) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "<s> private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType != null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters != null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, </s> jsDocParameter.getJSType(), true); </s> jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } } </s> java",
      "output": [
        {
          "patch": "JSType jsType = jsDocParameter.getJSType(); if (jsType!= null) { jsDocParameter.setType(jsType, true); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "jsDocParameter.setTypeI(true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType jsDocType = jsDocParameter.getJSType(); if (jsDocType!= null) { jsDocParameter.setType(jsType, true); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "declareSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType jsDocType = jsDocParameter.getJSType(); if (jsDocType!= null) { jsDocParameter.setType(jsDocType); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType jsDocType = jsDocParameter.getJSType(); if (jsDocType!= null) { jsDocType.declaredType = true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType jsDocType = jsDocParameter.getJSType(); if (jsDocType == null) { jsDocType = UNKNOWN; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType jsDocType = jsDocParameter.getJSType(); if (jsDocType == null) { jsDocType = getNativeType(functionNode, true); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "jsDocParameter.setTypeI(functionType, true);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { </s> if (c > 0x1f && c <= 0x7f) { </s> sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "output": [
        {
          "patch": "if (c >= 0x1f && c <= 0x7f) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c > 0x1f && c <= 0x7f && c!= '\\0') {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c > 0x1f && c < 0x7f) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (c > 0x1f && c <= 0x7e) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (c > 0x1f && c <= 0x7f && c!= '\\\\') {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c > 0x1f && c <= 0x7f) {",
          "correctness": "wrong"
        },
        {
          "patch": "if ((c > 0x1f) && (c <= 0x7f)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c <= 0x1f) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c > 0x1f) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (c <= 0x7f) {",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "<s> public final boolean isEmptyType() { </s> return isNoType() || isNoObjectType() || isNoResolvedType(); </s> } </s> java",
      "output": [
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isAllType();",
          "correctness": "wrong"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isNoMethod();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isNoRawType();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isNoLocalType();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isNoArrayType();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isNoWildcardType();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType() || isPrimitive();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isNoType() || isNoObjectType() || isNoResolvedType();",
          "correctness": "wrong"
        },
        {
          "patch": "return isNoType() || isNoObjectType();",
          "correctness": "wrong"
        },
        {
          "patch": "(NoType) || (NoType) || isNoResolvedType();",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "<s> @Override public int parseArguments(Parameters params) throws CmdLineException { </s> String param = params.getParameter(0); </s> if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } } </s> java",
      "output": [
        {
          "patch": "String param = null; try { param = params.getParameter(0); } catch (Exception e) { }",
          "correctness": "plausible"
        },
        {
          "patch": "String param = null; try { param = params.getParameter(0); } catch (IllegalArgumentException e) { }",
          "correctness": "wrong"
        },
        {
          "patch": "String param = null; if (params.hasParameter(0)) { param = params.getParameter(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "String param = null; try { param = params.getParameter(0); } catch (RuntimeException e) { }",
          "correctness": "wrong"
        },
        {
          "patch": "String param = null; try { param = params.getParameter(0); } catch (CmdLineException e) {}",
          "correctness": "plausible"
        },
        {
          "patch": "String param = null; if (params!= null) { param = params.getParameter(0); }",
          "correctness": "wrong"
        },
        {
          "patch": "final String param = params.getParameter(0);",
          "correctness": "wrong"
        },
        {
          "patch": "String param = params.get(0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String param = getSafeParameter(params, 0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String param = params.getParameters().getParameter(0);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "<s> static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW: </s> return true; </s> case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } } </s> java",
      "output": [
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "plausible"
        },
        {
          "patch": "case Token.NEW: return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break; case Token.NEW: break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return value.getParent()!= null;",
          "correctness": "wrong"
        },
        {
          "patch": "return locals.apply(value);",
          "correctness": "plausible"
        },
        {
          "patch": "{ return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "break; default: break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return value.isNew();",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "<s> void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition != null && explicitNode != null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else { </s> int indexOfDot = namespace.indexOf('.'); </s> if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule) .addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode != null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } } </s> java",
      "output": [
        {
          "patch": "int indexOfDot = namespace.indexOf('.');",
          "correctness": "wrong"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.') + 1;",
          "correctness": "wrong"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', namespace.length());",
          "correctness": "plausible"
        },
        {
          "patch": "int indexOfDot = namespace.lastIndexOf('.');",
          "correctness": "plausible"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', level);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf(File.pathSeparator);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', 1);",
          "correctness": "wrong"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', indexOfNamespaceSeparator);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int indexOfDot = namespace.indexOf('.', indexOfNamespace + 1);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "<s> private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH: </s> result = lvalInt >>> rvalInt; </s> break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; } </s> java",
      "output": [
        {
          "patch": "result = lvalInt >>> rvalInt - 1;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt >>> rvalInt;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt >>> rvalInt + 1;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt & rvalInt;",
          "correctness": "wrong"
        },
        {
          "patch": "x = lvalInt >>> rvalInt;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result = rvalInt >>> lvalInt;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt << rvalInt;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt >> rvalInt;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt >>> rvalInt * 2;",
          "correctness": "wrong"
        },
        {
          "patch": "result = lvalInt >>> rvalInt * 10;",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "<s> JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build(); </s> if (result != null) { </s> return result; } else if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.NO_OBJECT_TYPE); } else { return getNativeType(JSTypeNative.NO_TYPE); } } </s> java",
      "output": [
        {
          "patch": "if (result!= null && areIdentical(result, that)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (result!= null &&!result.isUnknownType()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= null &&!that.isUnknownType()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= null &&!result.isUnknown()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (result!= null &&!that.isNoResolved()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (result!= null && that.isUnknownType()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= null && result.isUnknownType()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= null && that.isUnknown()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (result == null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= UNKNOWN) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "<s> private Node parseContextTypeExpression(JsDocToken token) { </s> return parseTypeName(token); </s> } </s> java",
      "output": [
        {
          "patch": "return NodeUtil.parseTypeExpression(token);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return parseTypeExpression(token);",
          "correctness": "plausible"
        },
        {
          "patch": "return NodeUtil.parseType(token);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.parseTypeName(token);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return NodeUtil.parseType(token, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return resolveTypeExpression(token);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return parseType(token);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return parseTypeName(token, jsdoc);",
          "correctness": "uncompilable"
        },
        {
          "patch": "xPathType = parseTypeName(token));",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null;",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "<s> @Override protected JSType caseTopType(JSType topType) { </s> return topType; </s> } </s> java",
      "output": [
        {
          "patch": "return JSType.createUnion(topType, baseType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return JSType.createUnion(topType, bottomType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return commonTopType(topType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return JSType.createUnion(new JSType[] { topType });",
          "correctness": "uncompilable"
        },
        {
          "patch": "return JSType.createJSTypeProxy(topType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return JSType.makeUnion(topType, baseType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return JSType.createUnion(topType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return isSubtypeOf(topType);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null;",
          "correctness": "wrong"
        },
        {
          "patch": "return UNKNOWN;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "<s> private void processRequireCall(NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null || !provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg); </s> if (provided != null) { </s> parent.detachFromParent(); compiler.reportCodeChange(); } } } </s> java",
      "output": [
        {
          "patch": "if (provided!= null && parent!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (provided!= null &&!parent.isRoot()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!provided.isExplicitlyProvided()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (provided!= null &&!parent.isExported()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (provided!= null &&!provided.isConstant()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (provided!= null &&!parent.isGetProp()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (provided == null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (provided!= null &&!parent.isLvalue()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (provided!= null && left!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (provided!= null &&!parent.isExport()) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "<s> private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns != null) { if (parent.isFor() && !NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext() != n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } </s> } else { </s> recordDepScope(recordNode, ns); } } } </s> java",
      "output": [
        {
          "patch": "} else if (!NodeUtil.isForIn(parent)) {",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (!NodeUtil.hasChildren(recordNode)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (!NodeUtil.isForIn(parent, false)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (parent.isFor() || parent.isForIn()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (!NodeUtil.isForIn(recordNode)) {",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (!NodeUtil.isForIn(parent, recordNode)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else if (parent.isFor() || parent.isForFrom()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} if (!NodeUtil.isForIn(parent)) {",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (parent.isFor()) {",
          "correctness": "wrong"
        },
        {
          "patch": "} else if (recordNode!= null) {",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "<s> private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { </s>  </s> String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\")); } } } } </s> java",
      "output": [
        {
          "patch": "T type = typeSystem.getType(getScope(), n); Property prop = getProperty(child); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(child.getString())) { compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(child.getString()), Warnings.INVALIDATION, child.getString(), n.toString(), \"\")); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n, child.getString()); Property prop = getProperty(child.getString()); prop.scheduleRenaming(child, processProperty(t, prop, type, null)); if (propertiesToErrorFor.containsKey(child.getString())) { compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(child.getString()), Warnings.INVALIDATION, child.getString(), n.toString(), \"\"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n); Property prop = getProperty(child); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(child.getFullName())) { compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(child.getFullName()), Warnings.INVALIDATION, child.getFullName(), n.toString(), \"\")); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "Property prop = getProperty(child); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(child.getString())) { compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(child.getString()), Warnings.INVALIDATION, child.getString(), n.toString(), \"\")); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n, child.getString()); Property prop = getProperty(child); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(child.getString())) { compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(child.getString()), Warnings.INVALIDATION, child.getString(), n.toString(), \"\"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n, child.getString()); Property prop = getProperty(child.getString()); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n, child.getString()); Property prop = getProperty(child.getString()); prop.scheduleRenaming(child, processProperty(t, prop, type, null));",
          "correctness": "uncompilable"
        },
        {
          "patch": "T type = typeSystem.getType(getScope(), n, child.getString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "handleObjectLitProperty(child, t);",
          "correctness": "uncompilable"
        },
        {
          "patch": "processPropertyLit(child, t);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "<s> boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) { if (block.isFunction) { </s> break; </s> } else if (block.isLoop) { return false; } } return true; } </s> java",
      "output": [
        {
          "patch": "return false;",
          "correctness": "wrong"
        },
        {
          "patch": "continue;",
          "correctness": "wrong"
        },
        {
          "patch": "return true;",
          "correctness": "wrong"
        },
        {
          "patch": "throw new AbortParsingBlockError();",
          "correctness": "uncompilable"
        },
        {
          "patch": "ref.setParent(null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ref.decrementRefCount();",
          "correctness": "uncompilable"
        },
        {
          "patch": "ref.setImplicit(true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "ref.setImplicit(false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ref = break;",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "<s> private void handleBlockComment(Comment comment) { </s> if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) { </s> errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } } </s> java",
      "output": [
        {
          "patch": "if (comment.getValue().indexOf('/*@')!= -1 || comment.getValue().indexOf(\"\\n * ')!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().indexOf('/* '@')!= -1 || comment.getValue().indexOf(\"\\n * ')!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().indexOf('/*@')!= -1 || comment.getValue().indexOf(\"\\n *')!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().indexOf('/*@')!= -1 || comment.getValue().indexOf(\"\\n *\")!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().contains(\"String_Node_Str\") || comment.getValue().contains(\"String_Node_Str\")) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (comment.getValue().indexOf('/*@')!= -1 || comment.getValue().indexOf(\"\\n * '@')!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().indexOf('/* '@')!= -1 || comment.getValue().indexOf(\"\\n * '@')!= -1) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (comment.getValue().contains(\"String_Node_Str\")) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (comment.getValue().startsWith(SUSPICIOUS_COMMENT_WARNING)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (comment.getValue().indexOf('<' * '@')!= -1 || comment.getValue().indexOf('<' * '@')!= -1) {",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "<s> private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType(); </s> if (fnType != null) { </s> visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } } else { report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); } } </s> java",
      "output": [
        {
          "patch": "if (fnType!= null &&!fnType.isConstructor()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fnType!= null && fnType.isConstructor()) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (fnType!= null &&!isConstructor(fnType)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (fnType!= null &&!(fnType instanceof ObjectType)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fnType!= null &&!type.isConstructor()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fnType!= null &&!(fnType instanceof FunctionType)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (isConstructor(fnType)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (fnType.isConstructor()) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fnType!= null)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (isConstructor) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "<s> private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild(); </s>  </s> if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } } </s> java",
      "output": [
        {
          "patch": "first.putBooleanProp(Node.DIRECT_EVAL, true);",
          "correctness": "wrong"
        },
        {
          "patch": "first.putBooleanProp(Node.DIRECT_EVAL, false);",
          "correctness": "wrong"
        },
        {
          "patch": "first.putBooleanProp(Node.FREE_CALL, true);",
          "correctness": "wrong"
        },
        {
          "patch": "first.putBooleanProp(Node.FREE_CALL, false);",
          "correctness": "wrong"
        },
        {
          "patch": "NodeUtil.checkCall(first);",
          "correctness": "uncompilable"
        },
        {
          "patch": "first.putBooleanProp(Node.CALL, true);",
          "correctness": "uncompilable"
        },
        {
          "patch": "NodeUtil.markCall(n, first);",
          "correctness": "uncompilable"
        },
        {
          "patch": "NodeUtil.markCall(first);",
          "correctness": "uncompilable"
        },
        {
          "patch": "NodeUtil.markCall(first, n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "NodeUtil.markCall(first, true);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "<s> private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; } </s> if (name.globalSets == 1 && name.localSets == 0 && </s> name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) { workList.addAll(name.props); } } } </s> java",
      "output": [
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 1 && name.aliasingGets == 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 1 && name.aliasingGets > 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if ((name.globalSets == 1 && name.localSets == 0) || (name.globalSets == 0 && name.localSets == 0)) &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 1 && name.aliasingGets == 0 && name.props!= null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 && name.props!= null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets == 1 && name.localSets == 0 &&!name.props.isEmpty()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (name.globalSets.get() == 1 && name.localSets.get() == 0 &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if ((name.globalSets == 1 || name.localSets == 0) && name.aliasingGets == 0 && name.props!= null) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "<s> private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine(); </s> return result; </s> } </s> java",
      "output": [
        {
          "patch": "return \"String_Node_Str\" + result;",
          "correctness": "wrong"
        },
        {
          "patch": "return result + \"String_Node_Str\";",
          "correctness": "wrong"
        },
        {
          "patch": "return getRemainingJSDocLine();",
          "correctness": "wrong"
        },
        {
          "patch": "if (result == null) return null; return result;",
          "correctness": "wrong"
        },
        {
          "patch": "x return result + \"String_Node_Str\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result.trim();",
          "correctness": "wrong"
        },
        {
          "patch": "if (result!= null) return result; return null;",
          "correctness": "wrong"
        },
        {
          "patch": "return getRemainingJSDocLine(result);",
          "correctness": "uncompilable"
        },
        {
          "patch": "x return result.trim();",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"String_Node_Str\";",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "<s> public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE: </s> return new TypePair(null, null); </s> case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); } </s> java",
      "output": [
        {
          "patch": "return new TypePair(this, null);",
          "correctness": "wrong"
        },
        {
          "patch": "return new TypePair(that, null);",
          "correctness": "wrong"
        },
        {
          "patch": "data return new TypePair(this, null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new TypePair(null, that);",
          "correctness": "wrong"
        },
        {
          "patch": "return new TypePair(null, null, null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(JSType) that).typeB = null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "x = new TypePair(null, null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new TypePair(null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new TypePair(null, null, that);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new TypePair(null, that.getType());",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; } </s> attachLiteralTypes(n); switch (n.getType()) { case Token.FUNCTION: if (parent.getType() == Token.NAME) { return; } defineDeclaredFunction(n, parent); break; case Token.CATCH: defineCatch(n, parent); break; case Token.VAR: defineVar(n, parent); break; } </s> } </s> java",
      "output": [
        {
          "patch": "attachLiteralTypes(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "defineLiteralTypes(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "attachLiteralTypes(parent);",
          "correctness": "wrong"
        },
        {
          "patch": "processIdentifier(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "registerLiteral(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "attachLiteralTypes(n.getParent());",
          "correctness": "wrong"
        },
        {
          "patch": "processLiteral(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "registerUnresolvedType(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "defineLiteral(n, parent);",
          "correctness": "uncompilable"
        },
        {
          "patch": "registerUnresolvedType(n);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "<s> @Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope); </s> typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); </s> boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface != iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes != null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); } </s> java",
      "output": [
        {
          "patch": "ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (typeOfThis!= null) { typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); if (typeOfThis == null) { typeOfThis = getNativeType(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); if (typeOfThis == null) { typeOfThis = JSType.UNKNOWN; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "(ObjectType) { typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); if (typeOfThis == null) { typeOfThis = UNKNOWN; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); if (typeOfThis == null) { return null; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "xType = (ObjectType) safeResolve(xType, t, scope);",
          "correctness": "uncompilable"
        },
        {
          "patch": "x = (ObjectType) safeResolve(x, t, scope);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "<s> private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed != null); </s> if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); </s> } } for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { findCalledFunctions(c, changed); } } </s> java",
      "output": [
        {
          "patch": "if (node!= null) { if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.isGetProp()) { if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "Node n = node.getFirstChild(); if (n!= null) { if (n.getType() == Token.CALL) { Node child = n.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { changed.add(node.getString()); } else if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString());",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { changed.add(node.getString()); } else { if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { if (node.getFirstChild().getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { changed.add(node.getString()); } else if (node.getType() == Token.CALL) { for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) { findCalledFunctions(c, changed);",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { changed.add(node.getString()); } else if (node.getType() == Token.CALL) { Node call = node.getFirstChild(); if (call.getType() == Token.NAME) { changed.add(call.getString());",
          "correctness": "wrong"
        },
        {
          "patch": "if (node.getType() == Token.FUNCTION) { changed.add(node.getString()); } else if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (node.isGetProp()) { if (node.getType() == Token.CALL) { Node call = node.getFirstChild(); if (call.getType() == Token.NAME) { changed.add(call.getString()); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild() != null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); } </s> if (t.getScopeDepth() <= 2) { </s> return; } if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()) .recordEscapedQualifiedName(n.getQualifiedName()); } } } } </s> java",
      "output": [
        {
          "patch": "if (t.getScopeDepth() <= 3) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (t.getScopeDepth() < 2) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (t.getScopeDepth() > 2) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (t.getScopeDepth() <= 1) {",
          "correctness": "plausible"
        },
        {
          "patch": "if (t.getScopeDepth() >= 2) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (t.getScopeDepth() <= 1 || t.getScopeDepth() == 2) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (t.getScopeDepth() <= 2)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (t.getScopeDepth() <= 2) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (n.isGetProp() && n.getFirstChild()!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (scopeDepth <= 2) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "<s> void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } </s> if (lineLength > 0) { </s> System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } } </s> java",
      "output": []
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "<s> public Base64() { </s> this(false); </s> } </s> java",
      "output": []
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "<s> public static String encodeBase64String(byte[] binaryData) { </s> return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); </s> } </s> java",
      "output": []
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "<s> public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } </s> long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); </s> if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } </s> java",
      "output": []
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "<s> public static String newStringIso8859_1(final byte[] bytes) { </s> return new String(bytes, Charsets.ISO_8859_1); </s> } </s> java",
      "output": []
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "<s> public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } </s> return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); </s> } </s> java",
      "output": []
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "<s>  </s> private Object readResolve() { </s> calculateHashCode(keys); return this; } </s> java",
      "output": []
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "<s> public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } </s> if (read == 0 && inf.finished()) { return -1; </s> } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); } </s> java",
      "output": []
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "<s> public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } </s> currEntry = new TarArchiveEntry(headerBuf); </s> entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; } </s> java",
      "output": []
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } </s> boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { </s> return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); } trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "output": []
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "<s> public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); </s> if (rawCentralDirectoryData.length != expectedLength) { </s> throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } } </s> java",
      "output": []
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "<s> @Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) { </s> dictSize |= (coder.properties[i + 1] << (8 * i)); </s> } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); } </s> java",
      "output": []
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } </s> if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } </s> for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "output": []
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; </s> if (currentByte == 0) { break; } </s> if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "output": []
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "<s> @Override public boolean isDirectory() { if (file != null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; } </s> if (getName().endsWith(\"/\")) { </s> return true; } return false; } </s> java",
      "output": []
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "<s> private static ZipLong unixTimeToZipLong(long l) { </s> final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { </s> throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); } </s> java",
      "output": []
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "<s> @Override public int read() throws IOException { int current = super.read(); </s> if (current == '\\n') { </s> lineCounter++; } lastChar = current; return lastChar; } </s> java",
      "output": []
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "<s> public Map<String, Integer> getHeaderMap() { </s> return new LinkedHashMap<String, Integer>(this.headerMap); </s> } </s> java",
      "output": []
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "<s> private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); </s> final boolean emptyHeader = header.trim().isEmpty(); </s> if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; } </s> java",
      "output": []
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "<s> private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); </s> if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) { </s> quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); } </s> java",
      "output": []
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "<s> private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); </s> if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) { quote = true; } else if (c <= COMMENT) { </s> quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); } </s> java",
      "output": []
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException { Object fieldValue = field.get(value); </s> TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType()); </s> t.write(writer, fieldValue); } </s> java",
      "output": []
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "<s> public JsonWriter value(double value) throws IOException { writeDeferredName(); </s> if (Double.isNaN(value) || Double.isInfinite(value)) { </s> throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; } </s> java",
      "output": []
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "<s> @Override public Date read(JsonReader in) throws IOException { </s> if (in.peek() != JsonToken.STRING) { throw new JsonParseException(\"The date should be a string value\"); </s> } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } } </s> java",
      "output": []
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "<s> private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { </s> char c = str.charAt(i++); </s> if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); } </s> java",
      "output": []
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "<s> private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } </s> for (int i = 0; i < len; ++i) { char c = str.charAt(i); </s> if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); } </s> java",
      "output": []
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "<s> public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } </s> if (!_hasSegments) return _currentSegment; </s> return contentsAsArray(); } </s> java",
      "output": []
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "<s> public void writeEmbeddedObject(Object object) throws IOException { </s> throw new JsonGenerationException(\"No native support for writing embedded objects\", </s> this); } </s> java",
      "output": []
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "<s> private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c; </s> if (i <= maxCode) { </s> if (codes[i] != 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } } </s> java",
      "output": []
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "<s> @Override public boolean isCachable() { </s> return (_valueTypeDeserializer == null) </s> && (_ignorableProperties == null); } </s> java",
      "output": []
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "<s> protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann); </s> return (previous != null) && previous.equals(ann); </s> } </s> java",
      "output": []
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "<s> public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete() </s> || TreeNode.class.isAssignableFrom(t.getRawClass())); </s> case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } } </s> java",
      "output": []
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "<s> @Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg != null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann != null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class) </s> || _hasAnnotation(a, JsonRawValue.class)) { </s> name = \"\"; } else { return null; } } return PropertyName.construct(name); } </s> java",
      "output": []
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "<s> @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { </s> visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); </s> } else { visitor.expectNumberFormat(typeHint); } } } </s> java",
      "output": []
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "<s> @Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; } </s> return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, </s> _valueHandler, _typeHandler, _asStatic); } </s> java",
      "output": []
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "<s> @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property != null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format != null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } </s> if (format.getShape() == JsonFormat.Shape.STRING) { </s> TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this; } </s> java",
      "output": []
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "<s> @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb); </s> sb.append(';'); </s> return sb; } </s> java",
      "output": []
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "<s> public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } </s> return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), </s> true)); } </s> java",
      "output": []
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "<s> public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) { </s> found = key.equals(prop.getName()); </s> if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); } </s> java",
      "output": []
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "<s> public static StdKeyDeserializer forType(Class<?> raw) { int kind; </s> if (raw == String.class || raw == Object.class) { </s> return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); } </s> java",
      "output": []
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-604": {
      "loc": "583-604",
      "input": "<s> @SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { </s> if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) { t = p.nextToken(); Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); continue; } while (t == JsonToken.FIELD_NAME) { p.nextToken(); tokens.copyCurrentStructure(p); t = p.nextToken(); } tokens.writeEndObject(); if (bean.getClass() != _beanType.getRawClass()) { ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\"); return null; } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); } </s> continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); } </s> java",
      "output": []
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "<s> public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } </s> if (full.startsWith(PREFIX_STRING)) { for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) { </s> String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); } </s> java",
      "output": []
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "<s> protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1 != candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName != null) || (injectId != null); if (!useProps && (paramDef != null)) { </s> paramName = candidate.findImplicitParamName(0); </s> useProps = (paramName != null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } } </s> java",
      "output": []
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "<s> @Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else { </s> gen.writeObject(_value); </s> } } </s> java",
      "output": []
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "<s> public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { </s> buffer.assignParameter(typeProp, typeId); </s> } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; } </s> java",
      "output": []
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "<s> @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { </s> if (property == null) { return this; } </s> JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); } </s> java",
      "output": []
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "<s> protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) { </s> return null; </s> } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; } </s> java",
      "output": []
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "<s> protected XmlSerializerProvider(XmlSerializerProvider src) { super(src); </s> _rootNameLookup = src._rootNameLookup; </s> } </s> java",
      "output": []
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "<s> private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node); </s> body().appendChild(new TextNode(\" \", \"\")); body().appendChild(node); </s> } } </s> java",
      "output": []
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "<s> void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); </s> r.advance(); </s> return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } } </s> java",
      "output": []
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "<s> int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar != input[offset]) while(++offset < length && startChar != input[offset]); int i = offset + 1; int last = i + seq.length()-1; </s> if (offset < length) { </s> for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; } </s> java",
      "output": []
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "<s> public String html() { StringBuilder accum = new StringBuilder(); html(accum); </s> return accum.toString().trim(); </s> } </s> java",
      "output": []
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "<s> public DocumentType(String name, String publicId, String systemId, String baseUri) { super(baseUri); </s> Validate.notEmpty(name); </s> attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); } </s> java",
      "output": []
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "<s> @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o; </s> return this == o; </s> } </s> java",
      "output": []
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "<s> private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); </s> if (element.equals(search)) </s> return i; } return null; } </s> java",
      "output": []
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "<s> void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; </s> } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) { </s> transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } } </s> java",
      "output": []
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "<s> static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else </s> accum.append(c); </s> break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } } </s> java",
      "output": []
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "<s> static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<': </s> if (!inAttribute) </s> accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } } </s> java",
      "output": []
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "<s> boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos]; </s> return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); </s> } </s> java",
      "output": []
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "<s> public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key)) </s> attributes.remove(attrKey); </s> } } </s> java",
      "output": []
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "<s> public boolean hasClass(String className) { </s> final String classAttr = attributes.get(\"class\"); </s> final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; } </s> java",
      "output": []
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "<s> private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { </s> int bottom = stack.size() -1; if (bottom > MaxScopeSearchDepth) { bottom = MaxScopeSearchDepth; } </s> final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } </s> java",
      "output": []
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "<s> final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key); </s> if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) { </s> accum.append(\"=\\\"\"); Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false); accum.append('\"'); } } } </s> java",
      "output": []
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "<s> private void popStackToClose(Token.EndTag endTag) { </s> String elName = endTag.name(); </s> Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } } </s> java",
      "output": []
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "<s> public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null; </s> if (doc.childNodeSize() > 0) { </s> Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; } </s> java",
      "output": []
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "<s> public String getValue() { </s> return val; </s> } </s> java",
      "output": []
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "<s> private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0 ? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0 ? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1 != null && p1.equals(p2)) { return 0; } if (depth1 == 1) { </s> throw new JXPathException( \"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\"); </s> } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r != 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); } </s> java",
      "output": []
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "<s> public final Object computeValue(EvalContext context) { </s> return compute(args[0].computeValue(context), args[1].computeValue(context)) </s> ? Boolean.TRUE : Boolean.FALSE; } </s> java",
      "output": []
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "<s> public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); </s> return equalStrings(namespaceURI, nodeNS); </s> } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; } </s> java",
      "output": []
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "<s> public int getLength() { </s> return ValueUtils.getLength(getBaseValue()); </s> } </s> java",
      "output": []
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "<s> public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { </s> pos += Character.charCount(Character.codePointAt(input, pos)); </s> } } } </s> java",
      "output": [
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pt));",
          "correctness": "plausible"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos),'');",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos), out);",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos + 1));",
          "correctness": "wrong"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(c, pos));",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos), false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos) - 1);",
          "correctness": "wrong"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos), 0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(pt, pos));",
          "correctness": "uncompilable"
        },
        {
          "patch": "pos += Character.charCount(Character.codePointAt(input, pos));",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "<s> public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && </s> cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && </s> cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); } </s> java",
      "output": [
        {
          "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY));",
          "correctness": "uncompilable"
        },
        {
          "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&",
          "correctness": "plausible"
        },
        {
          "patch": "cal2.get(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR_OF_DAY) &&",
          "correctness": "plausible"
        },
        {
          "patch": "cal2.set(Calendar.HOUR_OF_DAY, cal1.get(Calendar.HOUR_OF_DAY));",
          "correctness": "uncompilable"
        },
        {
          "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cal2.get(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR_OF_DAY);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cal1.put(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY));",
          "correctness": "uncompilable"
        },
        {
          "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) - 1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)) &&",
          "correctness": "plausible"
        },
        {
          "patch": "cal2.get(Calendar.HOUR_OF_DAY);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "<s> public String format(Date date) { </s> Calendar c = new GregorianCalendar(mTimeZone); </s> c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); } </s> java",
      "output": [
        {
          "patch": "Calendar c = new GregorianCalendar(getTimeZone());",
          "correctness": "wrong"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(TimeZone.getDefault());",
          "correctness": "wrong"
        },
        {
          "patch": "Calendar c = new GregorianCalendar();",
          "correctness": "wrong"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(mTimeZone.getTimeZone());",
          "correctness": "uncompilable"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(TIME_ZONE_UTC);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(mTimeZone.getDefault());",
          "correctness": "wrong"
        },
        {
          "patch": "Calendar c = Calendar.getInstance(mTimeZone);",
          "correctness": "wrong"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(sTimeZone);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
          "correctness": "wrong"
        },
        {
          "patch": "x.Calendar c = new GregorianCalendar(mTimeZone);",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "<s>  </s> static float toJavaVersionInt(String version) { </s> return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE)); } </s> java",
      "output": [
        {
          "patch": "toJavaVersionInt(version, JAVA_VERSION_TRIM_SIZE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "System.out.println(\"String_Node_Str\" + version); return toJavaVersionInt(version.split(\"String_Node_Str\"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "float versionInt = toJavaVersionInt(version); if (versionInt >= JAVA_VERSION_TRIM_SIZE) { return versionInt; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "float versionInt = toJavaVersionInt(version);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return toJavaVersionInt(version, JAVA_VERSION_TRIM_SIZE);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return toJavaVersionInt(version.split(\"String_Node_Str\"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "float versionInt = toJavaVersionInt(version); if (versionInt >= JAVA_VERSION_TRIM_SIZE) return versionInt;",
          "correctness": "uncompilable"
        },
        {
          "patch": "float versionToJavaVersionInt = toJavaVersionInt(version);",
          "correctness": "uncompilable"
        },
        {
          "patch": "System.out.println(\"String_Node_Str\" + version);",
          "correctness": "uncompilable"
        },
        {
          "patch": "float v = toJavaVersionInt(version);",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}