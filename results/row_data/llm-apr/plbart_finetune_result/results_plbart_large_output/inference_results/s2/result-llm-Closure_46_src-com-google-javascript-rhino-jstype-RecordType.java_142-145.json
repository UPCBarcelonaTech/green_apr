{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689847924577",
  "GPR[ESLB]": "1689847944596",
  "file": "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145",
  "input": {
    "loc": "142-145",
    "input": "<s> @Override public JSType getLeastSupertype(JSType that) { </s> if (!that.isRecordType()) { return super.getLeastSupertype(that); } </s> RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); } </s> java",
    "output": [
      "return super.getLeastSupertype(that);",
      "JSType result = super.getLeastSupertype(that); if (result!= null) { return result; }",
      "JSType superLeastSupertype = super.getLeastSupertype(that); return superLeastSupertype;",
      "JSType type = super.getLeastSupertype(that); if (type!= null) { return type; }",
      "JSType type = super.getLeastSupertype(that); if (type == null) { return null; }",
      "JSType leastSupertype = super.getLeastSupertype(that);",
      "JSType superLeastSupertype = super.getLeastSupertype(that);",
      "JSType leastSupertype = super.getLeastSupertype(that); return leastSupertype;",
      "JSType result = super.getLeastSupertype(that); return result;",
      "JSType superType = super.getLeastSupertype(that); return superType;"
    ]
  },
  "nvidea": "measures-nvidea-Closure_46_src-com-google-javascript-rhino-jstype-RecordType.java_142-145.txt",
  "OAR_JOB_ID": "1561512",
  "GPR[SSLI]": "1689847813336",
  "GPR[ESLI]": "1689847843336",
  "GPR[SPS]": "1689847944639",
  "nrTokens": 126,
  "status": "ok",
  "GPR[EPS]": "1689847945029",
  "time": 390,
  "tokentime": 2,
  "inferencetime": 388,
  "output": [
    "return super.getLeastSupertype(that);",
    "JSType result = super.getLeastSupertype(that); if (result!= null) { return result; }",
    "JSType superLeastSupertype = super.getLeastSupertype(that); return superLeastSupertype;",
    "JSType type = super.getLeastSupertype(that); if (type!= null) { return type; }",
    "JSType type = super.getLeastSupertype(that); if (type == null) { return null; }",
    "JSType leastSupertype = super.getLeastSupertype(that);",
    "JSType superLeastSupertype = super.getLeastSupertype(that);",
    "JSType leastSupertype = super.getLeastSupertype(that); return leastSupertype;",
    "JSType result = super.getLeastSupertype(that); return result;",
    "JSType superType = super.getLeastSupertype(that); return superType;"
  ]
}