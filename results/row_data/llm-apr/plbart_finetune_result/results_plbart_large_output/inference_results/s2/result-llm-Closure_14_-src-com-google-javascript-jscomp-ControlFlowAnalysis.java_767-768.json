{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689848454386",
  "GPR[ESLB]": "1689848474406",
  "file": "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768",
  "input": {
    "loc": "767-768",
    "input": "<s> private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext() != null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { </s> cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); </s> } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling != null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } } </s> java",
    "output": [
      "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);",
      "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);",
      "return cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
      "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
      "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, null);",
      "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
      "cfa.createEdge(fromNode, Branch.FINALLY, finallyNode);",
      "cfa.createEdge(fromNode, Branch.UNCOND, node);",
      "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, node);",
      "cfa.createEdge(fromNode, Branch.IF, finallyNode);"
    ]
  },
  "nvidea": "measures-nvidea-Closure_14_-src-com-google-javascript-jscomp-ControlFlowAnalysis.java_767-768.txt",
  "OAR_JOB_ID": "1561512",
  "GPR[SSLI]": "1689847813336",
  "GPR[ESLI]": "1689847843336",
  "GPR[SPS]": "1689848474434",
  "nrTokens": 497,
  "status": "ok",
  "GPR[EPS]": "1689848474798",
  "time": 364,
  "tokentime": 4,
  "inferencetime": 360,
  "output": [
    "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);",
    "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);",
    "return cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
    "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
    "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, null);",
    "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
    "cfa.createEdge(fromNode, Branch.FINALLY, finallyNode);",
    "cfa.createEdge(fromNode, Branch.UNCOND, node);",
    "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, node);",
    "cfa.createEdge(fromNode, Branch.IF, finallyNode);"
  ]
}