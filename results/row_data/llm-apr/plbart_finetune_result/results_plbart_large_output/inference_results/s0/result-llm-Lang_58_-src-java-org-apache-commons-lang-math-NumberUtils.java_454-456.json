{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688583273220",
  "GPR[ESLB]": "1688583293240",
  "file": "Lang_58_/src/java/org/apache/commons/lang/math/NumberUtils.java_454-456",
  "input": {
    "loc": "454-456",
    "input": "<s> public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException(\"A blank string is not a valid number\"); } if (str.startsWith(\"--\")) { return null; } if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + \" is not a valid number.\"); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null </s> && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { </s> try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + \" is not a valid number.\"); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } } </s> java",
    "output": []
  },
  "nvidea": "measures-nvidea-Lang_58_-src-java-org-apache-commons-lang-math-NumberUtils.java_454-456.txt",
  "OAR_JOB_ID": "1552436",
  "GPR[SSLI]": "1688581525505",
  "GPR[ESLI]": "1688581555535",
  "GPR[SPS]": "1688583293280",
  "nrTokens": 798,
  "status": "error",
  "message": "input too long:798skip",
  "GPR[EPS]": "1688583293286",
  "time": 6,
  "tokentime": 6,
  "inferencetime": 0,
  "output": []
}