{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688583334358",
  "GPR[ESLB]": "1688583354378",
  "file": "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269",
  "input": {
    "loc": "268-269",
    "input": "<s> public double getNumericalMean() { </s> return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); </s> } </s> java",
    "output": [
      "return (double) (getSampleSize() * getNumberOfSuccesses() / (double) getPopulationSize());",
      "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
      "return (double) (getSampleSize() * getNumberOfSuccesses()) / getPopulationSize();",
      "return (double) (getSampleSize() * getNumberOfSuccesses() / getPopulationSize());",
      "return (double) (sampleSize * getNumberOfSuccesses()) / (double) getPopulationSize();",
      "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getNumericalPopulationSize();",
      "return (double) getNumberOfSuccesses() / (double) getPopulationSize();",
      "return (double) (getSampleSize() * getNumberOfSuccesses());",
      "return (double) (getSampleSize() * getNumberOfSuccesses() * getPopulationSize());",
      "return getNumericalMean();"
    ]
  },
  "nvidea": "measures-nvidea-Math_2_-src-main-java-org-apache-commons-math3-distribution-HypergeometricDistribution.java_268-269.txt",
  "OAR_JOB_ID": "1552436",
  "GPR[SSLI]": "1688581525505",
  "GPR[ESLI]": "1688581555535",
  "GPR[SPS]": "1688583354419",
  "nrTokens": 38,
  "status": "ok",
  "GPR[EPS]": "1688583354927",
  "time": 508,
  "tokentime": 1,
  "inferencetime": 507,
  "output": [
    "return (double) (getSampleSize() * getNumberOfSuccesses() / (double) getPopulationSize());",
    "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
    "return (double) (getSampleSize() * getNumberOfSuccesses()) / getPopulationSize();",
    "return (double) (getSampleSize() * getNumberOfSuccesses() / getPopulationSize());",
    "return (double) (sampleSize * getNumberOfSuccesses()) / (double) getPopulationSize();",
    "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getNumericalPopulationSize();",
    "return (double) getNumberOfSuccesses() / (double) getPopulationSize();",
    "return (double) (getSampleSize() * getNumberOfSuccesses());",
    "return (double) (getSampleSize() * getNumberOfSuccesses() * getPopulationSize());",
    "return getNumericalMean();"
  ]
}