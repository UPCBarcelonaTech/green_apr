{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1688584114510",
  "GPR[ESLB]": "1688584134531",
  "file": "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94",
  "input": {
    "loc": "93-94",
    "input": "<s> private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { </s> mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); </s> } } </s> java",
    "output": [
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, false).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).inject();",
      "mockCandidateFilter.filterCandidate(mocks, fieldInstance).thenInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenReturnInject();",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mock);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(true);",
      "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true);"
    ]
  },
  "nvidea": "measures-nvidea-Mockito_28_-src-org-mockito-internal-configuration-DefaultInjectionEngine.java_93-94.txt",
  "OAR_JOB_ID": "1552436",
  "GPR[SSLI]": "1688581525505",
  "GPR[ESLI]": "1688581555535",
  "GPR[SPS]": "1688584134571",
  "nrTokens": 67,
  "status": "ok",
  "GPR[EPS]": "1688584135009",
  "time": 438,
  "tokentime": 2,
  "inferencetime": 436,
  "output": [
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, false).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).inject();",
    "mockCandidateFilter.filterCandidate(mocks, fieldInstance).thenInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenReturnInject();",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(mock);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(true);",
    "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true);"
  ]
}