{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689800975125",
  "GPR[ESLB]": "1689800995145",
  "file": "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184",
  "input": {
    "loc": "183-184",
    "input": "<s> public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } </s> return FastMath.pow(2 * FastMath.PI, -dim / 2) * </s> FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } </s> java",
    "output": [
      "return FastMath.pow(2 * FastMath.PI, -dim / 2) * covarianceMatrixDeterminant;",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.PI;",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2 * FastMath.PI);",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2) * getDensity(vals);",
      "return FastMath.pow(2 * FastMath.PI, -dim / vals.length) * vals[0];",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2) * Math.PI;",
      "return FastMath.pow(4 * FastMath.PI, -dim / 2) *",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2) * density;",
      "return FastMath.pow(2 * FastMath.PI, -dim / 2 * FastMath.PI) *"
    ]
  },
  "nvidea": "measures-nvidea-Math_11_-src-main-java-org-apache-commons-math3-distribution-MultivariateNormalDistribution.java_183-184.txt",
  "OAR_JOB_ID": "1560165",
  "GPR[SSLI]": "1689799108245",
  "GPR[ESLI]": "1689799138275",
  "GPR[SPS]": "1689800995185",
  "nrTokens": 83,
  "status": "ok",
  "GPR[EPS]": "1689800995521",
  "time": 336,
  "tokentime": 2,
  "inferencetime": 334,
  "output": [
    "return FastMath.pow(2 * FastMath.PI, -dim / 2) * covarianceMatrixDeterminant;",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.PI;",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2 * FastMath.PI);",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2) * getDensity(vals);",
    "return FastMath.pow(2 * FastMath.PI, -dim / vals.length) * vals[0];",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2) * Math.PI;",
    "return FastMath.pow(4 * FastMath.PI, -dim / 2) *",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2) * density;",
    "return FastMath.pow(2 * FastMath.PI, -dim / 2 * FastMath.PI) *"
  ]
}