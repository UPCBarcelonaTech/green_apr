{
  "config": "finetune",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy lines start:\n    boolean removed = markers.remove(marker);\n// buggy lines end:\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    boolean removed = markers.remove(marker);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean removed = markers == null? false : markers.remove(marker);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    boolean removed = markers.remove(marker.getId());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker) && notify;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean removed = markers.remove(marker.getMarker());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker)? true : false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    boolean removed = markers.remove(marker.getID());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = markers.remove(marker.getMarkerID());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean removed = false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n// buggy lines start:\n      JsName name = getName(ns.name, false);\n// buggy lines end:\n      if (name != null) {\n      refNodes.add(new ClassDefiningFunctionNode(\n          name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    JsName name = getName(ns.name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            JsName name = getName(ns.name, false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        JsName name = getName(ns.name);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsName name = getName(ns.name, true);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        JsName name = getName(ns.name, true);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    JsName name = getName(nameNode.getString(), false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        JsName name = getName(nameNode.getString(), false);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        JsName name = getName(ns.name, false, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JsName name = getName(nameNode, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        JsName name = getName(ns.name, false, false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy lines start:\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n// buggy lines end:\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    Preconditions.checkState(that.isRecordType(), \"String_Node_Str\", that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return super.getLeastSupertype(that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(that.isRecordType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkNotNull(that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  Preconditions.checkState(that.isRecordType(), \"String_Node_Str\", that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return super.getLeastSupertype(that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    checkNotNull(that);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return super.getLeastSupertype(that.toMaybeRecordType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  Preconditions.checkState(that.isRecordType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    RecordType thatType = that.toMaybeRecordType();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy lines start:\n      case '\\r': sb.append(\"\\\\r\"); break;\n// buggy lines end:\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c <= 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    case '\\b': sb.append(\"\\\\b\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case '\\f': sb.append(\"\\\\f\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case '\\n': sb.append(\"\\\\n\"); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case '\\n': sb.append(\"\\\\n\"); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case '\\f': sb.append(\"\\\\f\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        case '\\r': sb.append(\"\\\\r\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            case '\\r': sb.append(\"\\\\r\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        case '\\b': sb.append(\"\\\\b\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            case '\\n': sb.append(\"\\\\n\"); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case '\\n': sb.append(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy lines start:\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n// buggy lines end:\n        wasWhite= false;\n        switch(c) {\n        case '\\'':\n            if(unquote) {\n                if(++i==value.length()) {\n                    return regex;\n                }\n                c= value.charAt(i);\n            }\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    return regex;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        regex.append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Character.isWhitespace(c)) {\n            continue;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            break;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "plausible"
        },
        {
          "patch": "        if (Character.isWhitespace(c))\n            continue;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        regex.append(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isWhitespace(c)) {\n            regex.append(c);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        switch(c) {\n        case '\\'':\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy lines start:\n        calendar = (Calendar) calendar.clone();\n// buggy lines end:\n        calendar.setTimeZone(mTimeZone);\n    }\n    return applyRules(calendar, buf);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        calendar = calendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) mCalendar.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        Calendar clone = (Calendar) calendar.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar = Calendar.getInstance(timeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone(this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        calendar = (Calendar) calendar.clone();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        calendar = new Calendar(calendar);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy lines start:\n        chiSquare += residual * residual / residualsWeights[i];\n// buggy lines end:\n    }\n    return chiSquare;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] / 2d;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual / residualsWeights[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] - 1d;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / residualsWeights[i] + 1d;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual * residual / weights[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        chiSquare += residual * residual;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        chiSquare += residual;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) {\n// buggy lines start:\n  int sum = 0;\n// buggy lines end:\n  for (int i = 0; i < p1.length; i++) {\n      final int dp = p1[i] - p2[i];\n      sum += dp * dp;\n  }\n  return Math.sqrt(sum);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    double sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  double sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    float sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  float sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int sum = 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  int sum = 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int sum = -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  int sum = 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  int sum = -1;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length != this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy lines start:\n    final BigDecimal[] out = new BigDecimal[v.length];\n// buggy lines end:\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = ZERO;\n        for (int i = 0; i < nCols; i++) {\n            sum = sum.add(data[row][i].multiply(v[i]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[nRows];\n",
          "correctness": "plausible"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final double[] out = new double[v.length];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length - 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    BigDecimal[] out = new BigDecimal[v.length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final List<BigDecimal> out = new ArrayList<BigDecimal>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length / 2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[v.length * 2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final BigDecimal[] out = new BigDecimal[0];\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy lines start:\n    if (dataset != null) {\n// buggy lines end:\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() > 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset == null) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (isSeriesVisibleInLegend(index)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount()!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (index >= 0 && dataset!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset.getRowCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset!= null && dataset.getColumnCount() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (dataset == null || dataset.getRowCount() == 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (dataset!= null && dataset.getRowCount() >= 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy lines start:\n    copy.data = new java.util.ArrayList();\n// buggy lines end:\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    copy.data = new ArrayList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.LinkedList();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    copy.data = (java.util.ArrayList) data.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList<>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new LinkedList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.List();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = new java.util.ArrayList<>(this.data);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = (ArrayList) data.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    copy.data = (ArrayList<TimeSeriesDataItem>) data.clone();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy lines start:\n    return super.equals(obj);\n// buggy lines end:\n\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals((ShapeList) obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (obj == this);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return this.toString().equals(obj.toString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(o);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return (obj!= null) && super.equals(obj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return super.equals(obj, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) {\n// buggy lines start:\n    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    this(time, zone, Locale.getDefault());\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this(time, timeZone, Locale.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, timeZone, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, DEFAULT_TIME_ZONE, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, zone, locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, zone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, zone, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this(time, TimeZone.getDefault(), locale);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this(time, TimeZone.getDefault());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy lines start:\n    if (endIndex < 0) {\n// buggy lines end:\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (endIndex >= this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex < this.data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (endIndex >= 0 && endIndex < data.size()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) {\n// buggy lines start:\n    return \" title=\\\"\" + toolTipText\n// buggy lines end:\n        + \"\\\" alt=\\\"\\\"\";\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return \" title\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title =\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title='\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \"title\\\"\" + toolTipText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return \" title =\\\"\" + toolTipText\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\" + toolTipText\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \" title\" + \"String_Node_Str\";\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy lines start:\n    PathIterator iterator2 = p1.getPathIterator(null);\n// buggy lines end:\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    PathIterator iterator2 = p2.getPathIterator(null);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    PathIterator iterator2 = p2.getPathIterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator2 = path2.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final PathIterator iterator2 = p1.getPathIterator(null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    GeneralPathIterator iterator2 = p2.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator1 = p1.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator2 = path.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator<?> iterator2 = p2.getPathIterator(null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    PathIterator iterator2 = p1.getPathIterator(null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    PathIterator iterator2 = p1.getPathIterator(null, false);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy lines start:\n    this.dataset = dataset;\n// buggy lines end:\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    this.dataSet = dataset;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = data;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.data = dataset;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = dataset.copyInstance();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = table;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    setDataset(dataset);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    this.dataset = dataset.getData();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = dataset.getTable();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    this.dataset = this.dataset;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    this.dataset = dataset.getTableData();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "public Object clone() throws CloneNotSupportedException {\n// buggy lines start:\n    Object clone = createCopy(0, getItemCount() - 1);\n// buggy lines end:\n    return clone;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    Object clone = createCopy(0, getItemCount());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, getItemCount() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(getItemCount() - 1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object copy = createCopy(0, getItemCount() - 1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(0, size);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Object clone = createCopy(getItemCount() - 1, 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, getItemCount() + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Object clone = createCopy(0, count);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy lines start:\n    super(paint, stroke, paint, stroke, alpha);\n// buggy lines end:\n    this.value = value;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    super(paint, stroke, outlinePaint, outlineStroke, alpha);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    super.setPaints(paint, stroke, paint, stroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super.set(paint, stroke, paint, stroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, outlinePaint, stroke, outlineStroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, stroke, paint, stroke, alpha, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, stroke, paint, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, stroke, paint, strokeStroke, alpha);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    super(paint, stroke, paint, stroke, alpha);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    super.setPaint(paint);\n    super.setAlpha(alpha);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy lines start:\n    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// buggy lines end:\n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound \n",
          "correctness": "plausible"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound));\n    return new Color(g, g, g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double g = ((v - this.lowerBound) / (this.upperBound \n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) Math.ceil((v - this.lowerBound) / (this.upperBound \n",
          "correctness": "plausible"
        },
        {
          "patch": "    int g = (int) Math.ceil((v - this.lowerBound) / (this.upperBound - this.lowerBound));\n    return new Color(g, g, g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) Math.ceil((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = ((v - this.lowerBound) / (this.upperBound - this.lowerBound)) * 255.0;\n    return new Color(g, g, g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n    return new Color(g);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy lines start:\n        StringBuffer buff = new StringBuffer();\n// buggy lines end:\n\n        while (iter.hasNext())\n        {\n            buff.append(iter.next());\n        }\n        throw new MissingOptionException(buff.toString());\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy lines start:\n        pos = findWrapPos(text, width, nextLineTabStop);\n// buggy lines end:\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt() != null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy lines start:\n    if (option.hasArg() && (option.getArgName() != null))\n// buggy lines end:\n    {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy lines start:\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n                                        \"- no room for the description\");\n// buggy lines end:\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy lines start:\n        nextLineTabStop = width - 1;\n// buggy lines end:\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy lines start:\n                break;\n// buggy lines end:\n            }\n            cmd.addOption(opt);\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy lines start:\n    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n           && (c != '\\n') && (c != '\\r'))\n    {\n        ++pos;\n    }        \n// buggy lines end:\n    return pos == text.length() ? -1 : pos;\n}\n// fixed lines: \n",
      "output": []
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy lines start:\n        return null;\n// buggy lines end:\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n// buggy lines start:\n\n// buggy lines end:\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.getRootNode().isFunction());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.getRootNode().isFunction(), fnScope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Node function = fnScope.getRootNode();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.isFunction());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.hasRootNode());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    FunctionNode fn = fnScope.getRootNode();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.isFunction(), fnScope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(scope.getRootNode().isFunction());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(fnScope.getRootNode()!= null);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n// buggy lines start:\n\n// buggy lines end:\n      \n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (!isVarOrAssignExprLhs(name)) {\n       return false;\n    }\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n    if (!val.isObjectLit()) {\n      return false;\n    }\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() ||\n          child.isSetterDef()) {\n        return false;\n      }\n      validProperties.add(child.getString());\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    ret = true;\n  }\n  return ret;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        String propName = parent.getLastChild().getString();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (gramps.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        validProperties.add(parent.getLastChild().getString());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.isGetProp()) {\n        continue;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (parent.isGetProp()) {\n        continue;\n    } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    if (parent.isGetProp()) {\n        continue;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy lines start:\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n// buggy lines end:\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return allResultsMatch(n, mayBeStringPredicate);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING_PREDICATE, string);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return mayBeStringHelper(n);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return allResultsMatch(n, MAY_BE_STRING);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return allResultsMatch(n, mayBeStringHelper);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy lines start:\n  } else if (n.getJSType() != null && parent.isAssign()) {\n    return;\n// buggy lines end:\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n  ensureTyped(t, n);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return childType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    throw new Error(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    throw new IllegalStateException(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    throw new TypeError(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "plausible"
        },
        {
          "patch": "    throw new IllegalStateException();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(parent.getLastChild());\n        } else { \n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (NodeUtil.getCatchBlock(parent) == node){\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getLastChild() == node){\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n// buggy lines start:\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n// buggy lines end:\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.removeEdge(fromNode, Branch.UNCOND, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(parent, Branch.UNCOND, finallyNode);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.COND, finallyNode);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cfa.createEdge(fromNode, Branch.UNCOND);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n// buggy lines start:\n\n// buggy lines end:\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": " {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!ControlFlowGraph.isEnteringNewCfgNode(n)) {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (apply(n.getFirstChild())) {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (ControlFlowGraph.isEnteringNewCfgNode(n)) {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (n.isGetProp()) {\n        return true;\n    }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy lines start:\n    if (value != null) {\n// buggy lines end:\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (value!= null && value.isString()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null &&!value.isString()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null &&!value.isEmpty()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value!= callTarget) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.getParent()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value!= n) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && callTarget.getParent()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value!= null && value.getType() == Node.STRING) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (value!= null && value.getType() == Node.NUMBER) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n// buggy lines start:\n\n// buggy lines end:\n  \n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    super.matchConstraint(constraintObj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkState(constraintObj.isRecordType(), \"String_Node_Str\", constraintObj);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (constraintObj.isRecordType()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (constraintObj.isRecordType()) {\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = propType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!constraintObj.isRecordType()) {\n        return;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (!constraintObj.isRecordType()) {\n        throw new Error(\"String_Node_Str\");\n    }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy lines start:\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n// buggy lines end:\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, propType, null);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n        return;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n            }\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = objType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n// buggy lines start:\n    }\n// buggy lines end:\n  }\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n        return false;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (value.isGetProp()) {\n        return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n        return canMoveAggressively(value);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (value.isGetProp()) {\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy lines start:\n  if (x < 0 && prev == '-') {\n// buggy lines end:\n    add(\" \");\n  }\n  if ((long) x == x && !negativeZero) {\n    long value = (long) x;\n    long mantissa = value;\n    int exp = 0;\n    if (Math.abs(x) >= 100) {\n      while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n        mantissa /= 10;\n        exp++;\n      }\n    }\n    if (exp > 2) {\n      add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n    } else {\n      add(Long.toString(value));\n    }\n  } else {\n    add(String.valueOf(x));\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "  if (x < 0 && (prev == '-' || prev == '+')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (x < 0 && (prev == '-' || prev == '+')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (x < 0 && prev == '-')\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (x < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (x < 0 && prev == '-')\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (isNegative(x) && prev == '-') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (x < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (isNegative(x) && prev == '-') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (x < 0 && (prev == '-' || prev == '+')) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (x < 0 && (prev == '-' || prev == '+')) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy lines start:\n  return len > 0;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return len == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return len == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return len == 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return len >= 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return len == s.length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return s.length() == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy lines start:\n  return NodeUtil.isFunctionExpression(n);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return isFunctionExpression(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return!NodeUtil.isFunctionExpression(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return isFunctionExpression(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return isReduceableFunctionExpression(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return NodeUtil.isFunctionExpression(n, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return n.isFunctionExpression();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return NodeUtil.isFunctionExpression(n) &&!n.hasChildren();\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy lines start:\n        if (target != null) {\n// buggy lines end:\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        if (target!= null && target.getType() == Token.STRING) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (target!= null && target.isString()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.hasChildren()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.CLASS) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.getString()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Node.STRING) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.isQualifiedName()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.CLASSNAME) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (target!= null && target.getType() == Token.NAME) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (target.getType() == Token.STRING) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy lines start:\n  if (options.checkGlobalThisLevel.isOn()) {\n// buggy lines end:\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n    options.setWarningLevel(\n        DiagnosticGroups.ES5_STRICT,\n        CheckLevel.ERROR);\n  }\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(\n      new SuppressDocWarningsGuard(\n          getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n  ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n  if (!options.checkSymbols &&\n      !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n  this.warningsGuard = composedGuards;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (options.checkGlobalThisLevel == CheckLevel.ON) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel == CheckLevel.ON) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (options.checkGlobalThisLevel) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (options.checkGlobalThisLevel!= CheckLevel.OFF) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel!= CheckLevel.OFF) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (options.checkGlobalThisLevel.isOn() || options.checkGlobalThisLevel.isOff()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (options.checkGlobalThisLevel.isOn() && options.checkGlobalThisLevel.getValue()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (options.checkGlobalThisLevel.isOn() && options.checkGlobalThisLevel.getValue()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (options.checkGlobalThisLevel.isOn() &&!options.checkGlobalThisLevel.isOff()) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null ? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName != null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy lines start:\n        && 0 <= charno && charno < sourceExcerpt.length()) {\n// buggy lines end:\n      for (int i = 0; i < charno; i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (Character.isWhitespace(c)) {\n          b.append(c);\n        } else {\n          b.append(' ');\n        }\n      }\n      b.append(\"^\\n\");\n    }\n  }\n  return b.toString();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "         && 0 <= charno && charno < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        ) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        and 0 <= charno && charno < sourceExcerpt.length()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "         && charno < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "         && 0 <= charno && charno <= sourceExcerpt.length()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "         && charno <= sourceExcerpt.length()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "         && 0 <= charno && charno + 1 < sourceExcerpt.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "         && 0 <= charno) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        and (0 <= charno && charno < sourceExcerpt.length()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy lines start:\n      case '\\0': sb.append(\"\\\\0\"); break;\n// buggy lines end:\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c < 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case '\\0': sb.append(\"String_Node_Str\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            case '\\0': sb.append(\"String_Node_Str\"); break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            sb.append(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case '\\\"': sb.append(doublequoteEscape); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case '\\0':\n        sb.append(\"String_Node_Str\");\n        break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case '\\0': {\n        sb.append(\"String_Node_Str\");\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case '\\n': sb.append(\"String_Node_Str\"); break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        case '\\0': {\n            sb.append(\"String_Node_Str\");\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case '\\\"': sb.append(doublequoteEscape);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy lines start:\n      ) {\n// buggy lines end:\n    \n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    ) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    )\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    if (n.getFirstChild()!= null) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, functionNode,\n// buggy lines start:\n              jsDocParameter.getJSType(), true);\n// buggy lines end:\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            jsDocParameter.getJSType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            jsDocParameter.getJSType(), false);\n",
          "correctness": "plausible"
        },
        {
          "patch": "            jsDocParameter, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            jsDocParameter.getJSType(), true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                jsDocParameter.getJSType(), true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                jsDocParameter.getJSType());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "                jsDocParameter, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            jsDocParameter);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n// buggy lines start:\n          if (c > 0x1f && c <= 0x7f) {\n// buggy lines end:\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            if (c <= 0x1f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            sb.append(c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (c > 0x1f && c < 0x7f) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if (c >= 0x1f && c <= 0x7f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c > 0x1f && c <= 0x7f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c <= 0x7f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c < 0x1f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c > 0x1f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c <= 0x1f) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (c < 0x1f && c <= 0x7f) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "public final boolean isEmptyType() {\n// buggy lines start:\n  return isNoType() || isNoObjectType() || isNoResolvedType();\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return isNoType() || isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoType() || isNoObjectType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return isNoType() || isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return isNoObjectType() || isNoResolvedType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return isNoType();\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy lines start:\n  String param = params.getParameter(0);\n// buggy lines end:\n\n  if (param == null) {\n    setter.addValue(true);\n    return 0;\n  } else {\n    String lowerParam = param.toLowerCase();\n    if (TRUES.contains(lowerParam)) {\n      setter.addValue(true);\n    } else if (FALSES.contains(lowerParam)) {\n      setter.addValue(false);\n    } else {\n      setter.addValue(true);\n      return 0;\n    }\n    return 1;\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "  String param = params.getParameter(-1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String param = params.getParameter(-1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameter(1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String param = params.getParameter(1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  final String param = params.getParameter(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String param = params.getParameter(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = params.getParameter(0).toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  String param;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  String param = params.getParameter(0).toUpperCase();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy lines start:\n      return true;\n// buggy lines end:\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    {\n        return true;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return callHasLocalResult(value);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case Token.SETELEM:\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case Token.LEFTBRACKET:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return callHasLocalResult(value)\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy lines start:\n      int indexOfDot = namespace.indexOf('.');\n// buggy lines end:\n      if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    int indexOfDot = namespace.lastIndexOf('.');\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int indexOfDot = namespace.lastIndexOf('.');\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int indexOfDot = namespace.indexOf('.') + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int indexOfDot = namespace.indexOf('.', 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int indexOfDot = namespace.indexOf('.');\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int indexOfDot = namespace.indexOf(':');\n",
          "correctness": "plausible"
        },
        {
          "patch": "            int indexOfDot = namespace.indexOf('.');\n",
          "correctness": "wrong"
        },
        {
          "patch": "        int indexOfDot = namespace.indexOf(':');\n",
          "correctness": "plausible"
        },
        {
          "patch": "            int indexOfDot = namespace.indexOf('.') + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int indexOfDot = namespace.indexOf('.', 0);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy lines start:\n        result = lvalInt >>> rvalInt;\n// buggy lines end:\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        result = lvalInt >>> rvalInt + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = rvalInt >>> lvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = (int) lvalInt >>> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = (long) lvalInt >>> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >> rvalInt;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt | 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = lvalInt >>> rvalInt & 0xff;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy lines start:\n  if (result != null) {\n// buggy lines end:\n    return result;\n  } else if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (result == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (result.isSubtype(this)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (result == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (result!= NO_TYPE) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (result!= UNKNOWN) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result.isSubtype(this)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (result.isSubtype(that)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (result!= null &&!result.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  if (result.isSubtype(that)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (result!= null && result.isUnionType()) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy lines start:\n        return parseTypeName(token);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        return parseContextTypeExpression(token);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return parseTypeExpression(token);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        return parseContextTypeName(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseIdentifier(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseTyped(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseExpression(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return parseTypedExpression(token);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return parseTypeName(token, null);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy lines start:\n  return topType;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return this.topType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return this.topType;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return topType.removeType(this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "  return topType.removeType(this);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return this.type;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getNativeType(topType);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return topType.toMaybeType();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy lines start:\n    if (provided != null) {\n// buggy lines end:\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (provided == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null && parent!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (parent!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (arg!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided.isExplicitlyProvided()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null && provided.isExplicitlyProvided()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (parent!= null &&!parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided!= null &&!parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (provided == null) {\n        parent.detachFromParent();\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy lines start:\n    } else {\n// buggy lines end:\n      \n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    } else if (parent!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.isFor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (!NodeUtil.isForIn(parent)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (parent.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (NodeUtil.isForIn(parent)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else if (!NodeUtil.isFor(parent)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else if (parent!= null && parent.isFor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    } else\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n// buggy lines start:\n\n// buggy lines end:\n    \n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    String name = child.getString();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    String name = child.getString().toLowerCase();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(scope, n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" :",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(scope, n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name, (type == null? \"null",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(scope, n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name,\n                (type == null? \"null",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\"",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(getScope(), child, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\"",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString();\n    T type = typeSystem.getType(scope, n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null?",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String name = child.getString().toLowerCase();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy lines start:\n      break;\n// buggy lines end:\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n  return true;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        continue;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\treturn false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else {\n        break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "private void handleBlockComment(Comment comment) {\n// buggy lines start:\n  if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n// buggy lines end:\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "  if (comment.getValue().indexOf(\"/\")!= -1 || comment.getValue().indexOf(\"\\n\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (comment.getValue().indexOf(\"/\")!= -1 || comment.getValue().indexOf(\"\\n\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"/\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().contains(\"String_Node_Str\") || comment.getValue().contains(\"String_Node_Str\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (comment.getValue().indexOf(\"/\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (comment.getValue().indexOf(\"\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue()!= null && comment.getValue().indexOf(\"\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue().indexOf(\"String_Node_Str\")!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (comment.getValue()!= null && comment.getValue().indexOf(\"/\")!= -1) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy lines start:\n    if (fnType != null) {\n// buggy lines end:\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (fnType!= null && fnType.isConstructor()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fnType!= null && fnType.getInstanceType()!= null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType == null) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType.isConstructor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isEmptyType()) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isConstructor()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null && fnType.isFunctionType()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (fnType!= null &&!fnType.isEmpty()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (fnType == null) {\n        report(t, n, NOT_A_CONSTRUCTOR);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_126_/src/com/google/javascript/jscomp/MinimizeExitPoints.java_141-145": {
      "loc": "141-145",
      "input": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy lines start:\n    if (NodeUtil.hasFinally(n)) {\n      Node finallyBlock = n.getLastChild();\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n// buggy lines end:\n  }\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n  }\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock, falseBlock;\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock,\n          ifTree, exitType, labelName);\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock,\n            ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    tryMinimizeExits(n.getLastChild(), exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    tryMinimizeExits(n, exitType, labelName);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Node finallyBlock = n.getLastChild();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    tryMinimizeExits(finallyBlock, exitType, labelName);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    tryMinimizeExits(finallyNode, exitType, labelName);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Node finally = n.getLastChild();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Node finallyNode = n.getLastChild();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    tryMinimizeExits(n.getLastChild(), exitType, labelName);\n    return;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Node finallyBlock = n.getLastChild();\n    tryMinimizeExits(finallyBlock, exitType);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n// buggy lines start:\n\n// buggy lines end:\n  if (!NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n  if (first.isName() &&\n      \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    n.putBooleanProp(Node.FREE_CALL, true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (!NodeUtil.isGet(first))\n        n.putBooleanProp(Node.FREE_CALL, true);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (first.isName() && \"String_Node_Str\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": " {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Preconditions.checkState(NodeUtil.isGet(first), \"String_Node_Str\", first);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Preconditions.checkState(first.isGetProp(), \"String_Node_Str\", first);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, false);\n    } else {\n        n.putBooleanProp(Node.FREE_CALL, true);\n    }\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy lines start:\n    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy lines end:\n        name.aliasingGets > 0) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 0 && name.localSets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.props == null) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.type == Name.Type.SET) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 &&!name.localSets.isEmpty() &&\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.type == Name.Type.GET) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.props == null &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (name.globalSets == 1 && name.localSets == 0 && name.globalSets == 0) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy lines start:\n  return result;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return result.trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (result == null)? \"String_Node_Str\" : result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result == null? \"String_Node_Str\" : result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return \"String_Node_Str\" + result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (result!= null)? result : \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return remainingJSDocLine;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return getRemainingJSDocLine();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (result == null || result.isEmpty())? null : result;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    case UNKNOWN:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case FALSE:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return new TypePair(this, that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new TypePair(this, that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return p;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return new TypePair(this, that);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    case FALSE:\n    case UNKNOWN:\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case FALSE:\n    case UNKNOWN:\n        return null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    case UNKNOWN:\n    case FALSE:\n        return null;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy lines start:\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    defineDeclaredFunction(n, parent);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    attachLiteralTypes(n, parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  defineDeclaredFunction(n, parent);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    defineDeclaredFunction(parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    attachLiteralTypes(parent);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    defineDeclaredFunction(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    defineLiteralType(n, parent);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    defineDeclaredFunction(parent, n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    defineDeclaredFunction(n, n);\n",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy lines start:\n  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n// buggy lines end:\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n  return super.resolveInternal(t, scope);\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "wrong"
        },
        {
          "patch": "  typeOfThis = safeResolve(typeOfThis, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    typeOfThis = safeResolve(typeOfThis, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  thisType = (ObjectType) safeResolve(thisType, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    thisType = (ObjectType) safeResolve(thisType, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  ObjectType typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope, null);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n// buggy lines start:\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n// buggy lines end:\n    }\n  }\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    if (node!= null) {\n        if (node.getType() == Token.CALL) {\n            Node child = node.getFirstChild();\n            if (child.getType() == Token.NAME) {\n                changed.add(child.getString());\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (node.getType() == Token.NAME) {\n        changed.add(node.getString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node!= null && node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child!= null && child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n        changed.add(node.getFirstChild().getString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node!= null && node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node.isName()) {\n        changed.add(node.getString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    switch(node.getType()) {\n        case Token.CALL:\n            Node child = node.getFirstChild();\n            if (child.getType() == Token.NAME) {\n                changed.add(child.getString());\n            }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node.getType() == Token.FUNCTION) {\n        changed.add(node.getString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node.getType() == Token.CALL || node.getType() == Token.NAME) {\n        changed.add(node.getString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n        changed.add(node.getString());\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "  if (t.getScopeDepth() <= 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() < 2) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 3) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (t.getScopeDepth() < 2) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (t.getScopeDepth() <= 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if (t.getScopeDepth() <= 3) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() == 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 2 || n.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (t.getScopeDepth() <= 2 || n.isGetProp()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "  if (t.getScopeDepth() <= 2 &&!NodeUtil.isLValue(n)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy lines start:\n        if (lineLength > 0) {\n// buggy lines end:\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) { b += 256; }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && lineLength <= currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_3_/src/java/org/apache/commons/codec/language/DoubleMetaphone.java_455-456": {
      "loc": "455-456",
      "input": "private int handleG(String value, \n                    DoubleMetaphoneResult result, \n                    int index, \n                    boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        index = handleGH(value, result, index);\n    } else if (charAt(value, index + 1) == 'N') {\n        if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n            result.append(\"KN\", \"N\");\n        } else if (!contains(value, index + 2, 2, \"EY\") && \n                   charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n            result.append(\"N\", \"KN\");\n        } else {\n            result.append(\"KN\");\n        }\n        index = index + 2;\n    } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n        result.append(\"KL\", \"L\");\n        index += 2;\n    } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n        result.append('K', 'J');\n        index += 2;\n    } else if ((contains(value, index + 1, 2, \"ER\") || \n                charAt(value, index + 1) == 'Y') &&\n               !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n               !contains(value, index - 1, 1, \"E\", \"I\") && \n               !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n        result.append('K', 'J');\n        index += 2;\n    } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n               contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n        if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n            result.append('K');\n// buggy lines start:\n        } else if (contains(value, index + 1, 4, \"IER\")) {\n// buggy lines end:\n            result.append('J');\n        } else {\n            result.append('J', 'K');\n        }\n        index += 2;\n    } else if (charAt(value, index + 1) == 'G') {\n        index += 2;\n        result.append('K');\n    } else {\n        index++;\n        result.append('K');\n    }\n    return index;\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "public Base64() {\n// buggy lines start:\n    this(false);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "public static String encodeBase64String(byte[] binaryData) {\n// buggy lines start:\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy lines start:\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n// buggy lines end:\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy lines start:\n    return new String(bytes, Charsets.ISO_8859_1);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy lines start:\n    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "\n// buggy lines start:\nprivate Object readResolve() {\n// buggy lines end:\n    calculateHashCode(keys);\n    return this;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n                ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy lines start:\n        if (read == 0 && inf.finished()) {\n            return -1;\n// buggy lines end:\n        }\n        crc.update(buffer, start, read);\n        return read;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy lines start:\n    currEntry = new TarArchiveEntry(headerBuf);\n// buggy lines end:\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    if (currEntry.isGNULongNameEntry()) {\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length = 0;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        getNextEntry();\n        if (currEntry == null) {\n            return null;\n        }\n        if (longName.length() > 0\n            && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n    }\n    if (currEntry.isPaxHeader()){ \n        paxHeaders();\n    }\n    if (currEntry.isGNUSparse()){ \n        readGNUSparse();\n    }\n    entrySize = currEntry.getSize();\n    return currEntry;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy lines start:\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i] != 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n// buggy lines end:\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer;\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = (hasUncompressedSize ? DWORD : 0)\n            + (hasCompressedSize ? DWORD : 0)\n            + (hasRelativeHeaderOffset ? DWORD : 0)\n            + (hasDiskStart ? WORD : 0);\n// buggy lines start:\n        if (rawCentralDirectoryData.length != expectedLength) {\n// buggy lines end:\n            throw new ZipException(\"central directory zip64 extended\"\n                                   + \" information extra field's length\"\n                                   + \" doesn't match central directory\"\n                                   + \" data.  Expected length \"\n                                   + expectedLength + \" but is \"\n                                   + rawCentralDirectoryData.length);\n        }\n        int offset = 0;\n        if (hasUncompressedSize) {\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasCompressedSize) {\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                     offset);\n            offset += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            relativeHeaderOffset =\n                new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasDiskStart) {\n            diskStart = new ZipLong(rawCentralDirectoryData, offset);\n            offset += WORD;\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy lines start:\n        dictSize |= (coder.properties[i + 1] << (8 * i));\n// buggy lines end:\n    }\n    if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n        throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n    }\n    return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy lines start:\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n// buggy lines end:\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy lines start:\n        if (currentByte == 0) {\n            break;\n        }\n// buggy lines end:\n        \n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "@Override\npublic boolean isDirectory() {\n    if (file != null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy lines start:\n    if (getName().endsWith(\"/\")) {\n// buggy lines end:\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n",
      "output": []
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "private static ZipLong unixTimeToZipLong(long l) {\n// buggy lines start:\n    final long TWO_TO_32 = 0x100000000L;\n    if (l >= TWO_TO_32) {\n// buggy lines end:\n        throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l);\n    }\n    return new ZipLong(l);\n}\n// fixed lines: \n",
      "output": []
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy lines start:\n    if (current == '\\n') {\n// buggy lines end:\n        lineCounter++;\n    }\n    lastChar = current;\n    return lastChar;\n}\n// fixed lines: \n",
      "output": []
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "public Map<String, Integer> getHeaderMap() {\n// buggy lines start:\n    return new LinkedHashMap<String, Integer>(this.headerMap);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy lines start:\n                final boolean emptyHeader = header.trim().isEmpty();\n// buggy lines end:\n                if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                            \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n                hdrMap.put(header, Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}\n// fixed lines: \n",
      "output": []
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy lines start:\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n// buggy lines end:\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}\n// fixed lines: \n",
      "output": []
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy lines start:\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n// buggy lines end:\n                \n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}\n// fixed lines: \n",
      "output": []
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy lines start:\n  TypeAdapter t =\n    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n// buggy lines end:\n  t.write(writer, fieldValue);\n}\n// fixed lines: \n",
      "output": []
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy lines start:\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n// buggy lines end:\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n// fixed lines: \n",
      "output": []
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy lines start:\n  if (in.peek() != JsonToken.STRING) {\n    throw new JsonParseException(\"The date should be a string value\");\n// buggy lines end:\n  }\n  Date date = deserializeToDate(in.nextString());\n  if (dateType == Date.class) {\n    return date;\n  } else if (dateType == Timestamp.class) {\n    return new Timestamp(date.getTime());\n  } else if (dateType == java.sql.Date.class) {\n    return new java.sql.Date(date.getTime());\n  } else {\n    throw new AssertionError();\n  }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy lines start:\n        char c = str.charAt(i++);\n// buggy lines end:\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy lines start:\n    for (int i = 0; i < len; ++i) {\n        char c = str.charAt(i);\n// buggy lines end:\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray != null)  return _resultArray;\n    if (_resultString != null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy lines start:\n    if (!_hasSegments)  return _currentSegment;\n// buggy lines end:\n    \n    return contentsAsArray();\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy lines start:\n    throw new JsonGenerationException(\"No native support for writing embedded objects\",\n// buggy lines end:\n            this);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy lines start:\n        if (i <= maxCode) {\n// buggy lines end:\n            if (codes[i] != 0) {\n                break;\n            }\n        } else if (!Character.isJavaIdentifierPart(c)) {\n            break;\n        }\n        ++_inputPtr;\n        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n        outBuf[outPtr++] = c;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    {\n        TextBuffer tb = _textBuffer;\n        char[] buf = tb.getTextBuffer();\n        int start = tb.getTextOffset();\n        int len = tb.size();\n        return _symbols.findSymbol(buf, start, len, hash);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "@Override\npublic boolean isCachable() {\n// buggy lines start:\n    return (_valueTypeDeserializer == null)\n// buggy lines end:\n            && (_ignorableProperties == null);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy lines start:\n    return (previous != null) && previous.equals(ann);\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy lines start:\n                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n// buggy lines end:\n\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n    default:\n        return (t.getRawClass() == Object.class);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_27_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java_794-795": {
      "loc": "794-795",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy lines start:\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n// buggy lines end:\n                ;\n            } else {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; \n                    }\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n            }\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; \n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy lines start:\n                || _hasAnnotation(a, JsonRawValue.class)) {\n// buggy lines end:\n            name = \"\";\n        } else {\n            return null;\n        }\n    }\n    return PropertyName.construct(name);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy lines start:\n            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n// buggy lines end:\n        } else {\n             visitor.expectNumberFormat(typeHint);\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy lines start:\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n// buggy lines end:\n            _valueHandler, _typeHandler, _asStatic);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy lines start:\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n// buggy lines end:\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy lines start:\n    sb.append(';');\n// buggy lines end:\n    return sb;\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy lines start:\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n// buggy lines end:\n            true));\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy lines start:\n            found = key.equals(prop.getName());\n// buggy lines end:\n            if (found) {\n                _propsInOrder[_findFromOrdered(prop)] = null;\n                continue;\n            }\n        }\n        props.add(prop);\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    init(props);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy lines start:\n    if (raw == String.class || raw == Object.class) {\n// buggy lines end:\n        return StringKD.forType(raw);\n    } else if (raw == UUID.class) {\n        kind = TYPE_UUID;\n    } else if (raw == Integer.class) {\n        kind = TYPE_INT;\n    } else if (raw == Long.class) {\n        kind = TYPE_LONG;\n    } else if (raw == Date.class) {\n        kind = TYPE_DATE;\n    } else if (raw == Calendar.class) {\n        kind = TYPE_CALENDAR;\n    } else if (raw == Boolean.class) {\n        kind = TYPE_BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = TYPE_BYTE;\n    } else if (raw == Character.class) {\n        kind = TYPE_CHAR;\n    } else if (raw == Short.class) {\n        kind = TYPE_SHORT;\n    } else if (raw == Float.class) {\n        kind = TYPE_FLOAT;\n    } else if (raw == Double.class) {\n        kind = TYPE_DOUBLE;\n    } else if (raw == URI.class) {\n        kind = TYPE_URI;\n    } else if (raw == URL.class) {\n        kind = TYPE_URL;\n    } else if (raw == Class.class) {\n        kind = TYPE_CLASS;\n    } else if (raw == Locale.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n        return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n    } else if (raw == Currency.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);\n        return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\n    } else {\n        return null;\n    }\n    return new StdKeyDeserializer(kind, raw);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-604": {
      "loc": "583-604",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n\t\tDeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy lines start:\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                while (t == JsonToken.FIELD_NAME) {\n                    p.nextToken();\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n// buggy lines end:\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy lines start:\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n// buggy lines end:\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1 != candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName != null) || (injectId != null);\n    if (!useProps && (paramDef != null)) {\n// buggy lines start:\n        paramName = candidate.findImplicitParamName(0);\n// buggy lines end:\n        useProps = (paramName != null) && paramDef.couldSerialize();\n    }\n    if (useProps) {\n        SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)\n        };\n        creators.addPropertyCreator(candidate.creator(), true, properties);\n        return;\n    }\n    _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n    if (paramDef != null) {\n        ((POJOPropertyBuilder) paramDef).removeConstructors();\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy lines start:\n        gen.writeObject(_value);\n// buggy lines end:\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy lines start:\n                buffer.assignParameter(typeProp, typeId);\n// buggy lines end:\n            }\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy lines start:\n    if (property == null) {\n        return this;\n    }\n// buggy lines end:\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = (shape == JsonFormat.Shape.STRING);\n    if (!hasLocale && !hasTZ && !asString) {\n        return this;\n    }\n    DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof StdDateFormat) {\n        StdDateFormat std = (StdDateFormat) df0;\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof SimpleDateFormat)) {\n        serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n    }\n    SimpleDateFormat df = (SimpleDateFormat) df0;\n    if (hasLocale) {\n        df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = (SimpleDateFormat) df.clone();\n    }\n    TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(Boolean.FALSE, df);\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy lines start:\n                    return null;\n// buggy lines end:\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n// fixed lines: \n",
      "output": []
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy lines start:\n    _rootNameLookup = src._rootNameLookup;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy lines start:\n        body().appendChild(new TextNode(\" \", \"\"));\n        body().appendChild(node);\n// buggy lines end:\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy lines start:\n        r.advance();\n// buggy lines end:\n        return;\n    }\n    if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar != input[offset])\n            while(++offset < length && startChar != input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy lines start:\n        if (offset < length) {\n// buggy lines end:\n            for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n            if (i == last) \n                return offset - pos;\n        }\n    }\n    return -1;\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy lines start:\n    return accum.toString().trim();\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy lines start:\n    Validate.notEmpty(name);\n// buggy lines end:\n    attr(\"name\", name);\n    attr(\"publicId\", publicId);\n    attr(\"systemId\", systemId);\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy lines start:\n    return this == o;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy lines start:\n        if (element.equals(search))\n// buggy lines end:\n            return i;\n    }\n    return null;\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy lines start:\n        } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {\n// buggy lines end:\n            transition(HtmlTreeBuilderState.InCell);\n            break;\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n            break;\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n            break;\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n            break;\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n            break; \n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n            break;\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break;\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n            break; \n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            break; \n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy lines start:\n                        accum.append(c);\n// buggy lines end:\n                    break;\n                case '<':\n                    if (!inAttribute)\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy lines start:\n                    if (!inAttribute)\n// buggy lines end:\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy lines start:\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy lines start:\n            attributes.remove(attrKey);\n// buggy lines end:\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "public boolean hasClass(String className) {\n// buggy lines start:\n    final String classAttr = attributes.get(\"class\");\n// buggy lines end:\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy lines start:\n    int bottom = stack.size() -1;\n    if (bottom > MaxScopeSearchDepth) {\n        bottom = MaxScopeSearchDepth;\n    }\n// buggy lines end:\n    final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n    for (int pos = bottom; pos >= top; pos--) {\n        final String elName = stack.get(pos).nodeName();\n        if (inSorted(elName, targetNames))\n            return true;\n        if (inSorted(elName, baseTypes))\n            return false;\n        if (extraTypes != null && inSorted(elName, extraTypes))\n            return false;\n    }\n    return false;\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy lines start:\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy lines end:\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "private void popStackToClose(Token.EndTag endTag) {\n// buggy lines start:\n    String elName = endTag.name();\n// buggy lines end:\n    Element firstFound = null;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; \n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next == firstFound)\n            break;\n    }\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy lines start:\n    if (doc.childNodeSize() > 0) {\n// buggy lines end:\n        Element el = doc.child(0);\n        decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n        decl.attributes().addAll(el.attributes());\n    }\n    return decl;\n}\n// fixed lines: \n",
      "output": []
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "public String getValue() {\n// buggy lines start:\n    return val;\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy lines start:\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n// buggy lines end:\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}\n// fixed lines: \n",
      "output": []
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "public final Object computeValue(EvalContext context) {\n// buggy lines start:\n    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n// buggy lines end:\n            ? Boolean.TRUE : Boolean.FALSE;\n}\n// fixed lines: \n",
      "output": []
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                    .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy lines start:\n            return equalStrings(namespaceURI, nodeNS);\n// buggy lines end:\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE :\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT :\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT :\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI :\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}\n// fixed lines: \n",
      "output": []
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "public int getLength() {\n// buggy lines start:\n    return ValueUtils.getLength(getBaseValue());\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": []
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy lines start:\n            pos += Character.charCount(Character.codePointAt(input, pos));\n// buggy lines end:\n        }\n    }\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            pos++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(c[pt]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            pos += Character.charCount(input.charAt(pt));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(c, pt);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            pos += Character.charCount(codePoints[pt]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            out.write(Character.codePointAt(input, pos));\n",
          "correctness": "timeout"
        },
        {
          "patch": "            pos += Character.charCount(input, pos);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            pos += Character.charCount(pt);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            pos += Character.charCount(Character.codePoints[pt]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            out.write(Character.charAt(pt));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy lines start:\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n// buggy lines end:\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n            cal1.getClass() == cal2.getClass());\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n",
          "correctness": "plausible"
        },
        {
          "patch": "            cal2.get(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR_OF_DAY) &&\n",
          "correctness": "plausible"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY()) &&\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n",
          "correctness": "plausible"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR_OF_DAY) &&\n",
          "correctness": "wrong"
        },
        {
          "patch": "            cal1.get(Calendar.HOUR_OF_AM) == cal2.get(Calendar.HOUR_OF_AM) &&\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "public String format(Date date) {\n// buggy lines start:\n    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy lines end:\n    c.setTime(date);\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    Calendar c = new GregorianCalendar();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(timeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(getTimeZone());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    c = new GregorianCalendar(mTimeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(mDefaultTimeZone);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    final Calendar c = new GregorianCalendar(mTimeZone);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Calendar c = new GregorianCalendar(date);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = getCalendar();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Calendar c = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "\n// buggy lines start:\nstatic float toJavaVersionInt(String version) {\n// buggy lines end:\n    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "static int toJavaVersionInt(String version) {\n",
          "correctness": "wrong"
        },
        {
          "patch": " static int toJavaVersionInt(String version) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "static float toJavaVersionInt(String version) {\n",
          "correctness": "wrong"
        },
        {
          "patch": " static float toJavaVersionInt(String version) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "public static float toJavaVersionInt(String version) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "static float toJavaVersionInt(String version, JAVA_VERSION_TRIM_SIZE) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "static float toJavaVersionInt(String version, JAVA_VERSION_TRIM_SIZE);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "static float toJavaVersionInt(String version, int size) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return toVersionInt(toJavaVersionIntArray(version));\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy lines start:\n        classes[i] = array[i].getClass();\n// buggy lines end:\n    }\n    return classes;\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "        classes[i] = array[i] == null? null : array[i].getClass();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        classes[i] = getClass(array[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = array[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = array[i].getClass();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = ArrayUtils.getClass(array[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        classes[i] = array[i]!= null? array[i].getClass() : null;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        classes[i] = (array[i] == null)? null : array[i].getClass();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        classes[i] = (Class<?>) array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        classes[i] = (Class<?>) array[i].getClass();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        Class<?> clazz = array[i].getClass();\n        classes[i] = clazz;\n",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy lines start:\n    return contains(str.toUpperCase(), searchStr.toUpperCase());\n// buggy lines end:\n}\n// fixed lines: \n",
      "output": [
        {
          "patch": "    return contains(str.toUpperCase(), searchStr);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toUpperCase(), false);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toUpperCase(), true);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return contains(str, searchStr);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toUpperCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str, searchStr.toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(str.toLowerCase(), searchStr.toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return containsIgnoreCase(str, searchStr);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return contains(searchStr);\n",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}