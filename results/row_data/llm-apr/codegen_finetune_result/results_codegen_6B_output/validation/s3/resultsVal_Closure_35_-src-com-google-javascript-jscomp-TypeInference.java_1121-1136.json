{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codegen_6B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689748061649,
      "ESLB": 1689748081669,
      "SPVS": 1689748081669,
      "SPVAP": 1689748081671,
      "EPVAP": 1689748081672,
      "SPVATF": 1689748081672,
      "EPVATF": 1689748083680,
      "SPVATR": 1689748083680,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689748083681
    },
    {
      "rank": 1,
      "SSLB": 1689748083681,
      "ESLB": 1689748103702,
      "SPVS": 1689748103702,
      "SPVAP": 1689748103703,
      "EPVAP": 1689748103704,
      "SPVATF": 1689748103704,
      "EPVATF": 1689748105711,
      "SPVATR": 1689748105711,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689748105712
    },
    {
      "rank": 2,
      "SSLB": 1689748105712,
      "ESLB": 1689748125731,
      "SPVS": 1689748125731,
      "SPVAP": 1689748125732,
      "EPVAP": 1689748125733,
      "SPVATF": 1689748125733,
      "EPVATF": 1689748128741,
      "SPVATR": 1689748128741,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689748128742
    },
    {
      "rank": 3,
      "SSLB": 1689748128743,
      "ESLB": 1689748148759,
      "SPVS": 1689748148759,
      "SPVAP": 1689748148764,
      "EPVAP": 1689748148765,
      "SPVATF": 1689748148765,
      "EPVATF": 1689748153788,
      "SPVATR": 1689748153788,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, propType, null);\n",
      "EPVS": 1689748153789
    },
    {
      "rank": 4,
      "SSLB": 1689748153789,
      "ESLB": 1689748173807,
      "SPVS": 1689748173807,
      "SPVAP": 1689748173808,
      "EPVAP": 1689748173809,
      "SPVATF": 1689748173809,
      "EPVATF": 1689748178819,
      "SPVATR": 1689748178819,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n        return;\n",
      "EPVS": 1689748178820
    },
    {
      "rank": 5,
      "SSLB": 1689748178820,
      "ESLB": 1689748198840,
      "SPVS": 1689748198840,
      "SPVAP": 1689748198841,
      "EPVAP": 1689748198843,
      "SPVATF": 1689748198843,
      "EPVATF": 1689748203853,
      "SPVATR": 1689748203853,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n        }\n",
      "EPVS": 1689748203854
    },
    {
      "rank": 6,
      "SSLB": 1689748203854,
      "ESLB": 1689748223871,
      "SPVS": 1689748223871,
      "SPVAP": 1689748223872,
      "EPVAP": 1689748223873,
      "SPVATF": 1689748223873,
      "EPVATF": 1689748228884,
      "SPVATR": 1689748228884,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689748228885
    },
    {
      "rank": 7,
      "SSLB": 1689748228885,
      "ESLB": 1689748248905,
      "SPVS": 1689748248905,
      "SPVAP": 1689748248908,
      "EPVAP": 1689748248909,
      "SPVATF": 1689748248909,
      "EPVATF": 1689748253919,
      "SPVATR": 1689748253919,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n            }\n        }\n",
      "EPVS": 1689748253920
    },
    {
      "rank": 8,
      "SSLB": 1689748253920,
      "ESLB": 1689748273939,
      "SPVS": 1689748273939,
      "SPVAP": 1689748273940,
      "EPVAP": 1689748273941,
      "SPVATF": 1689748273941,
      "EPVATF": 1689748278950,
      "SPVATR": 1689748278950,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = objType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689748278951
    },
    {
      "rank": 9,
      "SSLB": 1689748278951,
      "ESLB": 1689748298971,
      "SPVS": 1689748298971,
      "SPVAP": 1689748298972,
      "EPVAP": 1689748298973,
      "SPVATF": 1689748298973,
      "EPVATF": 1689748300986,
      "SPVATR": 1689748300986,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "",
      "EPVS": 1689748300987
    }
  ],
  "SSLI": 1689739947429,
  "ESLI": 1689739977460,
  "hostname": "gros-51.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}