{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codegen_6B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689710912199,
      "ESLB": 1689710932219,
      "SPVS": 1689710932219,
      "SPVAP": 1689710932223,
      "EPVAP": 1689710932224,
      "SPVATF": 1689710932224,
      "EPVATF": 1689710935241,
      "SPVATR": 1689710935241,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689710935243
    },
    {
      "rank": 1,
      "SSLB": 1689710935243,
      "ESLB": 1689710955263,
      "SPVS": 1689710955263,
      "SPVAP": 1689710955265,
      "EPVAP": 1689710955266,
      "SPVATF": 1689710955266,
      "EPVATF": 1689710958273,
      "SPVATR": 1689710958273,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689710958275
    },
    {
      "rank": 2,
      "SSLB": 1689710958275,
      "ESLB": 1689710978279,
      "SPVS": 1689710978279,
      "SPVAP": 1689710978285,
      "EPVAP": 1689710978286,
      "SPVATF": 1689710978286,
      "EPVATF": 1689710980292,
      "SPVATR": 1689710980292,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689710980293
    },
    {
      "rank": 3,
      "SSLB": 1689710980293,
      "ESLB": 1689711000313,
      "SPVS": 1689711000313,
      "SPVAP": 1689711000315,
      "EPVAP": 1689711000316,
      "SPVATF": 1689711000316,
      "EPVATF": 1689711006343,
      "SPVATR": 1689711006343,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, propType, null);\n",
      "EPVS": 1689711006345
    },
    {
      "rank": 4,
      "SSLB": 1689711006345,
      "ESLB": 1689711026365,
      "SPVS": 1689711026365,
      "SPVAP": 1689711026367,
      "EPVAP": 1689711026368,
      "SPVATF": 1689711026368,
      "EPVATF": 1689711031377,
      "SPVATR": 1689711031377,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n        return;\n",
      "EPVS": 1689711031379
    },
    {
      "rank": 5,
      "SSLB": 1689711031379,
      "ESLB": 1689711051399,
      "SPVS": 1689711051399,
      "SPVAP": 1689711051403,
      "EPVAP": 1689711051404,
      "SPVATF": 1689711051404,
      "EPVATF": 1689711056413,
      "SPVATR": 1689711056413,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n        }\n",
      "EPVS": 1689711056414
    },
    {
      "rank": 6,
      "SSLB": 1689711056414,
      "ESLB": 1689711076434,
      "SPVS": 1689711076434,
      "SPVAP": 1689711076485,
      "EPVAP": 1689711076491,
      "SPVATF": 1689711076491,
      "EPVATF": 1689711083778,
      "SPVATR": 1689711083778,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689711083779
    },
    {
      "rank": 7,
      "SSLB": 1689711083779,
      "ESLB": 1689711103800,
      "SPVS": 1689711103800,
      "SPVAP": 1689711103801,
      "EPVAP": 1689711103803,
      "SPVATF": 1689711103803,
      "EPVATF": 1689711109812,
      "SPVATR": 1689711109812,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n            }\n        }\n",
      "EPVS": 1689711109813
    },
    {
      "rank": 8,
      "SSLB": 1689711109813,
      "ESLB": 1689711129833,
      "SPVS": 1689711129833,
      "SPVAP": 1689711129835,
      "EPVAP": 1689711129837,
      "SPVATF": 1689711129837,
      "EPVATF": 1689711134845,
      "SPVATR": 1689711134845,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = objType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689711134846
    },
    {
      "rank": 9,
      "SSLB": 1689711134846,
      "ESLB": 1689711154866,
      "SPVS": 1689711154866,
      "SPVAP": 1689711154871,
      "EPVAP": 1689711154873,
      "SPVATF": 1689711154873,
      "EPVATF": 1689711156887,
      "SPVATR": 1689711156887,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "",
      "EPVS": 1689711156888
    }
  ],
  "SSLI": 1689702672593,
  "ESLI": 1689702702624,
  "hostname": "gros-51.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}