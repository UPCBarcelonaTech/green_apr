{
  "key": "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136",
  "proj": "Closure",
  "bug_id": "35",
  "loc": "1121-1136",
  "input_file": "codegen_6B_output.json",
  "path": "/src/com/google/javascript/jscomp/TypeInference.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689906175815,
      "ESLB": 1689906195826,
      "SPVS": 1689906195826,
      "SPVAP": 1689906195828,
      "EPVAP": 1689906195829,
      "SPVATF": 1689906195829,
      "EPVATF": 1689906198838,
      "SPVATR": 1689906198838,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689906198839
    },
    {
      "rank": 1,
      "SSLB": 1689906198839,
      "ESLB": 1689906218855,
      "SPVS": 1689906218855,
      "SPVAP": 1689906218857,
      "EPVAP": 1689906218858,
      "SPVATF": 1689906218858,
      "EPVATF": 1689906220866,
      "SPVATR": 1689906220866,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689906220867
    },
    {
      "rank": 2,
      "SSLB": 1689906220867,
      "ESLB": 1689906240885,
      "SPVS": 1689906240885,
      "SPVAP": 1689906240886,
      "EPVAP": 1689906240887,
      "SPVATF": 1689906240887,
      "EPVATF": 1689906243896,
      "SPVATR": 1689906243896,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n",
      "EPVS": 1689906243897
    },
    {
      "rank": 3,
      "SSLB": 1689906243897,
      "ESLB": 1689906263917,
      "SPVS": 1689906263917,
      "SPVAP": 1689906263918,
      "EPVAP": 1689906263919,
      "SPVATF": 1689906263919,
      "EPVATF": 1689906269931,
      "SPVATR": 1689906269931,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, propType, null);\n",
      "EPVS": 1689906269932
    },
    {
      "rank": 4,
      "SSLB": 1689906269932,
      "ESLB": 1689906289951,
      "SPVS": 1689906289951,
      "SPVAP": 1689906289953,
      "EPVAP": 1689906289954,
      "SPVATF": 1689906289954,
      "EPVATF": 1689906294964,
      "SPVATR": 1689906294964,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n        return;\n",
      "EPVS": 1689906294965
    },
    {
      "rank": 5,
      "SSLB": 1689906294965,
      "ESLB": 1689906314985,
      "SPVS": 1689906314985,
      "SPVAP": 1689906314986,
      "EPVAP": 1689906314987,
      "SPVATF": 1689906314987,
      "EPVATF": 1689906319997,
      "SPVATR": 1689906319997,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n        }\n",
      "EPVS": 1689906319998
    },
    {
      "rank": 6,
      "SSLB": 1689906319998,
      "ESLB": 1689906340018,
      "SPVS": 1689906340018,
      "SPVAP": 1689906340019,
      "EPVAP": 1689906340020,
      "SPVATF": 1689906340020,
      "EPVATF": 1689906345030,
      "SPVATR": 1689906345030,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n",
      "EPVS": 1689906345031
    },
    {
      "rank": 7,
      "SSLB": 1689906345031,
      "ESLB": 1689906365047,
      "SPVS": 1689906365047,
      "SPVAP": 1689906365049,
      "EPVAP": 1689906365050,
      "SPVATF": 1689906365050,
      "EPVATF": 1689906370060,
      "SPVATR": 1689906370060,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                objType.defineInferredProperty(prop, getNativeType(VOID_TYPE).getLeastSupertype(propType), null);\n            }\n        }\n",
      "EPVS": 1689906370061
    },
    {
      "rank": 8,
      "SSLB": 1689906370061,
      "ESLB": 1689906390081,
      "SPVS": 1689906390081,
      "SPVAP": 1689906390082,
      "EPVAP": 1689906390083,
      "SPVATF": 1689906390083,
      "EPVATF": 1689906395094,
      "SPVATR": 1689906395094,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = objType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n",
      "EPVS": 1689906395094
    },
    {
      "rank": 9,
      "SSLB": 1689906395094,
      "ESLB": 1689906415115,
      "SPVS": 1689906415115,
      "SPVAP": 1689906415116,
      "EPVAP": 1689906415117,
      "SPVATF": 1689906415117,
      "EPVATF": 1689906417125,
      "SPVATR": 1689906417125,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "",
      "EPVS": 1689906417126
    }
  ],
  "SSLI": 1689898051102,
  "ESLI": 1689898081132,
  "hostname": "gros-53.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}