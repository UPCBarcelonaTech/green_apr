{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689862099954",
  "GPR[ESLB]": "1689862119974",
  "file": "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777",
  "input": {
    "loc": "1776-1777",
    "input": "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j) != thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Lang_61_-src-java-org-apache-commons-lang-text-StrBuilder.java_1776-1777.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689859931667",
  "GPR[ESLI]": "1689859961698",
  "GPR[SPS]": "1689862120024",
  "nrTokens": 258,
  "status": "ok",
  "GPR[EPS]": "1689862124927",
  "time": 4903,
  "tokentime": 4,
  "inferencetime": 4899,
  "output": [
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - startIndex;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - startIndex - strLen;\n<|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - strLen + 1;\n<|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - startIndex + 1;\n<|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - strLen - startIndex;\n<|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - strLen + startIndex;\n<|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - startIndex - 1;\n<|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = size - startIndex;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy lines start:\n    int len = thisBuf.length - strLen;\n// buggy lines end:\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j)!= thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n// fixed lines: \n    int len = thisBuf.length - offset;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}