{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689863196856",
  "GPR[ESLB]": "1689863216876",
  "file": "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139",
  "input": {
    "loc": "138-139",
    "input": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2 != val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Time_15_-src-main-java-org-joda-time-field-FieldUtils.java_138-139.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689859931667",
  "GPR[ESLI]": "1689859961698",
  "GPR[SPS]": "1689863216923",
  "nrTokens": 144,
  "status": "ok",
  "GPR[EPS]": "1689863219483",
  "time": 2560,
  "tokentime": 3,
  "inferencetime": 2557,
  "output": [
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val1L;\n<|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val2;\n<|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return val1;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val1 - 1;\n<|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return 0;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val1;\n<|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val1 * 2;\n<|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return -val;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n            return 0L;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy lines start:\n            return -val1;\n// buggy lines end:\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2!= val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}\n// fixed lines: \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}