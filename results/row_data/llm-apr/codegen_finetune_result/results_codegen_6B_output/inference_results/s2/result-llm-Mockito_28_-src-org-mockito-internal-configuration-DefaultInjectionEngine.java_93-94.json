{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689863072794",
  "GPR[ESLB]": "1689863092814",
  "file": "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94",
  "input": {
    "loc": "93-94",
    "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Mockito_28_-src-org-mockito-internal-configuration-DefaultInjectionEngine.java_93-94.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689859931667",
  "GPR[ESLI]": "1689859961698",
  "GPR[SPS]": "1689863092866",
  "nrTokens": 98,
  "status": "ok",
  "GPR[EPS]": "1689863096559",
  "time": 3693,
  "tokentime": 3,
  "inferencetime": 3690,
  "output": [
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(field);\n<|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        filterCandidate(mocks, field, fieldInstance).thenInject();\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(true);\n<|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(null);\n<|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(field, fieldInstance).thenInject();\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance, true).thenInject();\n<|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(false);\n<|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        filterCandidate(mocks, field, fieldInstance);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy lines start:\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n// buggy lines end:\n    }\n}\n// fixed lines: \n        candidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}