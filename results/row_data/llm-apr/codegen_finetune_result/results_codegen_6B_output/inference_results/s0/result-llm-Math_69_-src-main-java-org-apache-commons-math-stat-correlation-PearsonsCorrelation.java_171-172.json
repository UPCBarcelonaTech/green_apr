{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1688029717341",
  "GPR[ESLB]": "1688029737361",
  "file": "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172",
  "input": {
    "loc": "171-172",
    "input": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Math_69_-src-main-java-org-apache-commons-math-stat-correlation-PearsonsCorrelation.java_171-172.txt",
  "OAR_JOB_ID": "1550797",
  "GPR[SSLI]": "1688027048437",
  "GPR[ESLI]": "1688027078467",
  "GPR[SPS]": "1688029737402",
  "nrTokens": 239,
  "status": "ok",
  "GPR[EPS]": "1688029742778",
  "time": 5376,
  "tokentime": 4,
  "inferencetime": 5372,
  "output": [
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 2 * tDistribution.cumulativeProbability(-t);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = tDistribution.cumulativeProbability(t);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = tDistribution.cumulativeProbability(-t);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(-t));\n<|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 1 - tDistribution.cumulativeProbability(t);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = (1 - tDistribution.cumulativeProbability(t));\n<|endoftext|><|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 2.0 * tDistribution.cumulativeProbability(-t);\n<|endoftext|><|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n<|endoftext|>",
    "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy lines start:\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n// buggy lines end:\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}\n// fixed lines: \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}