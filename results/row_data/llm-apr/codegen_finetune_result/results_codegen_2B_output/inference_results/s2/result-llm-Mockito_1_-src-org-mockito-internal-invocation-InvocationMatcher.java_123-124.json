{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689859512539",
  "GPR[ESLB]": "1689859532559",
  "file": "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124",
  "input": {
    "loc": "123-124",
    "input": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Mockito_1_-src-org-mockito-internal-invocation-InvocationMatcher.java_123-124.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689856713965",
  "GPR[ESLI]": "1689856743996",
  "GPR[SPS]": "1689859532602",
  "nrTokens": 163,
  "status": "ok",
  "GPR[EPS]": "1689859535445",
  "time": 2843,
  "tokentime": 3,
  "inferencetime": 2840,
  "output": [
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        throw new UnsupportedOperationException(\"String_Node_Str\");\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        return;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        if (indexOfVararg >= 0) {\n            throw new UnsupportedOperationException();\n        }\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        throw new UnsupportedOperationException(\"String_Node_Str\" + invocation.getMethod() + \"String_Node_Str\");\n<|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        throw new UnsupportedOperationException(\"String_Node_Str\" + matchers.size() + \"String_Node_Str\");\n<|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        if (indexOfVararg < 0) {\n            throw new UnsupportedOperationException();\n        }\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        if (matchers.size()!= 0) {\n            throw new UnsupportedOperationException();\n        }\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        if (indexOfVararg == -1) {\n            throw new UnsupportedOperationException();\n        }\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        throw new UnsupportedOperationException(String.format(\"String_Node_Str\", invocation.getMethod().getSignature()));\n<|endoftext|>",
    "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy lines start:\n        throw new UnsupportedOperationException();\n// buggy lines end:\n\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n// fixed lines: \n        throw new UnsupportedOperationException(String.format(\"String_Node_Str\", invocation.getMethod().getName()));\n<|endoftext|><|endoftext|>"
  ]
}