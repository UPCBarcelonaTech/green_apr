{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1687989995416",
  "GPR[ESLB]": "1687990015436",
  "file": "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885",
  "input": {
    "loc": "884-885",
    "input": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Lang_59_-src-java-org-apache-commons-lang-text-StrBuilder.java_884-885.txt",
  "OAR_JOB_ID": "1548579",
  "GPR[SSLI]": "1687987971813",
  "GPR[ESLI]": "1687988001843",
  "GPR[SPS]": "1687990015479",
  "nrTokens": 203,
  "status": "ok",
  "GPR[EPS]": "1687990018104",
  "time": 2625,
  "tokentime": 3,
  "inferencetime": 2622,
  "output": [
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, 0);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, size + width);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, strLen);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, str.length());\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, size, true);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, size - width);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, size + 1);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, strLen, buffer, size + strLen);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n            str.getChars(0, Math.min(strLen, width), buffer, size);\n<|endoftext|>",
    "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy lines start:\n            str.getChars(0, strLen, buffer, size);\n// buggy lines end:\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}\n// fixed lines: \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}