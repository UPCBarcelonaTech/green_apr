{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_2B_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689885868446,
      "ESLB": 1689885888466,
      "SPVS": 1689885888466,
      "SPVAP": 1689885888468,
      "EPVAP": 1689885888469,
      "SPVATF": 1689885888469,
      "EPVATF": 1689885890475,
      "SPVATR": 1689885890475,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689885890476
    },
    {
      "rank": 1,
      "SSLB": 1689885890476,
      "ESLB": 1689885910496,
      "SPVS": 1689885910496,
      "SPVAP": 1689885910497,
      "EPVAP": 1689885910498,
      "SPVATF": 1689885910498,
      "EPVATF": 1689885912504,
      "SPVATR": 1689885912504,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689885912505
    },
    {
      "rank": 2,
      "SSLB": 1689885912505,
      "ESLB": 1689885932525,
      "SPVS": 1689885932525,
      "SPVAP": 1689885932529,
      "EPVAP": 1689885932530,
      "SPVATF": 1689885932530,
      "EPVATF": 1689885937545,
      "SPVATR": 1689885937545,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689885937546
    },
    {
      "rank": 3,
      "SSLB": 1689885937546,
      "ESLB": 1689885957566,
      "SPVS": 1689885957566,
      "SPVAP": 1689885957571,
      "EPVAP": 1689885957572,
      "SPVATF": 1689885957572,
      "EPVATF": 1689885959579,
      "SPVATR": 1689885959579,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeast",
      "EPVS": 1689885959579
    },
    {
      "rank": 4,
      "SSLB": 1689885959579,
      "ESLB": 1689885979583,
      "SPVS": 1689885979583,
      "SPVAP": 1689885979584,
      "EPVAP": 1689885979585,
      "SPVATF": 1689885979585,
      "EPVATF": 1689885984593,
      "SPVATR": 1689885984593,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n",
      "EPVS": 1689885984594
    },
    {
      "rank": 5,
      "SSLB": 1689885984594,
      "ESLB": 1689886004614,
      "SPVS": 1689886004614,
      "SPVAP": 1689886004615,
      "EPVAP": 1689886004616,
      "SPVATF": 1689886004616,
      "EPVATF": 1689886006638,
      "SPVATR": 1689886006638,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689886006639
    },
    {
      "rank": 6,
      "SSLB": 1689886006639,
      "ESLB": 1689886026659,
      "SPVS": 1689886026659,
      "SPVAP": 1689886026660,
      "EPVAP": 1689886026661,
      "SPVATF": 1689886026661,
      "EPVATF": 1689886031670,
      "SPVATR": 1689886031670,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n",
      "EPVS": 1689886031671
    },
    {
      "rank": 7,
      "SSLB": 1689886031671,
      "ESLB": 1689886051691,
      "SPVS": 1689886051691,
      "SPVAP": 1689886051692,
      "EPVAP": 1689886051693,
      "SPVATF": 1689886051693,
      "EPVATF": 1689886053699,
      "SPVATR": 1689886053699,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (!isRecordType(constraintObj)) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            define",
      "EPVS": 1689886053700
    },
    {
      "rank": 8,
      "SSLB": 1689886053700,
      "ESLB": 1689886073720,
      "SPVS": 1689886073720,
      "SPVAP": 1689886073722,
      "EPVAP": 1689886073722,
      "SPVATF": 1689886073722,
      "EPVATF": 1689886076731,
      "SPVATR": 1689886076731,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n    if (constraintObjType.isRecordType()) {\n        for (String prop : constraintObjType.getOwnPropertyNames()) {\n            JSType propType = constraintObjType.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLe",
      "EPVS": 1689886076732
    },
    {
      "rank": 9,
      "SSLB": 1689886076732,
      "ESLB": 1689886096735,
      "SPVS": 1689886096735,
      "SPVAP": 1689886096736,
      "EPVAP": 1689886096737,
      "SPVATF": 1689886096737,
      "EPVATF": 1689886098743,
      "SPVATR": 1689886098743,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689886098744
    }
  ],
  "SSLI": 1689878159933,
  "ESLI": 1689878189963,
  "hostname": "gros-52.nancy.grid5000.fr",
  "OAR_JOB_ID": "4242627"
}