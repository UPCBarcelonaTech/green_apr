{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_2B_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688673048870,
      "ESLB": 1688673068890,
      "SPVS": 1688673068890,
      "SPVAP": 1688673068892,
      "EPVAP": 1688673068893,
      "SPVATF": 1688673068893,
      "EPVATF": 1688673071902,
      "SPVATR": 1688673071902,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688673071903
    },
    {
      "rank": 1,
      "SSLB": 1688673071903,
      "ESLB": 1688673091923,
      "SPVS": 1688673091923,
      "SPVAP": 1688673091924,
      "EPVAP": 1688673091925,
      "SPVATF": 1688673091925,
      "EPVATF": 1688673093933,
      "SPVATR": 1688673093933,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688673093934
    },
    {
      "rank": 2,
      "SSLB": 1688673093934,
      "ESLB": 1688673113954,
      "SPVS": 1688673113954,
      "SPVAP": 1688673113956,
      "EPVAP": 1688673113957,
      "SPVATF": 1688673113957,
      "EPVATF": 1688673118970,
      "SPVATR": 1688673118970,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1688673118971
    },
    {
      "rank": 3,
      "SSLB": 1688673118971,
      "ESLB": 1688673138991,
      "SPVS": 1688673138991,
      "SPVAP": 1688673138992,
      "EPVAP": 1688673138993,
      "SPVATF": 1688673138993,
      "EPVATF": 1688673141001,
      "SPVATR": 1688673141001,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeast",
      "EPVS": 1688673141002
    },
    {
      "rank": 4,
      "SSLB": 1688673141002,
      "ESLB": 1688673161022,
      "SPVS": 1688673161022,
      "SPVAP": 1688673161025,
      "EPVAP": 1688673161026,
      "SPVATF": 1688673161026,
      "EPVATF": 1688673166036,
      "SPVATR": 1688673166036,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n",
      "EPVS": 1688673166038
    },
    {
      "rank": 5,
      "SSLB": 1688673166038,
      "ESLB": 1688673186058,
      "SPVS": 1688673186058,
      "SPVAP": 1688673186059,
      "EPVAP": 1688673186060,
      "SPVATF": 1688673186060,
      "EPVATF": 1688673188069,
      "SPVATR": 1688673188069,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688673188069
    },
    {
      "rank": 6,
      "SSLB": 1688673188069,
      "ESLB": 1688673208090,
      "SPVS": 1688673208090,
      "SPVAP": 1688673208093,
      "EPVAP": 1688673208094,
      "SPVATF": 1688673208094,
      "EPVATF": 1688673213105,
      "SPVATR": 1688673213105,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n",
      "EPVS": 1688673213105
    },
    {
      "rank": 7,
      "SSLB": 1688673213105,
      "ESLB": 1688673233126,
      "SPVS": 1688673233126,
      "SPVAP": 1688673233127,
      "EPVAP": 1688673233128,
      "SPVATF": 1688673233128,
      "EPVATF": 1688673235135,
      "SPVATR": 1688673235135,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (!isRecordType(constraintObj)) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            define",
      "EPVS": 1688673235136
    },
    {
      "rank": 8,
      "SSLB": 1688673235136,
      "ESLB": 1688673255156,
      "SPVS": 1688673255156,
      "SPVAP": 1688673255157,
      "EPVAP": 1688673255158,
      "SPVATF": 1688673255158,
      "EPVATF": 1688673257180,
      "SPVATR": 1688673257180,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n    if (constraintObjType.isRecordType()) {\n        for (String prop : constraintObjType.getOwnPropertyNames()) {\n            JSType propType = constraintObjType.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLe",
      "EPVS": 1688673257181
    },
    {
      "rank": 9,
      "SSLB": 1688673257181,
      "ESLB": 1688673277201,
      "SPVS": 1688673277201,
      "SPVAP": 1688673277202,
      "EPVAP": 1688673277203,
      "SPVATF": 1688673277203,
      "EPVATF": 1688673280211,
      "SPVATR": 1688673280211,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688673280213
    }
  ],
  "SSLI": 1688665421008,
  "ESLI": 1688665451038,
  "hostname": "gros-58.nancy.grid5000.fr",
  "OAR_JOB_ID": "4221111"
}