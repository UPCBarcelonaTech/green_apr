{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_2B_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689730079337,
      "ESLB": 1689730099357,
      "SPVS": 1689730099357,
      "SPVAP": 1689730099360,
      "EPVAP": 1689730099361,
      "SPVATF": 1689730099361,
      "EPVATF": 1689730102366,
      "SPVATR": 1689730102366,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689730102367
    },
    {
      "rank": 1,
      "SSLB": 1689730102367,
      "ESLB": 1689730122387,
      "SPVS": 1689730122387,
      "SPVAP": 1689730122388,
      "EPVAP": 1689730122389,
      "SPVATF": 1689730122389,
      "EPVATF": 1689730124394,
      "SPVATR": 1689730124394,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689730124395
    },
    {
      "rank": 2,
      "SSLB": 1689730124395,
      "ESLB": 1689730144415,
      "SPVS": 1689730144415,
      "SPVAP": 1689730144416,
      "EPVAP": 1689730144417,
      "SPVATF": 1689730144417,
      "EPVATF": 1689730149439,
      "SPVATR": 1689730149439,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689730149440
    },
    {
      "rank": 3,
      "SSLB": 1689730149440,
      "ESLB": 1689730169460,
      "SPVS": 1689730169460,
      "SPVAP": 1689730169463,
      "EPVAP": 1689730169464,
      "SPVATF": 1689730169464,
      "EPVATF": 1689730171469,
      "SPVATR": 1689730171469,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeast",
      "EPVS": 1689730171470
    },
    {
      "rank": 4,
      "SSLB": 1689730171470,
      "ESLB": 1689730191490,
      "SPVS": 1689730191490,
      "SPVAP": 1689730191491,
      "EPVAP": 1689730191492,
      "SPVATF": 1689730191492,
      "EPVATF": 1689730196500,
      "SPVATR": 1689730196500,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n",
      "EPVS": 1689730196501
    },
    {
      "rank": 5,
      "SSLB": 1689730196501,
      "ESLB": 1689730216521,
      "SPVS": 1689730216521,
      "SPVAP": 1689730216522,
      "EPVAP": 1689730216523,
      "SPVATF": 1689730216523,
      "EPVATF": 1689730219534,
      "SPVATR": 1689730219535,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689730219535
    },
    {
      "rank": 6,
      "SSLB": 1689730219535,
      "ESLB": 1689730239556,
      "SPVS": 1689730239556,
      "SPVAP": 1689730239556,
      "EPVAP": 1689730239557,
      "SPVATF": 1689730239557,
      "EPVATF": 1689730244566,
      "SPVATR": 1689730244566,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n",
      "EPVS": 1689730244567
    },
    {
      "rank": 7,
      "SSLB": 1689730244567,
      "ESLB": 1689730264587,
      "SPVS": 1689730264587,
      "SPVAP": 1689730264588,
      "EPVAP": 1689730264588,
      "SPVATF": 1689730264588,
      "EPVATF": 1689730266594,
      "SPVATR": 1689730266594,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (!isRecordType(constraintObj)) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            define",
      "EPVS": 1689730266595
    },
    {
      "rank": 8,
      "SSLB": 1689730266595,
      "ESLB": 1689730286615,
      "SPVS": 1689730286615,
      "SPVAP": 1689730286617,
      "EPVAP": 1689730286618,
      "SPVATF": 1689730286618,
      "EPVATF": 1689730289627,
      "SPVATR": 1689730289627,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n    if (constraintObjType.isRecordType()) {\n        for (String prop : constraintObjType.getOwnPropertyNames()) {\n            JSType propType = constraintObjType.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLe",
      "EPVS": 1689730289628
    },
    {
      "rank": 9,
      "SSLB": 1689730289628,
      "ESLB": 1689730309648,
      "SPVS": 1689730309648,
      "SPVAP": 1689730309649,
      "EPVAP": 1689730309649,
      "SPVATF": 1689730309649,
      "EPVATF": 1689730312656,
      "SPVATR": 1689730312656,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689730312658
    }
  ],
  "SSLI": 1689722371220,
  "ESLI": 1689722401250,
  "hostname": "gros-50.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}