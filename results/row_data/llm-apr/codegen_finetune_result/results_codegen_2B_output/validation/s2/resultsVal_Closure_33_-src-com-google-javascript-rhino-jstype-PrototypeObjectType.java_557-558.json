{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_2B_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689707907959,
      "ESLB": 1689707927979,
      "SPVS": 1689707927980,
      "SPVAP": 1689707927999,
      "EPVAP": 1689707928002,
      "SPVATF": 1689707928002,
      "EPVATF": 1689707931010,
      "SPVATR": 1689707931010,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689707931011
    },
    {
      "rank": 1,
      "SSLB": 1689707931011,
      "ESLB": 1689707951032,
      "SPVS": 1689707951032,
      "SPVAP": 1689707951039,
      "EPVAP": 1689707951041,
      "SPVATF": 1689707951041,
      "EPVATF": 1689707954050,
      "SPVATR": 1689707954050,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689707954055
    },
    {
      "rank": 2,
      "SSLB": 1689707954055,
      "ESLB": 1689707974075,
      "SPVS": 1689707974075,
      "SPVAP": 1689707974084,
      "EPVAP": 1689707974085,
      "SPVATF": 1689707974085,
      "EPVATF": 1689707980113,
      "SPVATR": 1689707980113,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689707980115
    },
    {
      "rank": 3,
      "SSLB": 1689707980115,
      "ESLB": 1689708000135,
      "SPVS": 1689708000135,
      "SPVAP": 1689708000139,
      "EPVAP": 1689708000141,
      "SPVATF": 1689708000141,
      "EPVATF": 1689708003147,
      "SPVATR": 1689708003147,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeast",
      "EPVS": 1689708003149
    },
    {
      "rank": 4,
      "SSLB": 1689708003149,
      "ESLB": 1689708023169,
      "SPVS": 1689708023169,
      "SPVAP": 1689708023174,
      "EPVAP": 1689708023175,
      "SPVATF": 1689708023175,
      "EPVATF": 1689708028185,
      "SPVATR": 1689708028185,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    if (constraintObj == null) {\n        return;\n    }\n",
      "EPVS": 1689708028186
    },
    {
      "rank": 5,
      "SSLB": 1689708028186,
      "ESLB": 1689708048207,
      "SPVS": 1689708048207,
      "SPVAP": 1689708048209,
      "EPVAP": 1689708048210,
      "SPVATF": 1689708048210,
      "EPVATF": 1689708050237,
      "SPVATR": 1689708050237,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689708050238
    },
    {
      "rank": 6,
      "SSLB": 1689708050238,
      "ESLB": 1689708070258,
      "SPVS": 1689708070258,
      "SPVAP": 1689708070262,
      "EPVAP": 1689708070263,
      "SPVATF": 1689708070263,
      "EPVATF": 1689708075273,
      "SPVATR": 1689708075273,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n",
      "EPVS": 1689708075275
    },
    {
      "rank": 7,
      "SSLB": 1689708075275,
      "ESLB": 1689708095295,
      "SPVS": 1689708095295,
      "SPVAP": 1689708095298,
      "EPVAP": 1689708095299,
      "SPVATF": 1689708095299,
      "EPVATF": 1689708098306,
      "SPVATR": 1689708098306,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (!isRecordType(constraintObj)) {\n        return;\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            define",
      "EPVS": 1689708098308
    },
    {
      "rank": 8,
      "SSLB": 1689708098308,
      "ESLB": 1689708118328,
      "SPVS": 1689708118328,
      "SPVAP": 1689708118330,
      "EPVAP": 1689708118332,
      "SPVATF": 1689708118332,
      "EPVATF": 1689708121350,
      "SPVATR": 1689708121350,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    JSType constraintObjType = (JSType) constraintObj;\n    if (constraintObjType.isRecordType()) {\n        for (String prop : constraintObjType.getOwnPropertyNames()) {\n            JSType propType = constraintObjType.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLe",
      "EPVS": 1689708121352
    },
    {
      "rank": 9,
      "SSLB": 1689708121352,
      "ESLB": 1689708141372,
      "SPVS": 1689708141372,
      "SPVAP": 1689708141380,
      "EPVAP": 1689708141382,
      "SPVATF": 1689708141382,
      "EPVATF": 1689708144390,
      "SPVATR": 1689708144390,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (isRecordType(constraintObj)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689708144392
    }
  ],
  "SSLI": 1689700566021,
  "ESLI": 1689700596051,
  "hostname": "gros-50.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}