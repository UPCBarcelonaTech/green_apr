{
  "hostname": "gemini-1.lyon.grid5000.fr",
  "GPR[SSLB]": "1689752566176",
  "GPR[ESLB]": "1689752586196",
  "file": "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136",
  "input": {
    "loc": "1135-1136",
    "input": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Math_80_-src-main-java-org-apache-commons-math-linear-EigenDecompositionImpl.java_1135-1136.txt",
  "OAR_JOB_ID": "1561075",
  "GPR[SSLI]": "1689750168385",
  "GPR[ESLI]": "1689750198415",
  "GPR[SPS]": "1689752586237",
  "nrTokens": 177,
  "status": "ok",
  "GPR[EPS]": "1689752586855",
  "time": 618,
  "tokentime": 2,
  "inferencetime": 616,
  "output": [
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 4 * n;\n<|endoftext|><|endoftext|><|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 0;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        j = 4 * n - 1;\n<|endoftext|><|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 4;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = n - 1;\n<|endoftext|><|endoftext|><|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int i = 4 * n - 1;\n<|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 3 * n - 1;\n<|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 4 * n - 2;\n<|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n        int j = 4 * n - 1;\n<|endoftext|>",
    "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy lines start:\n        int j = 4 * n - 1;\n// buggy lines end:\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}\n// fixed lines: \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}