{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689855285972",
  "GPR[ESLB]": "1689855305992",
  "file": "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707",
  "input": {
    "loc": "706-707",
    "input": "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Closure_146_-src-com-google-javascript-rhino-jstype-JSType.java_706-707.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689853772039",
  "GPR[ESLI]": "1689853802070",
  "GPR[SPS]": "1689855306031",
  "nrTokens": 153,
  "status": "ok",
  "GPR[EPS]": "1689855306814",
  "time": 783,
  "tokentime": 3,
  "inferencetime": 780,
  "output": [
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return new TypePair(this, that);\n<|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return new TypePair(null, null);\n<|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    break;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return null;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return this;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n        return new TypePair(null, null);\n<|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n        return new TypePair(this, that);\n<|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return new TypePair(null, this);\n<|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n        return null;\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy lines start:\n      return new TypePair(null, null);\n// buggy lines end:\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}\n// fixed lines: \n    return new TypePair();\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
  ]
}