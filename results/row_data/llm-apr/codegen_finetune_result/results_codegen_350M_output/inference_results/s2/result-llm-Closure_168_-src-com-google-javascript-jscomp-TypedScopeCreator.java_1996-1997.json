{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1689855374713",
  "GPR[ESLB]": "1689855394733",
  "file": "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997",
  "input": {
    "loc": "1996-1997",
    "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n"
  },
  "nvidea": "measures-nvidea-Closure_168_-src-com-google-javascript-jscomp-TypedScopeCreator.java_1996-1997.txt",
  "OAR_JOB_ID": "1561538",
  "GPR[SSLI]": "1689853772039",
  "GPR[ESLI]": "1689853802070",
  "GPR[SPS]": "1689855394776",
  "nrTokens": 445,
  "status": "ok",
  "GPR[EPS]": "1689855396205",
  "time": 1429,
  "tokentime": 3,
  "inferencetime": 1426,
  "output": [
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 1) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 3) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() < 2) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 2) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() < 3) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() >= 2) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 0) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() == 1) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 2 && n.isGetProp()) {\n<|endoftext|>",
    "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy lines start:\n  if (t.getScopeDepth() <= 2) {\n// buggy lines end:\n    \n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}\n// fixed lines: \n    if (t.getScopeDepth() <= 2 && n.isName()) {\n<|endoftext|><|endoftext|>"
  ]
}