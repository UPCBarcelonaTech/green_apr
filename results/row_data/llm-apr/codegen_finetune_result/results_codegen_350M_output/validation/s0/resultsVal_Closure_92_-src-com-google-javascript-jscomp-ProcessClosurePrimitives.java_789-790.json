{
  "key": "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790",
  "proj": "Closure",
  "bug_id": "92",
  "loc": "789-790",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688166534343,
      "ESLB": 1688166554363,
      "SPVS": 1688166554363,
      "SPVAP": 1688166554365,
      "EPVAP": 1688166554366,
      "SPVATF": 1688166554366,
      "EPVATF": 1688166554366,
      "SPVATR": 1688166559376,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1688166559377
    },
    {
      "rank": 1,
      "SSLB": 1688166559377,
      "ESLB": 1688166579397,
      "SPVS": 1688166579397,
      "SPVAP": 1688166579399,
      "EPVAP": 1688166579400,
      "SPVATF": 1688166579400,
      "EPVATF": 1688166579400,
      "SPVATR": 1688166580407,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1688166580409
    },
    {
      "rank": 2,
      "SSLB": 1688166580409,
      "ESLB": 1688166600429,
      "SPVS": 1688166600429,
      "SPVAP": 1688166600430,
      "EPVAP": 1688166600432,
      "SPVATF": 1688166600432,
      "EPVATF": 1688166600432,
      "SPVATR": 1688166601438,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        replacementNode = createDeclarationNode();\n",
      "EPVS": 1688166601439
    },
    {
      "rank": 3,
      "SSLB": 1688166601439,
      "ESLB": 1688166621459,
      "SPVS": 1688166621459,
      "SPVAP": 1688166621460,
      "EPVAP": 1688166621462,
      "SPVATF": 1688166621462,
      "EPVATF": 1688166621462,
      "SPVATR": 1688166622468,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                 providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1688166622469
    },
    {
      "rank": 4,
      "SSLB": 1688166622469,
      "ESLB": 1688166642489,
      "SPVS": 1688166642489,
      "SPVAP": 1688166642491,
      "EPVAP": 1688166642492,
      "SPVATF": 1688166642492,
      "EPVATF": 1688166642492,
      "SPVATR": 1688166643499,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1688166643501
    },
    {
      "rank": 5,
      "SSLB": 1688166643501,
      "ESLB": 1688166663521,
      "SPVS": 1688166663521,
      "SPVAP": 1688166663522,
      "EPVAP": 1688166663523,
      "SPVATF": 1688166663523,
      "EPVATF": 1688166663523,
      "SPVATR": 1688166664530,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "    }\n    int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1688166664531
    },
    {
      "rank": 6,
      "SSLB": 1688166664531,
      "ESLB": 1688166684551,
      "SPVS": 1688166684551,
      "SPVAP": 1688166684553,
      "EPVAP": 1688166684554,
      "SPVATF": 1688166684554,
      "EPVATF": 1688166684554,
      "SPVATR": 1688166685561,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1688166685562
    },
    {
      "rank": 7,
      "SSLB": 1688166685562,
      "ESLB": 1688166705582,
      "SPVS": 1688166705582,
      "SPVAP": 1688166705583,
      "EPVAP": 1688166705585,
      "SPVATF": 1688166705585,
      "EPVATF": 1688166705585,
      "SPVATR": 1688166706592,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                preconditions.checkNotNull(parentName);\n                preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1688166706593
    },
    {
      "rank": 8,
      "SSLB": 1688166706593,
      "ESLB": 1688166726613,
      "SPVS": 1688166726613,
      "SPVAP": 1688166726615,
      "EPVAP": 1688166726616,
      "SPVATF": 1688166726616,
      "EPVATF": 1688166726616,
      "SPVATR": 1688166727622,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n    }\n    if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n           .addChildToBack(replacementNode);\n    } else {\n",
      "EPVS": 1688166727623
    },
    {
      "rank": 9,
      "SSLB": 1688166727623,
      "ESLB": 1688166747643,
      "SPVS": 1688166747643,
      "SPVAP": 1688166747644,
      "EPVAP": 1688166747646,
      "SPVATF": 1688166747646,
      "EPVATF": 1688166747646,
      "SPVATR": 1688166748652,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        String namespacePrefix = getNamespacePrefix();\n        int indexOfDot = namespacePrefix.indexOf('.');\n",
      "EPVS": 1688166748653
    }
  ],
  "SSLI": 1688158274061,
  "ESLI": 1688158304091,
  "hostname": "gros-65.nancy.grid5000.fr",
  "OAR_JOB_ID": "4212950"
}