{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688162660423,
      "ESLB": 1688162680443,
      "SPVS": 1688162680443,
      "SPVAP": 1688162680445,
      "EPVAP": 1688162680446,
      "SPVATF": 1688162680446,
      "EPVATF": 1688162685456,
      "SPVATR": 1688162685456,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "",
      "EPVS": 1688162685457
    },
    {
      "rank": 1,
      "SSLB": 1688162685457,
      "ESLB": 1688162705478,
      "SPVS": 1688162705478,
      "SPVAP": 1688162705479,
      "EPVAP": 1688162705480,
      "SPVATF": 1688162705480,
      "EPVATF": 1688162707488,
      "SPVATR": 1688162707488,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688162707489
    },
    {
      "rank": 2,
      "SSLB": 1688162707489,
      "ESLB": 1688162727509,
      "SPVS": 1688162727509,
      "SPVAP": 1688162727511,
      "EPVAP": 1688162727512,
      "SPVATF": 1688162727512,
      "EPVATF": 1688162730520,
      "SPVATR": 1688162730520,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n",
      "EPVS": 1688162730522
    },
    {
      "rank": 3,
      "SSLB": 1688162730522,
      "ESLB": 1688162750542,
      "SPVS": 1688162750542,
      "SPVAP": 1688162750543,
      "EPVAP": 1688162750545,
      "SPVATF": 1688162750545,
      "EPVATF": 1688162752554,
      "SPVATR": 1688162752554,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(prop);\n                    ",
      "EPVS": 1688162752555
    },
    {
      "rank": 4,
      "SSLB": 1688162752555,
      "ESLB": 1688162772575,
      "SPVS": 1688162772575,
      "SPVAP": 1688162772577,
      "EPVAP": 1688162772578,
      "SPVATF": 1688162772578,
      "EPVATF": 1688162775586,
      "SPVATR": 1688162775586,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(prop);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1688162775587
    },
    {
      "rank": 5,
      "SSLB": 1688162775587,
      "ESLB": 1688162795608,
      "SPVS": 1688162795608,
      "SPVAP": 1688162795609,
      "EPVAP": 1688162795610,
      "SPVATF": 1688162795610,
      "EPVATF": 1688162798619,
      "SPVATR": 1688162798619,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688162798620
    },
    {
      "rank": 6,
      "SSLB": 1688162798620,
      "ESLB": 1688162818640,
      "SPVS": 1688162818640,
      "SPVAP": 1688162818642,
      "EPVAP": 1688162818642,
      "SPVATF": 1688162818642,
      "EPVATF": 1688162821651,
      "SPVATR": 1688162821651,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1688162821652
    },
    {
      "rank": 7,
      "SSLB": 1688162821652,
      "ESLB": 1688162841672,
      "SPVS": 1688162841672,
      "SPVAP": 1688162841673,
      "EPVAP": 1688162841675,
      "SPVATF": 1688162841675,
      "EPVATF": 1688162846685,
      "SPVATR": 1688162846685,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1688162846686
    },
    {
      "rank": 8,
      "SSLB": 1688162846686,
      "ESLB": 1688162866706,
      "SPVS": 1688162866706,
      "SPVAP": 1688162866707,
      "EPVAP": 1688162866708,
      "SPVATF": 1688162866708,
      "EPVATF": 1688162868716,
      "SPVATR": 1688162868716,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferred",
      "EPVS": 1688162868717
    },
    {
      "rank": 9,
      "SSLB": 1688162868717,
      "ESLB": 1688162888737,
      "SPVS": 1688162888737,
      "SPVAP": 1688162888738,
      "EPVAP": 1688162888739,
      "SPVATF": 1688162888739,
      "EPVATF": 1688162891749,
      "SPVATR": 1688162891749,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : ((RecordType) constraintObj).getOwnPropertyNames()) {\n            JSType propType = ((RecordType) constraintObj).getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                ",
      "EPVS": 1688162891750
    }
  ],
  "SSLI": 1688158274061,
  "ESLI": 1688158304091,
  "hostname": "gros-65.nancy.grid5000.fr",
  "OAR_JOB_ID": "4212950"
}