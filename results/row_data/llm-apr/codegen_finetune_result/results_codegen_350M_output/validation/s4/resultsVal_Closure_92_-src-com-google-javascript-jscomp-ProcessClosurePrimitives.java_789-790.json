{
  "key": "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790",
  "proj": "Closure",
  "bug_id": "92",
  "loc": "789-790",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689831016498,
      "ESLB": 1689831036518,
      "SPVS": 1689831036518,
      "SPVAP": 1689831036519,
      "EPVAP": 1689831036520,
      "SPVATF": 1689831036520,
      "EPVATF": 1689831036520,
      "SPVATR": 1689831042530,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689831042531
    },
    {
      "rank": 1,
      "SSLB": 1689831042531,
      "ESLB": 1689831062540,
      "SPVS": 1689831062540,
      "SPVAP": 1689831062541,
      "EPVAP": 1689831062542,
      "SPVATF": 1689831062542,
      "EPVATF": 1689831062542,
      "SPVATR": 1689831063549,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1689831063549
    },
    {
      "rank": 2,
      "SSLB": 1689831063549,
      "ESLB": 1689831083570,
      "SPVS": 1689831083570,
      "SPVAP": 1689831083571,
      "EPVAP": 1689831083572,
      "SPVATF": 1689831083572,
      "EPVATF": 1689831083572,
      "SPVATR": 1689831084577,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        replacementNode = createDeclarationNode();\n",
      "EPVS": 1689831084578
    },
    {
      "rank": 3,
      "SSLB": 1689831084578,
      "ESLB": 1689831104588,
      "SPVS": 1689831104588,
      "SPVAP": 1689831104589,
      "EPVAP": 1689831104590,
      "SPVATF": 1689831104590,
      "EPVATF": 1689831104590,
      "SPVATR": 1689831105595,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                 providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1689831105596
    },
    {
      "rank": 4,
      "SSLB": 1689831105596,
      "ESLB": 1689831125616,
      "SPVS": 1689831125616,
      "SPVAP": 1689831125620,
      "EPVAP": 1689831125621,
      "SPVATF": 1689831125621,
      "EPVATF": 1689831125621,
      "SPVATR": 1689831126640,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1689831126641
    },
    {
      "rank": 5,
      "SSLB": 1689831126641,
      "ESLB": 1689831146661,
      "SPVS": 1689831146661,
      "SPVAP": 1689831146664,
      "EPVAP": 1689831146665,
      "SPVATF": 1689831146665,
      "EPVATF": 1689831146665,
      "SPVATR": 1689831147670,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "    }\n    int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689831147671
    },
    {
      "rank": 6,
      "SSLB": 1689831147671,
      "ESLB": 1689831167675,
      "SPVS": 1689831167675,
      "SPVAP": 1689831167675,
      "EPVAP": 1689831167677,
      "SPVATF": 1689831167677,
      "EPVATF": 1689831167677,
      "SPVATR": 1689831168682,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689831168683
    },
    {
      "rank": 7,
      "SSLB": 1689831168683,
      "ESLB": 1689831188693,
      "SPVS": 1689831188693,
      "SPVAP": 1689831188695,
      "EPVAP": 1689831188696,
      "SPVATF": 1689831188696,
      "EPVATF": 1689831188696,
      "SPVATR": 1689831189717,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                preconditions.checkNotNull(parentName);\n                preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1689831189718
    },
    {
      "rank": 8,
      "SSLB": 1689831189718,
      "ESLB": 1689831209738,
      "SPVS": 1689831209738,
      "SPVAP": 1689831209739,
      "EPVAP": 1689831209740,
      "SPVATF": 1689831209740,
      "EPVATF": 1689831209740,
      "SPVATR": 1689831210745,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n    }\n    if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n           .addChildToBack(replacementNode);\n    } else {\n",
      "EPVS": 1689831210746
    },
    {
      "rank": 9,
      "SSLB": 1689831210746,
      "ESLB": 1689831230766,
      "SPVS": 1689831230766,
      "SPVAP": 1689831230767,
      "EPVAP": 1689831230768,
      "SPVATF": 1689831230768,
      "EPVATF": 1689831230768,
      "SPVATR": 1689831231773,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        String namespacePrefix = getNamespacePrefix();\n        int indexOfDot = namespacePrefix.indexOf('.');\n",
      "EPVS": 1689831231774
    }
  ],
  "SSLI": 1689818913140,
  "ESLI": 1689818943170,
  "hostname": "gros-49.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}