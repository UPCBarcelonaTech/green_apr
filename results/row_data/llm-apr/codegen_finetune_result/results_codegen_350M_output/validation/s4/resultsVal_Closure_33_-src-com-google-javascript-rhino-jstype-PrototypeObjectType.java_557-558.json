{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689826189790,
      "ESLB": 1689826209810,
      "SPVS": 1689826209810,
      "SPVAP": 1689826209812,
      "EPVAP": 1689826209812,
      "SPVATF": 1689826209812,
      "EPVATF": 1689826214822,
      "SPVATR": 1689826214822,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "",
      "EPVS": 1689826214823
    },
    {
      "rank": 1,
      "SSLB": 1689826214823,
      "ESLB": 1689826234843,
      "SPVS": 1689826234843,
      "SPVAP": 1689826234844,
      "EPVAP": 1689826234845,
      "SPVATF": 1689826234845,
      "EPVATF": 1689826236851,
      "SPVATR": 1689826236851,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689826236852
    },
    {
      "rank": 2,
      "SSLB": 1689826236852,
      "ESLB": 1689826256872,
      "SPVS": 1689826256872,
      "SPVAP": 1689826256873,
      "EPVAP": 1689826256874,
      "SPVATF": 1689826256874,
      "EPVATF": 1689826259882,
      "SPVATR": 1689826259882,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n",
      "EPVS": 1689826259883
    },
    {
      "rank": 3,
      "SSLB": 1689826259883,
      "ESLB": 1689826279903,
      "SPVS": 1689826279903,
      "SPVAP": 1689826279904,
      "EPVAP": 1689826279905,
      "SPVATF": 1689826279905,
      "EPVATF": 1689826282913,
      "SPVATR": 1689826282913,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(prop);\n                    ",
      "EPVS": 1689826282913
    },
    {
      "rank": 4,
      "SSLB": 1689826282913,
      "ESLB": 1689826302933,
      "SPVS": 1689826302933,
      "SPVAP": 1689826302934,
      "EPVAP": 1689826302935,
      "SPVATF": 1689826302935,
      "EPVATF": 1689826305943,
      "SPVATR": 1689826305943,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(prop);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689826305944
    },
    {
      "rank": 5,
      "SSLB": 1689826305944,
      "ESLB": 1689826325963,
      "SPVS": 1689826325963,
      "SPVAP": 1689826325964,
      "EPVAP": 1689826325964,
      "SPVATF": 1689826325964,
      "EPVATF": 1689826327972,
      "SPVATR": 1689826327972,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689826327973
    },
    {
      "rank": 6,
      "SSLB": 1689826327973,
      "ESLB": 1689826347993,
      "SPVS": 1689826347993,
      "SPVAP": 1689826347994,
      "EPVAP": 1689826347995,
      "SPVATF": 1689826347995,
      "EPVATF": 1689826350001,
      "SPVATR": 1689826350001,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689826350002
    },
    {
      "rank": 7,
      "SSLB": 1689826350002,
      "ESLB": 1689826370022,
      "SPVS": 1689826370022,
      "SPVAP": 1689826370025,
      "EPVAP": 1689826370026,
      "SPVATF": 1689826370026,
      "EPVATF": 1689826375035,
      "SPVATR": 1689826375035,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689826375035
    },
    {
      "rank": 8,
      "SSLB": 1689826375036,
      "ESLB": 1689826395056,
      "SPVS": 1689826395056,
      "SPVAP": 1689826395057,
      "EPVAP": 1689826395058,
      "SPVATF": 1689826395058,
      "EPVATF": 1689826397080,
      "SPVATR": 1689826397080,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferred",
      "EPVS": 1689826397081
    },
    {
      "rank": 9,
      "SSLB": 1689826397081,
      "ESLB": 1689826417101,
      "SPVS": 1689826417101,
      "SPVAP": 1689826417104,
      "EPVAP": 1689826417105,
      "SPVATF": 1689826417105,
      "EPVATF": 1689826420112,
      "SPVATR": 1689826420112,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : ((RecordType) constraintObj).getOwnPropertyNames()) {\n            JSType propType = ((RecordType) constraintObj).getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                ",
      "EPVS": 1689826420115
    }
  ],
  "SSLI": 1689818913140,
  "ESLI": 1689818943170,
  "hostname": "gros-49.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}