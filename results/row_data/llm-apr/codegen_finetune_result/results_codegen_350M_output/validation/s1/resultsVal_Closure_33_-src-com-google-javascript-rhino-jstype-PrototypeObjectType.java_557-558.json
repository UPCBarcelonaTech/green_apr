{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1688804733197,
      "ESLB": 1688804753217,
      "SPVS": 1688804753217,
      "SPVAP": 1688804753219,
      "EPVAP": 1688804753220,
      "SPVATF": 1688804753220,
      "EPVATF": 1688804758230,
      "SPVATR": 1688804758230,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "",
      "EPVS": 1688804758231
    },
    {
      "rank": 1,
      "SSLB": 1688804758231,
      "ESLB": 1688804778251,
      "SPVS": 1688804778251,
      "SPVAP": 1688804778253,
      "EPVAP": 1688804778254,
      "SPVATF": 1688804778254,
      "EPVATF": 1688804780261,
      "SPVATR": 1688804780261,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688804780261
    },
    {
      "rank": 2,
      "SSLB": 1688804780261,
      "ESLB": 1688804800282,
      "SPVS": 1688804800282,
      "SPVAP": 1688804800283,
      "EPVAP": 1688804800284,
      "SPVATF": 1688804800284,
      "EPVATF": 1688804802293,
      "SPVATR": 1688804802293,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n",
      "EPVS": 1688804802294
    },
    {
      "rank": 3,
      "SSLB": 1688804802294,
      "ESLB": 1688804822314,
      "SPVS": 1688804822314,
      "SPVAP": 1688804822315,
      "EPVAP": 1688804822316,
      "SPVATF": 1688804822316,
      "EPVATF": 1688804824322,
      "SPVATR": 1688804824322,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(prop);\n                    ",
      "EPVS": 1688804824323
    },
    {
      "rank": 4,
      "SSLB": 1688804824323,
      "ESLB": 1688804844343,
      "SPVS": 1688804844343,
      "SPVAP": 1688804844344,
      "EPVAP": 1688804844345,
      "SPVATF": 1688804844345,
      "EPVATF": 1688804846352,
      "SPVATR": 1688804846352,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(prop);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1688804846353
    },
    {
      "rank": 5,
      "SSLB": 1688804846353,
      "ESLB": 1688804866374,
      "SPVS": 1688804866374,
      "SPVAP": 1688804866375,
      "EPVAP": 1688804866376,
      "SPVATF": 1688804866376,
      "EPVATF": 1688804868384,
      "SPVATR": 1688804868384,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1688804868385
    },
    {
      "rank": 6,
      "SSLB": 1688804868385,
      "ESLB": 1688804888405,
      "SPVS": 1688804888405,
      "SPVAP": 1688804888406,
      "EPVAP": 1688804888407,
      "SPVATF": 1688804888407,
      "EPVATF": 1688804890414,
      "SPVATR": 1688804890414,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1688804890415
    },
    {
      "rank": 7,
      "SSLB": 1688804890415,
      "ESLB": 1688804910436,
      "SPVS": 1688804910436,
      "SPVAP": 1688804910437,
      "EPVAP": 1688804910437,
      "SPVATF": 1688804910437,
      "EPVATF": 1688804915446,
      "SPVATR": 1688804915446,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1688804915448
    },
    {
      "rank": 8,
      "SSLB": 1688804915448,
      "ESLB": 1688804935468,
      "SPVS": 1688804935468,
      "SPVAP": 1688804935469,
      "EPVAP": 1688804935470,
      "SPVATF": 1688804935470,
      "EPVATF": 1688804938478,
      "SPVATR": 1688804938478,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferred",
      "EPVS": 1688804938480
    },
    {
      "rank": 9,
      "SSLB": 1688804938480,
      "ESLB": 1688804958500,
      "SPVS": 1688804958500,
      "SPVAP": 1688804958501,
      "EPVAP": 1688804958502,
      "SPVATF": 1688804958502,
      "EPVATF": 1688804960509,
      "SPVATR": 1688804960509,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : ((RecordType) constraintObj).getOwnPropertyNames()) {\n            JSType propType = ((RecordType) constraintObj).getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                ",
      "EPVS": 1688804960510
    }
  ],
  "SSLI": 1688801365518,
  "ESLI": 1688801395548,
  "hostname": "gros-74.nancy.grid5000.fr",
  "OAR_JOB_ID": "4222608"
}