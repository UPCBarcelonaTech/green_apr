{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689711558206,
      "ESLB": 1689711578226,
      "SPVS": 1689711578226,
      "SPVAP": 1689711578231,
      "EPVAP": 1689711578233,
      "SPVATF": 1689711578233,
      "EPVATF": 1689711584244,
      "SPVATR": 1689711584244,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "",
      "EPVS": 1689711584245
    },
    {
      "rank": 1,
      "SSLB": 1689711584245,
      "ESLB": 1689711604265,
      "SPVS": 1689711604265,
      "SPVAP": 1689711604267,
      "EPVAP": 1689711604268,
      "SPVATF": 1689711604268,
      "EPVATF": 1689711606274,
      "SPVATR": 1689711606274,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689711606276
    },
    {
      "rank": 2,
      "SSLB": 1689711606276,
      "ESLB": 1689711626295,
      "SPVS": 1689711626295,
      "SPVAP": 1689711626296,
      "EPVAP": 1689711626298,
      "SPVATF": 1689711626298,
      "EPVATF": 1689711628316,
      "SPVATR": 1689711628316,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n",
      "EPVS": 1689711628318
    },
    {
      "rank": 3,
      "SSLB": 1689711628318,
      "ESLB": 1689711648338,
      "SPVS": 1689711648338,
      "SPVAP": 1689711648340,
      "EPVAP": 1689711648341,
      "SPVATF": 1689711648341,
      "EPVATF": 1689711650348,
      "SPVATR": 1689711650348,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(prop);\n                    ",
      "EPVS": 1689711650350
    },
    {
      "rank": 4,
      "SSLB": 1689711650350,
      "ESLB": 1689711670370,
      "SPVS": 1689711670370,
      "SPVAP": 1689711670371,
      "EPVAP": 1689711670373,
      "SPVATF": 1689711670373,
      "EPVATF": 1689711672380,
      "SPVATR": 1689711672380,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(prop);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689711672381
    },
    {
      "rank": 5,
      "SSLB": 1689711672381,
      "ESLB": 1689711692401,
      "SPVS": 1689711692401,
      "SPVAP": 1689711692404,
      "EPVAP": 1689711692405,
      "SPVATF": 1689711692405,
      "EPVATF": 1689711694417,
      "SPVATR": 1689711694417,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689711694419
    },
    {
      "rank": 6,
      "SSLB": 1689711694419,
      "ESLB": 1689711714439,
      "SPVS": 1689711714439,
      "SPVAP": 1689711714441,
      "EPVAP": 1689711714442,
      "SPVATF": 1689711714442,
      "EPVATF": 1689711717450,
      "SPVATR": 1689711717450,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689711717451
    },
    {
      "rank": 7,
      "SSLB": 1689711717451,
      "ESLB": 1689711737471,
      "SPVS": 1689711737471,
      "SPVAP": 1689711737475,
      "EPVAP": 1689711737476,
      "SPVATF": 1689711737476,
      "EPVATF": 1689711743488,
      "SPVATR": 1689711743488,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689711743490
    },
    {
      "rank": 8,
      "SSLB": 1689711743490,
      "ESLB": 1689711763510,
      "SPVS": 1689711763510,
      "SPVAP": 1689711763511,
      "EPVAP": 1689711763513,
      "SPVATF": 1689711763513,
      "EPVATF": 1689711766537,
      "SPVATR": 1689711766537,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferred",
      "EPVS": 1689711766538
    },
    {
      "rank": 9,
      "SSLB": 1689711766538,
      "ESLB": 1689711786558,
      "SPVS": 1689711786558,
      "SPVAP": 1689711787226,
      "EPVAP": 1689711787231,
      "SPVATF": 1689711787231,
      "EPVATF": 1689711789240,
      "SPVATR": 1689711789240,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : ((RecordType) constraintObj).getOwnPropertyNames()) {\n            JSType propType = ((RecordType) constraintObj).getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                ",
      "EPVS": 1689711789248
    }
  ],
  "SSLI": 1689703972356,
  "ESLI": 1689704002386,
  "hostname": "gros-49.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}