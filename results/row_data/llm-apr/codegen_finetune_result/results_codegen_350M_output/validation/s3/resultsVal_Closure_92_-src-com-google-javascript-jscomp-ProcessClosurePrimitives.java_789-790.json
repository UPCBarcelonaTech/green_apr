{
  "key": "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790",
  "proj": "Closure",
  "bug_id": "92",
  "loc": "789-790",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689796673324,
      "ESLB": 1689796693344,
      "SPVS": 1689796693344,
      "SPVAP": 1689796693346,
      "EPVAP": 1689796693347,
      "SPVATF": 1689796693347,
      "EPVATF": 1689796693347,
      "SPVATR": 1689796698357,
      "exectuteRegression": true,
      "correctness": "wrong",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689796698358
    },
    {
      "rank": 1,
      "SSLB": 1689796698358,
      "ESLB": 1689796718378,
      "SPVS": 1689796718378,
      "SPVAP": 1689796718380,
      "EPVAP": 1689796718381,
      "SPVATF": 1689796718381,
      "EPVATF": 1689796718381,
      "SPVATR": 1689796719389,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1689796719390
    },
    {
      "rank": 2,
      "SSLB": 1689796719390,
      "ESLB": 1689796739411,
      "SPVS": 1689796739411,
      "SPVAP": 1689796739412,
      "EPVAP": 1689796739413,
      "SPVATF": 1689796739413,
      "EPVATF": 1689796739413,
      "SPVATR": 1689796740419,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        replacementNode = createDeclarationNode();\n",
      "EPVS": 1689796740421
    },
    {
      "rank": 3,
      "SSLB": 1689796740421,
      "ESLB": 1689796760441,
      "SPVS": 1689796760441,
      "SPVAP": 1689796760442,
      "EPVAP": 1689796760444,
      "SPVATF": 1689796760444,
      "EPVATF": 1689796760444,
      "SPVATR": 1689796761449,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                 providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.getParent",
      "EPVS": 1689796761450
    },
    {
      "rank": 4,
      "SSLB": 1689796761450,
      "ESLB": 1689796781470,
      "SPVS": 1689796781470,
      "SPVAP": 1689796781472,
      "EPVAP": 1689796781473,
      "SPVATF": 1689796781473,
      "EPVATF": 1689796781473,
      "SPVATR": 1689796782482,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                Preconditions.checkNotNull(parentName);\n                Preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1689796782483
    },
    {
      "rank": 5,
      "SSLB": 1689796782483,
      "ESLB": 1689796802503,
      "SPVS": 1689796802503,
      "SPVAP": 1689796802505,
      "EPVAP": 1689796802507,
      "SPVATF": 1689796802507,
      "EPVATF": 1689796802507,
      "SPVATR": 1689796803513,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "    }\n    int indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689796803514
    },
    {
      "rank": 6,
      "SSLB": 1689796803514,
      "ESLB": 1689796823534,
      "SPVS": 1689796823534,
      "SPVAP": 1689796823536,
      "EPVAP": 1689796823537,
      "SPVATF": 1689796823537,
      "EPVATF": 1689796823537,
      "SPVATR": 1689796824543,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n",
      "EPVS": 1689796824544
    },
    {
      "rank": 7,
      "SSLB": 1689796824544,
      "ESLB": 1689796844564,
      "SPVS": 1689796844564,
      "SPVAP": 1689796844566,
      "EPVAP": 1689796844567,
      "SPVATF": 1689796844567,
      "EPVATF": 1689796844567,
      "SPVATR": 1689796845576,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        int indexOfDot = namespace.indexOf('.');\n        if (indexOfDot == -1) {\n            compiler.getNodeForCodeInsertion(minimumModule)\n               .addChildToBack(replacementNode);\n        } else {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n                preconditions.checkNotNull(parentName);\n                preconditions.checkNotNull(parentName.replacementNode);\n                parentName.replacementNode.get",
      "EPVS": 1689796845576
    },
    {
      "rank": 8,
      "SSLB": 1689796845576,
      "ESLB": 1689796865597,
      "SPVS": 1689796865597,
      "SPVAP": 1689796865600,
      "EPVAP": 1689796865601,
      "SPVATF": 1689796865601,
      "EPVATF": 1689796865601,
      "SPVATR": 1689796866607,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        indexOfDot = namespace.indexOf('.');\n    }\n    if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n           .addChildToBack(replacementNode);\n    } else {\n",
      "EPVS": 1689796866609
    },
    {
      "rank": 9,
      "SSLB": 1689796866609,
      "ESLB": 1689796886629,
      "SPVS": 1689796886629,
      "SPVAP": 1689796886630,
      "EPVAP": 1689796886631,
      "SPVATF": 1689796886631,
      "EPVATF": 1689796886631,
      "SPVATR": 1689796887637,
      "exectuteRegression": true,
      "correctness": "uncompilable",
      "patch": "        String namespacePrefix = getNamespacePrefix();\n        int indexOfDot = namespacePrefix.indexOf('.');\n",
      "EPVS": 1689796887638
    }
  ],
  "SSLI": 1689795013632,
  "ESLI": 1689795043662,
  "hostname": "gros-49.nancy.grid5000.fr",
  "OAR_JOB_ID": "4241554"
}