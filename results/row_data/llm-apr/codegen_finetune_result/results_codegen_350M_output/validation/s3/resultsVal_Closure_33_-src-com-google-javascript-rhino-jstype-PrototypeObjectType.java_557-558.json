{
  "key": "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558",
  "proj": "Closure",
  "bug_id": "33",
  "loc": "557-558",
  "input_file": "codegen_350M_output.json",
  "path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "patches": [
    {
      "rank": 0,
      "SSLB": 1689746005651,
      "ESLB": 1689746025655,
      "SPVS": 1689746025655,
      "SPVAP": 1689746025656,
      "EPVAP": 1689746025657,
      "SPVATF": 1689746025657,
      "EPVATF": 1689746030666,
      "SPVATR": 1689746030666,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "",
      "EPVS": 1689746030667
    },
    {
      "rank": 1,
      "SSLB": 1689746030667,
      "ESLB": 1689746050687,
      "SPVS": 1689746050687,
      "SPVAP": 1689746050688,
      "EPVAP": 1689746050689,
      "SPVATF": 1689746050689,
      "EPVATF": 1689746052694,
      "SPVATR": 1689746052694,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689746052695
    },
    {
      "rank": 2,
      "SSLB": 1689746052695,
      "ESLB": 1689746072715,
      "SPVS": 1689746072715,
      "SPVAP": 1689746072716,
      "EPVAP": 1689746072717,
      "SPVATF": 1689746072717,
      "EPVATF": 1689746075725,
      "SPVATR": 1689746075725,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(propType);\n",
      "EPVS": 1689746075726
    },
    {
      "rank": 3,
      "SSLB": 1689746075726,
      "ESLB": 1689746095745,
      "SPVS": 1689746095745,
      "SPVAP": 1689746095746,
      "EPVAP": 1689746095747,
      "SPVATF": 1689746095747,
      "EPVATF": 1689746098754,
      "SPVATR": 1689746098754,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null) {\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!hasProperty(prop)) {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                           .getLeastSupertype(prop);\n                    ",
      "EPVS": 1689746098755
    },
    {
      "rank": 4,
      "SSLB": 1689746098755,
      "ESLB": 1689746118775,
      "SPVS": 1689746118775,
      "SPVAP": 1689746118776,
      "EPVAP": 1689746118777,
      "SPVATF": 1689746118777,
      "EPVATF": 1689746121783,
      "SPVATR": 1689746121783,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(prop);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689746121784
    },
    {
      "rank": 5,
      "SSLB": 1689746121784,
      "ESLB": 1689746141804,
      "SPVS": 1689746141804,
      "SPVAP": 1689746141805,
      "EPVAP": 1689746141806,
      "SPVATF": 1689746141806,
      "EPVATF": 1689746144814,
      "SPVATR": 1689746144814,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, type",
      "EPVS": 1689746144815
    },
    {
      "rank": 6,
      "SSLB": 1689746144815,
      "ESLB": 1689746164835,
      "SPVS": 1689746164835,
      "SPVAP": 1689746164836,
      "EPVAP": 1689746164837,
      "SPVATF": 1689746164837,
      "EPVATF": 1689746166843,
      "SPVATR": 1689746166843,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj.isRecordType())\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeTo",
      "EPVS": 1689746166844
    },
    {
      "rank": 7,
      "SSLB": 1689746166844,
      "ESLB": 1689746186864,
      "SPVS": 1689746186864,
      "SPVAP": 1689746186865,
      "EPVAP": 1689746186866,
      "SPVATF": 1689746186866,
      "EPVATF": 1689746191873,
      "SPVATR": 1689746191873,
      "exectuteRegression": false,
      "correctness": "wrong",
      "patch": "    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                   .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n",
      "EPVS": 1689746191874
    },
    {
      "rank": 8,
      "SSLB": 1689746191874,
      "ESLB": 1689746211894,
      "SPVS": 1689746211894,
      "SPVAP": 1689746211895,
      "EPVAP": 1689746211896,
      "SPVATF": 1689746211896,
      "EPVATF": 1689746213902,
      "SPVATR": 1689746213902,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj!= null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                defineInferred",
      "EPVS": 1689746213903
    },
    {
      "rank": 9,
      "SSLB": 1689746213903,
      "ESLB": 1689746233914,
      "SPVS": 1689746233914,
      "SPVAP": 1689746233915,
      "EPVAP": 1689746233915,
      "SPVATF": 1689746233915,
      "EPVATF": 1689746235922,
      "SPVATR": 1689746235922,
      "exectuteRegression": false,
      "correctness": "uncompilable",
      "patch": "    if (constraintObj instanceof RecordType) {\n        for (String prop : ((RecordType) constraintObj).getOwnPropertyNames()) {\n            JSType propType = ((RecordType) constraintObj).getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                       .getLeastSupertype(propType);\n                }\n                ",
      "EPVS": 1689746235922
    }
  ],
  "SSLI": 1689738732001,
  "ESLI": 1689738762031,
  "hostname": "gros-49.nancy.grid5000.fr",
  "OAR_JOB_ID": "4240404"
}